{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6aeeb26e-24b5-4c63-a9e1-28c7d9f6cb41",
        "name": "Clear Cache",
        "item": [
          {
            "id": "07790ea6-73c5-4d48-8fa4-083e74568da1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9db02e79-632d-422c-ba6c-d424c8e4630a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "60d44b72-8742-4954-9911-a7e07c1f3357"
                }
              }
            ]
          },
          {
            "id": "69c6e804-c8a0-4db3-9340-5201dd0837b0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "88b24403-accf-4ebd-9db6-ac0a5cead1c9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c8d2fe66-a722-4e2c-adc9-31feaad3298a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "213a61d6-295c-401b-bbd0-19c2ea23bf1a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d129330c-6d6e-4e59-867f-cfec2e8a9daf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0726d847-cda9-40fd-a522-05efda5663c8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1b9b3ca-d29e-4675-b055-9a397c6229ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f3fc6d2-9c25-4399-a670-d2da7c3ee44b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b0b7a7a-1ab4-4a1c-8043-207a5699311c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1eaa9957-16c7-46cb-b6ba-f0fb4217e2c7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "29525e21-4294-4f82-b263-586531599cef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6cabb4e6-0b2a-42b2-97f3-d6baf89b4793"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9254974-5ac6-4e67-b016-c76b9f48183b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6511e154-dacc-464b-a0ba-0bd289eb39a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9eff88cb-e65c-4ab3-bca7-934d1a170911",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cfdee99f-7f72-47a8-9660-0833f6433dcf"
            }
          }
        ]
      },
      {
        "id": "847767d6-9475-4517-89fa-58d9335a8082",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "905237b1-61b4-4352-844c-c6b8b134879f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "725374d2-9346-4746-8a33-7d7cd7850228",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "72bb0195-e25c-4be1-b053-ca46e1614d5e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4304befa-e099-461b-bbd9-d76ba64bf2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27d3f7ee-5c97-417f-aa6c-6fff685e1fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b785a7f5-669c-491c-8ae1-126569b66c1a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197c2aa7-839d-45e0-b514-045ffb2b48c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca81baae-1524-42f4-a825-8f8b7ce51f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0a98c3-529d-4a39-9540-f7add8e7d3b2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae9e025-0aa4-426f-a626-8e5887609af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6fc65d4-b028-4e84-a111-3cca9449376a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8948becd-5854-4990-9b83-ab8cd84b0be8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7850466f-dd5b-44f1-a6ed-84d486ad2683",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de26716-3381-46f1-80d9-4098fbb9ef38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97ad707a-6c64-40e5-879c-e4f731355747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0149bb90-d65e-403c-b0e7-83b5fd46b32f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80985e7-b7b3-4161-bb9e-e2d95677e28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4c5356-b952-4de2-96a4-bac019e4b3dc",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9959ffd1-c3f1-4d6e-8bf3-62142cc549ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02d8d0a7-4cb4-4c43-a920-82587b990b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ecacb88-408a-4efc-80b1-9625311cffc6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a30fdebe-6f89-4b12-8eba-9dc977ee5907"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "aeccd89a-2846-409f-8026-9f9617678316",
            "name": "Positive Testing",
            "item": [
              {
                "id": "96e0034d-9c1e-4ea4-8974-d375412ecfd2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be4d9685-9628-4ab6-8529-4c73dcd86a59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1567d56b-b653-40d3-b79a-23d97e0c271e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0de10332-d6bd-47ce-aab2-cd4c0082212c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5fc7c217-7387-4e8c-b2de-b15c7d2b4070"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91c568f2-85be-41b3-b7b8-cd0b2afc39f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9db85c3-8d42-490a-85e1-735b0ded429d"
            }
          }
        ]
      },
      {
        "id": "099f8704-3033-4e18-89eb-499ce543b8e9",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "00b7ab98-60e9-4927-81d1-c62c269422cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0993f7fa-04e9-458a-b65c-6c3489c8234b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "53b64e30-6e02-406b-a17b-8518e963a712",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9693cb-a3d0-441d-9732-e99063f15d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4671f2a5-e23c-4cce-b057-ffae18493f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5881c8f-2505-44e6-80e8-1f839ad051f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "312eea3b-a22b-4a1e-a64b-9ebfff07c4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebe625f-8b18-49ff-a6dd-ed2f0be3c47d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03c4a2f-c175-4a46-9ea9-becf207f27f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3342926a-4c99-441f-b80c-aaaa4d39255d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0007a3d-11d9-42ce-bf2a-959a88cec8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8d1c213-bcff-437a-89bd-f50d7eb0f4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cca254b-581b-4698-a78b-06369cfc2780",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5129797d-50ca-4e4c-b7aa-8119a4f21fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a1c702d-4ba4-4d11-968d-e4200db8c2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f070bb26-52a9-4a33-85d2-f068d7b476bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae174ea7-ba0c-4dc8-a402-5f293db84528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac88a09b-0c58-4a77-9dc3-581a5da8d074",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c217d4-2107-4d19-8af8-fba190f05fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "829e488a-0f3c-4909-90f1-6de3350515d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281e6ae9-154b-4fcf-b108-6020f157ac42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e0c6213-2f58-4e0e-9891-fb3ce13cef89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8c7dea-812c-426f-96b1-c387c3331992",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97bb086-5332-4dbc-b07d-1f1a6d764f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c81f1d0-fd1f-4330-bb01-9e8385d9e657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be857d27-5a24-4f72-beec-a1282c909033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad3bec71-6bb7-4aca-aa1f-1ad8e40c39eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79395c8-5bc8-47c7-a8d9-496ce3870705",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aced1c08-6580-45be-91d7-67b83349f66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ed2571-9312-49ea-8b50-6fc0a602fff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ae7543-be81-45d1-9981-cb3114920f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57d73c76-6d7a-4358-8da3-24c38254f047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7504f85-728b-400b-9c1e-34f9d84e2f47",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acda2655-c5af-47b8-a846-3324d373279d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc96229a-6dd5-45bf-84f4-5f559fe99923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e57dff-eb42-4a08-b9d0-257d4aaf74d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "920a785e-a8de-4b25-bbac-a60be14114a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e08c0f-3f50-4606-843b-2b6cac30983f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bdf365-1e2f-443b-bf44-0fb49fb29a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26fd84c2-12fa-463f-9c87-43bd3c329f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f94e4d-2cd6-420b-9489-8d532c525832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "313ce3de-b505-4f05-870d-a4e90b1bb43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8702fabe-e1c1-4037-8874-2a7316e216ca",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "964c5f0a-6ac2-491b-9976-08a201be7006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61031eba-1be0-46c3-a8bd-6c60e4068d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24905905-9cd0-4c4a-b8a6-bb7d792447c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f79ef590-859f-4157-9712-9b555c8f3956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4625186d-1c75-4107-97d5-95529c88f76c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd976022-e118-49c5-afc8-ab19e4e77a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fca07b-ba65-432d-80ab-bbaa4d16c5d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5702d653-0670-4240-8442-9bb9b262e62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5cc43bbd-c6db-406f-9db7-07ccd6da15c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04af82f-668a-4da9-85de-db0b58d9e613",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb2c089-cbc8-4a4f-9edc-904c1a17ccc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6108055-6df1-4443-a590-e05ec8446050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5e1b14-23e8-499c-a396-944317252651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b2fc4d3-4237-47f4-96ee-8efd0e6ae917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d773a8b-0012-453f-9c8f-3ac77b978628",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b282fd2e-ed7f-43a1-b3cf-1ab7ae4e3f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4440eb-3520-4b7b-b3b2-86fa476f8088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de30bb5-46fc-436a-b38d-49027757df2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39b4b1a6-1930-4b27-831d-a4d8a5c60e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18590d3d-5674-4aae-b151-42b8d600c0f3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a116486-fc19-4353-b203-a70a8f5cfdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa57493b-7bc2-444d-bfb8-90d3b007c7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c579bf1-2a89-4741-9e4c-57743c81f7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5452fa6-cbdb-441e-a1a7-142e9874199e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99dceaa-6fc9-442f-a583-99e42dfa4c06",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c71fb76-5c7a-4f1b-aab2-4dd74463f5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e60bdf04-2c5d-4a23-9284-e4a43e3bd788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad51b41-f66a-439a-91dc-dfdee672bb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a50c81f-d40f-4d20-9f94-510684da549f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ffb79a-56c6-46fc-8479-6d71bc895838",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468b3eb7-59e5-4a11-94f8-15e5fee428e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b644fbbb-57cb-4c1d-a304-60fc91274a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e724e33-fbf5-44f7-85a1-0ba09c851d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "351f96e7-86f8-444c-aa13-a06630db791a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ef2598-8aa4-4515-aed7-66a26108f9b7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804bb0e5-caab-41bf-87ad-7aaafc383ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346c4347-5518-4dc0-be39-f12dd2b876af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e5fee8-a866-41da-b68a-9d60c36beedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eac3cb11-09b0-4c6a-a1e5-93d8a58ec3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e447d1f6-9426-4a86-b587-e7a688764146",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfcb120-9ebd-463d-8465-998cfb87d94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb7c7a13-24ff-4986-b450-52155097c4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c19d835-072d-401a-8e9f-73752c5cfa67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e05b0105-b46e-40c3-91a5-d48531c9b93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157f1e6a-87c3-4b6f-945d-6e24daa26a8d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab67c11-5975-44e3-a011-af72ee1f829a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0858a6ff-0a68-4827-85c5-5155ee1b3dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4092df4-f083-4532-9da9-29d94849c75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d54222dc-c33b-4259-9ea0-7a895eb03300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872f1842-313e-49ea-8f7c-60a0048332f9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ac9fc5-f69d-420a-baaa-58b087ae6b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d943bbaf-bfc3-435a-a3ab-82a517e32c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc07256-b8c0-48a6-9431-0b6c9fcc0848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cd7d1a5-54db-4173-b867-4bcf6763be02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725ce0aa-4201-48a0-9ef2-f7453b48717c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233c94ca-86c9-46dd-869c-b392e8b2bb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a76cce0-f581-42c2-a863-7f6ed81d3f62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2144d65-d16a-4ee5-94cc-59f0b5c61e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dee4502b-fe0b-4973-917b-f8b336c9677b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9edc68-e770-4cd6-8e0e-ff01f240f9d4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3835446b-80bc-4b99-a61d-cc0248c892da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298d6772-bbf0-4571-b9e2-8225ea8c596f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e807919-1d82-4e34-a6d8-f1dbabb22b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "248a9fd9-818f-4864-a080-fb413ab0b04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a2f635-23a7-482f-8d9e-bbd87aa4a8e6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844753e8-df23-49e1-a432-809c1bbe8b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5146cb86-b035-4663-bae9-7cbe08d38792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f525869-3ba8-4d9b-8281-1c0d38b769d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8da942ec-ec17-44d1-818b-865faef630bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6085a4e-e982-478e-b4b1-9c2f93443377",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da523ecf-b9e3-4fd5-8dfe-9adf999eb26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9c0882-d15e-404d-aa77-0c2e6dc3596e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ac5a25-7495-4442-82bd-e9268dfc42d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24ec2f8b-ef64-4ef8-bbe4-4a6d0334094f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd53106f-52dc-4682-b141-77635e3a2ca8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab2b382-3d7b-4c2f-b36a-2378cba0c87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5b121a-f0d9-4cd9-b9c0-3ddc3f403d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be95b2f0-b598-456e-92c6-fc2b04493a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a86845d1-48b4-4a81-a006-2972f83d6537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f598cda-218e-46ac-83f8-191dbd4fc4f8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229fb726-5f32-4ff9-a575-fa5922e91a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af92ece8-b125-4a35-8a5d-618479440a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e7035f-b7d2-448a-bc34-49dee908eb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "218ed479-2796-4330-8e6c-58311cf23731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0ab365-bfa3-43d7-ae9d-419564329050",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bccb3ebf-6489-44b9-9299-5ab00fb32f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821003e2-9e09-42b0-be16-82956aa09867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6c642b-0c79-400b-800f-58deb3747012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5756b8-e1e4-4454-b2fc-0aa62ab86eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b327842-fbf2-4c82-8a2c-d5340497acfa",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae3bf92-8cd5-4327-8dbc-b2d6d9e84176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca3cf98-0208-4250-bccb-ee280afbcf2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98d0b5f-02c4-420b-97e4-b8b19115ff84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83b9f773-dc5e-4fc5-b5f5-94833059e3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d47e6f-8d5d-4c21-9b35-9fab478bcceb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3d8bf7-987e-40f0-bce8-2a87662ac9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0445ae75-571c-4994-9e1c-288565cc8417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea12e48f-0ad2-45a3-bf2c-dd20f88dcf5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc96d85-6339-47da-85d7-43ad926ee3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1e1a70-92d5-45d6-8762-53695269efaa",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce3e869-03e7-4d16-b0d0-13c952ab3ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd41558f-a633-42af-b7f2-6fb3ae796594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3022bb-f004-4775-a5f7-72938742209a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9479e95-3c88-49b7-85ea-0f18eb422cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965053ec-b77e-4c72-9ba4-6f6d09687449",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4e2a94-cf36-4ba3-8a3a-698bc2d28211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca86a4c-ed00-4d09-a4f5-cb5dc2c29ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094143ab-0697-46fe-9625-86fab59ad126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8ab39b-4001-4a43-ab66-394deb505e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18469d20-96b8-4e09-894c-514a118dbec5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78221864-804f-4f4f-900c-795457678acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9597f917-dde7-47f6-84d0-d8078333986b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e242fa1d-ac24-437f-aced-e5011684b50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe434f28-4b33-4657-b3e9-91ef77a038e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412d8b2b-6152-405d-9a7d-e744d6218b69",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "093d0e49-0031-440b-8bae-2d448ddc2671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be1b21f-1b9e-4573-9396-4f43c0dd9762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74316209-356d-409d-bf62-d3d6c1d7e734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "db39606a-6f7d-4b94-89cf-41b794a8ae16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1de731a-76f2-452c-82a2-70faff564a67",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678596ca-1558-4ab1-bdb6-145e9920d4a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe381a4-1987-44df-a4cc-aed38e8f6803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb776f24-e254-4be7-844c-7078e9e6d8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce987432-dca9-4251-bd15-dd3290dc325b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9739fff-8b35-441b-8e7a-a1465f4aead8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81502f0d-6f3c-47a3-b0bb-a0d158953d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1854cbcf-900a-4bb2-add8-6acdc475ce34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b5f11a-edb1-4b6d-8631-8030e732150b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2a21df-05c3-4cc6-a1e9-8d9d350c6771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b269cc8b-28f6-4f5f-8d94-be920e336dab",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f04357-a532-4313-aa87-4c8b0addc317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5cd595-df74-4d70-96a4-30ee9842bf20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4c452c-6f56-411b-884c-f7fdc9d2fac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d45abd-db11-4968-935d-1f220dcd3f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22e7c50-524f-4ac5-83e3-145dfac14573",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ec5ef4-e067-4290-a3a2-e419349a7391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d77011e-b4c7-44c1-85c4-07f04559f3c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c721384-2f9e-4750-abfb-06850bf196e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19854429-92ab-45e8-9d28-6d121d2084f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9230c166-6a63-4561-a2e9-7195f0919090",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e2bb1d-b288-4943-92fa-db1523d945dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19797c08-8673-4dc4-8811-4fc4bd92d43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9e453f-248e-49cf-9870-6684c7241753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e8a794-8a9b-4224-a242-9f0f78ae7d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1298c6-c736-48b7-b7e7-9782a7e953c7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac5f6d1-5903-4efc-ad59-a3dd960f3cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07d06f30-0386-4a39-bd44-bc0386441ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312e8426-0115-4ba7-a245-06b8327c128d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9114d56b-2d78-4ee4-855d-46213561e2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8398788e-6d2f-4a47-9e0c-09c6b7dadf98",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0c2315-012c-41e7-aa96-4d00daf1fd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d97ab1a6-1820-4ac2-b345-bf38556ef232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aec670f-03a7-43f6-a92d-ebaa42bae2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d66b800-f0ae-472b-9fe9-975c4f620133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91789d4d-b237-4a0f-aa7b-3de3243c3a46",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a17a845-e77e-49bc-9fb5-3f76cc426a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3f3c15-0d90-4c57-99ee-fd5e29b26228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49706896-de64-4185-b689-d436942e6f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5fe708e-dcbb-448c-8bcb-7e05b182b2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6638d21-4488-4bd1-98b7-5d48dff2767f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e9134b-2836-4b4e-b162-805765abde03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e076b176-b7b6-4d30-b088-c7ceb92e4c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f388add-2ce0-42e2-8971-c75b98bf27cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d72a20b-3ea1-4f7b-840c-09b0f9ace953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b2c6bc-2a17-4c4c-a299-d8c82f01d4bd",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878e8d12-666b-4ea5-8078-2ee0355bc68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d6ca9cc-1498-455a-99ef-e8a37bc475f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1291f91-7203-417b-8f27-b29053396a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6759cd8b-c5a2-45ce-a353-d063857dd6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d640a66-d134-4f41-8da8-ed64fde85273",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9297387-5416-4f88-a6fd-6dbdb2814861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d07bb5-cf30-4d8a-acc7-c59844a362f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc09228-1579-4d08-a23f-dbeee03f7042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f0626b-8167-4d12-b16e-aa01ff8eac5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab20b034-ee7a-443d-8a6c-2e92607ebdf6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26ef9a4-0283-404f-9fb3-65ecb3fc94af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a08ba99-8b89-460f-a014-b406f317cdc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63e8991-8fac-4f8b-b8df-ac5c78255567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "42cdcf05-01c7-4cbb-81d9-4fc7a4dfa576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b69264-069d-4b25-8718-a17910ad1c24",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1f176b-fe98-4506-a85a-a0fab39b6e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3318959-d2cd-472b-9f4b-6a262e8b06e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2301a3c-cc75-4ed5-a0d6-a0752565f5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a036386b-e2ee-4a73-906e-3b3c03c0d83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ed9ddc-c6c3-4706-afd7-18a26f66da44",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2485d627-00f2-4f14-be92-c75fa145c773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1556ac7d-c0c2-4e21-93b8-e4e3286812d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1f530b-ee65-4314-9306-a7a31ca45766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6df41ab0-f498-4b7f-a0f1-97e8e2bddd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443df5f3-697b-43e7-af1e-056036519194",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "873a608d-47ac-4574-ad3a-d4c291134a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956509bc-5497-4e92-8caa-4bf0b677242f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ff61f7-325c-45cc-9f9f-a11957bfad4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c94905c-6c03-4498-8080-3127e982b623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a569dc5-b6aa-4396-bff4-a5a0e931c9df",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35a596a-7151-43f7-9d47-3619713bd1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af2e8d33-9467-4bcb-9dd1-cf637f726865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc1c19c-5b82-45e6-8807-908a137c0fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91aaafb3-1497-4470-a276-a0a7ab9784a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538af8d1-45df-4555-84d3-73b090bd8961",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3493362-751f-4f3d-b198-c097ab0ca9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58433bbb-c725-4669-96a4-1b2ae3dfbb4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f78cc7-342d-4efd-8669-36063f20868d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd38cc9e-3ed4-470f-9e8e-e944f55d0037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c6a458-41ec-420b-94a8-fe0335442749",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d45ba6-7a93-4106-8493-cad1d417628e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fecc290-7dd6-47ca-8464-9d05ff886bc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90917819-d16b-46f5-bada-dd4f2169061b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "075e1863-698b-45ef-84b4-327f746b2ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fde966a-d1fd-4867-b7f4-29b65c35f831",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea3443c-f9fe-44a8-9fe8-be29aa084380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b469e4-cff0-4bce-8953-d01006d112c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405f5497-3230-4df8-a7be-01b2c474aea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f55ecf00-f0ba-437a-91ae-3856101e6e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a8448a-eebb-4165-95b5-0deb2657fe67",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ffa46a-805b-42a6-a22f-b3cc12030399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da42e967-9272-4d69-baa7-873d5f325d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a55b6f6-6cd1-4b0b-a9bc-26355f78f4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65769d85-86f4-41fd-88cd-a5cd6d50fb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4351933c-a6ce-4478-acd3-0e17718e7a30",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f6a3f3-f704-491b-882e-1b61ae6541ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2903c71b-d529-42c2-8e33-e6f2587f0bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396a138d-8be8-40fd-bcbb-55c9c730250b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f8c6474-cbf5-437c-907f-f8f18bd7639a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81992570-7d07-4193-985d-2801963707d7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd132dc9-e67d-408f-85d5-1b366e60c752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21468ea0-d28f-4e4e-aa41-6968c294f549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9d6fac-6863-4fb2-81dd-7ef1946a32fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2cc082-1403-4b45-8167-828ef0226baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d400e06e-6b13-446d-89e8-0172e7b90d4e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2834c53b-f7bc-4f2f-8e84-6f85b1df2c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba6ec59-773b-43f1-8d2c-0040e2761de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcac549-55d6-49ec-83f7-ea25e1609b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce17938-3b7e-4933-a3b2-a6326f9bb440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec364f1-ec2c-4f78-b237-74d5af4d5cbd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32d54cf-7684-4762-a768-8c23c506f8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae71ab78-14eb-4ff0-8460-5366d480b86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0609494d-b87d-472f-a093-adb21bf799a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51a98dce-45ad-44ad-82fc-7bad83cfa1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579d945f-1bd2-4118-9620-aad4a2600707",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0493426-e34d-4174-902f-ad13e1d1c1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d405e4b3-e546-48dc-a968-d508af588fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46c891c-629b-4312-906e-d60f94a754db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eed232a4-7406-47ae-a9d3-110b56bd7633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907d5625-9a79-4347-a56c-5e41ba1e4b63",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14af7e76-9066-448b-afcf-0aef8d905405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f506cec2-cffd-4bb4-bdbe-b3e8ddbb8d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e982ba6-f144-4384-b21b-08038d36cdea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d7b004bc-8de3-4262-a6a7-71a4e726d6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da10c820-f4b7-4a9f-96ae-0ccc80eb1a64",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b685374f-62fc-4986-a33f-542c8a339576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc8f561-9087-40f4-a056-d5a98ef7379f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb2e711-de09-47d4-884b-23f9839db01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9313f899-ab0d-4123-bd4d-cde16c857e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93808b3-6618-4abe-90ff-4d2e4068fa37",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06813cb3-44e6-44e5-aedb-81d38b9f541d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f505ff2-8004-44ab-89f4-dbeeb33f3de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bce523e-2e9a-4c85-8a67-afc2dd0db08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce847634-af02-4bf8-9d17-ce9028d5d16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b25588e-a436-47ad-897d-3f3daf27d217",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cdfecc6-7654-4d54-ba33-e58c51d33a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c123c7ab-6cac-4724-b9dc-063100c5d438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46b7e4a-f5bf-4917-9115-713408de4c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "03ea10b6-3415-464d-8c01-e9999a4d0e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1115c686-8892-47f4-ab97-1a360394ed9e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a212860-8691-41b8-9fa5-403e304c5a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dedc78b2-37e4-4252-87ee-ea0f75797df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aaf8a47-0813-47af-a86e-f9550d468b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdba67c1-116b-4802-acc1-1aa2f9ce099b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e5ca4c-f3d9-4ec1-81ad-5f8d14e804d6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14aa52cb-4d7c-4811-b25f-84ef61a851d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252e0f5d-b8a8-4b10-b140-864269b19e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d89d11-9fc5-4e91-9cd3-5aa28e0deaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "64601c5c-f850-4a6a-a62e-434b6937c826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58be7b8d-73bd-4472-b590-5306e1124073",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f22848-46ed-489e-abb5-3a6507229f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bfaf2dd-4a16-4595-8a04-1631a1eb459b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66953db8-5e4a-4419-84e8-8461969b7e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f8a60f9-ea4f-49ef-b9a9-e7c873a1a3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53b6a1f-2e86-470d-8420-ec3274be4778",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a763cf3f-0943-4d99-b841-2cbcdb317556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e06f6471-539c-47a2-805e-1e2d26fb3654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d8ea4c-19c7-4b9b-b2ac-be0efe40888a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "48810f56-783f-4c11-b24b-07b473d81ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc6e6b7-1384-4a7a-b6df-501a860dff4d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3233909c-a0ec-48c0-ba17-37aad433f403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bea3f77-f5d6-4162-8417-a90bb41789c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd67b0b-ad98-4a9d-991e-801a17d18990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6aedbe5-d891-4557-b860-4efa4eecfa38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedf96f6-f523-47de-8488-462751784840",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829fc4a3-65bd-49be-9cc4-a8a687b6d553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66d1138-b664-4c38-aa37-2984fb5e8e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584c7c65-f813-42be-ada8-9dc74b818d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08997a1e-a21e-4729-ad77-b44baaa63bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45dd130e-24c8-4189-89e0-4bcb71d8bc52",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b90386-8c2b-44cf-b3e5-b42f94cb18bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040aae1f-84c4-4f42-a53c-17832e35f8f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da25ac0f-5b9f-498e-be13-2a507973f61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c9b034d-e09d-491d-9b1f-958f9626916b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0426b3c5-5c07-4698-b5f1-d5fd37b25fac",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167d0aff-5c6c-4002-95b2-e06ec84f6175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af125e78-481e-4dee-82c0-7c88c7bd5ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f718b1-843e-4fe4-9622-99a6882e5774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17bc5a3f-9137-404d-89ac-cdc077c75b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98b2ac4-a5a9-4d76-9fd5-3708a7eb2d7a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2162bd6e-2f02-4f89-9654-5d7d3e84bd0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c14f7ea5-a20d-4c0e-a517-bee944c4024d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e5618b-0470-470f-9504-40cf021b26b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0b60a9-22c1-423a-a725-a80d82b4576a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03031492-8060-4ca4-a036-dd3f2a8ab333",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc006225-a357-43aa-aacd-ac7602aef607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33af7216-a9d9-4f19-a498-0d03f614ab16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10711720-cc0f-466f-9d2e-3404e0f3f1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a75ca92-8edd-4555-8d4d-c5ce5f2a3308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04eb27f3-d14b-4107-9709-28d1caa485e6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86610cd5-0708-4b4b-9db6-d03eaa9b9c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c746e630-53d0-44fd-a643-870b06c40fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b2d393-02fc-4baf-a8e3-2b7935973927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19ab4cf4-044d-45e2-9ff4-4188b0b83ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126b8206-a91e-4e76-b6c1-4482654603d8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42dda05e-03db-406e-9088-f84925f2cf24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e27791-0d67-4604-ae90-00d586a09281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dde3918-f6b2-4677-81dc-0a608af53e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3ac78a-66e0-4488-90ab-9e722fe08cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fadb5fe-eefa-4953-acb8-17d44bc569d6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd6f0f4-d230-46f8-9fdf-aca78bdc1fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c411fe-4619-4603-af59-27740faa42f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8d6a0f-abc8-4b85-aac1-bf26c66f0a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93fa9670-aa66-432b-a92e-44189eef1000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c1fb47-3073-437d-b2b8-108c9cb83872",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf750bb-151b-4104-8922-b11a0f947988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1f00ac-7c79-4ac0-984c-8fbe698010d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d188e4a4-e95e-41aa-8601-d9c1db0ac2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd35140d-29cf-4b8c-a2cb-12b273fd8f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f49f8a5-3c0c-44cc-989a-09b7726951f0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f012ae1-b9b1-49c2-81ce-db1e0046f312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45157e27-2922-41a6-98dc-3d9637ac0546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2e3de8-8443-4979-a9ff-36372f10f901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "52807905-fe00-4613-82b3-b9c80e751022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ff2639-79dd-4561-ab28-e296046423c1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56667fd8-4337-410f-a36c-5e6641ed7971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfdd827d-1817-40a0-b597-c67caa3eb417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4d6c50-4d50-47d0-a0f3-c8a53a7c370e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "76fb60e8-71df-44c4-a433-db6482fc2f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3090be-3dc8-4226-b684-c45d2babe2d9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de02040e-90de-436a-9b77-561ce991eb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b820ee2-cb35-4255-a9b6-ddf672686409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81879e8d-1df9-4faf-ae4b-869ac744a514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea26a41-3e63-41e8-8169-bd9356fe10ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703adedf-0187-4f6e-bdf1-feee6d61546e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ce4fa8-15f3-4505-940b-a2f42d5bca82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f3f4a8-728b-4f5e-9ca4-11f708a66e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224b9e96-4678-47d2-8b38-fa5210a48c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5be916dd-7a1e-46d3-b25f-0f0b138c0428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85f1c06-b2d0-4645-b7f4-2c129769e793",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af0916a-8379-4a48-9c66-d3db1fdc4e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7983acea-e138-40dc-9b2d-44069adaa220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e823f02d-840f-4ccd-87ce-19415567d7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f21c84-a587-4b07-ab15-720e4af49b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8172eb4-de64-4d6d-823f-b97c49c14d77",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5afee541-a2f4-4bf7-a653-010a33d2100d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a33cad-501e-4ad0-81c7-fc50bec1b20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cd7a9e-a53e-42c9-aaa4-15bfa1e48766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "47f45826-f00e-4bd3-9b85-d49b22ae9f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561ce923-6606-49e9-99f8-e73b09493116",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cf183c-82a9-499f-af58-7ae2c35e9b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb71d37-e12f-482e-a989-11e6aea4ee91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30013fa9-5281-4970-8e88-7415df852c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba8498d9-5843-42db-91b3-d4183b58cbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55dc925d-2430-48f3-855f-53ef829722ea",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5683e5b-d6e0-4cdc-ba05-ddae7930a3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5d5220-34ff-4d76-a42c-fd8bde0a504f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71536fa-59a8-41d1-a516-90f621527849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "de2436fc-4c55-49f2-ba0a-df8526a985b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64db2288-9e5c-482a-a3b8-c23121dab0f0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c69c4a1-41b1-4ddb-8cee-b544d3d3f310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000ffd6f-0008-4e34-8a59-9136fe6acd98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd40c69b-ac95-4418-adfb-641472c5ff25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2211325a-9260-4327-b439-e2dbc9590e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70dd0f6-5e93-4ea8-b3dd-54f836f5937c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c145c4-4d08-429a-84c3-56280ba5c3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74792887-34fc-4ec4-a04b-64e734abcd94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a33a58f-b753-4c3c-b7f3-ecd8fe7ade23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2634543-03d9-4ed9-87d4-5ebf9182dcb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f66289-2290-461f-a854-5fd9802f9a44",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52b7900-3fd9-4735-b4e1-7c929305a771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5faade71-7596-4a24-98f5-4bf99268745c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8755a0-8b79-4d0f-b312-25c3064bd486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeab7b0c-0c37-45d8-9581-58b7630c8c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8ca2b6-442c-461f-a5a5-fdf389dcafd1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef6d142-5ae9-4e0b-8c02-1390dc6ee868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "635ca203-1188-438a-9500-8014b92fa39f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a26ba01-8e04-4d99-81fd-1adc528fefeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2061b3b-39b3-4660-9c88-bf7936c8b95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914dc3eb-7413-4ede-acbe-55fd2680aca9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898ad620-77ee-47ed-b4a4-137ec2ceaf32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3d5c24-c9dc-46e7-9dfb-12915ab42b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e57c7d-670b-4a46-95c4-8a93b929ca82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28f1a142-a14c-4112-85d1-d6643b3b858f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea797cb-7e31-4fa5-b925-fc3c80ba9aae",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98998e42-82bc-42dd-a70d-07c9b8de5425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "710e0fc6-99d3-4c08-bb8e-549b5f557cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8556d1-f8b7-43b3-ba5b-efad9b2fca70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "550f38cb-7ffa-46d7-9263-6655dd6936c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4155ed5-13a0-4230-9b6b-579224b576e4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c4b8e0-a7b4-4451-8d02-6b6fa25ee705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce81ae7-29e2-460b-977f-019d2e5fd0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa94faa9-9a44-48f9-8f9a-43281f26a21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "07a7f28f-3c95-407c-952f-8b7f27ca764b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa906230-9744-4968-8014-c4c5f438001c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8159a930-ce88-4ad0-8f95-3bfb40ef3c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4a6447-452f-4944-a864-96b72329136f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931889dd-dd54-4495-8741-60710fdc82e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d28e0843-67e2-48a9-a62c-e8bb278a0d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f96ab83-16ea-4b6e-85c2-60df56d606df",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c55073-a406-439c-b147-37555f73364e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e0ff60-3f5b-40c4-9fef-e146fd0a0fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46233b7e-3503-4d86-a115-5b21c8ea556f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a79003e-caa9-4bf0-b5f8-6317a289ecf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3236189-6cdb-440d-b2fb-0ea90ce50946",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e44021-9bc8-4379-b253-5939d8f9953a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecaac613-c14a-483b-9e84-2465e6703bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a276c501-906e-4670-b1fe-8d6c94f19594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e2633c-73dd-46fc-ae77-660e12ec076a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23564ea-90fb-4546-b305-a5f0b6e07291",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b5d52c-c276-41d6-be89-e91a8a4231cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "37f9dbae-678b-4f53-b50d-7f94144640c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234e5a83-6db1-4916-830c-00a722939222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c8a2a7-e5ed-448d-8445-95fcc1e152fa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5aa232f7-5186-49c1-ad95-7f3b8b301414",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "918e231c-9e06-4b88-8ebb-e39cfd92781c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e96889-36be-4a64-8176-4b497b22f855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d3ad03c-657b-4e21-b0a1-a930eb01a75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a79eacc-0513-4cba-98e7-5d913026b882",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6ef0fc8e-f13f-41bd-a074-d18b0e4edb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691e7561-52d2-4821-8767-4f802fd36bd8",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8b7bf9-beeb-433d-9dd5-e1c01f322316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f59a805a-2e28-4aeb-a5d5-37d74046471b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ee8577-3bf0-42e8-bb88-ca82d4242123",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "03196d55-6f46-4a24-8c5d-3ada6a43c6d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86d7ecea-c8de-4b67-8ab2-e92cce72d363",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c58403f6-0c0c-43eb-8f51-a50f4307edd0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d93eae2e-f02c-4e2e-9b9d-c4a87895e077",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5263bea-3b62-4ac1-9c4d-43873c538816"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d0d1d0b5-2115-4950-8c12-c377c7b807c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7bcba820-1cf9-4d81-b272-1342a280ead3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "77e498f9-5799-4709-b526-150dd0a560ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a525ebf-0f57-49e7-8bf4-e7efcdcef59b"
                }
              }
            ]
          },
          {
            "id": "5d0c7057-7dc0-4d1a-8067-6143337b4729",
            "name": "Positive Testing",
            "item": [
              {
                "id": "341c02cb-9eb3-4fa7-9d7c-eaa49ebd67b3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb51a229-7f10-4384-a28a-510ff9e34729",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e13996a-f8d1-4f11-be1d-de4534eea055"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b894075-b11f-46a8-9fd0-0f3f9e9ffbfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c10b412b-0525-4351-82df-d7ba5abae472"
                    }
                  }
                ]
              },
              {
                "id": "f0ac9aa2-012f-4f32-a3a3-ed519ab7280d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c45cd2c-94f9-4846-a362-2b8f318d778d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6d5e7f04-1683-4235-8846-24ea8cac0fbd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8df6c82-e1b6-45c4-a81c-d770dd8f956a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "82b45e29-1610-4846-b2f2-4fd2f542e890"
                    }
                  }
                ]
              },
              {
                "id": "8e041c01-b4e0-419a-a978-f3ac5c048c3f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bbc56c9-fe7a-4ef1-a1a3-123ef3045be9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70eb7c8f-4e52-4957-8601-f1f258fc1ec2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c90efe7-af03-45e6-9a95-f5da69f094ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "639b9778-c2c8-4818-8e19-e7d7ca65723c"
                    }
                  }
                ]
              },
              {
                "id": "45fbc28c-4195-49ca-852e-adec7028819d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bd8bc16-5599-4f16-a6e5-d52d6106d2de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8645404-c068-45dd-8051-a6f7e96894d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6de887cd-4b39-48f3-95ca-331515bff87a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "014542c8-f7a1-41af-a19b-2527a51bc6e5"
                    }
                  }
                ]
              },
              {
                "id": "6db4b43c-7f14-42db-88db-2f15478aec5d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "071f1ab4-2382-4a48-9368-4b3e11dc1c10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c56324d-467b-4118-a898-575de0d7bd57"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "806b0b31-e606-4484-8f50-1b1cc2f31047",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d0ff4bdc-0300-400b-9cdb-cb97c6892eb5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23cc3581-efdc-407f-8dba-191ca61f89ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "936c83e1-7c88-4502-8aee-9a2aa73c9f27"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6adf5daf-5cb4-4d60-aa3c-cb2c62a93ead",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e30d0b21-625d-4d70-8fcc-ab94d1f83e2a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1f5b296-d3f9-4927-8f12-386b25ed2704",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a8363d5a-4519-47d3-814b-dd6ea681b0e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9315e4a-9ee0-49b2-b962-005a99c4343b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5aed3a2f-3371-4a31-8b73-f2fb0e5d6340"
            }
          }
        ]
      },
      {
        "id": "afa0d636-ee25-4865-bfd7-abbd69009dce",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f1c28b8e-1d10-40c7-9b08-7a89b27e09b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c07aa403-fbb7-4e3f-9c8a-d05dcca68d8b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "342f99a6-b313-4aef-9225-82cbb8ed6ac0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dea1269-f260-4b40-accd-952f5d9e7326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b7dba8-e4bb-4ade-87a2-3dc85b6c78a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e992792-83f1-40d9-92ed-7cf67588ab0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d06ebaf3-98c8-4777-8978-99d3387de288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415ad1b3-a7d1-4a18-93f2-f8a4caa49f36",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc840df6-e73d-44a0-83ca-f0d06423c970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb7e54d-e441-46d8-8e21-1afab0cf728c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f96db9-e567-4df4-9c02-47e84a252d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2831481-4111-496e-803c-7f19de39f435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f122366-75a4-4bed-84c7-1fe0ae4cee52",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0416fb-e48e-4542-8075-860a99a83db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af2904e-2217-4b11-88b8-566e876cb8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2558d32-55b8-4276-adb6-e5469677a6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9ced61b-712d-4249-a60f-e3fe4bb33e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b8a33a-0658-41fa-b2a5-ae0a35c9a806",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce23d377-b2a7-423d-a31e-bcd658784644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "807a3bb9-d98d-4a14-8bba-c97ead92dc2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b15ca5-20c1-4c5e-9b0e-472af49222ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c95ae4c6-3ac6-41a0-bcbc-c4b5202fa048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ead655-71f7-4753-85a3-cb8c99364830",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde1ec74-71e4-4f1d-b312-3e4e9fab1509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7507c290-5963-4230-906e-f730ae674f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efba8eb-b883-4c98-b85b-7e8566fbcfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb87cc31-da42-49f6-bb3e-8a115a98945f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5324e55f-32a6-4ce5-9ce4-36ab2718f7ef",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87261456-5b97-4fc5-94f6-d8b544e84b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23004aa7-cd96-42f9-938e-d82ea92f868c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39175d73-b4a6-45db-980e-d4157c8f39af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9787d9-c652-44a6-af66-391e4f144fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8f5c92-f6c0-456e-86cd-60a6f4eed0d8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9150fe74-43b0-40cf-92c1-9f9406c20e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283df8a1-cfe5-4fc8-a26a-a28c3abec27e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdb3b3c-15ba-44e0-bffe-b6e4312daa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8af1605-fcb3-46f7-a9f3-59d2c66e23bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae769c2d-67d4-4f68-8e24-cb3772d22d78",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e0a321-8ad5-4da8-a915-2982cac8e015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83101b68-c02d-4094-937b-c68a755ec5f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f3e242-f72c-4991-bfe2-ce7bfed0507d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41f4b356-3cf2-46df-aa3c-3e219a25115e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f56586-267b-4e8f-86c0-6708fc65ed6e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4fb72f-8a73-4879-9a8f-7cfb72370af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548f88c1-f497-426e-9301-10b7167d77dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5542796b-7f34-4a2d-9bf3-f7c90a316858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e34fd99-f201-4049-8fbb-ece9dcf02ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1124c870-73d6-4ffd-8f65-996f883553f4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a47a83c-5190-4fed-8699-a18aae73738e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05dc891c-272c-46f2-a7b2-c64d43a739b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cfaa0c6-75b9-4e4a-9602-404313917f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b00286-19a9-4d4f-8b79-b374a69325a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259cf048-e8f3-454e-864c-8811f237da02",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d14073-a08e-4b96-b9c9-8bb42782467d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596c5665-73de-4ee6-869c-8b0987afbabf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aa81cf-670e-4dc8-8f20-7e4e1d50b9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0b2332-d479-4255-8860-bb943eb1af15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f43f63-6571-4a12-9ea4-d8d8133e2b60",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1de085-3de5-43b7-be98-a143e84c0609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01cd4559-3277-4b58-bcd3-c8966cf2c929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324b569e-bc5b-4efc-9677-d6bd4ac0d45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f7e76d-72e3-466a-a394-2ea1f0eafef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a044514-f808-4bc2-ba93-3f5b7551082f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08caf2a-00cd-4aef-86d4-91b913c1b4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4daf9bb-300b-4b97-8116-377a7bd81852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7bebe4-dc61-42d2-a7fc-4d60afc9b581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67e24808-e9a8-4031-ad47-3396981879e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2207f0b9-d6d0-4177-ae02-8bcaff66d7e2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2c6fbd-1eff-4de4-b357-ad9b3f3214c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53fb56b4-5e16-43f9-bee5-171becbdd049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a8bbdf-eeae-4464-8614-53fc96660a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "989b97af-9af8-4430-8c8a-80c3d75b8ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc9bd61-d656-4158-acc8-89ae1a32526e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce6aee1-4ced-4d2c-a8af-4307e0676071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38bdad83-8474-4362-96b9-c27120b03ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366d004c-9f86-44bf-8ac0-e7f916eb8086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "05cc99c3-bdcc-4adb-bd4d-c659124f4517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6774850b-ff69-455b-992c-f309d0cbb1e4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5750a015-263e-4d53-89e2-c30a4cc580ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3bf5743-9af5-4c5b-a591-0a6eebfd8042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5253a1c2-678d-4c22-8bb5-87524da2f0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0bddad-c17d-4eae-af92-d294a713d3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e41781-d21b-4511-a21d-04d3ffa174a2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "217eda06-4631-4086-bd83-00ce67f057bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f19f2f6-2c7b-4126-b7f5-19acccb5b531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc158215-6c0f-4752-b093-c9ff8cb0f6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "51cddd3e-6e52-471e-8236-3d417cfa7e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75fedfe-7e16-4b07-ad2c-e7ff6077254a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3aca20-32a6-4553-8d2c-4a64da1d233e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c74f21-6431-48b7-942b-73240d844496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39406b8-1dc2-4820-b112-ad6f2ad04b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "17495cb1-d83a-4c5d-b61c-4369a30683d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41969088-b38e-4f51-8804-fbf442c79a83",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8329ac-badd-4afa-9274-290b7f6e7b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20efe8b-e010-41eb-8785-2ca281586e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e35539-c20e-41ac-8795-9879658290fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b430c09-6bd6-4191-a468-dd50c9046044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ea3ec0-5879-445c-9acc-6e67cae0a354",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16712895-6b14-46b2-8fcc-f857accc04e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8af4016-e74e-408b-b2a1-7d60d9b13db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92d1e31-5a33-4bbb-b9d5-7bd37744c935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b177f6c7-73d8-491f-805b-2a2b8f74e64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7a9f11-e7fd-4b70-98ed-5eab328c20ed",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2509d480-06de-454f-b7c6-44cbf4112845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69298a3c-56fe-4eb2-954a-d702a679f7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc8b9f7-5699-43fc-a4f9-4ef30f755aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c70f7a14-4ae3-4205-b8d5-22f0328a1902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e84f75-b66a-4e39-921c-e5e8a111916c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe6150d-9967-43e6-b132-567e189b76fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d70b3dc-aa76-472c-9029-c1c48f89f5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86df87f-f49b-415e-b3c4-182abec199e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94384d34-2adc-4254-b942-8586e73cb3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7e996d-ba5b-47f2-9aa5-60d9c2ac5e51",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bce6066-4a95-4ac7-975b-86550f9911b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9a2ee0-2b6c-43b4-bd27-97b03d1b359b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d18e4b-cee3-45b2-b67f-8a5effc9584b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68ea18b1-26bd-421c-b4ff-f507df2185d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4733ac-7ecb-487d-9878-f5be146cd13d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a26211-82b1-4198-b6bd-6cbfdddac141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677e8da2-acbd-41e8-ac40-8e64ab7fa6ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f41c51-e885-4a87-b1e7-e9f755439c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94861a64-2ea6-4866-9e74-a55ee7e9f4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c69dfe8-3d8a-41ed-8758-84aefccd7351",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4edbc34-576b-4f64-97c6-a2099a8a7afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34bb8b1-f5f5-4a48-80c6-4074e00a81d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc1a725-586d-4823-bbe9-8c2540947aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf923c58-2dd6-4c89-bc3d-511dac2ff0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f82f81-ccd4-4e87-8e4a-d7b78b870d45",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6902dd98-802e-4972-896e-15fdb98867de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41cb0667-b519-47f8-9424-46099c788620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237aad81-0f4d-4053-b668-5f721f978615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc2cff65-4693-41a1-a7f3-f3581ad4baed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0813d0b-c1b0-41f4-91ea-1fa0e02bfc39",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca5c275-8362-49dc-980d-0571a31abd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf654efa-46ae-419f-a292-d6f82e0d4cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc921249-e575-425d-b595-5f09989aacce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "866484ac-699e-4f71-b2ec-430c47085e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6f1a00-d4fb-4374-9a18-be86fe88417d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2208f3db-6536-4d9c-b9ee-03e805b65fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae31d9d7-6945-45fd-b939-451902626bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61358576-8a8e-48aa-a964-aa3a8652c4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f71cec0c-6578-4873-add6-008b99958058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f68c8ff-005f-4b95-9fac-2232cc479409",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f47fef8-cf96-4ae7-8208-1e45c0833459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f806f6cf-6121-45da-bbd6-f304871321d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a11d60-ae23-407e-a3ca-43d9294dacf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "379c47b9-913c-4d09-8f29-e676e377c2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35dab062-8fb9-4ae9-b4ea-ea7f7fd98786",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf79cca-7d12-4459-b7b6-e29cf7060c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109e0b82-56f2-4baa-81b0-af827e7f9b66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df105d8f-d916-48ab-99e8-0e2a419b1a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8544dfd-ad01-432c-8999-4402b8357e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d4d150-c861-4642-806c-3754178a6bbd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90481a3b-3c6f-4857-8f31-faddb056c1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ba8872-deba-49a9-bd85-9dd5c758cc05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0c1295-8ac0-4d49-9788-29e8dd975293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a887635-4d61-46cd-bf68-6047e6282f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b5c8bb-fc06-49cd-8afd-c8b71c3dfd55",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2465010c-ddca-4b5c-8dd0-9047ecb116c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df163cd0-50fb-4482-868a-19ca3df7fd2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35acaef-5fd3-47b7-b9f7-a62bfebf939f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dec8249-fdfe-4f38-b497-e7ab513df60c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8e0dad6e-f072-4fbf-a677-04b32d73a077",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b18e9920-9ffa-46a2-b58f-aa136544eaf6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b91980-9cc7-4569-9f62-711de525c77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914417c0-bf04-4384-9a07-135a4b7dc59f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f18937d-8fde-4a34-af5f-63d6c8015a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c36cbe92-9818-4039-b596-26ba91573ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05980116-0663-4a5f-916f-037f2663eabd",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea25e80-cb34-44f8-9193-397def69e242",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "63394f9f-6d68-4a4f-ba50-e5d1b4816d60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d142d94-7827-4a25-892a-6da508cf7a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bee6bbae-ebab-4ae3-9b54-1bdf7b0770de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f08f687-8a29-4f46-8055-70a51652bf7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8544c43-13a7-453a-a87a-baa025c70bf1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08122ecf-c5dd-4bd4-8d9f-7dadeb774ad2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8af3ff5c-4e5e-4efc-a3ec-b67d0506708a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a06f535-0483-4df0-a7cc-d5761cb23d38",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bcc56b8c-14f8-4412-8ad6-366c19108e85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f99cdfa-32d0-4d8d-82a8-3736518bf02d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48b9bee4-fe41-4e20-ac89-b4e30ca42c75"
            }
          }
        ]
      },
      {
        "id": "687e2496-c152-4d0d-a159-83a7229061e1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fcc92c6f-17a0-4644-bee8-43f39e657193",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d643d953-4094-425d-aea0-15329e521413",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b279476b-44e9-4b37-9187-364ec2a64762",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f868a9a5-9131-4b79-86ed-9ce353e08df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90567116-756d-4ba7-8b74-7b577ce6793e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191ce239-0bd8-492e-a51f-9b1f7c379c2b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa937c50-044d-4929-b70d-d20ea3fde478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9816a73-936f-476c-81c0-2f4a598350f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9759ace1-126e-453c-9ee7-52b74ed1a199",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47bad8c7-95c4-4bd1-90f1-52469f07f05b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc0be080-62d1-44a0-b144-d331e617bbe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e610548-f9bc-4bef-95f0-7eb02fb1443e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbba1c7-0ca7-47c7-aed9-feb13d0249f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e811b8-1d80-4e0a-a855-ae5eb73f0114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9efd2df-2c38-4c06-b4b9-d9aea8b80ef8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47f588c-f1ec-48de-b48e-e257628c80c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "514f3aa9-fe7f-4812-91fe-e5fe53cc1dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3663a24f-2a63-4a4f-b532-98a54487f31a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0116397-80bd-4c5f-a8d9-c6cd593d6cb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf32ce9e-d513-4b99-a787-c982fe336fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14b5b43-877f-46d5-9fd5-b4ca045210c5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcf6433-af0e-49a2-919d-6eb5d7aef83e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b57f0b-3d1c-4f60-a94c-a2a80205f632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6920fa97-9541-48f6-9e1e-c04d29bae897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc9ee07-6509-4ad4-9e9b-e46f0d16f3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cab7ba-f88a-4e8c-87f9-53c004f0e1b5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58811db5-194f-4639-8351-2f5a4a1035f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf0c11c7-b08e-4bcc-88c2-a2dd736a897a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e9d590-140e-48d9-994b-eb387be5a297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3f45f7-1c12-42bf-9e1e-1a5a3af93448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3a7e50-a71d-48be-a9ea-f4ca6edfe1d7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb5a033-ef4c-4817-ad99-8522482a1599",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "333cdb90-6676-4631-95a2-eca4498d4e52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30800410-c8d3-4da4-9797-181934113002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1b8de3-1bdc-48bc-8a17-46519d8016c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78613ad-cafe-43b1-93f0-b332254c88ca",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c850e35d-0127-40b3-8bb3-ff0b45372a93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6e84628-ef37-490b-b898-07169f14b934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47965eb8-f047-44e9-ab08-38e8002d7558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d578e2b0-a241-4c36-99e2-fef08f245d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db25ea5b-acc5-4172-a9e2-f81a282a114d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a47fd91-7acb-442b-bf46-64554d8d0833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e8fe81a-3be0-4e45-9bb5-8ef8a911c07e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf3516d-161d-4729-9e02-f33ef78ca163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efec2ce-2bfb-4c80-87cd-cb774752bb6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7b75d4-59a7-4402-b024-53da345910ee",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac360d98-3af9-452b-a159-8b41ee0366ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b5821b-41a2-4687-b861-56488ef391df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8400b509-22f6-4a77-8e5e-8c8b4dcd9f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a12891ef-b115-4442-b403-3006b3c35333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47caac4-cd5d-4df9-8123-72e31498c28f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d00757-e40d-4127-a9c6-6b03ed9a233b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a0cfd41-1d5c-403b-aab9-6bf33461a717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6db5e6-b201-4a5f-b461-09da71743851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0180d5-d339-460f-9c8b-bdde7884de81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3454fcdf-4a60-4ddc-8193-b954082a75e7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98100d2-8e48-47c6-bedb-8cd597f81c98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535ddaad-de16-498a-a4a6-22cec54f20b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6474b12-e3ce-4bd1-96b4-197bda281042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6109fcaa-0761-4e93-b7ce-1e87377a90f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d359357-46d5-4ab8-b3a2-57a6deb141c6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fac76b-455e-41ed-b008-2e09ae98bbb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc99e2e4-3564-4433-8db9-1d5777c56887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16be0da6-f68a-4913-9387-acf594c56479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874511c1-0c23-4585-8f4b-7b976217b40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4500011d-5183-4ddc-a6e7-83df3155824a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e934b66-37f8-4a8b-91f6-603dd69a5915",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b44bc795-962a-43df-8796-38fd20522a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0099d7d-103d-4937-9a15-648cb39c4645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "757ea6a2-a78d-4bab-a4de-0f9546715687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6282d94f-6b51-493f-8681-fd0b0960a644",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf322b4-f33e-46ae-8492-7c3a9958c4fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7427e2e-57ba-4dd2-ad50-5416c766744c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69bfb66-babf-4e72-8b1c-46351de61145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6cefa9-1d43-43d4-be84-e629ba556591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7edcdf7c-527a-4c0b-8cfb-42ffd90c33f6",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8495dcd9-7ce6-496d-a877-4a349a21e8ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec03099-cfb1-49c0-9791-e5c9f4516c2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c69207d-4e6e-441d-bc06-0493e06f0716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaeb8f43-18d0-41e2-aeff-5e3e9864a139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53dfdaf4-c15f-4738-b5c0-7109dd342bf6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa52bbc-69f4-49b5-8974-4e704c803230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad57cff-335c-4d4d-bdc6-8ed7906b197f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1160de6-25d7-48a2-96cc-971e876efec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3faf02c-2742-4c95-be87-fb9573c70c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3281637a-5c80-4d9b-8c94-19c1a035db6c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80231f50-cb6c-45b4-88a8-3727fe7ec989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "101e49c7-8906-409f-af6a-12b7051175eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee3c975-8a2d-44b1-95a3-e1ccba228571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e35f08-a2ee-4b52-b11f-dd3caa3d91e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f7f97c-02da-446c-92d7-f58e17f6b59a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d5cb6b-f8b9-4fbe-a74b-5994834b3a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0e8166-7725-4f19-8e0e-d0646b9544fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b39f44-6c83-46c7-a0f2-b077a2c951a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d0f4eb-95b3-4372-a3ba-66c574e088b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9aa8dbe-63cd-46d6-b306-73c13ca981b2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8914fb9b-6b94-498b-b5cc-fe02f8754f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259f92ef-3037-4bee-a617-87b9fe8be38c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcc4803-70f5-43d4-b9bf-8039410916e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc5c5bb-5e06-4a27-af8b-d769a5ce12a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9570176a-f757-4f18-a0af-da85f47c67a0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfb4519-16c5-4569-94d9-9c9db544f9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b780b580-8aa1-498a-be70-50b10d575e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "147bf831-b620-4af8-919e-6279a3698ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7487dea-d902-4d46-a3c1-2f320884f8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1259ec56-6a7e-4fe9-a15e-d1ab5a512a0b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3a36d4-48b8-4885-9c38-3be61a6cbd3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1297253b-e8bc-443d-a1db-268dd0f13b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99884338-6591-4a0e-a268-b7a04d1f456a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f673aca0-40e5-4177-8c5f-b7d68f2a1298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376ac23f-a95f-447d-b99d-902d83e49732",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0838fe8f-0dc4-477f-856d-2786f37a3bd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6953bbb-b756-4bfa-b153-185848bc8185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65debd25-f384-471f-9047-646eddbcf6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4965f0f-7980-4684-8457-9d17d37fdff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb4d123-2c1b-439c-a1ae-0465110398fd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e03f3d-5f50-48b8-8525-977f0122791f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eab6fe3-463c-40f1-a99f-2d48da3776f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bef73b-e86c-4d9c-837d-4b834af31efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d60ca5d-abf2-4f56-a6af-defd5dab3772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5396b444-abba-4714-89b6-52228205b86f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590e4428-8b80-42d0-8094-601a427bee8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd4553f7-6f71-4558-8be6-44a06aa86421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e4bca5-1b36-416f-9a4d-0c66a6b5e94a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154ec15a-f368-4593-8eaf-5ee867d0055c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db700a5-fb09-4314-a646-f2a587711f27",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8b1f2e-cf15-4fff-85f0-5c2534fe0d9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cf1d845-6eaa-4043-9be3-89b077f77ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10facf67-afea-4c85-8adb-c360be143608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12255152-dceb-425a-847f-0b607cad6989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8e3701-c85e-4e75-8492-adb239e61f86",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23ec59e-f117-4267-b0dd-15e655ed1293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e55d5a7f-439f-45d5-a92d-faaeaea0bfcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda0167e-cd9d-43de-932b-7b35e06f8dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01a173e-8d10-4ee7-b2d8-af5d83fcfcfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa9b621-8575-4def-acbb-9f511259a5fa",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076e0663-acbf-4cf9-b4bf-5f1e6ef8afd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "475acd06-6d53-4175-8bec-4b0a31a7b7d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880d5bc4-cdaa-4a85-801b-955e388c60bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc07cd06-5a4b-4def-9306-0b7c104fe755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f0ba00-c4f2-4636-9d80-1af3fbbec5d2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7b95ac-065b-49e8-aa03-7d0b6347f6d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a51233c-7947-4776-bbba-c3b11f4db79e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4a48fc-470f-4883-a859-136a1fa2b1e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b27c2f64-102a-4183-a1f7-4214b3d61053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89dcfaa8-50a6-4fe0-b401-934bace4fab1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf18e24-83ba-4121-aeeb-fe9c6ead16ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f46f3e52-1e11-470d-8800-5963da79a0b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c419409-c2a0-41ac-9653-b1192dfd572e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1d198d-0461-4d02-8cd8-b1bbb8e6beb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450180b7-b394-4fb0-ae2a-b4da2a86726c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231bc031-3392-4a4b-b0aa-c18b35590986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3082ac17-5c01-46c6-a8c8-5799e84b7548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d35616-cf94-40db-9859-d12f9e0e6cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be6405e-9a22-4c40-b273-c5a701b24c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1c0995-a028-4642-a6b0-a140b32ed484",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b1eb72-2afa-4043-84d4-d8c12876a763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c50f05d-14cc-4042-b697-7a6017503146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "864e32a4-b007-499b-af0d-40ec84eff250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6925382e-e8bb-4cec-a675-5efdf953d5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a583da-c7f8-4d31-82f2-863688e2f34b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8989c6-8e92-4153-8964-a9b70ac34e87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9aaebb1-1899-4150-98b2-ad8b0ddb1de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffe7c05-dfc4-44fb-aaff-68db3399d335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c705ef-11b3-4cec-a72e-8d1a329f9b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99613ada-a3c5-4cc9-9c43-b928e506b253",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437e275f-902a-4bbe-a07a-0afd2b363009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1098bd1a-17a6-4527-9927-6303b29bad1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970370f9-e606-4721-a303-06cdc13f378f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c58eb39-6961-4d16-9ca0-2fb532563858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195bbc46-6f2b-42ab-b90f-ca7d43b298a8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae33623-8dc7-4eb3-8af2-c455a214df4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47332865-7e83-4c5e-8728-d69d68022763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e36ea20-1ae5-4354-9002-be5547259748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332f155b-6ef1-40c2-ba64-29794f4d73ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87959cf0-b7bf-4e7b-9dfc-9cdf71cf05f4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5852438-0ac2-4ec7-99c8-c5050bf72862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "683f94ad-ed2b-4fed-9a29-a37d563205a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0186db-136c-4e46-97cc-66ddd1ac2ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d0916a-b892-4208-b549-a62779dfbe0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3530d272-292a-4578-bbca-e80cc25a38bb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1cc217-658a-4721-813f-e5539e20a615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7b15e4-ddb9-468b-a3b8-6df063c9cad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6242a54b-2a03-4eac-81a2-81d6e50b65d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e1d867c-416b-43bd-86b5-ec8a0d989a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69b6300-5bb8-4c24-a0d3-4cfbdcc53839",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc26653-a7c4-482c-8536-0e33f37a32ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100c1d66-57a2-48d2-b1ed-9cbe5426ee53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef46d82d-bcd7-4d43-bb33-6e66e022c6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1a5b97-b125-45d8-b593-43bb39b93687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad69513-41c4-40fc-b758-ecea9d541ea7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5147fdbb-c157-4f43-9145-bf23a1659b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f0b93b-926f-4c1e-a111-23bef5be6c5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a171ac-8c9f-4289-897b-7eb26f126568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b187b488-1462-472d-9c3e-8cfb39ef93ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869e2cae-0304-4a6e-b8f6-2a43df71722e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687a9532-77f6-4042-8945-c47a96d1c550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c08d17-95b4-46b2-9131-eed18323504c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c0805d-ac99-4787-b8f3-d63e5e5c352c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1705064-27c7-4e13-ae54-d61644e20b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280bb37d-b6b6-4d3c-9803-4746c7dbc2bd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80fcd427-d443-4993-8681-04a4738a33be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd310d6-660b-4764-b5a6-f79c142f329f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97aecec9-0292-4988-a0c9-4c06575f3d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23362f72-dffd-418a-aed1-65b58968ed65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7c3854-4032-4736-a6ed-a78d2f801777",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51aaf2ea-df86-4f84-b6b7-1538bc64f122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca73e55-5ae3-4e9b-b83d-0343cb6b66a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f194b6ad-6dc7-4447-acd8-3e3b52a7d724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98985db-3e17-41b4-a0b4-60595ada4ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad85a30-41e3-49f0-8417-734f7359c739",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb8d8a8-4d43-405c-92b2-c64e86a936cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de116743-255a-4f46-b082-c4c78d416d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa19bef8-4eea-431c-85a8-043f6b2708cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b00435f-97e5-4a40-a049-69e159efb74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f847f2ae-4f2a-49c1-bf94-6ce5cc87192b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5a90df-79a2-4e2e-b829-5074d862f203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862da4c0-22f6-4938-9524-704d51a8916a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1d1244-162d-4282-9372-a2bb6344b226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91382356-3937-4c16-8b10-297462242c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac1febe-cc06-48cb-84fd-05e58e6e3f6a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c065c7e1-3abc-4869-b182-7fd3f072c1e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aabfc178-529c-4cbf-8dbe-7d78631f5ed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1849cb1a-eb27-44bf-94df-687fa2d9908b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58bbba9d-4192-4ca6-808b-068c14ab8e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca3a62b-c63e-4d28-aa6c-070ec3006e01",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9c1b45-30f5-4551-bd0a-a7d0a838238d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e834e89-42f6-43fb-a444-fd47817acac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba59d329-06e4-450c-85e2-b8df6b3a72f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d05e16-07f2-4704-9301-a5358449a45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79fc5f6b-3d78-4fbb-ae0f-ff83ed91aca8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41f1c78-1538-46e0-af57-ede5ce6a4e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ac481e7-8e04-4b8e-b3ab-d4ac36175254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d080be-d7a2-4b83-b183-a23426e5c365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7088e68-f0e6-4c39-8374-8c87771438b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4972defd-b8b3-479d-91e1-35c8f2dbbc94",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f90f071-72cb-4d99-8b6e-ee245138cf45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf56140-07cf-4aae-8f69-e41a0050b5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca6a1bd-3833-46eb-9d98-425ecfcd3547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1d9651-e710-4d1b-bbb5-a270a348c23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab7090c-e46f-4362-bab8-4f895bd38ac8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632a411d-779a-496f-a07e-92df7546602a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da4b64b-b7c9-4726-9d79-9dd523e99f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b2e41c-e462-439b-bd1c-2047b34cc4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3ac376-c862-422b-9a66-3a5cc248c266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a46820-c494-49c2-9d15-4be907c215e8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d320e702-19c6-481a-857b-6dee05644c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0243829d-2c82-4ef4-8367-1d436040245e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2131ce4d-2ee0-4138-a8d1-ced964a1787d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859dd6b5-5294-444a-9fe4-f8139abdd5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7247da0f-6e9e-4a5a-8828-af5b3e1afb38",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6088d708-bb67-4120-aca7-3023d352d131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73b2249-ea31-4e83-8649-b025fe6ec6e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3343bb1-71ce-4cbd-b6bb-881705261f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c86fee9d-c811-4d96-ae60-2b96d1ae29a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bddfe4-8223-40b5-938e-91d661fa691d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b458bb-e18b-4391-b6b2-bb4110424a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57cbea24-2448-48e1-92d2-ee9262b35aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebcb788c-2b3f-4dc5-a7ce-0bf99d902253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c88cb3-7f5b-439b-af8b-ee08951343ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d148a0-f714-4d66-a68e-3d1180cb3fc1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2c3557-f3b0-4da1-8af3-ccb9559a2421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a7fc6e-6a0b-456c-a8d8-2cf83400de97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd26ac5-b960-441e-97e7-adb6a3e9905f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d639c1-bee8-4e98-a2ca-499b8d471c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bde3fe9-7889-4abc-8991-15ae7de11c76",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58865d67-3be1-432d-b59c-abfd3df111da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac701a2-ad5f-4c79-baf2-ba20eb7b8b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760e8539-1556-48a4-be5d-9407fb476daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91284cbd-ffaa-4242-9ad0-3b1dac4f219f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02bbd91-df32-47f7-a53e-84510badbf6a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53932f93-4dda-43f1-a372-19b956570dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e289f0f2-8d0a-47ae-8bda-d9822b4bef94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47df8e42-9615-4c3f-a529-d45841242a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97764209-018c-4449-89d8-7a78088a2cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1906d8c1-29b2-491e-86ab-ba995177c2a8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533f6276-1468-4205-aa2d-fadaef948c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11827721-e5ed-4277-a5b3-4fa5566f87b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f64060-fa13-496e-81a7-bc84bc99a372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd0a05a-8a6b-44bc-89d9-5e700a8357f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39754eac-f16b-49f8-8ea7-e4a23ca011c1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06960b6b-2a12-4629-a52b-ba852f144c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a883670a-7159-42d8-a774-555cde0aed70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0f993f-1b36-4ba9-992e-ad3e6e15e5a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff1c9ee-c60b-48b6-8156-f9313125bad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64f512a-a694-4c65-a944-4b7235282792",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92944097-f161-4862-99ba-42cf3d4b3edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e9151b-a192-4d16-ad7e-3278e4ee57f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "713193fe-1232-4442-bc74-b8218437c78a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251d7a17-6c21-48c5-a601-19f274885918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ef2526-ffa2-48b3-997e-c3eb67ae1419",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f5c789-c41c-42b6-b677-1ba95e78f13b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "663495b4-2ba3-427f-9ee7-742f54b71cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "458a8b12-02d4-4645-b31d-c421ee5e823c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956096d8-398d-44a8-9646-b75852bed648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e8984b-afcb-4bfd-a52c-88a15a059820",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5e747d-6486-4562-9d75-2b55084deadb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20345288-0f60-492f-b092-af6e4225dc48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7cf762-df57-4dc3-84bc-cd778ab63c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2064a023-da74-4750-bea4-b8b695b8ea1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9670de0f-b718-47a2-97fa-32158365abec",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81df8283-a331-4b65-bfad-7ff67dd8126f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d889a6-48eb-46f9-9aa3-4926e9fce18e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d6639b-dfec-4afe-ae18-1ccca40b7a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e08fb1-01b3-4b13-adb4-644b4362dbad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277470d6-e485-4cb0-a4d6-5b07c2a23e8f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3726ac94-f525-413b-8dce-4af2ab3b0eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "863d4fca-b309-4c43-991c-21878bfc19d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d13b3f8-3689-46d4-a816-65978645ea37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0351cec-73a2-4340-977d-dd5f1a1678bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca43bc1-d86e-4b67-a498-d9d570542820",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f5dc0a-6b08-4763-ac06-3a59b6930357",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a659fdb-21fd-4be5-85a0-45d499c2e4e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed3c7f4-61d7-499d-9e1f-02fcf5650929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d149e61-9a94-41c2-8eb4-93adcd611a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a843bc95-f235-40e4-a7f5-096682a80f8a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e989b44-5af6-422f-b6ba-34dab8d1e971",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0a71c71-9c0c-447e-8b89-5b2e3c795955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e444af4-a5fd-44c6-9cf1-5ccb20e40c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f24344-370b-4cae-8a27-bae47cc70430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc7d3b9-079a-4428-81ca-074535901728",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a559e6f-714e-4c8b-a5ee-c09c99990764",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "168c7719-da3d-4e6d-a267-106de3df87dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdd6ff4-8214-42a0-a241-ed29d1ef56e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd723fd-d7c8-478f-9dc2-be8a8f897b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4a4a51-cb5a-4f93-ac44-224c48477170",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936de048-fcf7-4322-905b-d1817751edd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c6fae4-cf72-4e31-84a2-30b712d444ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9243674a-f6da-4eb4-b05e-42c9bdd39f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e892e7e6-b148-43a5-873a-ddd1eba2225a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d938be-4606-440e-9c23-0d2d15c600af",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82901f9e-65ba-4f23-85dd-c9398174307a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5945cd8-a61b-45bc-ae23-3950819a77ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cca8b4c-819f-48a9-9a20-d3b338c25db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8748d80-eb45-4edc-b2e1-c29e847e7a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2345897c-1e67-47fb-8fcc-a203784eaba8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c9d726-f1b1-48e5-ae5e-4cbfaa39bfb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "296b496f-3847-491f-96f6-b6c7b61fca5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1cff4c-e3d4-491d-a3e0-82a2b05333b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2575a6-4ed8-46cd-bdd2-be5e4f53efe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f081e2-b03c-4a29-b2aa-4ba877c34f42",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbc1020-84dc-4cba-944e-8e87dc46b964",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e6e1ab7-1adc-4bc5-a14f-28bc052f48ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd99340-6ad2-44c1-9380-e505e158c164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040ad63a-a411-4f4d-8f2e-dbe00ea03d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de67c6b7-1920-4720-a242-1c06efc0443e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bad34a0-f5c4-4f2a-8faa-7a77e743c892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d589cfc1-4822-4e51-a380-5e1d2a986e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449affc7-5e2f-4147-b630-8f02753885b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56aa1dee-44f6-43d9-b457-c78f56eb5659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe53305-e67d-45e4-b3b4-d89ddecef9d3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5364d3-8573-443c-8965-954b12f33a16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b5a7b64-7fcf-4b82-88b4-7cf47a86d335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f03736-ef7f-4922-8310-0f4f51603b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c42a3c-994b-4fcc-b432-1c69561ab2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1673ee2-cf05-4847-a4b9-d5fe083dd651",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28317ecc-b68c-4b0a-ae64-f9a919d5dbb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b30aeae4-4a7f-410e-a386-f8eb453db815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c55aece-7295-4007-9256-b26c0fc41dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279f90f2-d3e7-48fa-b5ac-d8c100c2365d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf65dac0-8110-4250-bee0-1458d971aa84",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5915b74-1826-4deb-aecf-1928e4212d69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bd27f8d-70ae-4ad4-9d07-ffdc3ac373d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "931c438d-5d8e-4e38-aff5-5e1a08fa3c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b547515-4f1e-4de4-b7b1-c5ca484f0d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a8a6d4-5f77-4840-a574-6a8ed8057309",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e1e5e7-5c7d-4853-9c33-703bf0600a6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71061e5c-5db7-42e2-a21a-734bd7a837fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8481299-3fcd-4c9a-8462-8b0beb7209ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e13c6ff-4fbb-4a82-b78a-b6ba444844b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9398136-77ec-43e4-a94a-453cbb9c6fd5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefda071-6f4e-4823-b711-ddeba90e382d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd4c4e8d-7233-4730-a687-4c06b09ec5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da078726-daa6-48ac-88fe-8289979e4dd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4faa7486-ed0f-4fdb-afa6-1b231b32f5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e3dffe-e1e7-4cc2-a228-32722f20cc14",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c039f2-4471-4e14-8a5d-1fe3bfb4e4a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae419f27-b775-42bc-8127-c68c1d475811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5aa6b89-afd8-4e02-bb2a-3ddd2ae8013b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47181e04-8087-420f-bf7a-22ecf919e506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0de49b-c624-4061-b710-9b80e1d887bc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e3fd75-080f-4a91-aee9-a243dbecb640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12f76588-23a5-47c5-b9cb-e12011a2770e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "332bfdb6-66f1-460a-bf96-6502d37c7d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5689a0b0-1659-4e05-b56f-7c77c6a94557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a8c486-7a41-4ea6-b25a-b2a55d4d95c8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef578bb-adfa-4d81-b38e-e36e60371159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f87a116-9473-4853-b124-3393c785e2d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8690d4-33b1-42b8-99f8-b871fe473041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b134ccd6-3049-4fb3-ae46-d89291f81076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36ae388-738e-4533-85eb-f2f7fbff0b0d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b367aa81-0c03-4e1c-a026-c892d2b2eeac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a0f1442-ef1f-411b-850c-8e8764db22c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1048ba86-bc79-483b-9b6c-d228f137f850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3fd68cd-7f63-462d-9044-7a17cd00b0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4286bd0-9e47-49d7-831c-003244c92b31",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42779a4a-4613-4f6c-b0ca-983081025bb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a339e90-98b9-450e-82d6-a05e1cf50fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64c3a3c-1a39-473e-8068-2fe4601a4d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "438fbad9-ac72-4564-9a23-789a35d8da3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312f0369-6867-4829-aed9-e109af24a14a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8b4e68-a24a-4983-86d5-b24b97ec0650",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451c1f1f-0178-4780-84b3-08717791fc10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79f9532-a1a8-4f6b-a0ec-d6d4da7ff7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25fe65f1-6d57-4591-a855-f43c98484c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa04dfe-0b79-4f6e-8041-3b839d780051",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca17f6d0-e881-4911-9476-433e830dce54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0713117f-1eb0-4fe7-a2b8-0f84e9ce39ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03688182-34fc-4491-9f67-9f750ec2ee8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c937cb6b-6a4b-4e19-a8b9-511a0191b5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20834e1f-a637-4169-a043-799bb6f1c203",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da218001-ee75-498e-a093-238782dd0267",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44b025c9-e198-45b0-aac2-2f313ecfb1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a37cd6-171e-4718-9a6e-24c7bd9dc8b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f362832-3038-452f-ae37-991a41afdede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c60fb1-16ed-444d-8ad1-4b943315d61c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7315f274-383c-4099-b9e6-1b3587614967",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1da418b-f628-4f84-94d1-d3e192647408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0804b2-e2f1-4160-9f2b-988598df8d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc00a01-30c4-4edb-9eec-ba0b4a1b4e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec27781-7384-4429-8ad4-ddb7ab64da65",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb19e1d2-a8ae-4f6b-a985-b5dd3afccf6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9360b148-4712-48ec-9c63-1fbddd8fc9ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3d3b57-4667-45f0-aea7-031065c95dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba30af6f-6115-40f1-a376-661f6ab3037f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89807cb0-057b-4c49-969b-fb5cb670ec14",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bead0cad-2522-4c9c-91e7-7829f38e15e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9a46399-838c-41dd-b2f2-c589469c8aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f214c42-e2ec-4bd9-acc2-22ecc5541853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41453ced-11f5-4b98-a5ec-9c7b80df17cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e706c3b7-94ad-4fc7-9bb6-1f7a70a92b6d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826cea3d-41ee-40ae-8769-076af1ec7417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed7f6d5d-f624-4a21-9c3c-a355221fe5e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "714174bd-a4f9-498f-af72-19aa9cf5e610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "becfc962-946a-497e-a9e3-05760e017293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b195c3-caf6-458e-b33e-c30b4328808c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c61d4ba-109e-4b94-9cca-cf83fc335407",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb8efb4e-f3cf-4a67-a0ce-0bcf2f28a7fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ff454f-9b96-45c6-9a0f-b00ed0a2171e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100fb542-3c59-4423-bb9c-3a90e4a2fe6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c8491f-e764-4b37-a9bf-ad4a895a111c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb459a83-e9f1-4671-a597-49b34c092152",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ed0434-600b-4e62-9fc7-99a0985cdc03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a7e67b-8f34-416a-a67a-8151e957da5d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2feaf7-a36b-4fd0-8a7b-bdc10320c71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd7d1ef-efe7-4246-93d6-a607b9454afd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0774ae-f86a-4d0c-af4c-548d3385b443",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32f7e86f-a5da-4fa9-9fb7-bc20e00abb05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0ae5f2-3c93-4f41-a104-1f03719dc6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4cbe8a-b02b-4dfa-a159-d3ba6debf6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9f79a9-ed5d-4139-9b03-e348d8bad811",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401ea5b7-8dc2-42bd-923a-1d96a20556e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a66e722-85d0-447c-9be8-f3586bfbfe31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74765a58-cfa1-413d-bf0b-14c055e09b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d52f33-0315-4314-a2fd-b788a03760b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cca3523-50d8-44a2-a289-84cf3e65e20a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af226fa4-b215-402c-809f-a9b6a7183cd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbf4ce37-1135-43c2-8c77-dd7bbcbbe997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a939068-520b-44f6-a95b-7c503d0c6f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c4ebd7-298f-4703-8ff1-eb53fa8b5d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df132b9-3945-40c2-8914-7deccb33d25e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e1be56-2634-4be3-a085-57f9ca9d025c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4261fec5-0292-43cd-871b-346bc0fb6134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4159e9f-059c-4f84-8f7c-674d561ebf74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d63d303-6237-4c18-b7d1-1b21e934dbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbefd96-56be-44f3-8f1a-ec24fb465356",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e809c21-a17a-4109-919b-6600c92fc9a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b5f6240-0500-4433-9c01-a746d2e29c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c43fc4-c92f-40ca-93af-f26aa8678c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e415380b-b72e-49da-9759-44c064671d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517fd4c7-7398-4f66-9a8a-a16072642699",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb8d85f-86cf-4d83-917c-fdcbfad87d0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "185b086b-96ad-4802-912f-0d25f1b3fb05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8064d4cc-9731-458c-ae1a-fd34eb63bfc4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded471ff-d355-41ab-96c6-6d0ea869d341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642756ae-0ee5-4d0f-937f-66da321600b6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3231b5e5-e77f-484b-86dc-1ce19301a28b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3381892b-bda1-4f21-9741-fcf511df8ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3aea44a-c944-42fc-8279-588fb80def07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e575722-4bee-4589-bd23-36ab8c818767"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fa7d516-5e46-4ec0-bade-1df8a9557cb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8abb5fe1-dda0-44d6-9c16-aa6d0ea0bcf6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b033d9e-66e6-4d01-bf2a-dcf361ce1370",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "549a4c2c-82ca-4b41-a37f-5591d02f0e33"
                    }
                  }
                ]
              },
              {
                "id": "8356085d-b1a0-4463-b142-cad06de02d4e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47c9cfea-2822-4c1a-9cdd-2e0525ec377d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b0eb9a-27eb-40b5-bc87-b542ee5a5568",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bb467491-b6df-4dff-82bb-b66776c6cf80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6a47ce-93ef-4b96-91b1-9ca25df15f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a230775d-1570-43a9-a268-c5332f3ff239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077bea62-67a7-48dd-aaca-e8887751aa59",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665f2891-703a-4d80-a726-44a2f5c589d6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "eed5f7a8-562d-445f-ba12-be21cde074b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cfb6a9-258a-4219-bbed-b8a583a9733c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b246664-333b-4884-99b4-073526262e45"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eea717a9-340a-42d3-a1f2-94f59d11ffa0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a55cf66-c497-4c63-8a6e-2bb90f62f351"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c569738-e502-447f-8686-280f25e1a8db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ae1e480-19a8-4c16-af6d-b2a803329d7d"
                    }
                  }
                ]
              },
              {
                "id": "80fbfc98-a02c-4ea6-b889-35ed1b2adfee",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e3d632d4-97e9-447b-ab64-6051d3834771",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b53a50-d3cf-4cf2-999e-61aff6014f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "78567b91-3049-4e88-9893-de62b6fb9aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7d327a-184f-4e41-86ea-97d8fa38d0cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6da1652-0b08-4d18-a647-7e6230b00662"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "49f2a1ad-7469-44d1-8fce-89c45c43060c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1913d3f8-5c87-4d3f-ad79-73291271245c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "365db255-4cff-4875-84a4-266fda3e3456",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d34b39b0-9a69-4b80-8020-2648e87f9b10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8415856-0fc0-4a49-ab01-6ddc9002f71f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "380fe7cf-c072-4111-8206-2233835828d3"
                    }
                  }
                ]
              },
              {
                "id": "5d29d221-608b-4189-be19-8952a11c5fc5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b51290d8-25b4-4952-892e-5545a7d15b45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d6062187-3b29-45e9-aca6-eb1abf63ffa2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b250159-d3a3-4d1b-a651-e70aef6be81e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3725eac-d86d-4e25-a0d1-d3f993750cf3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94a26f72-a30f-4c1e-88e4-515894fa2b4a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "937351ce-f879-4f4e-9d2f-e5a037611370"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a0c511d-6fb3-4037-8749-9acebbccff12",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37f60176-9c93-455d-b73c-06134da6ce9f"
            }
          }
        ]
      },
      {
        "id": "51cf808d-d53b-48d6-9045-dad265ddee82",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a0a44d32-7c96-45aa-a897-2454f4a12f93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eefa19d4-a574-427c-a8dc-2381757cc9f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2624ebd9-c1d6-4c6e-8589-368704738129",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec249de-c0f0-45d1-adce-aa568648d453",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "79107d3e-a0f1-4f04-b749-371e6e0e9f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e91b136-2255-43b4-91e4-cb872f594eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95b9a55e-0cc0-46c3-a4bf-6877d7aaad34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eecfdf79-92aa-413a-8b68-3b375ff1154a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7498ba0-f502-451a-8aae-9586b6f3c10f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3b66d346-6459-4a42-8f10-5f5cdaecc22e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bcc28b-a415-4a50-9f47-109d6ac784d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4955df6a-ad14-4487-8e1f-b9731e9ac12a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c2429ca-5d59-4fa9-a193-fe046d53265f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edf8afdd-bd49-47a3-963a-497d38baea08"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a0c3e67-5239-4368-9067-35edc9b492c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46b7d14d-f872-4022-b95b-a22011fb688e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "660979e4-0946-4d61-82fa-80619822cdf7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "af8a4ac3-c6f9-4920-b8b7-060d9bc4cb02"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7975d60a-e4de-43e9-8c5a-deffd793c184",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b46e8716-6170-457f-967e-5e0d09a675b4"
            }
          }
        ]
      },
      {
        "id": "46e40fbe-bfbe-454b-8c63-445434617229",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b44a05bd-a556-40b1-9cf1-37123467bf8b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db514b00-4d61-41fd-88b2-021ca2da7c35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43b3acce-6026-438a-9ce1-1e56ceca5652",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b64020-1d58-447d-a973-a5ac5010115a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c93bd6ea-8f21-446a-bd4c-9f929dfb5773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8731e3fe-3aee-4985-94ed-bfe749e2893f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "156e6e1b-377d-4c2d-a06a-b2ef789e1e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3851d1c-fbd9-4490-bea9-326cde83eb97",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72df9ede-ab1d-46de-962e-d5acc1280408",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "96193ccc-8298-4f85-9a6e-a67875cc5a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dadeb3df-7c6c-4e62-a4b9-df0a3f513338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2752182d-2947-4e62-9116-9f3ef747e288"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccbe6dcf-1797-4fd5-b47f-44eefeb6c889",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db552565-2235-446c-a7f7-78716957c1fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4eb14574-8ac6-4378-9f1e-ff0570023d5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f6467c9-82d2-49fe-9445-05e7a18a997e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eabdd061-6020-45e0-8136-df6dfb2d8964",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "79124525-2eea-4093-8271-e86f3bb8e33c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f0aa863-6d2d-4705-b862-ed20fbd95642",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72ac0063-c6b8-454b-9b92-6c9e8e3d3cfa"
            }
          }
        ]
      },
      {
        "id": "a85dfff2-722d-4159-b2d4-f163d771a3bf",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a5ba723e-2172-46d1-9359-fe8119fe026c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5534603b-4009-48f5-8628-c7eabb847aaf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "659b0c62-a2c2-416f-bf0a-33a38c190c05",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b75602d-181b-4d8d-9439-0135b4bb7215",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b259c897-55cf-418e-836a-f50a7c01a8ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbc0b62-ba45-4453-a65c-87ff6c009c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7524b785-eb0f-430d-b2f3-4f2d969c1c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0d7096-c18d-4b8e-b3cf-43040fbf7883",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4250eb61-082e-4bd5-89c2-3e9f891427ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0200ee1a-afc8-44a7-9e46-9a6b6541064c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "653e8338-0e1a-4cda-98de-4e17e42f12e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5141c4c6-2574-4b22-a4c1-174db0607f2b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "438ccd57-8df8-4201-88df-8878a16318af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48ad4e84-04d3-41ad-8c7e-069a98c25b6e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "13768547-0c1f-4d9d-9176-cb009dc681d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a13a0ae-a37e-4edb-8629-2425102a0448"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49fe82f2-61ef-4ac2-a0ac-f0609f85accd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "103e48d2-1e00-4a3f-ab56-f8d1ca9a7bc4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1da8f120-41db-45bd-9319-83fcaa80cd51",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2dfcd63f-a65f-40d0-bc5c-59e4e0b3b778"
            }
          }
        ]
      },
      {
        "id": "4bcf1359-2d57-4810-ab19-5cd807e3e39f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6188d43-a0e2-4d07-952c-11862261e5a1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6da1cb4-66a0-4a92-88d3-49b14cfba636",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "677d9048-7e32-4232-9d10-c1250799f56a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01c0d07e-d81e-4be4-bdc8-289cfc3c3e2f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "afaac9c8-ae3e-42d0-907c-b6161307cf2d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 82.1984732824428,
      "responseMin": 3,
      "responseMax": 1001,
      "responseSd": 168.3250862294674,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672879159358,
      "completed": 1672879191889
    },
    "executions": [
      {
        "id": "07790ea6-73c5-4d48-8fa4-083e74568da1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "96f8ece4-4a2e-4808-979b-7f5ffba7146a",
          "httpRequestId": "7c7ab8ad-ef18-4c58-be78-1dd9eff627ee"
        },
        "item": {
          "id": "07790ea6-73c5-4d48-8fa4-083e74568da1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "41a25de3-32ce-46bd-89b5-1f0d8612fad2",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "69c6e804-c8a0-4db3-9340-5201dd0837b0",
        "cursor": {
          "ref": "584a359e-1e50-41eb-95c5-3b0a86fc5e4a",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d5135ca5-ab66-46e3-8e59-3854b3feb62d"
        },
        "item": {
          "id": "69c6e804-c8a0-4db3-9340-5201dd0837b0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e8443e79-19ba-4733-805f-d419a518e251",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "0726d847-cda9-40fd-a522-05efda5663c8",
        "cursor": {
          "ref": "89c89bc5-c044-4a39-b095-8df262790fcc",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d614ec3d-6e84-4b4b-80eb-6f8bdc9a673b"
        },
        "item": {
          "id": "0726d847-cda9-40fd-a522-05efda5663c8",
          "name": "did_json"
        },
        "response": {
          "id": "f8aae7b3-7ae5-4ec5-a540-5ac46fbe9307",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bb0195-e25c-4be1-b053-ca46e1614d5e",
        "cursor": {
          "ref": "502ef908-9f1b-4beb-a152-2871d7dabb27",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "854d995d-ebed-4963-85be-98b64b67993e"
        },
        "item": {
          "id": "72bb0195-e25c-4be1-b053-ca46e1614d5e",
          "name": "did:invalid"
        },
        "response": {
          "id": "98b5c91a-c78e-4630-a79d-f2a4225f8e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bb0195-e25c-4be1-b053-ca46e1614d5e",
        "cursor": {
          "ref": "502ef908-9f1b-4beb-a152-2871d7dabb27",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "854d995d-ebed-4963-85be-98b64b67993e"
        },
        "item": {
          "id": "72bb0195-e25c-4be1-b053-ca46e1614d5e",
          "name": "did:invalid"
        },
        "response": {
          "id": "98b5c91a-c78e-4630-a79d-f2a4225f8e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b785a7f5-669c-491c-8ae1-126569b66c1a",
        "cursor": {
          "ref": "aea537a1-e94a-4c95-af4f-8268a555b88c",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "23a3296a-b5c5-45a9-b099-a204817549b3"
        },
        "item": {
          "id": "b785a7f5-669c-491c-8ae1-126569b66c1a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "dfbe33c9-c9f6-4db7-8e04-74f53b056ec5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0a98c3-529d-4a39-9540-f7add8e7d3b2",
        "cursor": {
          "ref": "00631434-f845-4f4b-ba49-4325fa944f41",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d97d2fe2-731c-4d49-b359-a3f50446dbe9"
        },
        "item": {
          "id": "7e0a98c3-529d-4a39-9540-f7add8e7d3b2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4720a514-701a-42ef-b1f5-45c298e91bb3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7850466f-dd5b-44f1-a6ed-84d486ad2683",
        "cursor": {
          "ref": "8a9948e9-2c54-458c-a5a4-7fef01feaf1d",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "670fda37-c52d-4126-8e78-1250c5f50f27"
        },
        "item": {
          "id": "7850466f-dd5b-44f1-a6ed-84d486ad2683",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5a4c756a-3673-4e0c-b84d-0799e2bb862e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4c5356-b952-4de2-96a4-bac019e4b3dc",
        "cursor": {
          "ref": "e48c684d-3b89-49e4-b04a-360552744db1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44d072d6-9408-4102-aa04-49523f8f5885"
        },
        "item": {
          "id": "2e4c5356-b952-4de2-96a4-bac019e4b3dc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8db50d7e-5619-42c2-935f-c2b9e5a07af0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4c5356-b952-4de2-96a4-bac019e4b3dc",
        "cursor": {
          "ref": "e48c684d-3b89-49e4-b04a-360552744db1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44d072d6-9408-4102-aa04-49523f8f5885"
        },
        "item": {
          "id": "2e4c5356-b952-4de2-96a4-bac019e4b3dc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "8db50d7e-5619-42c2-935f-c2b9e5a07af0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e0034d-9c1e-4ea4-8974-d375412ecfd2",
        "cursor": {
          "ref": "d6c8c065-d020-437f-b653-d3243ed9b7ea",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "412c8288-ad96-438e-b53e-367423d45e3a"
        },
        "item": {
          "id": "96e0034d-9c1e-4ea4-8974-d375412ecfd2",
          "name": "identifiers"
        },
        "response": {
          "id": "46159459-9067-46d8-a2a9-4d9c4c54841c",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b64e30-6e02-406b-a17b-8518e963a712",
        "cursor": {
          "ref": "ffd06b22-b698-4ba6-b78d-53719703b60d",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e86ccb27-f80b-4782-96a7-dcf36d94f2c4"
        },
        "item": {
          "id": "53b64e30-6e02-406b-a17b-8518e963a712",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "42476f8c-4e58-4f44-b311-b962a515816a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b64e30-6e02-406b-a17b-8518e963a712",
        "cursor": {
          "ref": "ffd06b22-b698-4ba6-b78d-53719703b60d",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e86ccb27-f80b-4782-96a7-dcf36d94f2c4"
        },
        "item": {
          "id": "53b64e30-6e02-406b-a17b-8518e963a712",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "42476f8c-4e58-4f44-b311-b962a515816a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebe625f-8b18-49ff-a6dd-ed2f0be3c47d",
        "cursor": {
          "ref": "621c41c1-a37c-46bb-8d5a-b029118a00de",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8fdb74c1-0594-435c-9d2c-40ad91d313cb"
        },
        "item": {
          "id": "cebe625f-8b18-49ff-a6dd-ed2f0be3c47d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "573774d5-39a9-4aa6-8861-ac4b052a74ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cca254b-581b-4698-a78b-06369cfc2780",
        "cursor": {
          "ref": "4b5c4534-e139-4ea9-b74c-8b000bd97f89",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ba610839-6b3a-4f9a-9033-0a4a7240a77a"
        },
        "item": {
          "id": "1cca254b-581b-4698-a78b-06369cfc2780",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "383a57a7-beae-450d-a2bf-6be7ae1018fd",
          "status": "Created",
          "code": 201,
          "responseTime": 604,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "ac88a09b-0c58-4a77-9dc3-581a5da8d074",
        "cursor": {
          "ref": "c95e8b1a-9491-477d-a95d-b1110c613837",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b84a8f74-a567-491d-9ac8-ab87bfb1573e"
        },
        "item": {
          "id": "ac88a09b-0c58-4a77-9dc3-581a5da8d074",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f90ca364-b8c0-4106-bb21-7de8c88a2704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8c7dea-812c-426f-96b1-c387c3331992",
        "cursor": {
          "ref": "ea35d2d5-5887-4e24-949e-aff4d1ca6ea0",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1009b4dc-5f91-4989-b21e-ee62a774ab1c"
        },
        "item": {
          "id": "ea8c7dea-812c-426f-96b1-c387c3331992",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "81114296-a359-4ff4-a618-71368c764ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79395c8-5bc8-47c7-a8d9-496ce3870705",
        "cursor": {
          "ref": "a1a1084c-9510-4a8e-af6b-af7016d286d5",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b0e813c1-f47b-42ef-a62d-c908a639b11f"
        },
        "item": {
          "id": "d79395c8-5bc8-47c7-a8d9-496ce3870705",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f27137e3-fec7-427e-90b2-88239cdcc556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7504f85-728b-400b-9c1e-34f9d84e2f47",
        "cursor": {
          "ref": "e4852c20-e66a-4fa7-82d6-b1768be1a22b",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c3665f6a-e962-496b-a485-24ea461c6345"
        },
        "item": {
          "id": "d7504f85-728b-400b-9c1e-34f9d84e2f47",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e6406492-bf20-47d8-b922-d2df6d6abdec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e08c0f-3f50-4606-843b-2b6cac30983f",
        "cursor": {
          "ref": "128b07a2-a2e5-4002-a2a3-39c0bad94bc7",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fc32e2f9-0bcb-4f56-8368-9897ef055712"
        },
        "item": {
          "id": "04e08c0f-3f50-4606-843b-2b6cac30983f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "75c4c83d-afa6-4c6d-97a7-58b0df1f5a03",
          "status": "Created",
          "code": 201,
          "responseTime": 511,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "8702fabe-e1c1-4037-8874-2a7316e216ca",
        "cursor": {
          "ref": "8c87ff4c-9758-471c-a6bd-eaa40be7bcc2",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a7919057-343a-4a54-9287-d28b0bcdb8bf"
        },
        "item": {
          "id": "8702fabe-e1c1-4037-8874-2a7316e216ca",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "285b8039-bb30-49e1-aa98-94c99815abab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4625186d-1c75-4107-97d5-95529c88f76c",
        "cursor": {
          "ref": "7d07264c-5245-416c-ac84-e6b8ab32e590",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1ee3a26a-b1c1-419d-8cfc-94643e5064f3"
        },
        "item": {
          "id": "4625186d-1c75-4107-97d5-95529c88f76c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "65d348eb-9b36-4f43-8c24-4f683f89aea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04af82f-668a-4da9-85de-db0b58d9e613",
        "cursor": {
          "ref": "2dc0933e-b7e2-4f9f-bf81-76e0371fdae3",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b828ca94-36af-4177-92bf-db9435ab3472"
        },
        "item": {
          "id": "a04af82f-668a-4da9-85de-db0b58d9e613",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b528a147-24a2-4104-8d31-e29266714fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d773a8b-0012-453f-9c8f-3ac77b978628",
        "cursor": {
          "ref": "2dca7389-1676-4b60-a600-504f825bf832",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b05976d9-ae73-4d95-bc1e-cf954bc755ab"
        },
        "item": {
          "id": "1d773a8b-0012-453f-9c8f-3ac77b978628",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "348e393c-a04f-46ac-a75e-4fc25c36f202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18590d3d-5674-4aae-b151-42b8d600c0f3",
        "cursor": {
          "ref": "2258846e-6f9f-473a-8964-4248d3605d5a",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "269f7c69-4c7b-4c93-951e-ab188499bd6d"
        },
        "item": {
          "id": "18590d3d-5674-4aae-b151-42b8d600c0f3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5010aba9-03a1-4d6d-8b28-0323b648b74b",
          "status": "Created",
          "code": 201,
          "responseTime": 487,
          "responseSize": 735
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a99dceaa-6fc9-442f-a583-99e42dfa4c06",
        "cursor": {
          "ref": "5d9079a9-cf07-4667-ad67-20ac61328789",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c2348472-e063-4919-8e45-95ceae4ecbc1"
        },
        "item": {
          "id": "a99dceaa-6fc9-442f-a583-99e42dfa4c06",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "f53651c4-8bd3-4b1a-adee-58a3efb63e33",
          "status": "Created",
          "code": 201,
          "responseTime": 1001,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e5ffb79a-56c6-46fc-8479-6d71bc895838",
        "cursor": {
          "ref": "ee0e9ea6-dcae-4044-9e7c-7a3f43c4dd0d",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "60c254d2-a599-4f0e-9ee8-d0e86483b358"
        },
        "item": {
          "id": "e5ffb79a-56c6-46fc-8479-6d71bc895838",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d2113280-7e85-44f8-9230-01c4958396d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ef2598-8aa4-4515-aed7-66a26108f9b7",
        "cursor": {
          "ref": "e662308e-822a-4452-a40b-3e139295a443",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "07bf966b-42a2-47a1-90e4-685d1d37f0ad"
        },
        "item": {
          "id": "a2ef2598-8aa4-4515-aed7-66a26108f9b7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ceda2515-e269-47ce-9689-a7fd187ad931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e447d1f6-9426-4a86-b587-e7a688764146",
        "cursor": {
          "ref": "32f9a578-adbd-43aa-b5f8-32f7eda31b86",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3784c178-c5ef-414d-8105-953f43fee929"
        },
        "item": {
          "id": "e447d1f6-9426-4a86-b587-e7a688764146",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7c683fdd-bb8d-4013-a2e5-4eb8ad72090b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157f1e6a-87c3-4b6f-945d-6e24daa26a8d",
        "cursor": {
          "ref": "cbe5bc41-c51e-4197-ab8a-fb5d5d6ace9c",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ebd9942a-d049-46bf-a62c-6d54c2ea14b5"
        },
        "item": {
          "id": "157f1e6a-87c3-4b6f-945d-6e24daa26a8d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ce0bf85f-d3cd-4ded-a8ca-77355499b501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872f1842-313e-49ea-8f7c-60a0048332f9",
        "cursor": {
          "ref": "f8b568ec-df77-4de6-a306-efe18e17f5c0",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0ca0ea47-7393-4a23-9c51-552b665ed6c1"
        },
        "item": {
          "id": "872f1842-313e-49ea-8f7c-60a0048332f9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "78b800a1-ec60-41e5-82cc-cafeb6c48887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725ce0aa-4201-48a0-9ef2-f7453b48717c",
        "cursor": {
          "ref": "e6676d3b-c01e-4edb-b088-ab90c6283cb0",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0d8333f7-a7bf-4b55-b506-0c0f1a01a5cc"
        },
        "item": {
          "id": "725ce0aa-4201-48a0-9ef2-f7453b48717c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c19929c8-9246-4031-b4d1-b354442394e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9edc68-e770-4cd6-8e0e-ff01f240f9d4",
        "cursor": {
          "ref": "82e0b8c2-a698-46da-bb9d-59e73262903f",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3ed40cf5-ab77-41ea-81ae-c4c04af61c01"
        },
        "item": {
          "id": "2e9edc68-e770-4cd6-8e0e-ff01f240f9d4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1155db9c-97a5-40b8-b60b-c2090b04546f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a2f635-23a7-482f-8d9e-bbd87aa4a8e6",
        "cursor": {
          "ref": "b592a5c4-99b8-4ac7-b104-f9381b641891",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "44b64024-d0f3-4a79-92c1-c5dae9024f35"
        },
        "item": {
          "id": "b1a2f635-23a7-482f-8d9e-bbd87aa4a8e6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5e4610ce-4362-42e7-a58c-ba7807502d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6085a4e-e982-478e-b4b1-9c2f93443377",
        "cursor": {
          "ref": "5b0fd36d-19db-4a1f-a697-7f53e9e4cf71",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d054b0cd-7b1c-4602-b110-6cd1317b2f30"
        },
        "item": {
          "id": "d6085a4e-e982-478e-b4b1-9c2f93443377",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0266c551-8694-43f0-9025-8129813c1947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd53106f-52dc-4682-b141-77635e3a2ca8",
        "cursor": {
          "ref": "c05c2dbe-94a6-4b1c-80cf-8edd79f39cb7",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d673c6ab-e847-486d-9b3b-0b35c5c79bd2"
        },
        "item": {
          "id": "cd53106f-52dc-4682-b141-77635e3a2ca8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e3aa6f20-83c4-4d97-954f-770199577043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f598cda-218e-46ac-83f8-191dbd4fc4f8",
        "cursor": {
          "ref": "a11eadbb-ca46-4063-b240-467764cd889f",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "77d631c9-68f1-495c-9010-3590a4d7b0a9"
        },
        "item": {
          "id": "0f598cda-218e-46ac-83f8-191dbd4fc4f8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f9ac2759-51f1-43cd-8abb-5e5a3a5d6ee3",
          "status": "Created",
          "code": 201,
          "responseTime": 642,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "7b0ab365-bfa3-43d7-ae9d-419564329050",
        "cursor": {
          "ref": "46d8168f-857e-40cc-9fae-a44362800c5d",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "30909002-92bf-411b-9d15-c005a334da93"
        },
        "item": {
          "id": "7b0ab365-bfa3-43d7-ae9d-419564329050",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c5302a50-394d-4554-b329-89524827dfdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b327842-fbf2-4c82-8a2c-d5340497acfa",
        "cursor": {
          "ref": "6b89754c-f5ee-41a9-a74b-16931815d671",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "afdf9456-b30f-4aaa-b4ff-78e23dd9db98"
        },
        "item": {
          "id": "8b327842-fbf2-4c82-8a2c-d5340497acfa",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "13b29874-10fb-42c6-b791-0516b30b9ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d47e6f-8d5d-4c21-9b35-9fab478bcceb",
        "cursor": {
          "ref": "296a88a4-c0fc-4b15-8de5-92903c93f359",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c7729f76-5751-4cf8-b3f4-c12f35c81032"
        },
        "item": {
          "id": "86d47e6f-8d5d-4c21-9b35-9fab478bcceb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d48d07b4-5634-4f66-954f-5edcd832e5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1e1a70-92d5-45d6-8762-53695269efaa",
        "cursor": {
          "ref": "094a4bbc-2c1d-4f6d-a9d0-80afd67aa318",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6d5c0a78-203e-40b4-bcc1-dda8fa41d5d1"
        },
        "item": {
          "id": "0d1e1a70-92d5-45d6-8762-53695269efaa",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0b70d1d5-54db-489f-93d0-734136650031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965053ec-b77e-4c72-9ba4-6f6d09687449",
        "cursor": {
          "ref": "5d59f334-2078-40fc-92ec-8e16738204fb",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fa571f75-2306-4376-a2ea-c8a99c08770e"
        },
        "item": {
          "id": "965053ec-b77e-4c72-9ba4-6f6d09687449",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "072b2e45-04c1-42e3-8d25-fc2aa899e453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18469d20-96b8-4e09-894c-514a118dbec5",
        "cursor": {
          "ref": "d9154be0-542e-41ba-bdc0-d9bf137cd90c",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "97dd9514-017c-4fe4-9466-221689d494c3"
        },
        "item": {
          "id": "18469d20-96b8-4e09-894c-514a118dbec5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c622a78a-ac7c-45dc-bedc-8552797cecec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412d8b2b-6152-405d-9a7d-e744d6218b69",
        "cursor": {
          "ref": "e1272636-9736-46db-b1fa-0e834279dfbe",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "35efb441-4bc4-4dc3-9edf-9ce70d00a0f4"
        },
        "item": {
          "id": "412d8b2b-6152-405d-9a7d-e744d6218b69",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1292371e-f6b1-4048-9764-da91ac32577e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1de731a-76f2-452c-82a2-70faff564a67",
        "cursor": {
          "ref": "9e875294-db30-4654-9db5-f56b5000bc6a",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "21795507-39ee-4dce-81d0-f6557fdac36d"
        },
        "item": {
          "id": "f1de731a-76f2-452c-82a2-70faff564a67",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ee9b00b3-5b66-47b8-bde7-33b236486ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9739fff-8b35-441b-8e7a-a1465f4aead8",
        "cursor": {
          "ref": "66191eac-f24a-4622-92f5-0003181bf965",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d3f00e2c-e6b5-4e86-8eca-318865b38cb0"
        },
        "item": {
          "id": "e9739fff-8b35-441b-8e7a-a1465f4aead8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "23f95163-2ac2-4064-8ecd-07a8bb295ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b269cc8b-28f6-4f5f-8d94-be920e336dab",
        "cursor": {
          "ref": "cdcebece-09c2-442c-95ea-e1e4868dffaa",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f97cde88-4574-4af7-88e1-dc6d0017ab6b"
        },
        "item": {
          "id": "b269cc8b-28f6-4f5f-8d94-be920e336dab",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d426766a-412b-4687-9f74-1472cc635bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22e7c50-524f-4ac5-83e3-145dfac14573",
        "cursor": {
          "ref": "abe1610b-8ac2-4205-92ab-81ccea63604b",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "125e9102-ee87-4070-9ca2-0c1503a89d58"
        },
        "item": {
          "id": "b22e7c50-524f-4ac5-83e3-145dfac14573",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cc7915ab-19d5-4f8f-b97b-380c1ff62fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9230c166-6a63-4561-a2e9-7195f0919090",
        "cursor": {
          "ref": "fb258cfe-236a-4702-89c7-67e25de84874",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8511a140-ea5d-4629-a576-63c614a9b874"
        },
        "item": {
          "id": "9230c166-6a63-4561-a2e9-7195f0919090",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6f9ed9bd-d6db-4305-9477-45bd4ebbbf0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1298c6-c736-48b7-b7e7-9782a7e953c7",
        "cursor": {
          "ref": "b828dd5c-e9ea-4a45-99f7-b3b48cb9294e",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5748c162-540d-436c-809f-7afb81c8467e"
        },
        "item": {
          "id": "fd1298c6-c736-48b7-b7e7-9782a7e953c7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bd6d6ac6-ce82-423a-9603-f53973b8c2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 364,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8398788e-6d2f-4a47-9e0c-09c6b7dadf98",
        "cursor": {
          "ref": "1cf3bc38-5a8c-48bb-ab29-b6cd4ad46b8a",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ad371625-4f1c-401e-8c1b-f51787151708"
        },
        "item": {
          "id": "8398788e-6d2f-4a47-9e0c-09c6b7dadf98",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d2588400-89c5-482c-a408-842ad5209068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91789d4d-b237-4a0f-aa7b-3de3243c3a46",
        "cursor": {
          "ref": "80f99efc-945e-47a7-93fd-e91fda0d8966",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c6e6bf13-2d69-4224-b37c-e99c851b0f5a"
        },
        "item": {
          "id": "91789d4d-b237-4a0f-aa7b-3de3243c3a46",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5f17f51f-ab76-4a09-89a5-bcc573e04f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6638d21-4488-4bd1-98b7-5d48dff2767f",
        "cursor": {
          "ref": "7e584d79-6763-40f1-9fff-e5745d5afdad",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "24b49790-cdf9-4200-adcd-9a26acc9ba84"
        },
        "item": {
          "id": "c6638d21-4488-4bd1-98b7-5d48dff2767f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e8b7c340-d07c-4e4b-8304-216fb83a8f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b2c6bc-2a17-4c4c-a299-d8c82f01d4bd",
        "cursor": {
          "ref": "956a1011-4158-46c1-a36c-0fb2465a141c",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "322700b9-833a-4617-b371-89c12f9309b5"
        },
        "item": {
          "id": "33b2c6bc-2a17-4c4c-a299-d8c82f01d4bd",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cceae109-424c-4dbd-8983-24a78dbd6e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d640a66-d134-4f41-8da8-ed64fde85273",
        "cursor": {
          "ref": "d4bcc71d-cab8-4109-ae09-0f4f5bb7dc6e",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ee5ce12a-0c13-4bf9-bfba-ba7de53a6edf"
        },
        "item": {
          "id": "8d640a66-d134-4f41-8da8-ed64fde85273",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2195046f-0128-4f61-92e4-9e4793405e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab20b034-ee7a-443d-8a6c-2e92607ebdf6",
        "cursor": {
          "ref": "61060587-e789-4c0c-b595-10315947d0b7",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ed515ebd-c5ad-4d63-b23c-d200a782edfd"
        },
        "item": {
          "id": "ab20b034-ee7a-443d-8a6c-2e92607ebdf6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4ae10fcf-b223-4f4a-a703-bdd195923b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b69264-069d-4b25-8718-a17910ad1c24",
        "cursor": {
          "ref": "45ab3d49-e3d9-4fc3-bcc2-2f77f76748ed",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ff03f82d-b650-45d4-bdd8-b2ea0c991ebb"
        },
        "item": {
          "id": "b2b69264-069d-4b25-8718-a17910ad1c24",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5be18e2e-313e-4a12-be29-3590f8270dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "45ed9ddc-c6c3-4706-afd7-18a26f66da44",
        "cursor": {
          "ref": "c6c60d54-5b6e-4b6e-83c4-ca4d5a116299",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cd6d3c57-ce18-4670-8d2d-8c7303985ae1"
        },
        "item": {
          "id": "45ed9ddc-c6c3-4706-afd7-18a26f66da44",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "507f57c4-12cd-487b-81af-19ae98816aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443df5f3-697b-43e7-af1e-056036519194",
        "cursor": {
          "ref": "c51dc2e8-bfa8-4284-900a-ec57412bdc73",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "888f913f-df4a-40f1-9d63-4d1594e44a78"
        },
        "item": {
          "id": "443df5f3-697b-43e7-af1e-056036519194",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d3d571f7-c482-4968-8af4-20fcccef0298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a569dc5-b6aa-4396-bff4-a5a0e931c9df",
        "cursor": {
          "ref": "bb8705ee-55e3-43fd-a07f-4e8805598012",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3870515a-7c33-4ec5-8780-42212ec14c34"
        },
        "item": {
          "id": "1a569dc5-b6aa-4396-bff4-a5a0e931c9df",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "acc15a77-f85b-4238-a584-de643c1ffb18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538af8d1-45df-4555-84d3-73b090bd8961",
        "cursor": {
          "ref": "3c0b257d-b807-42f0-a69b-051b1c91a0cc",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c0a594e2-4b8a-4c41-a250-a7185bc8bc79"
        },
        "item": {
          "id": "538af8d1-45df-4555-84d3-73b090bd8961",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "39c36a62-ec06-439b-a935-cc586b7073ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c6a458-41ec-420b-94a8-fe0335442749",
        "cursor": {
          "ref": "6860135f-805e-48f4-a7a7-fe14bf2da29a",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2431108d-b3bd-455e-bfaa-dce66499a8c1"
        },
        "item": {
          "id": "23c6a458-41ec-420b-94a8-fe0335442749",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "04eceecf-5043-4f50-836e-d0dac9fbd2f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fde966a-d1fd-4867-b7f4-29b65c35f831",
        "cursor": {
          "ref": "9d58c3da-9a8c-44a2-a0ab-02bc8f92eb4f",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f9eeb6f6-4ea8-4a1f-ac22-99e098cb4b9e"
        },
        "item": {
          "id": "6fde966a-d1fd-4867-b7f4-29b65c35f831",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cea2e23d-8836-47ae-a6f2-131a5c65e3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a8448a-eebb-4165-95b5-0deb2657fe67",
        "cursor": {
          "ref": "f805581d-fcfc-4c7c-83a4-51e54573ee61",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c9be53ea-e694-4f66-9614-a95a486dea2c"
        },
        "item": {
          "id": "49a8448a-eebb-4165-95b5-0deb2657fe67",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a9b90a60-f8d8-45d9-afb9-715888a664e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4351933c-a6ce-4478-acd3-0e17718e7a30",
        "cursor": {
          "ref": "fc0c7c6b-32f6-4aa1-b5fe-c6ceb3792dc0",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c9ac5eab-25cb-40de-8fff-c4188f107278"
        },
        "item": {
          "id": "4351933c-a6ce-4478-acd3-0e17718e7a30",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "32746287-3b6a-4a59-aa64-25c0a6ceb6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81992570-7d07-4193-985d-2801963707d7",
        "cursor": {
          "ref": "fdc19083-e58b-4908-b689-0f0be4c2912a",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f5018626-bc10-4f24-b70d-0fa4968b4662"
        },
        "item": {
          "id": "81992570-7d07-4193-985d-2801963707d7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f23dfcb0-9595-42fc-a97f-8e31349cddea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d400e06e-6b13-446d-89e8-0172e7b90d4e",
        "cursor": {
          "ref": "61c3c729-a5e5-428d-a848-287bba76a869",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0b8c4d97-8344-46b2-a14b-bf33edbc3d18"
        },
        "item": {
          "id": "d400e06e-6b13-446d-89e8-0172e7b90d4e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a2177a29-7513-4a1c-88db-fff76458b71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec364f1-ec2c-4f78-b237-74d5af4d5cbd",
        "cursor": {
          "ref": "3ccb62dc-aa6a-4c79-944b-fe9ca05e2910",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ed45fb51-3090-4331-934e-131614e2f7b0"
        },
        "item": {
          "id": "6ec364f1-ec2c-4f78-b237-74d5af4d5cbd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e4da9ce1-4b8d-4670-a719-c499f729558e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579d945f-1bd2-4118-9620-aad4a2600707",
        "cursor": {
          "ref": "3135c1c0-f071-41f4-81c5-7d66c0691a6f",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "abfe6775-2aab-4d87-936b-3280964a6bb4"
        },
        "item": {
          "id": "579d945f-1bd2-4118-9620-aad4a2600707",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "83b0aad4-7a97-4b11-9d56-6e51f7f553ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907d5625-9a79-4347-a56c-5e41ba1e4b63",
        "cursor": {
          "ref": "0985f84f-c8d3-4400-bb6e-18adc77b215c",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "06d96e94-66ca-4365-b961-a947973e5e3d"
        },
        "item": {
          "id": "907d5625-9a79-4347-a56c-5e41ba1e4b63",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d348fc8d-c8ee-4778-ae68-346031269b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da10c820-f4b7-4a9f-96ae-0ccc80eb1a64",
        "cursor": {
          "ref": "a963ae09-6f0d-43f3-a05b-6e20b3fffcac",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "204c7df5-fa78-4426-8b64-fe07eb13b911"
        },
        "item": {
          "id": "da10c820-f4b7-4a9f-96ae-0ccc80eb1a64",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "156cfe14-4c17-4084-9af7-ba3d769880f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93808b3-6618-4abe-90ff-4d2e4068fa37",
        "cursor": {
          "ref": "8bf1334b-bbf4-4664-832f-766cac15586f",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e5349219-9088-4870-b4a2-f281f1e942af"
        },
        "item": {
          "id": "c93808b3-6618-4abe-90ff-4d2e4068fa37",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "77501152-19a4-463d-b3f4-fd65fb93ef1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b25588e-a436-47ad-897d-3f3daf27d217",
        "cursor": {
          "ref": "78193bc1-bb1f-4124-9ef5-bbbe13845614",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b6733d67-c2ba-4da1-b1b7-046e3599f0ae"
        },
        "item": {
          "id": "5b25588e-a436-47ad-897d-3f3daf27d217",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8d3fb06d-dc8c-4a4a-98e3-2312b6c9a18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1115c686-8892-47f4-ab97-1a360394ed9e",
        "cursor": {
          "ref": "bbe977c8-3ec4-4974-9afe-2657a0fff846",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9e7fa9b4-5d4a-4e2b-a87e-98411ba54c96"
        },
        "item": {
          "id": "1115c686-8892-47f4-ab97-1a360394ed9e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4d5fdb85-ef86-4f31-837e-d922994287ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e5ca4c-f3d9-4ec1-81ad-5f8d14e804d6",
        "cursor": {
          "ref": "67039c4d-0b19-4935-b549-1139237a5c01",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "aff0558c-a53b-475c-9486-e710a03b9462"
        },
        "item": {
          "id": "88e5ca4c-f3d9-4ec1-81ad-5f8d14e804d6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0bed3982-5f32-420f-92e4-a6664fba6197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58be7b8d-73bd-4472-b590-5306e1124073",
        "cursor": {
          "ref": "564e1ecb-c563-4cad-85de-7d0fe3a6c2be",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0faa4895-07c7-4257-939f-63cbcd153393"
        },
        "item": {
          "id": "58be7b8d-73bd-4472-b590-5306e1124073",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3f592bfe-2dc7-4ece-9a5e-fc5fd3000033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53b6a1f-2e86-470d-8420-ec3274be4778",
        "cursor": {
          "ref": "2cfe5313-82d9-4a9d-a9bd-12251e4a01a2",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fa96fe81-fefd-4ec4-ba10-947195f8690f"
        },
        "item": {
          "id": "d53b6a1f-2e86-470d-8420-ec3274be4778",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "80c333e7-e9ca-4e61-b29d-f3374ade7e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc6e6b7-1384-4a7a-b6df-501a860dff4d",
        "cursor": {
          "ref": "7aa7c28d-39ca-4162-9343-f4089e0fa2c0",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "97953d9a-a8e5-40f1-8573-bc91420af4ec"
        },
        "item": {
          "id": "8fc6e6b7-1384-4a7a-b6df-501a860dff4d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a946f448-d11a-4784-8b6f-d6441ba69fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedf96f6-f523-47de-8488-462751784840",
        "cursor": {
          "ref": "c71ed5d8-e31f-4656-a819-d52ce3df77b5",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "75ce2ed0-9a20-43a2-a577-2d0908e2cda3"
        },
        "item": {
          "id": "fedf96f6-f523-47de-8488-462751784840",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a9711bdd-1796-4f21-ab86-ffdac7b4996c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45dd130e-24c8-4189-89e0-4bcb71d8bc52",
        "cursor": {
          "ref": "17ad191a-744d-4659-8fa1-1d0ed25aaeea",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3fe02359-f795-4ecd-9b2e-c1342a6d56d6"
        },
        "item": {
          "id": "45dd130e-24c8-4189-89e0-4bcb71d8bc52",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "10be9fc1-fb2e-4365-a1e8-2a008cce8461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0426b3c5-5c07-4698-b5f1-d5fd37b25fac",
        "cursor": {
          "ref": "62de1905-291c-4982-9848-bd3fd390df34",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5933cd19-229e-405e-a3b5-29b69ec17902"
        },
        "item": {
          "id": "0426b3c5-5c07-4698-b5f1-d5fd37b25fac",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "385e02e5-6feb-494f-9ee1-b2ea45ad2d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98b2ac4-a5a9-4d76-9fd5-3708a7eb2d7a",
        "cursor": {
          "ref": "4b2a452d-3c6f-4389-8eaa-67bad9d5eb4c",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d7ad5180-58f0-48bc-9449-9f32e8f9ff0b"
        },
        "item": {
          "id": "b98b2ac4-a5a9-4d76-9fd5-3708a7eb2d7a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "930f2e48-e56a-49b8-b5a8-f97b8440ec94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03031492-8060-4ca4-a036-dd3f2a8ab333",
        "cursor": {
          "ref": "7956dcf0-1bfe-4297-96fe-3645a81730bf",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "84d50737-5c0d-4a47-8c48-a8688729682b"
        },
        "item": {
          "id": "03031492-8060-4ca4-a036-dd3f2a8ab333",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cba4c0ef-e82f-4f21-861e-818159106891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04eb27f3-d14b-4107-9709-28d1caa485e6",
        "cursor": {
          "ref": "f514b2ae-455f-499a-bef0-8dbfd37fa81a",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1d67bed9-bbea-4300-898e-f5624b32ace2"
        },
        "item": {
          "id": "04eb27f3-d14b-4107-9709-28d1caa485e6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1d4dd003-60cb-4179-8d05-6c8a38d057d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126b8206-a91e-4e76-b6c1-4482654603d8",
        "cursor": {
          "ref": "e9a807f0-347b-4e38-bd2c-a88867603ebb",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ff20628c-6b10-45b1-98c6-6cd4dd960f25"
        },
        "item": {
          "id": "126b8206-a91e-4e76-b6c1-4482654603d8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6147cee4-3cb6-4492-a5d9-3c1d46cab045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fadb5fe-eefa-4953-acb8-17d44bc569d6",
        "cursor": {
          "ref": "bcbc6949-21e7-4888-852e-215262b773b0",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c833df08-0fd5-4be5-b612-09bf7c0893de"
        },
        "item": {
          "id": "4fadb5fe-eefa-4953-acb8-17d44bc569d6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "acde5727-8a62-46ac-940c-b7bc75310811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c1fb47-3073-437d-b2b8-108c9cb83872",
        "cursor": {
          "ref": "5be1597b-c612-4afd-9f08-892236ca6995",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b6213c52-bf9e-4e18-bd7e-2bddbd479c92"
        },
        "item": {
          "id": "d5c1fb47-3073-437d-b2b8-108c9cb83872",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "29fc0f96-5be1-4879-a05d-ba7eb05f458b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f49f8a5-3c0c-44cc-989a-09b7726951f0",
        "cursor": {
          "ref": "b666df31-048f-49b9-948b-ca9a12656eb4",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6e169a80-b1bf-405b-8ae3-f205e446e879"
        },
        "item": {
          "id": "6f49f8a5-3c0c-44cc-989a-09b7726951f0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5470edc9-a1a8-470e-9497-b3111d56a312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ff2639-79dd-4561-ab28-e296046423c1",
        "cursor": {
          "ref": "0ca04ee5-fc79-4ac4-837b-d52b1474cb10",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "acf26cd2-5cc9-4a9a-acd0-97c1fe7c9e88"
        },
        "item": {
          "id": "f7ff2639-79dd-4561-ab28-e296046423c1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "58c28dbd-f017-421e-86cc-d253ae5a896e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3090be-3dc8-4226-b684-c45d2babe2d9",
        "cursor": {
          "ref": "d2e0a0b2-9e47-4dbc-8293-31b668b84506",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "261f0fe6-b473-480f-b544-208cd518376e"
        },
        "item": {
          "id": "8d3090be-3dc8-4226-b684-c45d2babe2d9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "75bed419-c8e4-4150-9a84-c781386770c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703adedf-0187-4f6e-bdf1-feee6d61546e",
        "cursor": {
          "ref": "bfd3ae6b-d8b9-4473-a6f7-8c95c6a6b18a",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ecaf30fa-1e59-40b8-b703-399b2347459e"
        },
        "item": {
          "id": "703adedf-0187-4f6e-bdf1-feee6d61546e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b23b8842-7135-4209-8c42-18acd865e52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85f1c06-b2d0-4645-b7f4-2c129769e793",
        "cursor": {
          "ref": "4b1e35cb-b2d7-46bd-8136-9485d81b9ad7",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "69815a4e-6936-4656-afb3-c367d6554ec3"
        },
        "item": {
          "id": "e85f1c06-b2d0-4645-b7f4-2c129769e793",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a8027c41-38b4-45d8-96cd-aa25b0cff491",
          "status": "Created",
          "code": 201,
          "responseTime": 641,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "a8172eb4-de64-4d6d-823f-b97c49c14d77",
        "cursor": {
          "ref": "28dc10bc-e238-4171-9dec-696f16ecf178",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6f5bceef-4f89-499d-ac7e-ad5ba050361d"
        },
        "item": {
          "id": "a8172eb4-de64-4d6d-823f-b97c49c14d77",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d8c8fdde-1769-4f92-98e4-fd41e7162453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561ce923-6606-49e9-99f8-e73b09493116",
        "cursor": {
          "ref": "ae3c60a4-8f02-4945-b9a1-bd151afd2c88",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ee7a33cf-9c0a-4292-a864-55ad3f2aedae"
        },
        "item": {
          "id": "561ce923-6606-49e9-99f8-e73b09493116",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "eecb869f-aa3e-4c40-b16b-536f64eea05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55dc925d-2430-48f3-855f-53ef829722ea",
        "cursor": {
          "ref": "66e667dc-6fcb-4d1a-a64f-bd1e31eb016b",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "85004c11-96d3-433e-97e0-4c4eaecb237a"
        },
        "item": {
          "id": "55dc925d-2430-48f3-855f-53ef829722ea",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6776449c-47a3-4bdc-b5e4-6300488e7e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64db2288-9e5c-482a-a3b8-c23121dab0f0",
        "cursor": {
          "ref": "17b29c11-f392-4986-9ddd-317a2df5b494",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cc81ed2d-3dcc-41e3-a155-8438e24250be"
        },
        "item": {
          "id": "64db2288-9e5c-482a-a3b8-c23121dab0f0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "22badbc4-689c-42b2-8771-cfc682e34a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70dd0f6-5e93-4ea8-b3dd-54f836f5937c",
        "cursor": {
          "ref": "d8a29ffd-efed-483f-a61c-1cefd4ecf54f",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "08bf947c-e366-4022-9fd3-54a69383468c"
        },
        "item": {
          "id": "d70dd0f6-5e93-4ea8-b3dd-54f836f5937c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b10c1455-fbd4-4def-a167-8da189416a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f66289-2290-461f-a854-5fd9802f9a44",
        "cursor": {
          "ref": "cab06c48-3b16-4da5-8b7f-bc44717b6c27",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "96ef3a43-85bf-43f7-af0c-42e285b951fb"
        },
        "item": {
          "id": "46f66289-2290-461f-a854-5fd9802f9a44",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "15a38cab-34c8-4f87-91ee-940595370067",
          "status": "Created",
          "code": 201,
          "responseTime": 677,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "1c8ca2b6-442c-461f-a5a5-fdf389dcafd1",
        "cursor": {
          "ref": "8e46ae53-33f7-4851-a5ec-06b21c3f5022",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6f9871d7-6011-4903-8485-8742c132f3b5"
        },
        "item": {
          "id": "1c8ca2b6-442c-461f-a5a5-fdf389dcafd1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1dc68343-0a09-443f-837d-855c7b5476ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914dc3eb-7413-4ede-acbe-55fd2680aca9",
        "cursor": {
          "ref": "15ddb5ee-2a79-41b8-8774-5a6b7b1fad0e",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "55fbae2b-7982-4a89-85fe-590378f52f8c"
        },
        "item": {
          "id": "914dc3eb-7413-4ede-acbe-55fd2680aca9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7508e51e-24dd-4ab5-996e-e11608da68f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea797cb-7e31-4fa5-b925-fc3c80ba9aae",
        "cursor": {
          "ref": "44437ed8-c8d0-442d-a4f7-a380e2097750",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d777cef1-2704-4a79-a228-d58f287f5aed"
        },
        "item": {
          "id": "0ea797cb-7e31-4fa5-b925-fc3c80ba9aae",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8208123e-bbcd-4ab7-b9bb-782593e2fd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4155ed5-13a0-4230-9b6b-579224b576e4",
        "cursor": {
          "ref": "57fd5795-04d7-41c7-8070-aefdf5b0ad1b",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "93939a1a-ac58-461b-b93a-bcb63c65f08e"
        },
        "item": {
          "id": "b4155ed5-13a0-4230-9b6b-579224b576e4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "93450a8d-4a6d-4892-856d-dea36911a842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa906230-9744-4968-8014-c4c5f438001c",
        "cursor": {
          "ref": "4bf1a256-13da-49ac-b18f-dd6dfd001165",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2cee223d-ec4e-4f64-8481-7d1838039604"
        },
        "item": {
          "id": "fa906230-9744-4968-8014-c4c5f438001c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6963be04-5066-4935-ae87-d89ee1f7dd7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f96ab83-16ea-4b6e-85c2-60df56d606df",
        "cursor": {
          "ref": "9f3f8e09-09db-4eee-91a5-f67f7e6dbc38",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b913200f-fef6-4f1e-8331-a3b190398cd6"
        },
        "item": {
          "id": "4f96ab83-16ea-4b6e-85c2-60df56d606df",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2c163c8a-8b01-4f76-9bb6-e4cdab767792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3236189-6cdb-440d-b2fb-0ea90ce50946",
        "cursor": {
          "ref": "ce1d256d-367c-4823-ab17-59458e4d1883",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ce2ea2fb-54bd-4170-9558-ffdc902a98ef"
        },
        "item": {
          "id": "b3236189-6cdb-440d-b2fb-0ea90ce50946",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "51db30fc-4935-4234-8d0c-adc1e217476d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23564ea-90fb-4546-b305-a5f0b6e07291",
        "cursor": {
          "ref": "9caffba8-807b-4ef5-adb5-a8129070802b",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "63d0c66a-2b5f-4223-9017-00ac312a816f"
        },
        "item": {
          "id": "f23564ea-90fb-4546-b305-a5f0b6e07291",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "90a59564-b296-4c5f-83d9-0cc2ef8d67b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918e231c-9e06-4b88-8ebb-e39cfd92781c",
        "cursor": {
          "ref": "f21b64ad-22c4-44bc-b1bb-f05e7c753b06",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a8ccc11e-8fac-4c11-843c-cae25705fc2a"
        },
        "item": {
          "id": "918e231c-9e06-4b88-8ebb-e39cfd92781c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2263ee16-2cb6-4780-aaa6-0b8ef45628ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "691e7561-52d2-4821-8767-4f802fd36bd8",
        "cursor": {
          "ref": "f5c854cd-0d65-40bd-92f9-4e014860b12e",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7d5450bf-ef49-4ce5-964d-8a74190acbe5"
        },
        "item": {
          "id": "691e7561-52d2-4821-8767-4f802fd36bd8",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0e330ae2-74e5-44d4-9a3e-79ef9fb6c060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "341c02cb-9eb3-4fa7-9d7c-eaa49ebd67b3",
        "cursor": {
          "ref": "c59740f1-de32-4812-81c6-1dd02e7a45f9",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "35ea8760-dd65-409f-8d46-2bde0a037d2e"
        },
        "item": {
          "id": "341c02cb-9eb3-4fa7-9d7c-eaa49ebd67b3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f3f7870b-b300-479e-85b8-2bd2b4f7a03b",
          "status": "Created",
          "code": 201,
          "responseTime": 652,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ac9aa2-012f-4f32-a3a3-ed519ab7280d",
        "cursor": {
          "ref": "33286600-9f4c-486b-965b-b41c75c0818f",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "36b414d5-8051-46c1-9d74-38bc4fd48527"
        },
        "item": {
          "id": "f0ac9aa2-012f-4f32-a3a3-ed519ab7280d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f56bb22f-94b3-40ea-9c83-a3cfefa8eae0",
          "status": "Created",
          "code": 201,
          "responseTime": 629,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e041c01-b4e0-419a-a978-f3ac5c048c3f",
        "cursor": {
          "ref": "19b81003-2b7b-4249-8cf9-2db76a17ac23",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0b6d9470-6569-461a-8e9a-9d5ed27f90d8"
        },
        "item": {
          "id": "8e041c01-b4e0-419a-a978-f3ac5c048c3f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e101d1ec-ba14-49ed-9a47-9013d045f3d7",
          "status": "Created",
          "code": 201,
          "responseTime": 637,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fbc28c-4195-49ca-852e-adec7028819d",
        "cursor": {
          "ref": "dc60aaf5-6d4a-40a3-b7a5-98d3147bc21a",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2fd92ca3-e94a-419d-acd5-8a069a15d05c"
        },
        "item": {
          "id": "45fbc28c-4195-49ca-852e-adec7028819d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6fb81901-6100-4ac1-a9be-fd490a8b2124",
          "status": "Created",
          "code": 201,
          "responseTime": 637,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db4b43c-7f14-42db-88db-2f15478aec5d",
        "cursor": {
          "ref": "f3f03cf2-dfb6-4610-8cb9-5ca596d77536",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b2c0d3fc-0172-4447-9ae0-ff7db4791308"
        },
        "item": {
          "id": "6db4b43c-7f14-42db-88db-2f15478aec5d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9d5f2b05-7ad5-4d60-b4f9-14802de3c2e2",
          "status": "Created",
          "code": 201,
          "responseTime": 683,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "342f99a6-b313-4aef-9225-82cbb8ed6ac0",
        "cursor": {
          "ref": "5f9aa80a-2c0d-4280-861b-1e93f4e2f6e1",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "11f68b4d-45fe-43c1-9f8c-d4c82a075c8c"
        },
        "item": {
          "id": "342f99a6-b313-4aef-9225-82cbb8ed6ac0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "97f8ee40-2bd5-425e-8333-4eacbb62dd23",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "342f99a6-b313-4aef-9225-82cbb8ed6ac0",
        "cursor": {
          "ref": "5f9aa80a-2c0d-4280-861b-1e93f4e2f6e1",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "11f68b4d-45fe-43c1-9f8c-d4c82a075c8c"
        },
        "item": {
          "id": "342f99a6-b313-4aef-9225-82cbb8ed6ac0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "97f8ee40-2bd5-425e-8333-4eacbb62dd23",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "415ad1b3-a7d1-4a18-93f2-f8a4caa49f36",
        "cursor": {
          "ref": "2f6017fd-1256-4a40-9c2e-d61a5993da82",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "db1126d0-a64a-4f1e-9123-9398149d0112"
        },
        "item": {
          "id": "415ad1b3-a7d1-4a18-93f2-f8a4caa49f36",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0de06521-95e9-4473-84ab-604266f4ae93",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "9f122366-75a4-4bed-84c7-1fe0ae4cee52",
        "cursor": {
          "ref": "6dc4f9f0-fc39-4bd3-9d02-941ade56d855",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2c036af1-4b82-4f5a-b48c-5629e02cf385"
        },
        "item": {
          "id": "9f122366-75a4-4bed-84c7-1fe0ae4cee52",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "576bb559-3435-4882-bc38-81735b4dd32c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "57b8a33a-0658-41fa-b2a5-ae0a35c9a806",
        "cursor": {
          "ref": "6c8c1c52-7fc5-4fde-a32d-c55bdf76827d",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "59386ead-885c-4427-a7c1-40ceb24af2af"
        },
        "item": {
          "id": "57b8a33a-0658-41fa-b2a5-ae0a35c9a806",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f407e42f-8e09-4724-a5d2-4156c71a70b4",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "f4ead655-71f7-4753-85a3-cb8c99364830",
        "cursor": {
          "ref": "c760f010-4f9b-4632-a72b-08107c8a07e3",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4b9b46ee-dd2d-48e8-bca5-0bc09d04534e"
        },
        "item": {
          "id": "f4ead655-71f7-4753-85a3-cb8c99364830",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1b6b0491-c6f4-4c24-a038-7db05b2b85d6",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "5324e55f-32a6-4ce5-9ce4-36ab2718f7ef",
        "cursor": {
          "ref": "d1afbb8d-0e7d-4a56-a51c-6b0be795a0bf",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a9717bf6-8510-43a4-af71-cc1542003b35"
        },
        "item": {
          "id": "5324e55f-32a6-4ce5-9ce4-36ab2718f7ef",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a2d893b8-93d5-4ff5-bd6e-bdb83340606b",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "be8f5c92-f6c0-456e-86cd-60a6f4eed0d8",
        "cursor": {
          "ref": "14e08582-ef65-408d-b662-a350ab41bbd1",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "addb507e-93ff-4469-8c57-a7ad12bfd69a"
        },
        "item": {
          "id": "be8f5c92-f6c0-456e-86cd-60a6f4eed0d8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c0c067ab-2812-4ab3-8678-d31d29371cd4",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "ae769c2d-67d4-4f68-8e24-cb3772d22d78",
        "cursor": {
          "ref": "941d4970-efef-40e8-92d2-178c6a79ec6b",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "09570be2-ed68-4840-a33f-04cd1524d965"
        },
        "item": {
          "id": "ae769c2d-67d4-4f68-8e24-cb3772d22d78",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cd56a0b1-3d39-45bc-a6fb-5d3aa33059dc",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "19f56586-267b-4e8f-86c0-6708fc65ed6e",
        "cursor": {
          "ref": "c90f89d0-b6e5-4863-89d5-cf7381ffce85",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9e0ba44c-2e98-492c-a29c-6e1bc97c3416"
        },
        "item": {
          "id": "19f56586-267b-4e8f-86c0-6708fc65ed6e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2078e421-1abf-4bcf-a39c-9e04c77cf05d",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "1124c870-73d6-4ffd-8f65-996f883553f4",
        "cursor": {
          "ref": "26c25bad-775a-43d5-9d29-c2e6b9b6206e",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d86efd7e-2980-4964-b5a9-04c659c3404e"
        },
        "item": {
          "id": "1124c870-73d6-4ffd-8f65-996f883553f4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c864c5b1-1eba-4229-82ae-3d879f61aaf1",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "259cf048-e8f3-454e-864c-8811f237da02",
        "cursor": {
          "ref": "787dff05-b264-4837-b383-754fc47dd6ca",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e4ea9307-7658-4288-88ea-2b5472e4e98a"
        },
        "item": {
          "id": "259cf048-e8f3-454e-864c-8811f237da02",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b4c68b9b-b8a8-477c-b467-b5edca40b027",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "12f43f63-6571-4a12-9ea4-d8d8133e2b60",
        "cursor": {
          "ref": "2ea4ad03-d4b6-4765-ab00-05f4ef6a221b",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bf6dd35c-7bd9-4d7a-a064-f7634ed61e27"
        },
        "item": {
          "id": "12f43f63-6571-4a12-9ea4-d8d8133e2b60",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0d363c20-a6c9-4960-b754-7b4d2c712020",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "4a044514-f808-4bc2-ba93-3f5b7551082f",
        "cursor": {
          "ref": "1875043b-bee1-47ba-8a4a-08e7ec4d1948",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5ea38bf5-ca5c-43eb-b196-79f6ed443ba0"
        },
        "item": {
          "id": "4a044514-f808-4bc2-ba93-3f5b7551082f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "be90cd53-0638-416c-86ba-ae13206a6c19",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "2207f0b9-d6d0-4177-ae02-8bcaff66d7e2",
        "cursor": {
          "ref": "66e80f4d-9dcc-4a27-8cf2-d1c4ef0929fe",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3207d734-afc5-45c6-b81e-4b4106545652"
        },
        "item": {
          "id": "2207f0b9-d6d0-4177-ae02-8bcaff66d7e2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7a186b74-7ecf-49e3-9c92-bd4a93d3dff9",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "8cc9bd61-d656-4158-acc8-89ae1a32526e",
        "cursor": {
          "ref": "06d3c23b-fe2d-453b-bc13-8280123328a4",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9f1a15b3-44bf-4ca1-bc79-c534b076bc2a"
        },
        "item": {
          "id": "8cc9bd61-d656-4158-acc8-89ae1a32526e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fee7e090-c4f4-4d07-b694-13655bd3d686",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "6774850b-ff69-455b-992c-f309d0cbb1e4",
        "cursor": {
          "ref": "79890f55-25f6-4cfe-97a4-63471bd41053",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "880c781f-b792-4233-bfa9-ddb16f2383ac"
        },
        "item": {
          "id": "6774850b-ff69-455b-992c-f309d0cbb1e4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3395931f-e150-4935-8f2e-7d14ed10f627",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "61e41781-d21b-4511-a21d-04d3ffa174a2",
        "cursor": {
          "ref": "5fa8d728-e125-4b7e-9653-9410646dab6f",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "37e1b8ab-02ad-45a8-9755-4fd704e765e3"
        },
        "item": {
          "id": "61e41781-d21b-4511-a21d-04d3ffa174a2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d56c1881-8fda-43d9-b289-786ee7f16681",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "d75fedfe-7e16-4b07-ad2c-e7ff6077254a",
        "cursor": {
          "ref": "e037908e-f69c-4bcc-8503-728cc107c94f",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "12bf1abb-e0ae-4774-be86-8828c221cb16"
        },
        "item": {
          "id": "d75fedfe-7e16-4b07-ad2c-e7ff6077254a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c674f873-6609-4e30-9429-be9c8860d560",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "41969088-b38e-4f51-8804-fbf442c79a83",
        "cursor": {
          "ref": "5afeb5fa-d92c-44d9-9727-ed16916d0c5e",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "11ec665f-7fdc-42d1-a47b-fb3ac72ae818"
        },
        "item": {
          "id": "41969088-b38e-4f51-8804-fbf442c79a83",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "626394dd-96c0-464d-be57-8e7fd10f69ac",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "52ea3ec0-5879-445c-9acc-6e67cae0a354",
        "cursor": {
          "ref": "8aeaa3fd-baf7-4982-bb85-633d6a21d5ca",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "51d2c812-dfea-4cf0-a280-ae40364a2b17"
        },
        "item": {
          "id": "52ea3ec0-5879-445c-9acc-6e67cae0a354",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "468effc0-a509-46c3-93f3-c361620c5c5c",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "fb7a9f11-e7fd-4b70-98ed-5eab328c20ed",
        "cursor": {
          "ref": "97d9126d-d681-4d26-a75f-d74a8b614c58",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b3d67aff-7e99-48e7-b76e-34f1757c1ac9"
        },
        "item": {
          "id": "fb7a9f11-e7fd-4b70-98ed-5eab328c20ed",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c9fb9fe5-8ae8-4dd1-a201-0ae6c14f31b9",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c8e84f75-b66a-4e39-921c-e5e8a111916c",
        "cursor": {
          "ref": "89d5d50e-48dc-477e-9c39-ca07ebe98f7d",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "dbdca64c-0f3d-4976-bfe6-a28dc53ea8bb"
        },
        "item": {
          "id": "c8e84f75-b66a-4e39-921c-e5e8a111916c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "027dbfba-5de4-4b6a-a005-6b2f5d29fa83",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "db7e996d-ba5b-47f2-9aa5-60d9c2ac5e51",
        "cursor": {
          "ref": "ba79ec46-6bf1-4fdb-bd2c-2176922fc42f",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e787ff1e-a1da-402b-a785-5fe518ffc694"
        },
        "item": {
          "id": "db7e996d-ba5b-47f2-9aa5-60d9c2ac5e51",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a28835b7-db06-4ced-9e58-a71a81909db0",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "1b4733ac-7ecb-487d-9878-f5be146cd13d",
        "cursor": {
          "ref": "f09bab74-65c6-4b76-a811-d4d21640ca1e",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e61e9325-d60c-471d-aa42-09c833f57a4b"
        },
        "item": {
          "id": "1b4733ac-7ecb-487d-9878-f5be146cd13d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "96696854-d395-4447-aa23-cf2aeea372b4",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "5c69dfe8-3d8a-41ed-8758-84aefccd7351",
        "cursor": {
          "ref": "eb4f518a-90b8-420c-b76b-fcbd5d9f5eca",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "34403dda-b86e-4521-b8fa-6e6b1474613b"
        },
        "item": {
          "id": "5c69dfe8-3d8a-41ed-8758-84aefccd7351",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a0f13a20-9207-4094-b2d3-77cd058fe03e",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "c1f82f81-ccd4-4e87-8e4a-d7b78b870d45",
        "cursor": {
          "ref": "e0428524-655e-4f6d-b6ed-7a262dbfa25b",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "56e8b1fe-b708-4cee-987d-87e74e471ceb"
        },
        "item": {
          "id": "c1f82f81-ccd4-4e87-8e4a-d7b78b870d45",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "99d0afb7-593d-438c-a4ce-c990bbe2f231",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "e0813d0b-c1b0-41f4-91ea-1fa0e02bfc39",
        "cursor": {
          "ref": "83979fb3-5b7e-4bc5-baca-62217262fe05",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ac575d7e-050f-4bdf-b3f4-eacb1c968ba6"
        },
        "item": {
          "id": "e0813d0b-c1b0-41f4-91ea-1fa0e02bfc39",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "73f3dde1-c312-407b-9cd5-0a613d7030b7",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "2f6f1a00-d4fb-4374-9a18-be86fe88417d",
        "cursor": {
          "ref": "6afa3dbb-e6a3-437c-96bd-1834b5ecb8cb",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "68c06e07-c3c6-47e9-b461-9402fbcb0693"
        },
        "item": {
          "id": "2f6f1a00-d4fb-4374-9a18-be86fe88417d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c1e9d73c-29f4-4a89-8d1e-f9086a47636a",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "1f68c8ff-005f-4b95-9fac-2232cc479409",
        "cursor": {
          "ref": "98898e14-cff5-4200-9bb0-bc02010e0296",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "79868cfa-aac5-4ee2-889b-3997736e021c"
        },
        "item": {
          "id": "1f68c8ff-005f-4b95-9fac-2232cc479409",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c1d2ceab-f69d-408b-adab-92f5b169058b",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "35dab062-8fb9-4ae9-b4ea-ea7f7fd98786",
        "cursor": {
          "ref": "d9d8b807-7ec3-4f7d-97cb-bd71147cf3dd",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "786fcbf9-c9e3-439f-aee3-1901852ad37b"
        },
        "item": {
          "id": "35dab062-8fb9-4ae9-b4ea-ea7f7fd98786",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9626223b-54b1-452b-9e83-8ba7d8c6b645",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "b4d4d150-c861-4642-806c-3754178a6bbd",
        "cursor": {
          "ref": "57b5cc28-a53e-4b79-9024-af4df1d6bd7d",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "88042b1f-0fc6-4583-9d05-ced03fe5d9a0"
        },
        "item": {
          "id": "b4d4d150-c861-4642-806c-3754178a6bbd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "46c61559-744f-4f21-b97b-5486c301d5ed",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "03b5c8bb-fc06-49cd-8afd-c8b71c3dfd55",
        "cursor": {
          "ref": "57846e47-e668-476b-8b5f-3775a5fac5eb",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "132032fa-0b63-4aa6-a72d-28dfeb5693c7"
        },
        "item": {
          "id": "03b5c8bb-fc06-49cd-8afd-c8b71c3dfd55",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "091eb25e-a407-49b1-8964-e2a30b63e3bc",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b18e9920-9ffa-46a2-b58f-aa136544eaf6",
        "cursor": {
          "ref": "ddfba940-3258-4ac2-b494-7e68b64a4025",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d00f017f-62a7-4a3f-9ebc-cd8fa57431e0"
        },
        "item": {
          "id": "b18e9920-9ffa-46a2-b58f-aa136544eaf6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f76a624f-c933-419f-97ee-7a717e123bb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05980116-0663-4a5f-916f-037f2663eabd",
        "cursor": {
          "ref": "eaf06c45-1df1-41b1-946f-49cbaa24b55d",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f7e039d1-2fab-46c6-8b67-6e4a2e075918"
        },
        "item": {
          "id": "05980116-0663-4a5f-916f-037f2663eabd",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "896620da-67fa-4b01-9909-d25dac88c7e2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b279476b-44e9-4b37-9187-364ec2a64762",
        "cursor": {
          "ref": "83376fde-f365-4d48-99e2-90e7d5e625b9",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "37c0050b-aea2-441f-be29-24d895ec72bd"
        },
        "item": {
          "id": "b279476b-44e9-4b37-9187-364ec2a64762",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "da06e8f5-7201-4733-9ccc-e2f68305839f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b279476b-44e9-4b37-9187-364ec2a64762",
        "cursor": {
          "ref": "83376fde-f365-4d48-99e2-90e7d5e625b9",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "37c0050b-aea2-441f-be29-24d895ec72bd"
        },
        "item": {
          "id": "b279476b-44e9-4b37-9187-364ec2a64762",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "da06e8f5-7201-4733-9ccc-e2f68305839f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191ce239-0bd8-492e-a51f-9b1f7c379c2b",
        "cursor": {
          "ref": "35e07cb7-c031-4fe1-abdd-f0d5d178b7df",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f6a78938-7586-457c-8ba0-563a0ce67025"
        },
        "item": {
          "id": "191ce239-0bd8-492e-a51f-9b1f7c379c2b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c39b156e-7d06-4340-a22a-35ab7663e80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9759ace1-126e-453c-9ee7-52b74ed1a199",
        "cursor": {
          "ref": "f8e0e42b-9289-444a-abef-f0a52b547395",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a9e56476-e3af-40ef-99c3-35a06f883989"
        },
        "item": {
          "id": "9759ace1-126e-453c-9ee7-52b74ed1a199",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6acee160-ebaf-430f-b833-6f2b35fd5222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e610548-f9bc-4bef-95f0-7eb02fb1443e",
        "cursor": {
          "ref": "04b954c0-b386-4408-8189-742b9eb76de7",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "afdd7eba-9b8d-4535-a22e-2b58c1b53af9"
        },
        "item": {
          "id": "5e610548-f9bc-4bef-95f0-7eb02fb1443e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2deb3d0a-025a-49b9-8cff-10052726d79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9efd2df-2c38-4c06-b4b9-d9aea8b80ef8",
        "cursor": {
          "ref": "ca90641c-b37c-4029-92b2-64eec0fafb78",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "814e674d-9307-421b-b8be-173fbe6e400d"
        },
        "item": {
          "id": "b9efd2df-2c38-4c06-b4b9-d9aea8b80ef8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "032fd8f1-838c-429e-be9d-58367b06a1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3663a24f-2a63-4a4f-b532-98a54487f31a",
        "cursor": {
          "ref": "17e0bce5-639c-4011-8dae-b07006cf0b8c",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5620fef7-9378-4014-a658-c4e0f02f3c71"
        },
        "item": {
          "id": "3663a24f-2a63-4a4f-b532-98a54487f31a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "82b0ff52-8338-412d-9c1a-9f65add8c331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14b5b43-877f-46d5-9fd5-b4ca045210c5",
        "cursor": {
          "ref": "f0aa7fe7-8c7e-436d-82cf-4346d3ab2100",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "df6a3c06-393a-483b-b72d-60a914018d12"
        },
        "item": {
          "id": "b14b5b43-877f-46d5-9fd5-b4ca045210c5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "55a5d508-8a0c-4c63-a9de-bf9dbdd118a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04cab7ba-f88a-4e8c-87f9-53c004f0e1b5",
        "cursor": {
          "ref": "a058b3ed-fdd0-41cf-91d7-003074bd55e0",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "83b147a2-8617-4dff-9ca9-6a85c55ee408"
        },
        "item": {
          "id": "04cab7ba-f88a-4e8c-87f9-53c004f0e1b5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "27101d82-ca00-4049-8517-087be4d3f1ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3a7e50-a71d-48be-a9ea-f4ca6edfe1d7",
        "cursor": {
          "ref": "2b5063d8-222b-42ce-96d1-b5c1bf8a1b68",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2cbc568c-29ad-4c66-8a4b-607f4eee43cf"
        },
        "item": {
          "id": "be3a7e50-a71d-48be-a9ea-f4ca6edfe1d7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fd0132a6-013d-49c9-b6fd-7d5d48fba4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78613ad-cafe-43b1-93f0-b332254c88ca",
        "cursor": {
          "ref": "d7bdda61-e43f-4733-a526-2741a9922c10",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b4618964-738f-40fe-828f-377c89d1852c"
        },
        "item": {
          "id": "c78613ad-cafe-43b1-93f0-b332254c88ca",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e4517bb1-8c69-41bc-84de-1fd97190f69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db25ea5b-acc5-4172-a9e2-f81a282a114d",
        "cursor": {
          "ref": "0abf1a51-dced-47d5-b5d3-52d3e8bcecdb",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "78e7e75d-2786-49cc-a351-81071dfa67dd"
        },
        "item": {
          "id": "db25ea5b-acc5-4172-a9e2-f81a282a114d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8c8be0a4-d839-46f7-8342-cccd5c95dfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7b75d4-59a7-4402-b024-53da345910ee",
        "cursor": {
          "ref": "98ef94af-af5b-4454-8044-4728b5d29a50",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d85f2c41-8d08-4578-a765-9683b740fad9"
        },
        "item": {
          "id": "3d7b75d4-59a7-4402-b024-53da345910ee",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3810c259-2ea6-4bda-83b0-a62bcfd3befb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47caac4-cd5d-4df9-8123-72e31498c28f",
        "cursor": {
          "ref": "55d32e09-8986-4518-8637-dc9cb0928108",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "de5ed3f1-256c-4eac-84d7-a343ef5e15fc"
        },
        "item": {
          "id": "a47caac4-cd5d-4df9-8123-72e31498c28f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "250e9f55-b355-48aa-9b33-35e0e0b9cbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3454fcdf-4a60-4ddc-8193-b954082a75e7",
        "cursor": {
          "ref": "de29f7ed-1b68-45e9-8827-4287ce09a8c7",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "77328d8c-2f19-44ad-9ba6-fc76caef964a"
        },
        "item": {
          "id": "3454fcdf-4a60-4ddc-8193-b954082a75e7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6ca6c58a-baae-47d4-8bb6-503d1f441646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d359357-46d5-4ab8-b3a2-57a6deb141c6",
        "cursor": {
          "ref": "65086890-702b-4a80-b180-1ef08589fc09",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "12bf0f13-61ca-416f-8dda-6b7144ec6ec7"
        },
        "item": {
          "id": "1d359357-46d5-4ab8-b3a2-57a6deb141c6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fc1e1e11-03de-4208-91c8-4e8453812e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4500011d-5183-4ddc-a6e7-83df3155824a",
        "cursor": {
          "ref": "5aa580eb-6afd-4fc5-81f9-085ec586d08f",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "276972e4-470b-438d-97a7-40667e85b7be"
        },
        "item": {
          "id": "4500011d-5183-4ddc-a6e7-83df3155824a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c6146e19-d7bc-4d31-a85e-224b545834aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6282d94f-6b51-493f-8681-fd0b0960a644",
        "cursor": {
          "ref": "63962088-aa1c-4da7-b5ed-87b1a017173c",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b783176a-f84f-452f-ac3c-1ff796b8cc46"
        },
        "item": {
          "id": "6282d94f-6b51-493f-8681-fd0b0960a644",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "681bd9d5-a776-4cf2-aeef-842db6a93d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7edcdf7c-527a-4c0b-8cfb-42ffd90c33f6",
        "cursor": {
          "ref": "8616c71c-e68e-40bf-a71d-3513b76dbc12",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "970d8753-d913-425d-aba8-60ddeef9e255"
        },
        "item": {
          "id": "7edcdf7c-527a-4c0b-8cfb-42ffd90c33f6",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "f6f607d8-302a-43e2-a131-8a18ca08e3cb",
          "status": "OK",
          "code": 200,
          "responseTime": 560,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "53dfdaf4-c15f-4738-b5c0-7109dd342bf6",
        "cursor": {
          "ref": "7f929c7b-8941-4e3a-9257-c98389aff844",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4641bc4e-6cab-4238-b7bb-d8f0f3cbb7a7"
        },
        "item": {
          "id": "53dfdaf4-c15f-4738-b5c0-7109dd342bf6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "24a4a175-c6d9-46e2-844f-3f5841b814d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3281637a-5c80-4d9b-8c94-19c1a035db6c",
        "cursor": {
          "ref": "c047e4de-9172-4bd9-9332-564697967519",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ba3dded4-c3ad-4a97-8f71-5c03f6c2780a"
        },
        "item": {
          "id": "3281637a-5c80-4d9b-8c94-19c1a035db6c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "16b3812e-1c53-46d3-8658-a5ec9c645896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f7f97c-02da-446c-92d7-f58e17f6b59a",
        "cursor": {
          "ref": "c12ebd74-3750-4fef-8799-dd5a0b38962e",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e89f3752-4db0-4c12-a252-15b34335f40d"
        },
        "item": {
          "id": "66f7f97c-02da-446c-92d7-f58e17f6b59a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c3b79286-21b2-48ff-9b11-aebee4ad9c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9aa8dbe-63cd-46d6-b306-73c13ca981b2",
        "cursor": {
          "ref": "63bf81a5-190f-4fd4-893b-c06ad2dda21c",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "08f799ac-8c53-4e61-bda6-e8b06c17a989"
        },
        "item": {
          "id": "c9aa8dbe-63cd-46d6-b306-73c13ca981b2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "533601eb-d159-44a2-b2c2-8439c03bcfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9570176a-f757-4f18-a0af-da85f47c67a0",
        "cursor": {
          "ref": "446dffb6-18c2-4eb5-a77c-4049a9dc7166",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "33bfa381-6ea2-4d59-90ab-3de7398a4aa4"
        },
        "item": {
          "id": "9570176a-f757-4f18-a0af-da85f47c67a0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "dbce33d6-4fbf-4585-b08e-1cf05e47d709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1259ec56-6a7e-4fe9-a15e-d1ab5a512a0b",
        "cursor": {
          "ref": "28daaff2-4ba0-4ad8-81ee-c71a5121ae33",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ec0fbeb8-636f-4f8a-906a-48a47451a01e"
        },
        "item": {
          "id": "1259ec56-6a7e-4fe9-a15e-d1ab5a512a0b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9a36ed3f-1c13-4fa5-8b14-2312597f67d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376ac23f-a95f-447d-b99d-902d83e49732",
        "cursor": {
          "ref": "7b6e7742-47e9-46a9-9838-bba8c8162b58",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "68e15ed1-ef92-4cbb-a0bc-eee9da4a6751"
        },
        "item": {
          "id": "376ac23f-a95f-447d-b99d-902d83e49732",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cd0480b6-c916-41f1-9fd3-f85781674808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb4d123-2c1b-439c-a1ae-0465110398fd",
        "cursor": {
          "ref": "071d2f0d-d12a-46c7-abb7-91ad623c9cb1",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "57b8612d-559b-4b83-bd79-6af3cd5aca27"
        },
        "item": {
          "id": "0eb4d123-2c1b-439c-a1ae-0465110398fd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "62ea264c-4556-4e9a-b85b-90fb87b9b3ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5396b444-abba-4714-89b6-52228205b86f",
        "cursor": {
          "ref": "a8fd6713-b9b8-40c3-a841-13d14e8693e3",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d2d646c8-09c2-4ab8-ba66-c52bd4ecac37"
        },
        "item": {
          "id": "5396b444-abba-4714-89b6-52228205b86f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "fbbe6fb5-5e3c-49d8-b39d-602d7fd2b1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db700a5-fb09-4314-a646-f2a587711f27",
        "cursor": {
          "ref": "9e4cd33b-113b-4ce6-9a42-1e1788bb920a",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9d51448e-642c-4198-bfc7-af55020415f6"
        },
        "item": {
          "id": "3db700a5-fb09-4314-a646-f2a587711f27",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a6c24bce-c7ee-4872-a92a-61dae26206bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8e3701-c85e-4e75-8492-adb239e61f86",
        "cursor": {
          "ref": "9bf62c7d-166c-40df-b8f4-980b4ced2fa6",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8c2a847b-e974-4d29-868b-1e7ac20f0744"
        },
        "item": {
          "id": "6a8e3701-c85e-4e75-8492-adb239e61f86",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5108dcb3-fb29-44eb-91f6-0cac61a78f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa9b621-8575-4def-acbb-9f511259a5fa",
        "cursor": {
          "ref": "d20b65d1-4f47-4ecb-ae9e-82ff3d0a8ae6",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "37162d91-bfa0-4d94-bb8e-5962ecb60a06"
        },
        "item": {
          "id": "6aa9b621-8575-4def-acbb-9f511259a5fa",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "388d9056-62e7-42b3-a2c6-aeb8e1186250",
          "status": "OK",
          "code": 200,
          "responseTime": 226,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "49f0ba00-c4f2-4636-9d80-1af3fbbec5d2",
        "cursor": {
          "ref": "ed9791bd-b651-404a-b3b5-2b46b78c1c87",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a0d6f3d6-2360-40b0-babb-fa2e1bf72948"
        },
        "item": {
          "id": "49f0ba00-c4f2-4636-9d80-1af3fbbec5d2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c3819128-dcf1-43b4-86e1-57a2bee3c718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89dcfaa8-50a6-4fe0-b401-934bace4fab1",
        "cursor": {
          "ref": "b0d979c6-8318-44eb-8bc3-0ad908d5fd40",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "55412544-2b4f-4c38-91c8-1045f0a63e3c"
        },
        "item": {
          "id": "89dcfaa8-50a6-4fe0-b401-934bace4fab1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f4bdf324-15f7-4fea-a1eb-eef7847c8321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450180b7-b394-4fb0-ae2a-b4da2a86726c",
        "cursor": {
          "ref": "b11e11ab-c779-427f-b424-091a75c84ea3",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9dacc250-953d-4d6b-a8ba-87a3748da9a9"
        },
        "item": {
          "id": "450180b7-b394-4fb0-ae2a-b4da2a86726c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "52519125-2f00-4547-8026-53d9b2cae53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1c0995-a028-4642-a6b0-a140b32ed484",
        "cursor": {
          "ref": "6728fd84-a1bf-46aa-8bba-c829521a61d2",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "83cdc9cd-057b-4445-b0ec-d64a96ab4d74"
        },
        "item": {
          "id": "ce1c0995-a028-4642-a6b0-a140b32ed484",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "21568d3b-36a8-48bf-a4c8-e3f6b5dc9ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a583da-c7f8-4d31-82f2-863688e2f34b",
        "cursor": {
          "ref": "6428dedd-2ecd-4de8-9228-bad6bfc2d89d",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cd5112da-4a5e-4854-8497-c9372d3da602"
        },
        "item": {
          "id": "b8a583da-c7f8-4d31-82f2-863688e2f34b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1e7f94a2-2fd1-4c89-8e7d-34a20a0fad62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99613ada-a3c5-4cc9-9c43-b928e506b253",
        "cursor": {
          "ref": "867808e2-247b-4ffd-8e47-72a0dec4c958",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "09198e02-6199-4c78-8bb3-d8de32e655c8"
        },
        "item": {
          "id": "99613ada-a3c5-4cc9-9c43-b928e506b253",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "47decc4d-fbb9-4916-8c70-bc692f56e34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195bbc46-6f2b-42ab-b90f-ca7d43b298a8",
        "cursor": {
          "ref": "fe57dea2-7978-4691-b26e-2428128883cf",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f8f84623-5965-491c-a712-d829786669ff"
        },
        "item": {
          "id": "195bbc46-6f2b-42ab-b90f-ca7d43b298a8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5f6674cb-9e7a-41b8-b8b6-01f6f6af47e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87959cf0-b7bf-4e7b-9dfc-9cdf71cf05f4",
        "cursor": {
          "ref": "440c356b-10eb-40ca-a62a-d15dcd5357e6",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9d792e49-b6c9-4f7b-a0b3-afa1daddd69c"
        },
        "item": {
          "id": "87959cf0-b7bf-4e7b-9dfc-9cdf71cf05f4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d70c8283-df1b-45ad-a68e-05644172e422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3530d272-292a-4578-bbca-e80cc25a38bb",
        "cursor": {
          "ref": "42dec925-8211-4f26-ace7-a71da2c7b88a",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f54574b9-9962-4ad5-8f7f-f61d75c388c4"
        },
        "item": {
          "id": "3530d272-292a-4578-bbca-e80cc25a38bb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b8dcc236-1aef-4840-a1e1-3313a597dd36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69b6300-5bb8-4c24-a0d3-4cfbdcc53839",
        "cursor": {
          "ref": "b1e6d715-5988-4cc1-b136-6f67ef7382b8",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b8e02d3d-2fc9-485d-9a46-a6f0a4e130f0"
        },
        "item": {
          "id": "e69b6300-5bb8-4c24-a0d3-4cfbdcc53839",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bd723442-5023-4f44-a583-b63ae9dfd635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 414,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad69513-41c4-40fc-b758-ecea9d541ea7",
        "cursor": {
          "ref": "03d2099d-e54e-4878-a033-570765ff1ce2",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bec39fe3-3f81-4744-ac16-58362841f859"
        },
        "item": {
          "id": "8ad69513-41c4-40fc-b758-ecea9d541ea7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "18cd96fd-4c7f-4cd6-b2b7-b8493726c7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 303,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869e2cae-0304-4a6e-b8f6-2a43df71722e",
        "cursor": {
          "ref": "d1e01c16-6239-4028-9879-acaa6f4e988c",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "642f0164-0af2-44fe-bfae-4927f51f3e73"
        },
        "item": {
          "id": "869e2cae-0304-4a6e-b8f6-2a43df71722e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "42815dd1-8389-41f2-94dd-53f1df753f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280bb37d-b6b6-4d3c-9803-4746c7dbc2bd",
        "cursor": {
          "ref": "064e6fb7-0fe3-424d-97fa-895e4ba6ad68",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "70600f15-20e9-4bf7-a1ba-a71201b5bb7a"
        },
        "item": {
          "id": "280bb37d-b6b6-4d3c-9803-4746c7dbc2bd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "479f43f5-cab2-4239-adb4-987624c34fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7c3854-4032-4736-a6ed-a78d2f801777",
        "cursor": {
          "ref": "0433ca49-bae0-4543-bfdc-a9cb57d9f592",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "68e38e52-236e-4132-8982-3f876ea0caf1"
        },
        "item": {
          "id": "3a7c3854-4032-4736-a6ed-a78d2f801777",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "71555206-7d69-44f6-bd42-7e994c4120bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad85a30-41e3-49f0-8417-734f7359c739",
        "cursor": {
          "ref": "feabc23f-feef-4c0c-b522-68c023969978",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1e99567a-3a63-4aa6-a589-8371575c2438"
        },
        "item": {
          "id": "fad85a30-41e3-49f0-8417-734f7359c739",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5bbb3f6d-4297-4510-9001-e298a752c887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f847f2ae-4f2a-49c1-bf94-6ce5cc87192b",
        "cursor": {
          "ref": "82c1f743-30b9-412c-8b54-5767bf2e3844",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dd65203a-d918-457c-aa7c-dbbbee791936"
        },
        "item": {
          "id": "f847f2ae-4f2a-49c1-bf94-6ce5cc87192b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ab8de946-1648-4ec5-bb7b-ee4afe101aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac1febe-cc06-48cb-84fd-05e58e6e3f6a",
        "cursor": {
          "ref": "2db28f81-036d-463d-a205-9aeccc8506ce",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2f75df3a-7e95-47d6-827c-3551fc365459"
        },
        "item": {
          "id": "bac1febe-cc06-48cb-84fd-05e58e6e3f6a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "55cdb327-4e14-4fc8-9b13-77404ed2d065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca3a62b-c63e-4d28-aa6c-070ec3006e01",
        "cursor": {
          "ref": "2f5026db-8684-4451-8268-e5de81a89f49",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8eddf745-f9b0-4160-ad40-d2cce41b6aaf"
        },
        "item": {
          "id": "8ca3a62b-c63e-4d28-aa6c-070ec3006e01",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "55489d01-edb9-4b29-94b7-228963d8489f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79fc5f6b-3d78-4fbb-ae0f-ff83ed91aca8",
        "cursor": {
          "ref": "9f2c772b-79d1-49f9-b4e2-4ff3d7863776",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "911905d0-a903-4e66-bb56-2acc76c08f6f"
        },
        "item": {
          "id": "79fc5f6b-3d78-4fbb-ae0f-ff83ed91aca8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1f3a0472-71ac-4134-9633-ed35e904e436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4972defd-b8b3-479d-91e1-35c8f2dbbc94",
        "cursor": {
          "ref": "07f77601-0283-49ad-933b-4171dde852ce",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5e84484a-7dde-4e0d-8252-2c37ecd9ae21"
        },
        "item": {
          "id": "4972defd-b8b3-479d-91e1-35c8f2dbbc94",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2b0ef9ff-12e9-447c-a1a5-59c7afa75986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab7090c-e46f-4362-bab8-4f895bd38ac8",
        "cursor": {
          "ref": "02026130-6b2a-4c50-97fc-ce324ce5573d",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6c84c98a-8c7e-42e8-a9cc-60e0d25bb090"
        },
        "item": {
          "id": "bab7090c-e46f-4362-bab8-4f895bd38ac8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c406693f-e5fb-454b-af64-c3edefa286da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a46820-c494-49c2-9d15-4be907c215e8",
        "cursor": {
          "ref": "60769ea9-df92-4241-937c-843792c7e543",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0ae109b1-dfe7-4fb0-ad37-bc71f384bff3"
        },
        "item": {
          "id": "a0a46820-c494-49c2-9d15-4be907c215e8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2e278f86-071d-4f6f-a5a4-e2700399c7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7247da0f-6e9e-4a5a-8828-af5b3e1afb38",
        "cursor": {
          "ref": "4c3afff5-31f0-4633-9ca4-919fd90a606f",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3f9a59d1-4c07-4c04-8f0d-427f3fd2ed63"
        },
        "item": {
          "id": "7247da0f-6e9e-4a5a-8828-af5b3e1afb38",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b47a29e7-ee2c-41e9-abab-e31dcce1e7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bddfe4-8223-40b5-938e-91d661fa691d",
        "cursor": {
          "ref": "7da04f48-4849-4211-adc4-7f45a75457cb",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c80c17eb-f870-4e27-b201-0e0aec6ba14b"
        },
        "item": {
          "id": "05bddfe4-8223-40b5-938e-91d661fa691d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "074201c6-a83f-48ee-a48f-8f809f155457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d148a0-f714-4d66-a68e-3d1180cb3fc1",
        "cursor": {
          "ref": "bd803643-ea9f-4987-8d35-e371c9d26cd1",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5a95e5dc-4fa7-4190-878d-a18e4ffcb438"
        },
        "item": {
          "id": "08d148a0-f714-4d66-a68e-3d1180cb3fc1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4e5bb37f-baec-4824-9c3b-0aa2f5d6677d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bde3fe9-7889-4abc-8991-15ae7de11c76",
        "cursor": {
          "ref": "6b164d5a-34f6-4d2a-8d23-1234223ec9e8",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "eebd3142-37cb-418b-8895-01acd2576300"
        },
        "item": {
          "id": "4bde3fe9-7889-4abc-8991-15ae7de11c76",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "25a70d46-8409-4799-b501-d027b8d33b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02bbd91-df32-47f7-a53e-84510badbf6a",
        "cursor": {
          "ref": "e224dbd6-dd97-4143-a8e9-cd055efa029f",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "14577254-b10b-46b1-b613-404f7eae1245"
        },
        "item": {
          "id": "c02bbd91-df32-47f7-a53e-84510badbf6a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4b67d047-e137-4cb3-88b2-ab1306492b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1906d8c1-29b2-491e-86ab-ba995177c2a8",
        "cursor": {
          "ref": "93d54c23-d203-4b06-84a7-cf1eb5efa855",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e92ff74f-d4dd-4303-8bff-06d5157c6139"
        },
        "item": {
          "id": "1906d8c1-29b2-491e-86ab-ba995177c2a8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b4a1cbbe-193f-4b02-a883-0fc0a6148980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39754eac-f16b-49f8-8ea7-e4a23ca011c1",
        "cursor": {
          "ref": "c6ba1046-b707-44bd-9c38-4f279c3497d8",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5f297db6-0302-434e-a85e-85100236772f"
        },
        "item": {
          "id": "39754eac-f16b-49f8-8ea7-e4a23ca011c1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a1e54e60-94c9-4da1-b96b-82a418527d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64f512a-a694-4c65-a944-4b7235282792",
        "cursor": {
          "ref": "6a70ba14-c820-40b4-893f-404b86a62544",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "26addd1f-f5f5-4179-b361-9f23d1d52fe1"
        },
        "item": {
          "id": "e64f512a-a694-4c65-a944-4b7235282792",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "abe432f0-d939-4020-8318-ad9099f77f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ef2526-ffa2-48b3-997e-c3eb67ae1419",
        "cursor": {
          "ref": "4b9e4133-0eef-4582-9c09-1fd46399e8af",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "83f83b79-7054-4679-99af-532b0c3b79a0"
        },
        "item": {
          "id": "46ef2526-ffa2-48b3-997e-c3eb67ae1419",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "69ada396-55e8-49ac-92e4-7a3caeccaf65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e8984b-afcb-4bfd-a52c-88a15a059820",
        "cursor": {
          "ref": "b3449512-2b6b-4205-9ff1-82ae30792481",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9e899e5a-de39-4873-9fb5-d58b26d595bb"
        },
        "item": {
          "id": "36e8984b-afcb-4bfd-a52c-88a15a059820",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1e0e8018-c673-4046-855a-a7a8ec020d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9670de0f-b718-47a2-97fa-32158365abec",
        "cursor": {
          "ref": "3a16d258-ec82-4847-9823-a4b2a4792688",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "05b17123-1add-46f5-8c2c-b832d363a860"
        },
        "item": {
          "id": "9670de0f-b718-47a2-97fa-32158365abec",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5f8b1517-3082-450c-bd00-f7dff804a4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "277470d6-e485-4cb0-a4d6-5b07c2a23e8f",
        "cursor": {
          "ref": "416876cc-99db-4961-b052-f52da1810e60",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "984cb721-ce08-4cc8-8d2c-96f044147bd2"
        },
        "item": {
          "id": "277470d6-e485-4cb0-a4d6-5b07c2a23e8f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "57408e1a-b994-4105-91cb-c18ae63372a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca43bc1-d86e-4b67-a498-d9d570542820",
        "cursor": {
          "ref": "086e86ea-a658-4196-994d-4af2150041cc",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "73217514-0bc8-4065-aa6c-b8835f49889b"
        },
        "item": {
          "id": "8ca43bc1-d86e-4b67-a498-d9d570542820",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "97f77800-0010-4394-9aac-e5d7d32a824d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a843bc95-f235-40e4-a7f5-096682a80f8a",
        "cursor": {
          "ref": "11663603-51b6-441e-940c-ee6ce94148c6",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4773e02d-cab6-4c43-a1ef-8a74c23a7993"
        },
        "item": {
          "id": "a843bc95-f235-40e4-a7f5-096682a80f8a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6ab271d3-6315-45fd-bf1c-10192541c6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc7d3b9-079a-4428-81ca-074535901728",
        "cursor": {
          "ref": "048a6890-08bc-449b-a044-7c29f77d43e7",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b4f0ad6b-fdc9-46f3-9b7d-289fbfcaa754"
        },
        "item": {
          "id": "fdc7d3b9-079a-4428-81ca-074535901728",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4614097d-c424-43a9-83bf-eca4dd980e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4a4a51-cb5a-4f93-ac44-224c48477170",
        "cursor": {
          "ref": "8154bccb-71bd-419c-a34d-bd52083d113e",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "400a07f0-1b65-4b3c-88ee-33f3040b4d91"
        },
        "item": {
          "id": "ee4a4a51-cb5a-4f93-ac44-224c48477170",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d72b7914-f0ef-40cd-b499-8ac468579cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d938be-4606-440e-9c23-0d2d15c600af",
        "cursor": {
          "ref": "ea644db9-1cbc-4b05-9049-c91e3e5d1ec2",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7afbcc0d-7919-401f-bb2b-7769cedd75c8"
        },
        "item": {
          "id": "75d938be-4606-440e-9c23-0d2d15c600af",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bb88bb33-f4ae-42a7-aaa5-30dbc61fe0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2345897c-1e67-47fb-8fcc-a203784eaba8",
        "cursor": {
          "ref": "ef4e67e8-a95a-4d13-b1d8-0fd12a903059",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c3625035-c9d0-46b6-94f9-411bcdda081d"
        },
        "item": {
          "id": "2345897c-1e67-47fb-8fcc-a203784eaba8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "34b8a8cc-8992-4688-8f57-8bfa9e502027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f081e2-b03c-4a29-b2aa-4ba877c34f42",
        "cursor": {
          "ref": "049100cc-6f37-4526-9c34-092de5f877e8",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "48b5d384-0d35-4139-837f-0c6fb0d360d7"
        },
        "item": {
          "id": "78f081e2-b03c-4a29-b2aa-4ba877c34f42",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a56e83c1-cd66-4079-a0a3-aee80d2a5962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de67c6b7-1920-4720-a242-1c06efc0443e",
        "cursor": {
          "ref": "1c4c89af-f664-41f6-9084-1ed0fc913f13",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fae0b5e3-65fe-4f89-9102-8ac1b87d18ce"
        },
        "item": {
          "id": "de67c6b7-1920-4720-a242-1c06efc0443e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7eb1fd91-b78e-4cf7-9dfa-5b849224f930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe53305-e67d-45e4-b3b4-d89ddecef9d3",
        "cursor": {
          "ref": "d9a9a33d-7c60-4341-ad56-4950c59ef438",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1fa899fe-7f7f-4c2c-a527-1177eea6fcea"
        },
        "item": {
          "id": "5fe53305-e67d-45e4-b3b4-d89ddecef9d3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0755d7ab-56fc-40a1-899d-55a6a85f51c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1673ee2-cf05-4847-a4b9-d5fe083dd651",
        "cursor": {
          "ref": "f537c278-0ba7-48e5-92ed-8f01ec6c0b87",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "aef4449f-1968-4845-92c9-c3412f0910e2"
        },
        "item": {
          "id": "f1673ee2-cf05-4847-a4b9-d5fe083dd651",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "02a9400f-2ed7-4926-9a1b-7b28d8771aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf65dac0-8110-4250-bee0-1458d971aa84",
        "cursor": {
          "ref": "222f5d11-b26f-4949-81f7-0fcbbddff6f2",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c9b1aa17-373d-4e23-9d4e-f82b2669aeb8"
        },
        "item": {
          "id": "bf65dac0-8110-4250-bee0-1458d971aa84",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4be1c9d8-7155-4414-bafb-66260af68747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a8a6d4-5f77-4840-a574-6a8ed8057309",
        "cursor": {
          "ref": "e60f7fcc-22b0-448e-8430-83dc4015d9e9",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cb9e9b04-fc5c-4413-96bb-b60f74b5074d"
        },
        "item": {
          "id": "e1a8a6d4-5f77-4840-a574-6a8ed8057309",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "76f6080d-18cd-4a92-9c17-026c6d06615a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9398136-77ec-43e4-a94a-453cbb9c6fd5",
        "cursor": {
          "ref": "51a6a154-8ac2-4b2b-8c52-100e62b9ca57",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4be82316-5f37-4b85-9202-fb124b9a36c4"
        },
        "item": {
          "id": "f9398136-77ec-43e4-a94a-453cbb9c6fd5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "390e7257-6b1a-454a-9eda-0cbc98b9acd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e3dffe-e1e7-4cc2-a228-32722f20cc14",
        "cursor": {
          "ref": "e45facb3-a319-4516-b4d1-a32bb54c76d1",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c1e69b81-680c-47dd-b2d9-e4afb2c10613"
        },
        "item": {
          "id": "d4e3dffe-e1e7-4cc2-a228-32722f20cc14",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b4c8d03b-46c8-4d57-ae9a-b6456bb05cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0de49b-c624-4061-b710-9b80e1d887bc",
        "cursor": {
          "ref": "036268d1-a95f-49d1-8c79-2e42c5d6d5dd",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6ff48bb3-fd07-413b-81fa-ee86d05b6749"
        },
        "item": {
          "id": "eb0de49b-c624-4061-b710-9b80e1d887bc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "dad1edf7-eaef-4021-9c34-7e058b8478d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a8c486-7a41-4ea6-b25a-b2a55d4d95c8",
        "cursor": {
          "ref": "20aca189-3dca-4029-b0b4-c018c059d96b",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1dd4587e-110b-4b89-8539-d3225af8c530"
        },
        "item": {
          "id": "e2a8c486-7a41-4ea6-b25a-b2a55d4d95c8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2ab9ad2c-4ffc-4c68-8a5a-6cf7e7800dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36ae388-738e-4533-85eb-f2f7fbff0b0d",
        "cursor": {
          "ref": "d66eb759-86d1-4c5a-99d8-ab8a831eba23",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8c616523-599f-4f8c-ba10-36b13d0bd8d3"
        },
        "item": {
          "id": "f36ae388-738e-4533-85eb-f2f7fbff0b0d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fb790a47-186d-415e-9924-8d04dfe719b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4286bd0-9e47-49d7-831c-003244c92b31",
        "cursor": {
          "ref": "58981fe6-8acb-4895-8e44-42f8a8153e01",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b47098eb-23aa-462a-af60-b09a190277d5"
        },
        "item": {
          "id": "c4286bd0-9e47-49d7-831c-003244c92b31",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "53d72f7d-4ac8-4dd4-8325-e4fe886c4071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312f0369-6867-4829-aed9-e109af24a14a",
        "cursor": {
          "ref": "267b5fc2-f993-472d-aa0a-c0f388129af8",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "46342fe8-32f6-4abf-9903-a5fdabc57a88"
        },
        "item": {
          "id": "312f0369-6867-4829-aed9-e109af24a14a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "14225842-330b-437e-973b-7833e34f3cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa04dfe-0b79-4f6e-8041-3b839d780051",
        "cursor": {
          "ref": "b0cdf6af-8ab8-4036-b7cb-b7aedcd0e04f",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a9869974-adf1-4f51-b287-dcc0978fdd45"
        },
        "item": {
          "id": "4fa04dfe-0b79-4f6e-8041-3b839d780051",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "df76f170-a919-4dd5-aed1-1da3a0328e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20834e1f-a637-4169-a043-799bb6f1c203",
        "cursor": {
          "ref": "8287398d-6a71-48cf-96c4-54976dc07072",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fe5291e1-0573-4a63-96a4-29e074f66c56"
        },
        "item": {
          "id": "20834e1f-a637-4169-a043-799bb6f1c203",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "85c5b59f-c908-4103-bc26-a4610cdf67a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c60fb1-16ed-444d-8ad1-4b943315d61c",
        "cursor": {
          "ref": "d13ee405-282d-46d7-85bc-e5ed5e12fb81",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "971ca608-34aa-4793-898d-0ac321d1b5ad"
        },
        "item": {
          "id": "18c60fb1-16ed-444d-8ad1-4b943315d61c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b2de10a2-3c10-40d0-bdae-ab798b266495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec27781-7384-4429-8ad4-ddb7ab64da65",
        "cursor": {
          "ref": "ad35aa02-5ca6-4457-a8ac-2f2eb71fb316",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6bb9c1cf-b97c-4deb-a68a-7e99a4b84ac7"
        },
        "item": {
          "id": "0ec27781-7384-4429-8ad4-ddb7ab64da65",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fbdbb2f7-da8f-4ff6-8c50-8467b81663f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89807cb0-057b-4c49-969b-fb5cb670ec14",
        "cursor": {
          "ref": "96c989ac-0ef4-4504-85ee-31a6ea848fcd",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "56ec0e1f-1073-4f02-8097-c7db4e61b38e"
        },
        "item": {
          "id": "89807cb0-057b-4c49-969b-fb5cb670ec14",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dc16cf53-de2b-4e33-b5e8-41b3397b704b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e706c3b7-94ad-4fc7-9bb6-1f7a70a92b6d",
        "cursor": {
          "ref": "eb3bcb80-9cf3-4d4e-8dfc-5b5ce2f9fee9",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1bd423c9-ddbd-4a58-9978-49b4d1cac715"
        },
        "item": {
          "id": "e706c3b7-94ad-4fc7-9bb6-1f7a70a92b6d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "286957bb-5ff4-4505-a3de-e7489b014c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b195c3-caf6-458e-b33e-c30b4328808c",
        "cursor": {
          "ref": "e593481e-6ee8-40f6-9194-4450dc603067",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f1a5d294-f5c3-4c5d-aadf-86d7d6e5330a"
        },
        "item": {
          "id": "76b195c3-caf6-458e-b33e-c30b4328808c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6e691f12-dec9-48f8-a343-7a1535d21f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c8491f-e764-4b37-a9bf-ad4a895a111c",
        "cursor": {
          "ref": "6e6167ec-a8b9-413e-aed7-f01031150fdb",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3e4f8c13-e7e1-42f0-87f5-010e22e718c3"
        },
        "item": {
          "id": "07c8491f-e764-4b37-a9bf-ad4a895a111c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "367db275-745a-4def-ad4d-7c5802445684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd7d1ef-efe7-4246-93d6-a607b9454afd",
        "cursor": {
          "ref": "f6b3b037-0079-4c95-b6fb-a9850ad2944a",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "bed86cdb-722b-4d50-9606-8213e170d2da"
        },
        "item": {
          "id": "dbd7d1ef-efe7-4246-93d6-a607b9454afd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b64172f2-fa36-42b1-a183-93865c1e008b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9f79a9-ed5d-4139-9b03-e348d8bad811",
        "cursor": {
          "ref": "38a9472c-ea84-4d7c-a22e-e7c80d9ff468",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0989885f-d0fc-49e1-9809-792fa42fd0ac"
        },
        "item": {
          "id": "ee9f79a9-ed5d-4139-9b03-e348d8bad811",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "672326d2-da52-465d-8b7e-23bf86b4b562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cca3523-50d8-44a2-a289-84cf3e65e20a",
        "cursor": {
          "ref": "c1b96fd4-750f-4d5a-a447-1d6e6d414a07",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c01b53bc-a94a-487e-a6a8-b08774169502"
        },
        "item": {
          "id": "9cca3523-50d8-44a2-a289-84cf3e65e20a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5a4677cf-0dc8-4a18-86fa-85e6be843308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df132b9-3945-40c2-8914-7deccb33d25e",
        "cursor": {
          "ref": "23a1a48f-90f8-4573-aa7c-2c0d344edced",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fb6185b7-a5c4-45fb-92cf-9ea5a53a86eb"
        },
        "item": {
          "id": "2df132b9-3945-40c2-8914-7deccb33d25e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f35c0b4e-4d19-4566-8d67-3dea17f3cfd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbefd96-56be-44f3-8f1a-ec24fb465356",
        "cursor": {
          "ref": "e6563ef2-b828-408d-8416-321e09ad0de1",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "18156d73-0c7d-4feb-affd-e564075857e1"
        },
        "item": {
          "id": "6dbefd96-56be-44f3-8f1a-ec24fb465356",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f5f5fa81-e788-4af4-a50f-2abe006e948f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517fd4c7-7398-4f66-9a8a-a16072642699",
        "cursor": {
          "ref": "c2d9457c-c0c0-4ace-8355-f7568d07fe89",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c1140c2b-13c1-49d4-8bae-18dd3f087034"
        },
        "item": {
          "id": "517fd4c7-7398-4f66-9a8a-a16072642699",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "13c00bf9-816f-454b-a306-6ebebd8c1ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642756ae-0ee5-4d0f-937f-66da321600b6",
        "cursor": {
          "ref": "ae4dba9c-bf1f-42fe-9368-a072959e2555",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "28b9af5e-3bbe-4cf0-bb60-715a8a1c5f5b"
        },
        "item": {
          "id": "642756ae-0ee5-4d0f-937f-66da321600b6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f7a33841-10ea-4d1f-afc6-358baa296c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c9cfea-2822-4c1a-9cdd-2e0525ec377d",
        "cursor": {
          "ref": "0f8212ef-5e0c-427f-82af-f76ccadd671e",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c9ddb2de-0b49-4f3d-8097-f35415b4518a"
        },
        "item": {
          "id": "47c9cfea-2822-4c1a-9cdd-2e0525ec377d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b484e81b-1375-416f-bfa1-1762f238f47f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077bea62-67a7-48dd-aaca-e8887751aa59",
        "cursor": {
          "ref": "71996882-0448-4806-b984-99f117983436",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e4e8ba2e-7e16-4623-a701-c2734981b9c7"
        },
        "item": {
          "id": "077bea62-67a7-48dd-aaca-e8887751aa59",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "bb43bf03-f8ff-420f-a8c5-65668cdd43f6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 3,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d632d4-97e9-447b-ab64-6051d3834771",
        "cursor": {
          "ref": "e766d4a7-aa09-4e4d-a5d3-186be742680d",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bcd17af2-7b5e-4099-8cd7-a01a03100773"
        },
        "item": {
          "id": "e3d632d4-97e9-447b-ab64-6051d3834771",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c4c3c7b9-b974-412e-8d76-76706c2380c4",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "1913d3f8-5c87-4d3f-ad79-73291271245c",
        "cursor": {
          "ref": "a2d7d4f9-582a-4f38-a919-5c6318df8857",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bcd95d5e-fb88-4975-8f16-d73b4891c5f7"
        },
        "item": {
          "id": "1913d3f8-5c87-4d3f-ad79-73291271245c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dd03fda3-1325-4e18-927e-7ca2d79beb80",
          "status": "OK",
          "code": 200,
          "responseTime": 629,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d29d221-608b-4189-be19-8952a11c5fc5",
        "cursor": {
          "ref": "010a7825-c9cb-4973-aa19-7d2a1ba50b73",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "32a7e537-0dc4-4775-8ad0-e99bc65b6fb2"
        },
        "item": {
          "id": "5d29d221-608b-4189-be19-8952a11c5fc5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "11daa46b-b442-4aa3-8b37-c67114746db4",
          "status": "OK",
          "code": 200,
          "responseTime": 595,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2624ebd9-c1d6-4c6e-8589-368704738129",
        "cursor": {
          "ref": "5de90e10-0400-4ab0-85f5-d904ed5b4bd2",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9ec9c6d0-dd9a-48e3-975b-43ef1266fd29"
        },
        "item": {
          "id": "2624ebd9-c1d6-4c6e-8589-368704738129",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f4bf7633-7ad3-4846-bb03-cc48d02323c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2624ebd9-c1d6-4c6e-8589-368704738129",
        "cursor": {
          "ref": "5de90e10-0400-4ab0-85f5-d904ed5b4bd2",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9ec9c6d0-dd9a-48e3-975b-43ef1266fd29"
        },
        "item": {
          "id": "2624ebd9-c1d6-4c6e-8589-368704738129",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f4bf7633-7ad3-4846-bb03-cc48d02323c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2624ebd9-c1d6-4c6e-8589-368704738129",
        "cursor": {
          "ref": "5de90e10-0400-4ab0-85f5-d904ed5b4bd2",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9ec9c6d0-dd9a-48e3-975b-43ef1266fd29"
        },
        "item": {
          "id": "2624ebd9-c1d6-4c6e-8589-368704738129",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f4bf7633-7ad3-4846-bb03-cc48d02323c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eecfdf79-92aa-413a-8b68-3b375ff1154a",
        "cursor": {
          "ref": "5470a7a8-4dfc-4152-a49c-4777359f1aba",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e076d6f3-b993-4baf-b193-ef4bdfcd685a"
        },
        "item": {
          "id": "eecfdf79-92aa-413a-8b68-3b375ff1154a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4c1afbe5-e746-46cb-a112-584863de53c3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b3acce-6026-438a-9ce1-1e56ceca5652",
        "cursor": {
          "ref": "f2b747ba-b152-4175-9cb2-e893526a491c",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f22c35d1-7a28-40a7-b60e-a9b1ff8041f4"
        },
        "item": {
          "id": "43b3acce-6026-438a-9ce1-1e56ceca5652",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7d55f4fe-e6a2-423f-8b57-056734db1682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "43b3acce-6026-438a-9ce1-1e56ceca5652",
        "cursor": {
          "ref": "f2b747ba-b152-4175-9cb2-e893526a491c",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f22c35d1-7a28-40a7-b60e-a9b1ff8041f4"
        },
        "item": {
          "id": "43b3acce-6026-438a-9ce1-1e56ceca5652",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7d55f4fe-e6a2-423f-8b57-056734db1682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f3851d1c-fbd9-4490-bea9-326cde83eb97",
        "cursor": {
          "ref": "e1de17d6-a9b9-4f1f-b738-81dc90b8d664",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9da47a25-5186-4709-bfab-646cf72fb36c"
        },
        "item": {
          "id": "f3851d1c-fbd9-4490-bea9-326cde83eb97",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "38977ea1-47fb-470c-af7f-390102b3aef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "659b0c62-a2c2-416f-bf0a-33a38c190c05",
        "cursor": {
          "ref": "24b3859d-a101-4f8f-9c85-050c61c32cdd",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7b9777fa-cdad-4b6f-b143-ee477b41fd89"
        },
        "item": {
          "id": "659b0c62-a2c2-416f-bf0a-33a38c190c05",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e8fa372c-7ca4-46d0-bd8d-84d199d05a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "659b0c62-a2c2-416f-bf0a-33a38c190c05",
        "cursor": {
          "ref": "24b3859d-a101-4f8f-9c85-050c61c32cdd",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7b9777fa-cdad-4b6f-b143-ee477b41fd89"
        },
        "item": {
          "id": "659b0c62-a2c2-416f-bf0a-33a38c190c05",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e8fa372c-7ca4-46d0-bd8d-84d199d05a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "5b0d7096-c18d-4b8e-b3cf-43040fbf7883",
        "cursor": {
          "ref": "c5b71f02-f45a-494a-b522-ae559ec009ff",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2c4526f4-3eb5-4bca-8837-a1a3353c0105"
        },
        "item": {
          "id": "5b0d7096-c18d-4b8e-b3cf-43040fbf7883",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6f845ca3-cb7a-4a8b-9a55-de96b32b4e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}