{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e4ba403c-846a-4207-a30c-d9f6ff497aaf",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e404821e-9f53-49e4-bd65-ce902c972abe",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6fc44074-be13-4aa0-a997-818144763854",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3b4df59b-3634-4f98-a5fd-0b2db5a122b8"
                }
              }
            ]
          },
          {
            "id": "0e4d0656-09a8-45c6-9eec-607c3029bc40",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c274cc3d-2e6b-4eac-b9dd-2ff5692c46e6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0e01f4da-a155-44a5-84d4-497f95bfe4f0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c5cfa455-adcf-4f07-bde5-d3ac91aa1039",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cf66887e-fa1e-437b-beda-1e418bc61bba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c67054a5-4d59-464a-9efd-c23ca58d8be7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06ca0a5b-ad64-40f0-8897-78cc19397bb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "accc29b8-a23b-4b2d-9a39-970a9a6b089f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c8865cb-942e-43c9-b092-ef410caf6faf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2b5c018-7516-4f69-9f28-76defec3e0e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "987ea2f6-5c35-41e1-b645-2167ad0201c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ff61223-62d4-4735-8a6a-d8109e40430e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62fd9088-c253-4d4a-b039-2e0b839cb002",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4ccb231f-92cf-4928-9179-ec2790dc4a96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9758541-80ee-4b3b-bf1f-30d01b6d190b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b346f35-f2b6-4f45-9309-25229c667544"
            }
          }
        ]
      },
      {
        "id": "862717b2-4bdf-43fb-88a9-948ed64b245b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "849e67d9-e1ce-4c5b-8ae9-a581eb4ad5a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98d13d70-31b8-4e4f-9965-cd657edf4de1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "652ca5a3-549b-40c1-b03a-6b60120820f9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe45b8e-6339-40e3-ad87-7802942b3229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6563863-c598-4e06-90e9-be63ead28b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414375e8-7525-4643-ab2f-edf471de601f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f86e87-c43e-4ab2-b3c1-2d4f68cf2f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a6ffd43-feb7-4f77-afc2-a536170c192e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64325a43-5866-4158-b0f9-bc05d529ccd2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc33386-e21b-4061-9a09-18835449c6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97605152-6026-44c1-9455-f6e9e9173c21"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d3c4e928-afc4-48bb-971c-051117388697",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39028757-07fd-4089-b217-43c25187f8cd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8255686a-6307-4f04-999c-f2239d36933b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e4cae52-2a27-4801-92eb-ba4f799ee9e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d998a6d9-db94-42c0-a5ae-5984dada9e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146c0ad6-0da7-48c7-b4c5-eeff36d962a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ffbef4-522c-446f-bf96-7407a74bd9d2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2cbb64-814e-4aef-b597-5b674232fa9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7964bb0-a503-42cd-a244-190980597aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4741ebcc-9e64-457f-9f6f-a5a7d7339d12",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2b7a5c3e-8a80-4848-b88f-78c54a0525da"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "05c76bb8-e536-4d39-a167-d970f47cccf6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "784fe7e7-b862-4a86-ad2d-5056abaa5765",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b630df2-59b7-45b0-a81d-dff688e94ff9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "28b24efa-33d2-4f04-b37a-a22252c34ede"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa9a72f5-2e2d-402a-b2b8-c136992ea9fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7cfe6406-666a-4f32-b180-7834d77a7cb8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69d3d605-7b90-4100-a539-235ea63316c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce589f62-9fb1-42b1-b6a5-f764d9e1c2c0"
            }
          }
        ]
      },
      {
        "id": "ced3255d-77e0-4cf7-9c4e-d73e6433858d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "125bc544-1625-4bfb-8086-8c8c3a7e8eb4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c17abf1-41a9-4f9c-99af-f7ed5aee50b7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3d44479f-2de6-4213-a250-757e89f90949",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4943738-8290-42f7-a173-f5583f2843f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbfa69b-5cb9-4665-b35c-f051e44ebe9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d41b42-07b4-4667-817f-5c086ffa4456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe802814-b68c-4855-9832-0921d4949685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cd855f-f2e4-45fc-b3f6-ef2e3048e28c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97fa6ae-46dc-4b9e-b59c-1dfe7bc0ee06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49b8f06-ddd8-4fad-bfb5-6c0e24fd8ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1626fcf2-b8cf-44f3-9c23-86de8ee5529b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "166fcad0-a7de-4353-86d4-a1e3912168d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e90970-4d23-4b07-8bf6-ee2f3bfd33ae",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bd338d-2f20-4be0-8e15-96d314216756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c19743d-3c68-40f2-9421-e1d8c6fd7671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c839c65e-1719-4ff0-be7e-e1a2a830a523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a15bf65a-dc4c-4957-9332-62977bec0ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e3b151-ce37-4d3a-9ad1-6a60d07f9d60",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69c55ac-206c-40ac-b651-b35158980b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e8a270-e9a7-4e07-bac8-4cf48444b740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3bbf2a-55e6-4423-8e9d-56e309cb128f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04adfd3b-fa6d-442d-87d8-075c299f7e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24cb5baa-4c28-4155-836e-1e3f1be39973",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f6cb1c-8f31-4cbf-a9f8-4adf6f73685b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8885fcee-0125-47a2-add2-6800031596c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fd846d-c7a5-452f-9d05-40d7f2dbb3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fb1af15-eb66-4388-b82e-0020e11c791d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec91cfd-b401-4c92-82fa-3143e907d901",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dce995a-7f13-4df2-b1ed-dcbd84cec183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46afa028-5e9f-4609-bd90-35ba81020bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4458bbf8-931e-4a2c-aa8d-29498b99055e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "384cf886-6946-45ec-a12a-530fa24dbe7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2377577-63fd-4b89-b1fe-2b5489a7f0a2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dac1f91-d616-43f7-9f13-7bfe6d26dc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9520f05a-2068-4d47-938f-22df264bd372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5374a10c-68e2-4464-a7cd-bb5bc09b8e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a445b36f-781a-44ba-a250-1159a2f91081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cf3536-9169-413f-9901-e3e36c5c2bb8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e9c963-6008-4035-bd8a-97cee6f597f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc56c75-737f-4dbf-a63a-0cd7459d47c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e338c0b5-3b4f-450e-9dbb-773dfc93972f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e894aa68-eea7-485f-970a-37d380bfca16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25453103-3aad-46e5-ad7e-b5baee755f58",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3b8d4f-ea3d-4f97-b063-d6b646d77c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b77088c-6a7a-46c3-8446-a1ec15501879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f305fa9-f2fb-4b6e-934c-3aab4456ce0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28585464-1e8f-4655-8d5e-444cc6f36fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc368ec-982c-4f17-a054-ca4f47d9d73f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e82a089-1650-4fe3-b346-1c1fde381a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c1f66e-f43f-4231-9108-3bfc2ad476ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879d6417-b69a-483a-bf08-05f01367de63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23b13752-6191-45b4-b09b-608b453d0c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b28b7f-7f2b-4eb2-8dc0-c654bfceca54",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db80224b-6bcf-4a3f-a4cf-1d9250f43d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0fa618a-f108-456b-92c7-7f893f379a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa9f4db-4362-45a7-995d-ea1528443e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5da65890-5b6f-44c1-b256-ffd4086abf00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da16821-15df-48b6-956d-dcfde4cf7961",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a6ac8a-78f9-4f19-b1f2-1c0a0d57cbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5afb6fa2-2279-4a03-8c3b-7189e01f25a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed09eb16-33f6-4b02-8b63-ba45db62712d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18e8dc4b-75af-42da-bd66-4f5ca6b67c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9240a0c-488d-4d3b-baa0-6aaf9cb6ccfd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faa722a-6b88-44fb-9996-c53d869fad0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea7f89ff-b1c1-4201-983e-f79f6da9c041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ae9610-2eda-480b-bbf3-06bbb78b8adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91eafa81-3432-4455-ab4c-6c4745e70978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c220325-28bd-4c6e-8744-9aede28f5c7d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cb1dd7-2595-4fb2-9657-24dfb7737c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ecd012-bf2e-44d8-8819-0d6b6ed2c190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec77fba-7f71-4421-8bcf-59374fe196e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "243c31e5-6e55-4b45-8715-565da4d5f8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadf02d2-b3e7-4dd7-b3ee-8736bb2d525c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b47a17d-64cf-4aa4-be8e-b102dd4748db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb187edb-5745-4b4d-a58e-cbdbfc4a09c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f1c309-ea52-4776-951b-dc13a944922b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51be0e52-494e-49d1-95b7-826aa67e3d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b31baa-f85a-44d1-9768-7ec251e68062",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90360a70-b7a6-486a-962c-a6639c73eded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f6a1f7-7e48-4763-bf63-89c9694cd644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ed195a-3717-42bf-bf0f-49c947ea16ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2aa9608c-98e0-46c7-9fba-d933889d6cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bfb280-1379-4f09-99a2-e9ac19ef993b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd92b65a-6715-48f6-99dd-a3f20dec38c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2711b5ab-668c-4267-af7c-512419f8518e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d4a72f-7e53-4adc-aedd-4c977bdb1e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44f86c53-c42a-4f89-adfd-9e85b28c6504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698b08e6-dd1c-49b8-a6f4-3554711292a8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2a5807-0e87-41ab-9e67-439e09c77e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6079c9-f3af-42a2-b682-4ee639c85a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec642e61-e130-4ac6-a21d-11baaffd20f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fec460c-81fe-4ffd-a49c-dd3a147611eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb6a623-c7bc-41ed-b6a3-397a0fd4da10",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4265a4-6032-46c1-bfa4-6500094daf23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6150fc6-a45c-44bd-bb50-5d80f9ea6881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc65255-5ba9-491a-a358-433d6f15298b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1740c57-5ab7-48b8-bb7c-9ebb17bbf17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096158a2-9faf-4ba6-84d8-7a8dd1d01a5a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad94f9f9-7450-4515-8c40-5de9713e3482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809e33fa-239d-402a-85bf-1f4b6fd80361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ccf1ea-bed5-4459-b662-7042866d7d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c5ba257-3f20-4582-ab98-602188a32e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f173fa-4a53-4cc3-97dd-67dbd038049b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957258ae-15df-4d9c-933e-3abb252f6cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24721de8-3033-45de-a9e4-8ece8802b9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5719a5-37ac-4fdb-bfd2-1e79f8f05957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc718b0-70bd-40ad-b0a5-330a0b63cc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b968f6-b4d8-45f5-83a8-9cc122521f6f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "287d8eb8-e54f-436d-96a6-38e717ff426b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9c0702-d82b-457a-b817-7638b67302eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c760fbf1-f4f3-4143-bd84-a363f0b077ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c56b733-ca66-48de-9ad0-959f5dd760cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8625fb64-4d2f-4e34-8808-c2c31af9999f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94eb86ef-9a9e-46a7-99be-39ceca0a0d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f22b839-1f3e-4ec8-a7a4-39fb5c00e0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d0a7c6-5d1b-446b-a969-205423bee703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb047fd3-d9f2-465d-98ed-49d8aab4440a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7663fa40-dac3-4580-bbd6-dc0b2888aad5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17365d10-bd98-43b1-8fdc-89395b406983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92a4e2a-6866-457d-8b03-38e7f7e34838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb3a729-45b8-424d-b1c6-1604fc9f1124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "58b872aa-01e6-4e1a-a6e5-f54752ee4c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b380e98d-4fad-4cd6-b51b-08d84679ae07",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b139803-c15e-44f2-a996-e7f1d51cd74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "718a0d97-3ede-408c-8fcb-461bec990439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97896e0d-0f05-4301-a1e8-9d7c6ee88bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "828a6f7a-0f4b-4c67-92ed-65122792e9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3bfb75-331a-4dae-8ab2-a6e0ebf2423b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19072f7-7dee-4161-9692-ca81394064b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6eb10c1-dcce-446a-9e58-316e1ce8d0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ec14fa-ae36-42d7-8138-d1d3f1935461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4a76ec-902b-4ea6-88e7-474273f4bcc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc3130f-a5f6-4ac2-b1f3-195e2798141c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c023f2dc-bbf3-4d3f-8755-39a1e958ddf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1856c427-d65f-404b-9f89-aca96609706a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c75518-2372-4490-aa72-d8703eb4e218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a81091ef-51fe-4a63-9fce-9b2788e5bda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34367d7a-e80c-4550-9e27-1337e6eb3710",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cddcbce5-e21d-4490-890d-47affc83b447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d64a04-7d04-4ade-add5-70d18eaa33b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a715b41f-e816-400c-a257-ca2e171992ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4af3ea6-ae51-48a3-b22e-56a0acfeddf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2e2478-4842-43a1-ba39-0bc30fde640f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db275ff-5004-4066-a519-d2f9b05e5f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d51432-1244-4e98-88b1-5eecf0fd4d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e1421f-dbd0-464c-b3c4-939717a62b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "017f5dc5-5e53-43ae-b423-e0d5d7860117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd238c05-d55a-4225-9054-7a2ee8969764",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e9b943-fac2-4369-a917-14abb059c36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6c4fec-f254-4ff0-9419-48f4cb8b3bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f2edb37-aa0a-44b6-a2a1-ec1a81334ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0fec802-4a54-46ee-9ec2-0c8ae138f12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce57e8fc-4505-4189-a355-d05b942cacb2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92578970-9279-4b3a-8406-7360afacef96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de980d5a-73c1-4cbe-92f1-94c6e709bd6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8637e738-4c67-4d33-8764-6510be99e0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "18b8b5ad-1e5c-450d-90e9-33c30182b75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4c10b8-c22e-4c5d-b629-0d603b07deab",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8005a82c-d09b-4299-8af1-193f29dbea69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1112f7b1-83f4-43c5-8480-a1493313b672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f78ffaa-57f3-4a07-b22d-370f2d1ca8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1dabc8-8d17-41d7-9847-b14323d80148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d464d3-258b-48b5-91f0-a987f71bfa43",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "026b31a5-8894-4389-9fcc-a8345b7c917b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "350a6731-78ec-4b08-994f-8d1e53319666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1996317c-96f2-4bcf-a99f-80b31b25f4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d1c131-a04d-41d7-b1d9-3173a7edb967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef70e45a-6afd-4e2d-aa1a-10f1582cd188",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c2f9d6-2e6f-4d98-a1ec-f7806770d906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f45cf22a-f30d-47de-9b84-a18dfde6491a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e93ba3-58ff-4133-96fa-bad50327ea5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9792acd1-a38f-4445-b21e-54f3c05d04dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6385880-3166-4592-846c-cdec754c29cd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3813113e-aeac-403b-956c-78c861be5e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95bf0130-9788-42a3-bd90-68bd9813d564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5eb44f-cfd2-4f03-b2c5-9892fde29bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b2fbb8e5-b4ed-4ff9-af2c-607f89af49ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7fe67b-53dd-4aa3-8416-33941a0c5135",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86eb9686-78ed-4a0e-a135-71cc91f3491a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "260cf0ed-6809-47bf-8d8e-e64f7ab843fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376a89aa-9b7c-416d-b082-7d640c2449c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0db3f3-9e47-4dfa-b499-28c43b745316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94a73f8-d695-4f64-b82d-cba87ffd59ae",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82eab48-89c8-4b98-91ce-9463fe56786d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2bc22f2-a896-481d-bda0-ea27ec57389f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4a6f69-f8f7-45f6-b47e-5920615547e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5313e5b4-98ae-4bd0-abf3-392940d05d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83851018-dccd-4faf-acda-7766cf5e7459",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6264331c-73de-4771-b2d3-37f5dedd855b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec5fcfed-767e-428b-b259-2f376edca312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2e5ac4-6706-48b4-a866-8a06848c9626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f5d1395-d4ad-4f39-b307-424267e58042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c7404c2-0860-4657-88b2-19200a83886d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d4c211-b310-4713-af71-d6914b6b62b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "967743d5-42fb-499e-b679-8f20140b29e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2067ff-7f67-4c48-b50e-f3991cec0fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a685cbf-10ad-4209-8ce1-3ec668702ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcd5a4a-265a-4e99-9845-3bae9eba20cd",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a45d13-8d73-4d26-98fc-eb40c703fe52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56df140-9d27-49d3-a5d8-ab59e3e83ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b900418-c2fc-45ad-bcb7-460bc9e9d784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7a6fff-95da-4cde-a24d-12ed27baf31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2ec26c-4b59-43ad-8e59-33edc1d61c83",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddcbc12-ee23-46a3-9e27-543d88259d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1eeadc-4d6e-4158-b051-73f27461c05c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2a9b9f-1623-48a1-b3bb-7e1daa6aa422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a80a922-ae30-4dcb-86d4-6855b8ebe2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8d800c-2e03-4079-be68-7cf696509900",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca803551-a835-460e-836f-1b4dd8c85f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28dc16b-58ec-40f7-9613-28ca942e27a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3885d9-f321-4d67-ad3a-632cda9d0d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6122b4-98aa-4067-8727-f56fa191e3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58afed99-02fd-4124-b663-06e5e4703124",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723ef994-56d0-431c-8195-c37074ebc76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886ac544-61e5-494a-a55e-51e53d38bda2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b835a22d-3696-4f20-b35f-fb765737dabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2c2895-2e31-474b-9808-d3896fd3c7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63504b1e-2303-4c33-b16d-23a44f788204",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce72907b-10c5-4e74-a7b6-f833062cc116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1b7e95-5242-4401-ad5f-42996b3c8289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1724681e-ad3c-4380-a836-cbe879a1a68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c1d41a3-ac8c-44e1-ae8c-7ed9b0a06502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbeb1e9a-7d94-45e0-9d46-7a7afdde8229",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87c4afe-f599-480c-8239-e4723f517fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8372f471-c996-45dc-9b30-92da901cab6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6bb7f5-d8bb-491c-b73b-4b569ac063ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc89872f-410b-4de0-a7f5-39b2169b2c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23680716-9b09-4d93-b892-3c01f4acf1ec",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b261386-3e43-4b5c-b9be-dd25301196ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632b6625-4671-4eeb-97cc-44b6d3a980e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3342474-1530-4606-9b21-dd5830457eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c505bc2-f94b-4713-82cc-687f1d0f207a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100c142c-55e4-4552-a0dc-0e2c70fe1424",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c576ce9-3ecf-4465-86b3-d595c836394c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4be89d-c2ad-4aac-b190-2de013b188a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e0008b-ba08-4bf9-b941-cfdbcc6c246f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7faac079-c51d-4648-9760-876f359e262b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59553a0-14cf-4be1-9f5a-c01eeb7c43be",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb3ac98-9d8d-475a-9cc6-3020a84302fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1fe5f18-6d18-495d-96da-31b01bc2fc5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2043ee06-7bb2-498c-89c9-148c7524663e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "773dd56a-5239-46f3-ad90-b9bf73add683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869065db-3be2-4092-bee8-f77d365a9e49",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa656eec-b64f-4784-adfc-3ed961f1bf32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08fabd8-fc6a-48d1-bc57-430b6394e017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a18723c-9316-40af-9f6e-27fcf9cdb705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "40f1f3a2-5f29-42c4-857f-fe0ab1e08a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72396104-0a22-4a73-afc9-bb68a0e3ffe6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "497f5654-6f8d-4715-a3fb-879e2a3ab0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8eeb7d-5e16-4bd2-a9dc-fda757075bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584de2dc-b5ea-4676-8d15-c3115251173e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2ea756-17e6-4fdf-a6b8-ec1e78476416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa862147-fdab-4df5-ba4d-9cac1066858a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0a0288-eaf9-4a32-af22-5d64069e8e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed0e5af-63bb-4bde-bacb-adb884563d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3203b92-3704-40a2-98be-a443772f776b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd67dca8-7cc1-454a-bb00-e70e226b7d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750da4e9-0193-422b-8014-0bdb5be69f1b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c204c98-7a1a-474a-a14e-21c4bd3929c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8105ee26-65d0-458f-9283-9cb446c06e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483e504c-826c-454a-b850-4f45ac4a95d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "444fbd71-1936-4a43-964b-12ffe00c47cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81179a8f-144f-4715-92fb-2cd4302ed7ef",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a936456-3007-4135-9123-964416c0f7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa0321b-4c47-429f-8f22-d2b7e1a6ccfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bf5c68-67f1-42e4-a823-4daf1ae5c3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10bb63d9-5f88-41ea-aa57-888616e08f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a7d768-ea79-4dcd-85ec-124075fae3c3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e067bcda-f8f0-419c-9f21-8e725504d9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b68d71-22ea-4b7a-8132-c7257365f2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3e8d8b-c4ee-4566-b00c-a3c933da6ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "796f8f85-84fc-41b9-8f94-8b0d807004fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8808f0d5-fe5b-408f-ba89-7cf50d1fdb55",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6297bb5-d136-4745-b996-c3383d2993fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64770843-7ecc-4f6f-945c-abdb9f29f962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a709b0-d742-4c93-9788-04e33d3e4f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db504dfb-a6dd-4f23-b3eb-6fec9c7a1934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8858fcdc-3f98-44af-9cfd-cff000b9b885",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c3123c-ac30-4b47-a61b-6ab40e100f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb25fe2-5c0a-4687-a761-41a639d372bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dffceb2-3874-42f7-91f5-c7bb33d23495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ee410164-2cf8-4754-8415-b82a55dac72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbe12c6-e027-485f-991e-0a5451dfe41f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb707bd-2c4e-466e-8a02-a066c6b73784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8fc6d00-4a1d-4803-a65a-7491f074cbb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e85cf7-87e8-4215-b368-84dd79e20ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "316e58f9-613a-4a67-a1aa-0fed7cc747a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c239eadf-e184-413f-a7d6-52a00f2f1f32",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23815cb-7e23-4c23-bffa-75597dd8f5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947380a3-00d8-49ed-818e-792bb0ecc246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9706cb6-e97f-49c4-b4a9-d64e2d5057c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a04b33e-2d7d-4b56-a573-caaa6338cd09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b7fb15-6bfe-4a98-ae07-c8b4d7c18d92",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df150a91-6fe8-4fad-8b39-263f0a2e20da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ee0a56-6328-4520-9d27-65a1e61650ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa9eb69-c4fa-4bd9-8220-76c15465ce8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "de2a1f75-5754-4b43-93de-d6546ee17da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33854661-8ce9-443d-b232-9b3abcb1bd9c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de7ccef-03bf-42b5-8513-5ef32f2a83b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bacc100-deb3-4b2c-9202-4a50dd15830b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13a33d1-5ac2-455d-b90e-9eb73e7725a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7531f6e2-ebf5-4421-8474-b1f74c048840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a08e94-3048-44bd-b3ee-6b522ed3b4c8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee13b83-b507-4067-999d-9308d9cc0998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281d114d-83e1-4a1d-94d8-3f34e0a6b90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f5d19f-0cc3-4d61-b568-d21ec5a41ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a7397c3-30f1-4402-86cb-baf51ab32061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a64053-68fd-4fc7-b019-14dfabb1ebd2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ababb1b-467f-478c-a7ea-6601366de142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb8146a-cc8e-4d0c-b4b1-ffb399b88be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9593de7-d725-40b3-a57b-70205619c3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "bccde963-3466-49b5-9ebb-a1fd74994f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd26a8d-c358-409d-98cf-9d33ad8bbf30",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b024300d-f754-426f-b6c1-606fb621b8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e21088-4ca9-42f1-a2b7-e93672f0e4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffac198-6fad-4be5-a422-51fdaf64f3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c148f57-85cd-4a32-832e-ac1d49d62393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae97ddc-b2a2-45e0-a29e-3f4e4a4e65c3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ab0d8d-df73-4c2f-b985-eff262fa6f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e6dc829-1259-448b-a67b-eeeb88c08a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c14e02-87f9-4454-8f8a-e8d7236a4d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e06c470-0796-4b1c-9fdc-557c328a99ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3045ab8-1bce-4d58-aec1-cac7db32baa3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3499cc-f2c1-45bc-b48c-a714301fa296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab36b13a-5c65-40a0-9f60-b75638d4d1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58302a4d-6e0f-4b2c-9dd6-82257a46d976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c85efe25-d3ca-4b75-b863-778b0760ab89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b99926-d913-43fa-8b96-8e32d558a781",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cc614a-fa53-4475-9471-f47b6b8ba4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae2b204-437c-4eb1-9557-7115de9e3740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cdedb41-9afe-4235-b31d-688e1f842928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2deec87-094f-4993-8330-9281e6c9c15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a5e155-5907-44a7-83cf-84976db01ea7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0173d315-4734-44c1-958c-0ced1c8933c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac5993a-3e42-496d-b2f1-1e7d3629c07d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e745d34a-8a86-430e-8adb-1a12b6f460d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d0feeea6-5238-42e9-820f-e5ed13482fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77c7d68-884d-4cc2-bd02-6f938feaa29f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dd3157-6d78-4b3d-b524-140f66b1fa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5926d667-8672-44aa-b9e7-0e8629a36e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17c1e8b-e6ae-46cf-b1be-6f3cb15da3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7b9baea-ffb2-4c87-b1a9-c1f102f3e820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54396bbf-631d-40c3-8742-85108e88826c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bc1bdb-8a5a-4de6-b652-ff075e160027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f2a72ca-f098-43db-8156-a4e05b69468e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce73d4a-d29a-48d6-9218-37bf79c863e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f07cc96a-e2b7-4033-8d00-9e4d64fd0ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1d4b25-3007-4137-9375-2b6355bb0d56",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11e92a2-8964-4d27-bc90-a9428f883e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a88b72-db39-4952-bc4f-8fe6627ab638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415c9cfd-e056-4198-afee-f19b38800025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "003dc310-fdb8-4459-82ed-0e20b01020ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085f1868-f3fc-4c1e-b622-48f242900ca9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60330fd8-9e70-4f78-9672-3ed9fe3c794b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a6edd6-4423-43d4-9fd3-de3a7f178680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6dc233e-2189-4229-842e-bff9a0ef016d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51771a41-13e0-45ba-a37e-5cbe35c089f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedde68e-6bf3-490f-8b8e-c5d4f63bdd6b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7f1237-9592-40d7-b4a4-9973a8f2d2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb8b70a-0144-4402-88fc-f704781b0384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05150ee-2844-4267-af82-2cc33f21c7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de7cea7d-b4b8-4714-928e-9d6eddc149ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd9b167-56f8-40d2-81df-430ed3ef72a9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18b9715-5b84-43a7-a879-8c79941bd233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7904049-3756-4836-8423-ca40082e7944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7580b234-065f-4708-ac67-3aff3c64ccd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19d74665-6c29-42f6-bcfa-a04f3376c6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7c7622-2199-45db-bec7-d89e44d9a9ef",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2744a7d5-4b4f-4c1c-b0c5-75573642aaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21314b8-27af-464b-8646-43174eaba1a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c940c477-ebc7-47b1-9a03-def959c04b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4df964e2-553c-4477-82fb-9f8fde407bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9faba1c2-2ddc-4aa9-a39e-455d2a211514",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e196ab-6b4d-4314-86ee-608761772be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926f8aeb-a831-4602-a655-52fa4a20c75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aedf7f35-b2da-414b-9aa8-3c7b4c5060ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f18cc6-b131-4870-bdac-810b312e7b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ac0114-a567-4021-b97f-632733853b12",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df94f2a9-c802-42b8-a801-55e3430296d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c12060-2e18-4322-a4d7-f6b54992b0b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d73eea-55f7-4a6d-ab95-c5bb9ae70d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d08c6b40-94b1-4572-9e77-0b0098b40375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38503388-9dc9-411c-98a4-30bbf380fb97",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e28591-0ed0-45d0-929a-f4dd76346b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc4de9e-73fa-40d4-ace1-8b29e0446e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a9c041-f216-4b70-b87e-9a513c61150b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4be5b6-124a-4249-b2dc-6d747181c661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da22c455-2505-4c26-bf7f-e5e5e3dae5c4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f2dc9c-a86a-4bc7-a39e-b03ba02d5f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3143a59e-7657-4d2d-888f-471e7bea4475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b8659c-ba8e-4e60-b4fb-a11efe12fb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66763d9e-dd96-4582-a316-a0d6f82c2cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb922b22-ce70-43e9-8db8-062c1fb84bd4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c346a385-330a-456c-898b-62cb4a891a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d9d786-3df0-44d7-b4ba-2487759f033d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b580abda-a641-41e5-b84d-30ce8ecc9b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d143ed46-abfe-4b28-9263-855c0fbfc69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d639d7-459e-40de-8918-d06c3b8cf958",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d84cad-3bcb-456e-b683-2f47ceeb9577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810b77a2-cb3e-43ab-a802-235e5ebcd884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79d8115-460e-4881-8ea6-07b27bb161a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2633e653-7e99-4029-80bd-e0f700517187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f16a1f9-ac9b-457d-94ca-1bdf2e0cc952",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfe921d-f232-4354-b70d-229163c51b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0eb3365-8f91-43e1-8057-0e1953f235c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228e4d65-7246-46bb-8a6a-c7ce0f5e0396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3c2a08-d6f4-414b-aeee-11f07479de42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc0f5d7-c537-4ccb-9e9e-06dcb4004cb1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c611ed6-f024-4c5a-b23d-a4ddb054e55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5339d5b-d9d7-4f87-a909-d1fe3f452693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9123483d-fcfe-4de6-8112-f03e38083cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffa87f45-eca5-4a3c-8696-27156e2f9f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84979207-d1c7-4211-b717-bff1dcbb47c2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa01b7f-31e3-4876-8854-f753f9bca0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3dfb3a4-08fe-4779-aa5d-1e24a0ba4d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28020d7c-2996-4f3b-819c-13bbfb587c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab2a38b-bd11-4e87-ad5f-21a1cf73d260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6fec8b-b621-48cb-bf10-81c786be62d7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78463ca7-ff08-43f4-9c7f-9500b35948a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b299013-ad36-46f6-9827-1477b5c1785c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d6dff5-ad96-4bdf-b60b-4b353fb77aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6975ad2b-1d10-4b33-aea6-19c8f96ce3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d085ef-005f-4ecc-9840-3332c62d62a4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2eebe31-6e95-4e55-aac3-bd881e370864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c100af37-a333-40d0-a8e1-01483ebb84d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c477c03a-3025-4a2c-839e-af1808f6a26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86320aee-11ea-47bc-8411-182b202c779e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62eafe36-1bbc-4cd7-a96d-facab38bb7cf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef913878-3a20-42d8-bca3-aa0bdd8f3846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d82484b-4ce0-44fb-b884-7ab68761c92d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8e6cd3-c998-44de-9dc3-ac3d13caa56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc4b3cb8-1e80-4215-9167-92c1b72cf219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6bd5c1-d545-491e-a035-bb82b9f52e7b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5969a193-89d0-467c-8a87-3ff155fcca32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8904b953-0b34-4b60-b51a-9f01bcfac009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f26a762-9a8f-4268-aa25-08bbd0e1b046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "89b3dca9-4f98-4cf1-8aa2-e569d3a85c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031cab95-52e7-49b1-9660-dc21ed487574",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d81b41-a26e-42e8-a686-2986370b410d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f656f620-1447-40a1-b0d2-8d953b6b606e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff399600-736c-4c55-8ff6-946bbe3ee92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "306e4a03-1cae-4121-be5e-72a0ddec8d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ef13b1-a736-4b64-ac48-753550332cb8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e612f5a-5af0-4428-846c-84b9371dffb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eea92c8-13cf-44a9-8d79-fd62fbf3be65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df5a8ee-5e8d-4e59-b81a-ba9d8f3ce410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "18531291-62ea-44ee-94eb-ff6b6680d317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b573752-44b9-4781-8a07-d30f4c27528d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aeb0ba2-7d43-4d6f-8b2d-f14a78771e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71f33df-22b9-4661-8ccb-9fa57626379d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abae4b0-715c-49fc-86ef-7005aea9c003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3403376-c632-4b00-aa8f-5faf836ed1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e7f010-5b10-476c-bd77-d8ff93877e52",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22aea01-92f7-41c6-801e-d7d93cfd3ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af59fec1-ebb0-4cd9-95a3-1166610505fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf73b55a-f65a-4047-802e-8c38c49ab82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "273053ca-94c7-4ca8-ba45-de50b13a8349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ab47a5-06d3-4193-af6e-eaca0a9109cd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cfb504-e33e-43ca-85a0-4231c29aab8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8fff2ea9-d044-4b3d-829c-1ba784c68e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa8ec49-6d88-4247-b704-6b5b1abb7938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e86f8bdf-8fec-4386-9652-e307b3c1861e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0ba2a814-0454-4a78-80c5-94f536c49fd0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d5f6604-e50f-4b36-b683-fab9954a80df",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7020a9-e8f9-4913-ba6b-f7a3494a01c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91a2de31-f3d4-4f08-9df4-99863af67f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010b2e1e-5759-4f0d-9bc8-c012f58c6471",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f1c19791-5fec-4447-8ac7-11f85c857b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb09b01-67e8-4d50-aa3f-286cbd757d87",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef14b4c-c02b-438a-af59-6d878a1e90cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d13e9e2e-1018-4889-b291-90d83ce880fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63320e8a-cd9b-4dc1-81da-a1c88bd98b57",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a30eda53-fcfe-489a-8dbd-7adca7112a96"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3aa2f5c3-48c8-42e4-ae4a-4a1be18f8cf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10f1ebb4-8ec2-4d86-a641-75d74ec9837c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3882ee55-cc95-4761-a8d2-526f06b981ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "468dab41-475b-44fa-ab97-893832e5e99a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73a24057-aa0a-48d8-b5fc-628c78e5454d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8a27cdf3-485b-4f2c-b7c6-2bb727658a63"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "748e9f50-d52f-42ee-9bd9-946504d69784",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eaf94548-c37f-4b5b-881a-affb6eb34b06"
                }
              }
            ]
          },
          {
            "id": "5f3d9d36-44d2-4217-bb43-186bd2f86c47",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5744322d-75ee-4cc9-9fea-058027a4c8a1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d7d6cc5-4e4e-452f-9b3e-2e88c54da765",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a16be31e-bdcd-48ee-b427-2cc820a83e4b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0199dd6-e466-48b9-94e0-143860b9fab3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "08654e2d-37db-49e4-a1a6-ad7a5be474e9"
                    }
                  }
                ]
              },
              {
                "id": "a9ec3f03-1091-43d9-aab5-da1230e2019c",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1625cca-60c6-48e4-b2fc-e46ba28ce96a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40e0e549-1a3f-422b-af54-b1bc2bddff96"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf366774-ad5a-46ff-91c5-915eaad7bfb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f832485e-85fe-4c4e-81fa-6add20d84016"
                    }
                  }
                ]
              },
              {
                "id": "b597b70c-83ca-47a2-9ae5-e69ed0111888",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed8c3748-b8d6-4312-9295-03365ec4aad5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e18fc80-6e94-4d07-abc5-9ec7b6868e8d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49d6adfb-8ca2-41bf-93c2-80f8e5918f86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3c80c442-20e3-408e-8f41-ab1563614119"
                    }
                  }
                ]
              },
              {
                "id": "41c329e7-ca90-4159-834d-43f9c3feed42",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebb74aad-ae13-4712-9b78-9b35a1ec71b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a2d5b3c-c1f7-4b64-b900-47d7eaabfc68"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46eac023-f213-4c5f-937e-121472b27a7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "901ceccd-b485-4c07-8135-49987565e397"
                    }
                  }
                ]
              },
              {
                "id": "94531b79-f91c-4315-8807-d7fed1551b77",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bc80b55-dada-4ed7-8763-27a088744763",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7ad2b50c-9d7d-4f29-973c-e4672fcccbd5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "679ed0fc-830c-4467-8f19-23b7b5d3f8fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7305f088-448d-4152-a5fa-052f0caf24f5"
                    }
                  }
                ]
              },
              {
                "id": "0c462008-1775-4651-bb10-ee3c218ddb38",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e48baaa5-b9b4-4e25-9668-e08163babc85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bd9f63d-c3e2-4b39-b867-f3cbc34fcb0f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00276e02-8cda-4705-8895-c2bbfd212784",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "280ae7f3-4393-41fc-b055-f155b369e0e0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b072ead3-1ca5-49ee-9cc1-8e783ad1404f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e66feebe-278b-4b3c-8f97-d5cb323d0b13"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "96fd3da5-e490-49fb-a839-ffd5f740c324",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d105987-0286-4f54-9b34-7ef405da1560"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bda5b33d-f1ae-4b0d-9191-f3816ab63b26",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ad92aff8-6728-425a-a8b6-11ec3a801469"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97d8a9ca-bc10-492f-b80c-361709b34783",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24bd9861-aef6-43b5-8018-bc20a0363aca"
            }
          }
        ]
      },
      {
        "id": "f6cf7bdb-857b-485e-9eb7-4e591040cc88",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ce3574a7-8261-4ffc-9904-d4dfa7019016",
            "name": "Negative Testing",
            "item": [
              {
                "id": "404c25a8-0330-46bb-9c47-2e21e6cf467a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f3deb9ef-05b7-4f78-b9f7-f1e64446cb4b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86018caf-c4a3-4ab8-9a4a-c82f59f5a569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d028c1c-f1a6-4116-901c-7c65dc104caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e3087f-bd45-4ccc-8045-13df1df4350b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "04915d5a-265a-46a3-b089-ddcd812c03b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc931e4d-6eba-4839-b9a5-a1a8cd5749d9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c730510-e41a-4eca-883c-22f151110103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96eb148-cace-4666-9034-59421f181f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3268f4c4-e4bc-4642-b66c-cef2fcdd684e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46fd309e-9a51-431a-9e05-b912bef31d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6617d8-9350-408d-8ea4-906242534cff",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4fc61a-83f2-4745-bfc7-2446eed66f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ffdfeb8-e837-4dca-91cc-f2a001d86b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae8ff57-9660-4560-88b1-843daa590f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff899194-38af-4f6c-99d4-8ddc19347ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79089f8-f3b7-4a9f-b966-1d9827236cd7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3722d93d-5da4-4a2d-8a86-aff5547f1c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae9bfa5-5efe-4379-9a8d-02a93a725317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd11c14-f102-46fd-8347-b7e5c011616a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90fa5f77-05ac-451f-a2b4-e7d5deeee842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4b5b94-ec48-4d9a-90d8-8e01202c058e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a8d69f-a604-438d-bcac-acd6f179a670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95c8a86-bae4-4bed-9448-52f18a75573c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23925bdd-171e-49dd-b0f2-c380cba19455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b99bec97-efb4-41ea-b28a-06a591d8dfa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1919ba70-c94a-42d3-9fd9-edd3d449eef2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b30508f-4946-403c-9d64-c05d78b7a247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0c72a6-10c8-42c8-908c-bf925f98e1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a4f328-e0c9-4eeb-9229-6d6c1f5dec6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3474898e-41af-47b0-90bd-52e504cace30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127eaea0-df8d-4719-9bc0-76ed9a603d20",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6b5371-74b4-4bde-8321-05511d7c6bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c090eac-778e-4f09-8e39-549b9997ca1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9350f0a0-aa43-46ef-8dc5-7f11726f998c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "11e47372-2c85-48ba-8a00-7dfa350dc318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a60e878-266c-4887-8e52-57d0fad3ca03",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e702b8fb-3c62-477f-b385-a921abc2faab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c1e261-e0f5-45db-b998-ea7f449ef98d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd685cf0-f18a-4d8b-8a2b-18b73040da2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "faf5faf8-4b9c-437e-9ffd-446413ad89b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64c8736-38e3-4c16-a0ac-2b1ee1573abb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bb4c1d-051e-437f-8e3e-769ca41a47f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d765b9b7-c6eb-4a24-b010-30b978d40bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a13ac1-3d06-4049-8285-0d0987f75d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c30c50a5-2a86-4708-bf26-969af33fa731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e1ad62-c8ff-4bbe-8ed8-d997d86f7705",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9290fe-003b-42eb-b196-6df553d48396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e387b15e-3aa2-4803-ba0c-73b38e895b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21193177-8f8e-468a-ad8d-e253f7397931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "364288fe-4555-431f-a2f8-4829f84753c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab364459-84d4-4c30-be8e-c64d6ed2e172",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e32a19-02b0-4bb5-a2ef-2ff895167b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d111e595-f3f6-4039-b231-1c73adb9f72c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bf28e7-d4a4-4236-bb21-8e8fe5c93d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "54925cff-3b08-4f0b-9efa-e97a32f5dd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c26a4d-ac47-49f9-9f03-816ebfc4bb98",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954f6654-3576-471c-9025-0f45b0e5bc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b607b083-4bbc-4c28-80ad-17c4ecfa9f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42182475-92c0-4172-ab0f-7a7087db3d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2eac56e-dfc6-4073-9c65-3c6e8192fb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c287eee-1b07-4b3a-8989-c3a75cdab3b8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8adaa35-3448-4986-8445-3b15548c614d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb08290b-4984-40ff-a9aa-2f4f475aa86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304babbf-24ac-497a-90c5-f43d0185019a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "015efad7-4aba-4563-b1bc-f5e41fbf3f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559aa8f0-96e9-4cfe-957d-d760fcb64336",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7cbfe8-4db4-4a24-9a1e-e3e6fd8e381d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da6c1e3b-850d-48b9-972e-b9eda22292b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624b726f-c7f7-4530-a5f9-6e02bc9e1085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4cfe25f-4f89-45bd-9314-1d3270b847ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5c3e37-2fee-4817-af96-bd22cab7a954",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c0d251-0542-4051-9edf-4a4680ed6e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb6903a-116a-471f-ae15-e54aca772aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d28a878-e6be-4cc1-bde0-c9e6c399637c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aabd579-f686-446e-8a46-ba6fd4f363e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f86640-0a21-4c1f-87c4-4c8d64a14e01",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "726b266b-f222-4e90-a7cd-88bf47602e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8fd6ac7-5a78-4df6-9711-fe45629ba6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd28601b-74d8-476b-8ec4-c9a450f859ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c23cebd-2877-4c80-bf10-fbba1bd6ae56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b8e78f-4c1e-477e-bb30-4ba7ae3fdf7f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd14f68-d3bb-48f3-aa57-b422bf64c215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa7a579d-a0c4-4733-9528-9458c40a986b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95ce73a-0891-476e-80e5-0da2ff29d4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "81526bec-748c-4d20-a906-c7abfa9fda33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b73b4a-dda0-4879-b400-577d5e1c3dd7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b828cf16-e363-4fa2-b8f9-85c72af88299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3da942b-326a-4ffd-a719-ca01bc6d0cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf8e2e6-b412-4428-9423-5ee71bc4d325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "72829bbd-c2c5-4a6c-8af9-a34e211d07e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4833c01c-cfdb-46bf-9812-cae9c37ef817",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77aa4cf6-7aee-43f5-ba05-a801bd56431e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555a8bf3-802a-45fc-b2f0-546ea17cc709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423bba61-b171-464c-b09e-2124a9e30b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e730524-36ca-4d00-82a5-b0781b1f9bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f13f28-ee3f-4d66-8609-0c806d447500",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34ba553-61ca-4f1d-bdc2-2853c9672784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e25dab-9f3d-404a-8c31-7d11c0f74454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5b7edb-5540-41a5-ae53-76590c1813f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b12b2b3a-4c05-40b6-8725-8a235d12b666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f95bea-f0ed-4bc6-949e-054778baf58f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c27826c-69f0-4386-b779-a4aa9700c35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3c9d8ce-80d7-4475-989a-34a469eeaf0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb4fa52-95b2-497f-b035-82d47fd6b06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc68ce3-823f-444d-b65c-37bddc83c5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e011b384-6df8-423e-89f7-b6e4cab55280",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf0e743-6a9f-4f12-a398-d17476625e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973e1de5-c2bc-431f-9a59-a3c345af8114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35dc7b9-54b7-48bb-9042-4e62f12f39cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90f84995-59cc-4b9b-a616-160490bd2eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570bc6ac-1aa4-430e-b41f-fc868bb986cd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71727acc-2ac7-42b2-97fa-cbcfae4051d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afae546c-d59b-4fc7-9fee-e4e9f20d22ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428263ef-9b44-4d9a-8809-c537b6c74390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35443ecd-2c63-4248-a831-5e16e5974576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a89c8f-9cce-4563-ade7-6be82c4dcb07",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc407a36-f2a4-4654-a119-b7d4ca7cec59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c6a14cb-b098-4c36-a1f0-84adfccd2d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a4bb96-798b-4c4d-92ab-08a69013c5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58afcfdc-f32b-4af9-9177-24fb75331e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24087d9-d55d-44a6-b76c-d7446bb5a7a7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d22a859-76c4-46b0-911a-68173948bb99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05127ebe-2e0e-457d-a416-5392286a4e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ba9051-4ff3-4153-ac4c-0c34850d2ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "360def56-1980-42f5-9185-0fba5a04911c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a158974c-316a-4618-bf31-9b3254466981",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e2e703-4d37-4361-b48f-1bf698ea1a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddba7949-9c2d-4d64-9c4e-ed30fde3607d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3041b01-e890-4113-a914-3350cded629c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba63efd-a19f-4a00-995b-84a6ce063ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af42bc7-2e55-48f8-a559-9297ffd8bfa1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3307aa6a-b3b9-484f-a503-ae98be437645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d444e26f-391d-4054-b41e-e9f88835d08a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689a326e-5dd9-44a1-9f2b-5e3a38294e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c54d655c-042b-46dc-b4c3-443e2e50172e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bfd142-4515-45dc-80cb-f715aad7e792",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2ac197-0d56-47d2-8ccd-1b64f3be23ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530983d9-b301-4e89-85c8-ba1936d7b4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a885af2a-d487-4434-b318-0d1ad3d8f0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3257403b-5a7a-48ea-a421-9b5b2a27435c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f588dd-aec3-48d7-941b-b6776b86d485",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df256d3f-4679-4e73-8116-2cb82b591f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f2446a-0c7d-46b9-9fa1-a3087c2cec36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c461843a-8e59-43e6-9378-e4d93447dfa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8017ad-a7a7-42f3-948e-53e9eccc4d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c9be6d-f35d-4b3f-ae58-8235307a7330",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f92e4a7-a322-4a46-913b-9cc16438e184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25551c4d-c190-44b0-8296-82c3add8b839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbef2bf3-1494-4935-88c6-cce10e07cc24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0535e9a3-e63b-4343-a0ce-fa7a331ebe12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63589589-1355-4b5a-80ae-d109790fd63a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc25e1db-8eda-4aac-ab07-a8a739b20a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9ed203-ab2a-4ae6-98f1-aa4cbd8e3022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1762a98-28b6-4f49-bfd1-27fb8f9689f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98de1332-2cd8-4429-a947-bdf6b1bb78c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9eac9a0-7ad5-4bb4-84d4-776f6accbefb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120edaee-4f7d-47aa-94e4-5177dd1286e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfeb5bf1-4bde-4cc4-845f-e8bac8887907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68deaee2-7182-47c4-84eb-9b54dbcbb9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08041ce7-3b73-4369-b896-8ad05719e4b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d7842c94-1010-45eb-977a-4ba398bb060e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a60d02bf-acba-427b-93c8-1fda7617a722",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbfaefc-46a8-49f0-b3fe-c732e0ca1904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3d7abc-339d-4ea2-99b6-2ebf3bc44c09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968ca09d-dd0b-4afc-a568-1728409f4790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d336c7d-c273-4cd3-88cf-c93d0143063f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609acef8-aa53-4486-af19-2e685a1d3fdb",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88aaa416-555f-4e66-83c0-786d7cfc2d67",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d8115f43-75a9-4b56-8f46-e97b626da363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f35892c-9642-4db9-9834-c8262c058983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d7a1eaa-6928-4981-af1e-2bbb81746a1e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e49ae7dd-1955-48b2-8015-36541dc62073",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94d5428d-de7e-486c-9b11-74b02f9f6895"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6d105a3-0563-494f-9c29-353efaa544a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61bb5c40-b4cc-481d-8347-bc7907e7ee9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27d7f63f-68b7-40b1-b0df-1c90c9b69b39",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0a195fd2-d5a9-4a0f-b96b-7c75bff1041d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6ca6878-0676-4bfd-b2f0-55c9d58f6e8b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "555508d5-b33b-491d-a352-31f3e825fb07"
            }
          }
        ]
      },
      {
        "id": "812a1017-72c5-4543-b64f-d246b7126ad0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c3d3c486-d1c1-4ee4-9835-8e8899d71808",
            "name": "Negative Testing",
            "item": [
              {
                "id": "46bd93cd-df4c-4ce9-8431-f4b2daa2b7d0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "adfe84ad-3f90-4851-b9ef-40d7c3097269",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8724d5a-bbf3-4c2e-a69d-fe6233abb225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "105e6b0d-4cfc-4361-908e-f56f0dc4e87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b189ef-5171-4f81-bbf6-c071401996eb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e591a695-e93f-4fb7-8f7d-e0ee2e81fb44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa149cb-f431-42ce-a935-11982d22e2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7a5eea-1668-4d81-bcb6-51fc332d655b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352bb182-14b6-4c02-8b80-177412903831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2f59aba-c2a8-49d3-8963-53c0e865536d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8f6b00-ac6e-47d6-a3da-6ad1442856cc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccee3e8-00de-4443-98b3-9f958c71d50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ef51f8-7fd6-4e37-b89f-da1cb36aad51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b973d032-bcd1-4f86-83aa-7f44a4d50aa6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e84ebb-b800-492f-b50c-0d4eeca01f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6034589-9f10-436b-b7b5-b6e9d398bc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c79348c-6c89-4f2d-aff0-7fe143b50d9f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbba632-223b-4d45-8b4a-96d482b07608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd276df-97a8-45f0-b269-397f33d5f5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b71111b-ce61-47c1-8b47-cbbd52b4c932",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "face91ee-4bef-4fc4-97e8-51165c9ac097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98c9d5e-0fa4-4416-b3f6-82b588729c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8d2a01-3121-444b-b306-7b61ebc545b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e9b17c-be86-4674-8f72-4c3ee0da0749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3cae68-950e-4d73-a339-14c7e0a03b90",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216b2eec-2088-4605-b2ac-ae29060b30f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73fa3365-f3fa-4f25-9de9-9f6707ad51ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cf7e4b-ff52-4796-8a37-6563182a183d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7afb76-2080-4e6e-92cb-5e3e420e0933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53eae7e1-129f-46e5-a6b1-ad964b4918be",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9643aa3d-059b-41a4-aa30-73f5066e07a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "895cefc5-533a-499f-9f91-7e5622b50864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d810342-1dfa-4748-ac52-b2462fa975c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4605611-4d48-4596-84b8-731b6c8e4a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead2a652-63a6-4eec-964d-8ea3d4600fc9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca939b5-6147-429c-ad32-82e77c13fd90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb1f6c32-95e2-41bb-875e-b598bed6a4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493ae797-a8d7-4185-a421-02710c826e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2549464b-5276-48c2-8134-52dc28f7a07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d6ef11-ebe5-4337-95c6-bf241080ed20",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6dbde2-a2e1-4f67-8215-35caa20ffe49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8ce2c7-30c8-4a18-ae65-175263d07aef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2aa03d-18b8-47f7-9ece-53dd788c0182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d29e2d2c-dcdb-4db7-9b7f-44eeef30a799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5020e7-c54a-4387-8d25-901940a0a2c4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d0b623-efdf-4dec-9ee8-1d8a97b58fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b987d543-9740-4312-9db7-1f8e1ea36a45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3410134e-22fb-4900-9988-3037f2ae9641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64fbd7f-091f-40bc-8939-65a79fcb30b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feaf0fe2-1486-4358-8342-26469de4479c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabb3a02-11be-4122-84cd-6c11cb8d8ac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8455c8d9-c27e-420b-b734-789fcc4e1a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c42311-9bd3-4eb6-9d3b-4f1dadaa2ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1f75b0-1ef0-40a3-8601-cf7289cb86fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b8458e-6a2d-4d26-866f-b41ac7b2daf0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5130ee-fae5-4376-8204-5ac720dc7dc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6b61982-4f9d-4e04-ad03-e691ba672ee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09dcc79a-b8cc-4590-b21b-92b2d42f5eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "411b8928-61b6-4707-87ec-5e31363f504a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156fa1a7-c09f-475f-92e9-0e8361d57a31",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02bd2cb-833c-471a-af2f-f800f94a8a0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c33226e4-48e5-4a23-ac22-efd5cc493cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e49b08a-1cd9-45ed-8406-1c2af2775c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ba2446-29fd-467f-93b1-49b8404d621a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d1e55c-a971-44f7-8363-430093a041cb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8844c2c0-f887-4e09-ace4-301d78ae8d52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34f3fc8a-307f-4c55-8db2-86351f626f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27c6c0c-1fc1-4bbb-8767-1321b80d3fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49143ef-e409-42d3-b11e-49c00c7b4c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47156f76-f5cb-42fd-9bc5-02627c676cb1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0648b69e-a866-4334-8f99-f50a38aff5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f273d7d-2700-4b82-a774-0227c77fe25f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7446e7-00cd-49b3-8787-43ce56805d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f96ef1ba-6426-44e9-812f-e6f3c73f4ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588e5973-c109-4567-ac8e-88dd502cd4bf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb905952-d096-4b41-a597-d866541b5a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82e050e-d27c-46e2-957c-da7fc3917269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "003913df-d029-4318-aa31-b9ab139c6d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25957e87-c462-45dd-bb73-bc52e9ac025b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6aef8d-3b27-42df-ae75-e3b86ee84944",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef58259-9b9e-4967-8799-b51927d4ecf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7ea7eaa-fb99-4c20-a7c0-ca520f5c38c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2388eda-4870-4f06-8f65-512e6acc5597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b474c982-9f1a-4fb2-9531-4621c51f8bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c82444-1f86-408c-82d6-a4fc77dbdb5f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395c497b-e1db-43bd-9ca2-f7f8d0352c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85d745e-ec92-442d-9874-63dd82f67f33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0090dd-9ca0-487a-8463-37e4e8d4ee23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0836200e-d969-4fcf-b70e-fa51657a04ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fdf0486-bd00-4ad6-8261-681a30272b21",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5835ef-b5fa-44bf-8d8b-6ac4ccb7d8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7d50dce-8b15-451b-9590-62284d08284a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3583f00-f6e0-4d12-bd7c-c98dfa7fa914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eea9264-ac6a-4a1c-bda8-1eb68239209e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96d3ccc-233f-4bb9-b2b8-aea047b49af4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e863f005-4ef2-4331-bf69-6026f5616217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b692686e-d622-4741-8bc1-6c9cca026a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55d299c-cbcb-428e-8a9c-80964aa6cb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a1105a-4f39-4ffd-a9d9-930776f88257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62380d8f-2c4f-4fa2-9e31-bd0f8f79539b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848a97f9-73e0-4ec1-879a-52929edfcba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be426e49-d1cc-42ed-a000-4f139daa299a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa9e421-b8a5-48e0-94b5-843f28a30ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aac95da-dbab-41e6-af1e-4c73422328d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f768bf95-00d8-43c9-b9bd-02e4882b3291",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0627fac-8e0b-4577-9e96-45f4c534da03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86506e5f-ccab-444b-8b17-9e2f7caff104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86174462-b585-495d-b1ec-bb52761c2f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7032bf57-c8bf-4dbe-972f-8b0f24d1fac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce52812d-8cb0-4f5f-83e4-785e85468918",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46086ad7-e668-4ffb-89e8-d3ec09ae0369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dccf0c1-74f0-493a-94eb-011a9aff3399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d85e2ae-228a-4686-ad46-dc5b80b9a308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e553fcf-c569-4f79-bd00-5f4ae8957975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36178ac0-8dac-47f6-b051-1c00d3b39f18",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056b1ac8-6f0b-495d-8eeb-b24f33f77963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1458024e-a4d7-4a15-8239-d3b4a3652db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f88c5f-3f47-4e7f-b883-15555e4716d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f40f09-203b-4825-a54f-494d15cf9c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dede1005-a829-4eeb-88f1-21e0686f8771",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "092c41e3-4f78-4255-8cd3-d5e91c1ec95e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "118afb5d-3d4f-4a59-b638-d30b926f80fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b99db6-b5c8-47a1-911e-532ce4f9cb64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe5fdb9-7583-462a-9fe8-e7e9eaa68f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cf5aaa-468a-41cf-bf4f-0b31af95f402",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ec3d52-444e-4024-b05f-88c157b6a8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f1153d4-7f8a-4b97-80d2-75c25d6459cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6f0cf8-568b-43c5-b987-fc311d530c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e9f67a-9c47-4872-8980-40b047288df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa645da-068d-4d04-9e75-4c06bcb96474",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9673d2-ded3-4205-8b8c-9b91f748efec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6694735b-4dd2-4c99-88b3-c1b21cd82cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c81c11-ea6e-48c3-8714-4541c4d38c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a22f48-97d5-4ff2-947b-39fd9ac75521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4a07af-ebbc-436e-9257-63acf4077ac4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1092d5-b240-486f-b7d2-843534663430",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "defc0f9a-3710-43ae-a6f6-f8c367503a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "017620ff-060e-4b19-8d92-def200a667d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2abd13e-998a-43e3-80e5-b57e8d67271a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04dfbe8-9a37-4235-a002-691e7494b45b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2a09e1-cfe3-4693-a87f-3b788b77bfc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "408af343-b3b3-414a-a38f-7ace98b624c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9cac9d-153a-4829-85c1-7d20ed94bcc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c632c2-da7e-476e-8bed-69e02a6693bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77325893-2d50-4a9f-aa74-7b5cb08d505b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f32e85e-ffab-40f4-a713-13074c63d2af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21ac5152-5a34-4f21-99ce-211379a8e416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c25a53b-989f-4a60-8f11-a5c64991df97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0500fc79-4836-49fb-8a91-1790c1c8c994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdeb7bf-5657-489e-aaf1-de639bc8c5ab",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6c2d4c-8852-46f0-8682-1966725ee0d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88dbc39f-1e49-4635-955f-126c5c54e722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "378716b4-a594-4eae-9a0a-75605e3926dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255e63df-1d75-44d8-a592-fbde53a55d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ed0f94-a335-44e4-9cf7-4471551def11",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0eb8bc-d829-43fe-81d0-b80ba5d1a84f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "386554d1-6542-4d57-9d65-b95c6e09d025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05edcd8-d4b4-48f4-90d8-d89bdec657fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6e1277-e608-4e53-8898-e7cf59538b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f96f862-c846-4208-9589-5d3c38b4ee60",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f1e547-6923-4a07-967b-cf33e0785b96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f761f63-3789-46ad-90ba-cbb77555cc7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e974f507-e0f5-4f5f-b2a0-0f79a3840e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756e318f-60f2-405e-96fd-2f173f33bd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e7407b-b1e0-4314-a963-6c167f9a69bb",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5385a309-3fb7-433e-9b28-5688bdea4048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d9079b-7042-4b54-a527-516e8f93e421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7a4f07-1db7-4bd2-aa45-9477d7577cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a50ea19-280a-44d1-a135-a291e297ea4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3eb26b6-3a16-446d-836e-2305195512dd",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e1d869-7747-4210-aa26-6e5a64562715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1e97c7-bf93-49ab-bacd-c9215dcbf5c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "756e0078-9d84-404d-a5ec-e09f31e13224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d38b92d-5f42-4d7b-85cc-49e1d42b6cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894a0198-d42c-4b57-bb25-fde37f8e8daa",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517f2f95-d111-4332-8cca-171077bc1576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49d018a-ce6c-4ed7-a56b-83102fee2d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5b63c7-7be4-4580-80cf-8f8957ace25c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45acab1-eb39-4429-9aca-22aa0113d93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b00668-e92e-4455-905a-b4b0fd64d657",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3553fe9-8329-4a0c-9dc4-4f9a6189f7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e6b05e5-2506-456b-9455-ad75a70bfdd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fc845b-3c54-4472-be9c-9fa7c721fd5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbb14f8-4180-43d4-8fd0-e4c1bafd9718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae34acc-3f44-40d1-88bf-2fdb706b7705",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cdaa46-5d8b-4eda-adfb-188fc4a40c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11dce159-8cc5-4fa8-ad00-2387057144de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871cd6ea-cd4c-44fe-956f-4eb37b9c7963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0714813-53ca-44ae-90fb-51df7e73b7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68d9e83-c93b-4802-a2a6-449523b177c0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0e55aa-e824-450e-9e71-264a57ceeb28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c957713c-c5cb-44af-b538-6cd8fe614c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa68a32a-6192-4215-a693-6a909bb44db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c897fbb1-06a0-4ca7-8d9c-2849659d5b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ded1ae6-456d-48db-a917-6d14b6a2a9ce",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb08890-48a5-430e-954e-1472d6589b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec7c475f-842d-4016-9f2e-f71a4a8a748c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f06c294-f9d5-4720-8234-bd01c05b040d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdbd1d18-bf06-4ba6-87de-3ecd3f8df432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6147f426-c427-4def-9ed2-ec97b6f18ae7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f970a54-253e-4245-bc04-bd81a3c16e3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64231cc1-4b94-48c5-bbd4-44f679924448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd178085-38cc-47df-b2e1-c6ceec81fcf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d128f8c8-64ad-45aa-b8e4-e8e0bae71f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3164b05d-0534-401b-8aa0-41c0b099cf78",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f96461-e6a7-4546-b7b5-ed2ed9fb9369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1048551b-482a-450c-b198-95aa2ec047ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b936cb-7afa-4be0-b30d-3a0977fbbfc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f5e84a1-c31a-4773-95dc-328f4ac2fa9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4826855-c4ed-488a-b907-c9348837a172",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c07d64-4c63-459b-af3b-98a12664b90a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a4bb35-4f0e-426f-8eeb-e133f4ee7d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b044eeb-6fa7-44d4-8f50-59eae2112e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3ba9ad-9bee-462e-bdab-d0b98503633a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c604db50-6466-4415-9a78-cbbafc5b2212",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb420c9-1aa4-4663-97de-79d76c103367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34e1222-637b-43d7-8835-83168eb96d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f32f84-0c30-43d8-8e67-ac6c4b06d9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "720415a9-f129-4986-b2ce-db7e4a4bdf20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59330db8-aa6f-40f9-b72f-af66c24323ea",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59dea84f-172b-4c83-a62f-4082af32f478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a1010c-45c2-4f5a-8d67-6e629be0ea28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75ba047-6ed3-47de-8dba-f2e27023bb04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37582afe-4816-4ff9-93ba-a5c7dea95880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73c10e1-e101-4caa-b3df-523cade4f2a7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdaa28f3-c659-480b-b0fc-cf146a59f390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b69fdb-08e9-4f7d-b41c-4f91605301c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acafca84-b86f-456f-b00a-38f6e764a816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b4ff8ad-1648-463c-ba7c-76428c912bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bd0433-7a7e-474b-9e62-aa27fd1b45b7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8d874a-b166-4607-880a-4adeb50cbebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b324659-004c-4783-93ac-7b33910282f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fbc213-3f56-48f1-88f7-9dc5f881235f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8078b5c7-1bbe-4430-879b-6b379285b5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04926ae7-fd02-4fa8-9708-398beaf1a974",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01df81d-0673-4e8c-99ce-7ebde9d7e9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0d9b99-f9e0-4fab-a651-ee572e9931ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24edb302-6c43-4a79-ab4a-2beebc901c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035ab85d-49b3-47fa-a390-42b7fa415392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a28165-ff2e-43af-b19b-749363811731",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6970c4-ce96-4ddc-9227-05592f8b0a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a78ee5f1-4773-4493-a909-eaad510237c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c509070e-ce31-4e8c-b330-3ac394403ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "851deee2-1d36-439e-a4e4-c67fec11d109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dba2cf5-c5c0-4f65-9d7b-b15df223406a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9743fb9-231c-4087-8c46-a32a81c8b039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a963036f-4787-4323-846f-07af6d337693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e889caa7-6b43-425f-b2fd-2c52bff778bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56bcd071-4f3a-4b26-b6cb-a0a8b1b342b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a07b28-701b-4dfe-a119-a6d2d0cd17b7",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71b5dd3-6161-48b3-bb04-f824798f260e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fecbab-d604-4d88-9014-d83ef56bbef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c96fe07-954f-4465-bdff-fc2d2024bd20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11e2c7c-ce7b-4e1e-9596-2e2ee5b17895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae20517-a8e5-4e64-93fc-83573f3a8f31",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf7dd3d-d9d3-4b54-b455-f38aa0c10184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3df67e1-1798-4d60-84f1-8f8124387ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3884f45-b40c-4050-9b04-75fde3e8d226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10669bae-53c2-4b21-9754-74fd94c1375f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659f305e-672b-43c2-9222-47ae73be2e0f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3dffbd-1575-477b-8989-6c85bbb5cd11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3662fc4e-29fc-4b2a-952c-87273b784b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8d5146-5de2-4e69-916b-4a128efa1835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b1c3c5-ae9f-407b-ba06-1d146359fe8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04050a0d-704e-40ff-bb36-a118547f7329",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b96fb61-c27e-44eb-b6f7-42cabc797fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0c944c-60ad-41a0-a21b-61fe5448f745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c066a6b-d9fe-43ae-9779-92e8a68d81a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bee0933-f829-416c-9cef-7fb550ade681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e5bbb2-01e4-435a-83d8-f83dad7752ca",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea03ca3-5a1b-4021-9f91-9fef4e60f317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ce5abf-f353-403d-81d3-bcf06085c138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "081c92b8-d34d-4b31-ab52-0a7ac7e23fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4907a60f-9acd-46f0-9e19-1707401d4f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2341e0b9-4db3-4753-a00a-73fd9d9f63cd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a3ec51-4284-483b-af5b-3fcfc0b92c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4e3e6b-bc0e-4264-87b7-3d11820ac25e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a24bb2-e1d2-4cb2-8c48-6d7753b0ca14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b5df6c-1f56-4758-9a92-ee2b85c06da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5a905f-6bb4-4680-a2b4-136ba83e6940",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990fcafe-8bfb-4e45-81d8-fbd6c9f5a914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ba808c-1ffd-4332-9d26-f0752a6dfd5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf67b317-79e8-4122-ae17-fbcbbc49f2d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e95c16-2b13-4093-bbe1-05f14748f90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03772e0a-4ec9-4143-bc19-dd278d27eef3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1be632e-4f7f-411b-b098-c5b436427ac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21133a8a-b258-4212-a012-b5bdac7cd41f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "013f7b59-65a5-441a-aae7-88368f31870b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c7fb91-301a-46dc-8441-62d72b2627fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf5b0af-8635-4be6-9302-ff4c5ada62aa",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a034c078-b038-4258-9bd4-ac107d190a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c495288e-783e-427e-a58b-0cbcc0b2fb43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42e4aea-a85b-4afe-aa49-8532902c744a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119483a6-2e75-4ee8-9645-6180e8c15a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69570bae-36fd-49aa-b802-470d05d2fe48",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5590efc3-aabd-4376-9dbf-e083f33708e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f5c8a04-7033-4532-a08e-4ac6c45e6c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b1cac7-f00d-442d-960a-f32330be9c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ae491b-1b8a-40cd-a7ac-ded2668e6632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a03d0427-5451-453a-8385-f6c7c729bdc3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bf5acf-66cb-4602-82e7-f045cf5f584a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ef0b1f-aa78-4131-a47d-5a6feede0876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d43d37-4ec5-43f9-b187-52d774ad8668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40cd4bf4-0de8-42c8-ba95-3fd9b5f2ecb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feef7c78-f835-48ed-ae37-e1cc198dbe42",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcfee00-265e-48bb-aa63-88804c613949",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a51977c-6fd1-47f3-b42d-84166ee23862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4835dd-aa9e-41b5-9df7-e64180762d26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f68f54-c576-4b3b-a865-9cf1c6c9e9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4ce349-55b3-4fc3-894c-71eb7c3f9035",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1b67ea-c399-4dd7-9833-b74bca0ada3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5206d962-ecad-49a9-b646-3f23e5640ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ef862d-500e-4c36-8701-a1aaa12dfee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a1011d-a242-4e04-bbd8-4f94da99596e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4d72ba-eb15-4118-b9d7-e7b0039f7d72",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c750f7-a6b2-4010-9087-d9b6e39e603e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc083811-1f4b-4037-b1e1-c70585df195f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "220a984c-a6db-40de-b5ea-ce63eb9e455a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a12e982b-5394-4a6f-a4d1-90c386fa11cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1362183-2a3b-43dc-85a5-9177fcd3379d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cf6bc1-63b6-4044-a1f5-33a2da806e1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df56127-0379-48b9-9e90-1316b035d59c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c07f81-ad7d-4ffc-87d4-455563d5896c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23911043-b367-43c2-b2aa-6c4782f1f72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c0c41c-a3ec-4809-86cd-c6a5cd3c757c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ad16e6-5742-48f4-adaf-d873478a07cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eeb4d93-e53b-455e-a156-9b96af0ee716"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21d908c-70ab-4ee4-a673-50126d501163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8827e7f8-be31-4a0b-98ff-e55f302ca0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb3b480-1942-4726-91a6-85b08904cb76",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c12905-026f-4c86-9c43-0225db3782f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "364e12fb-86a3-45a9-b47a-30a7f1571727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b846de0-d8ae-41a0-ad9b-9d47ce80d268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a282aa88-cff9-41fc-b41d-7256327a8d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1303ff35-305f-4088-80b9-8014bf8dcb48",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63cea029-8bff-4ef4-9c4b-6083c5ea8d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "122ee708-cd0c-42eb-b2e4-939259331098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "828ba55b-cf14-4bfd-8340-d6041cdb38b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a2fa90-babc-423b-954d-c6e33893f21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ba97b5-b652-43d6-bce6-c8cf23a11474",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b410e234-9e33-4de1-b902-6e74063329b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "371cf7eb-ee07-474a-bcd4-9a4b6cefd3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c8ae84-1663-4eeb-b105-09460a0ac3df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7474cac-ed6f-4088-852c-412bbecabbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55ff9c8-ea28-4980-a501-5939ec750ec2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10bd6f1-03d2-439a-9e36-01b30b1554c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3511c7a-3d1c-447f-80bf-e0fb3de4a6ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8645e29a-8d90-44e7-b824-9ed86d907326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "566d4a1d-730c-4336-a64d-0afc5251d685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00198f23-6681-4456-b543-d5d869ca9867",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0f3f41-9052-4c3c-9909-a5ad853a1cee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d16725be-4d0f-4bf8-b9c5-b0b5be074d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c31d53a-eb55-4c40-9aa2-6bfb9ea8cd98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd77329b-b6ad-41ca-88db-5408b5fedde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8a1398-f669-4a9d-b432-2d3116afcac5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0a4211-eab8-4015-9d9f-8c3edf79602f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9760cb1-3bd0-4858-b743-93320a2188db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5184e910-c968-4289-8114-7a8dd83dcc54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cef82c-83dc-4b21-a35a-4700a050c97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534a5645-506d-4b46-9aef-0d259f5f1366",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da5c95c-9b55-4a8f-be34-4205835f864d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19719c81-d66a-460d-a03d-e2cb501cace5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "592a986c-e302-4987-974f-42ff7701a882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469d0cef-be81-49d6-8e9f-94993e5f23f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86aeb04a-a6a4-4973-89b2-9733d2729371",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeda9337-8532-4a6a-a282-b7890b134349",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdfe9d8a-622a-4f81-98e4-d4fa5df5253b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2318d775-db4f-4803-ae0a-9f0a56090240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce0364ed-6049-4668-bfb4-241fb492f979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8d6f8e-4b13-4959-a630-af89141ba2e5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2c1607-b5f2-4fef-8f7d-bf18c5bac373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c25d984a-a605-4c47-8033-0ed1c3e93e0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e7e5cd-0f3e-40c2-bd61-8f06fbe72672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d78fbd0-37ab-4737-a509-98152e61a5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b8abeb-30ba-4cbf-8960-7339545e3708",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801fb923-8df4-4dd9-8778-6c595d1e72de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f3fe8c4-2604-4924-b771-07c3aae6330a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95c258c-a2cb-4549-9cff-8486d0b28413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b478fc-1ae3-4444-baee-8c421310662a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16ee931-854e-418a-b3a5-4c1d47ee73e3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d591987-c6c1-4f19-8664-5f2a6f37bda1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d547783b-4bed-4928-9693-2a2fecc26274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51f94a5-e743-4a78-bf5e-736d29ffd41a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e83258-e4b6-48b7-918c-99d4ca17b50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3556cd-3e98-4ca3-9dd3-005fb7898253",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed03ecfc-6b9a-4dfd-b196-b2a973468a5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85e2b236-502d-4b12-8464-808bac887f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75b8ede-5a09-4c95-9fc8-75f1ae34ee19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604e4e47-e015-4ddd-a756-ac281b39368b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75258077-b8b6-4b90-8a9d-8bbdb80d3b11",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a39aa29-3f33-4577-815c-0823ad80ec83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "605fa3af-4a8a-4e98-bfa9-e0d47a42d045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c103d29-9918-44c8-b588-5964c522a634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e0b777-5749-4262-bf84-369234c6924b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f33d15b-07e0-4032-a652-b60915e5a5e6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28be9b1f-8015-4c4a-9856-cc7f7b3897c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4e1554e-b639-4463-b17b-795b405b0a67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "708816d8-41ea-48cb-bbad-afef96f9001b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "159139ae-3316-4133-b8e1-53f74a5c1a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481fd7d6-437c-40d4-9903-875ae6111180",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fd21e5-3470-4a13-9ec8-345d9ae4348f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a419be70-7d0f-41b1-b6b9-09f4a458e409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b80f5d-2946-48a8-bec2-44b826ff25e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab886e1-a302-4502-b24d-d9cef0d74deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f05e2b-fd7a-44b8-8e72-d5bd8ce513f8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e862a7-9242-4722-8d4a-17fcd19bc6be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec49961a-26f7-4f7d-9333-7eb40585a6b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f64621-0a2b-48cc-b7e4-3ba9466dec07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c438be3-609d-4218-884a-fb3b9aef2463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45358653-12d2-4a29-8dfb-7dcfb05a30c2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e811fabf-5ffb-4f08-b5ab-cf18d1c28b86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47a7a7e6-cd54-45b4-89b7-5ffb42105811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae1bc2a-e2cc-42ea-b74f-a6c48b4dacb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0db429d-0e53-409e-843d-9647f8a9c37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e541e7-376a-429a-a893-7278b053c3e4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1e9a13-d726-4aca-8746-8aa6a5ae2724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4385da78-c55a-441a-98e7-11df9feaff24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24bbc9e-06c6-49b4-b09d-217b10482d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cdfedc7-0fa2-4448-8ee1-6d3482930802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5a9dc0-66d4-4ecf-a762-93f9954fd428",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e536e2c-bf10-4c86-9322-819167fb58fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b245ac-1cc0-451b-a274-c54e08f552be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d467ff8-6d6d-441b-8f03-a01f532e2538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6266c3-ca8c-49bd-b427-2b8342277e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e658b4-8284-4d5c-b71a-6a1f56380c8c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d18d219-6118-4b3f-9399-cf4e5d7beea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3edded2b-0069-43ff-94b0-611e2ee81aa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a2286d-d4fd-4dd0-b240-7112cced03a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24664a6-62be-4541-86a0-8c2e6d62fbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0fe328c-5953-4e33-a2e9-55f13d7077b5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c8a788-5996-49f7-b9b4-548d37fec8c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "200201a3-8b2f-4a84-9c53-b8b9e50fcbe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e06fa19-4777-4ba0-9635-fedef7f4a068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18492e4d-ab24-453c-9b95-f68c7f5c7114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490c2f38-e547-4968-af70-a97c879088f7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd11196e-86e8-4239-9c03-45e3ca259f84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "891c5a3d-b557-47b7-8c1d-331389861b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6920b7-9ad1-4cd6-bc44-70a25befcbef",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670bddfd-72fc-4264-8719-d6a35af37a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27790468-fb89-4e01-b107-81192d8ffa28",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88d17f7-5c29-4524-a3a8-8e49cb385a1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f943e7a1-d6c8-4e95-9b09-f9ef5aa9aa76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48631ef-2884-44d9-babb-aad0613f9921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7cdd7c-f869-420a-a565-64e9e7fe3675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63607f5-f8e1-49cb-8e64-a8a76cff5d09",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ad9d3c-61f1-412e-a986-2d9eff9c1837",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f694e088-712c-4727-aab5-ea5755f114e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8a70d0-7eeb-49b3-9b9c-8684f76b4b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2479a9-4a6d-4398-ad29-1ce743dfc7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a231f060-18d5-4a10-8999-a7301c6204bb",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5f8f56-bc75-4485-bb75-79f690aa1d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd5cbe76-7803-41c6-8ff9-f634d39aafad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86212812-3501-4a94-8d5e-b13dc417205b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d322ca1-134a-496f-9808-505bdd17c64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b84864-4bd2-4287-97d7-59327077bcfd",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115b3db4-453e-4215-a976-20e4a5b80805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee8da091-5531-4dae-a205-2611a08fb5ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4bfa22-7197-47e1-9ac9-5aa29ea3be8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c4295e5-e178-4d2d-a516-99bc82d2b410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9419f7a-22b2-4905-ae7e-720c16e2baa2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5145891e-eddc-433c-b8cd-e30db4ed76d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d45b1f-49f8-4254-b038-136a05b7cb94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a70aeb-405a-4da5-8acc-4cf714aae9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2408d0bc-b064-4e56-ae45-c5ff44330c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ccbd3ce-4e9f-4234-9b84-d208a0520cfa",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe744474-7a8f-4f6e-acd0-455839c019b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d155139-6b60-4c1e-a2f8-41ff4ed272ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fcc728f-b8e3-41ff-8cc4-34ed11ebb77c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb729d2e-63e8-4627-94ef-7f6b9bdb7ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5c4368-88fb-47a7-bf80-111f1cf9dbbb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47de19e-38ac-4fff-a826-77b6bd57f2fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eb0c0a2-6fa9-41f1-b545-276b5e766d6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ffb9cdb-25ff-47b0-b7a1-2e7809bf453d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf3c418-5a5c-4ce6-afe8-7b33ab76f4fa"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44f0f6a6-ea02-4ca2-bda7-5f2077af5af8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9f2001c-302c-428b-98a7-5ae928857822"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f08cf7fc-ccd6-460c-be5f-b8355279cf1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6319bebf-b566-4672-a15c-270b385b6e7b"
                    }
                  }
                ]
              },
              {
                "id": "1930ca32-177f-4ebd-9f54-16c7f464faa1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "71d3cc92-b4f4-4cca-9d07-c73dd485fa7f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bfd4f4-ff55-4dad-beee-79c4f8e079f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "413a8f85-efd1-4bfd-8a13-ab63fd08c724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdd5908-3207-40b6-a68d-184f0234ec4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7a613d7-c5bf-4e5a-b5ab-81f19e4a502d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25172604-39f5-400f-a65f-e4c3718999e9",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c75e45-48bd-4909-99b9-e4973229aa55",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8949f861-bd1c-4d10-b8bf-f422abe0df27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d1d563-3074-4d79-9fe1-5882d57ca301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49beef9c-a322-4c32-b4e8-b5125dbf0df7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1334f5b-c0b7-4a88-adcf-43a044bc99cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c76dd368-7dff-482a-813b-7e03fb136eb6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68250d8b-80af-4c07-b012-08d6fbd6ff71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b3a64d9-231f-410a-bc6d-1c2ab26cae7b"
                    }
                  }
                ]
              },
              {
                "id": "9d4c4a24-f27e-408e-8a4a-aed4d8ff6d86",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b3923f44-3f7d-4c97-a14e-3660aca8c310",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36978cf2-748e-4321-9958-824145591dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5a61180e-e4db-43b1-84c3-614da0abf4a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc2c62a-c6e5-4324-b1de-21625455946b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc25edf-b137-4948-aff2-a525cbba392d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "25650c2a-26e0-4d81-835d-0d611a368654",
            "name": "Positive Testing",
            "item": [
              {
                "id": "05e37daa-4e3d-4255-a5da-9ed916a91915",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f088570-0525-4980-8a37-be8caf354438",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5e120bc0-a2c4-4bb1-8044-e3a1808efc1b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b23db144-7cf0-48fe-9ab4-36e0bd371ebe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e279260a-408d-4ee6-93ce-4eee534e3fd4"
                    }
                  }
                ]
              },
              {
                "id": "a45435c8-dddd-435d-8427-01414292e9e9",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ab39caf-a5be-4dae-a50b-e38d684d431c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0f5e7dc9-9d2b-43ba-8fa8-34c97f4d6e8d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "069d218e-7ee0-4a07-8d0a-672444f9b9bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f07f5df5-363d-4278-830c-678e1f2b4ae0"
                    }
                  }
                ]
              },
              {
                "id": "aea89575-9028-43b9-8eec-7166c5886a45",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f329544b-1387-46b6-8a49-64fd914d3e08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "07b750a5-63ef-4254-b97c-c642f1e1665d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "695ab884-a91d-4150-a498-ad118f2af492",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a84114e-d7e1-452a-b021-7aff59a96673"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c41747e7-557e-4008-9270-2b07ddcec8ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "37dd797c-7076-41aa-b72f-dc2d8ef5aacc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "900378d8-6975-445b-baba-55bdf1b58cc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9800a273-8b3a-4527-b6c7-527def25ece4"
            }
          }
        ]
      },
      {
        "id": "23d8b5fe-e0b0-4173-bd5d-beb3d7d39552",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "22914928-a91b-4d95-9970-52cb7ae13738",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c10cd6ad-0ca1-4068-969d-7b067daf7a93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b58a118d-e10e-4b03-8db5-6bcc192f7674",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e776d332-dac0-45ce-a1d0-08b2df98324d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fcb2d482-fa16-4931-aa22-c621442958dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb72a71-4211-4a24-9598-de1333ba54e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f3f9be3-adfa-46dd-9e28-bf992dff4b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acff3b63-627b-4511-a946-2bbf31aeb03e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874f739a-a939-4e3c-9970-165baaadb2f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4278bf3c-ee23-400a-a994-26ffc618258c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94c506a-4b49-413f-b58b-a55ec05afc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d30449ec-0c0f-44cb-8b16-045c5e798781"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d19f561-8aad-4456-b30e-b1975df14a08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e62ea40e-68ea-4652-9e3a-2b7f8bea621e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c699294-2408-40f7-a79a-d3ed27cbebba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49e80ae6-bfcc-4c3e-8c23-897ee54c1983"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9f9eb42-9f49-4e53-ba33-e1d565dd0bfe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "42349f00-b344-4a54-9647-5fb69b213275"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f09b8028-4c1d-4886-a071-365525e9abdd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "204f8f80-d150-480d-a0b0-488be31e0896"
            }
          }
        ]
      },
      {
        "id": "aa760e14-1483-4320-a7dd-91a2dc21f31f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c2346f8a-2287-4add-bea4-f703f785441f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e5c9dfac-9a7b-44d3-b044-ff9b4d46c03b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bae50ce2-a772-4f81-98b3-9448d467dedf",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03acb1d-1694-4957-97a8-763c5081a228",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "98ac51e1-ddc9-43a4-a335-1c10ef17b567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47dd3a14-8f8e-4932-8742-5f538fbf804e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "336dab0b-7632-4818-8499-f6b7acb3a7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75257055-7c8a-4654-a989-a7373243c745",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5134d620-3cd2-4ad1-88ac-bf59b3412fdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b1812f05-0572-499c-a811-992f6e8ec69a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383c4e89-f598-47a8-bef0-874f753cd561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34fa3adc-34b4-49cc-8242-c50d27c346de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "818c1109-c856-4e51-887d-0583072cf679",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e31d6de-95a7-428f-adc5-041e1f234135"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9931280e-ea40-470b-8660-437ca60f2c2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4bc6761-9269-47a7-be88-2877b92e0e7c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5f37b73-923c-4ee0-9968-dc091561afb7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "06cbb7fc-be5b-4e87-b112-8820ba778671"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd01db46-aa3d-4f42-9737-6343a4f941fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81ee6bbc-3b13-4adb-8987-d291eb0da64d"
            }
          }
        ]
      },
      {
        "id": "0ab7de1f-d6a0-4075-a9b4-13905c52d034",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "36422185-1b8d-4132-9317-14e4afd28fa5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fbae5f4a-22bf-4685-831f-0e7dabad6fb4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29655fa0-1565-4763-a5f1-0d325728f31a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defd62fc-af1a-43bc-a22f-7a61264ea6af",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "14824e72-b568-4bed-8ccd-37c6dcf5f2f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67e106e-2ffc-4520-9307-0bd67df42bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e420966-a57e-4f01-b077-88a19f8b0787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4f8494-8a58-47e5-a023-e8d0643634c1",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fea9669-13fb-41fb-9ff2-aaa2420145aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cd460b76-89cc-467f-9c89-74e5309ba7e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d168286-2d4d-49e4-bc45-cdca02fe0835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8db77538-446f-454e-9e21-a276920341da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7070cff1-223d-4194-9a36-e24e3126630e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74aad8ca-26c7-463d-a004-57a259bc31a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1d43f70-44ab-4fde-932a-b8d1745eea54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0967759-7881-49f8-9b74-52628c06efdf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05719eaa-7f7e-4022-990f-7c5b9b26edc4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7d355a29-5a75-4fdc-8761-03f273cc4f5a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f612e08-61d9-44f3-ab1c-6c8118785706",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "acdd8f0e-4d4d-4fb0-82e7-bddddc76e3cc"
            }
          }
        ]
      },
      {
        "id": "7fe1e59c-01bd-471b-8a98-855a1baf1145",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04693f02-0ca1-44b2-96d0-d92b88f41526",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "095a26f6-68d6-478b-837f-1631d1c9dba9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6da714fd-32c6-4a84-8062-54606b2a956a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4ed5491-e880-4047-a704-7c8034f96425",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9042098f-2cff-4185-84f5-42c55aabfd95",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.49808429118773,
      "responseMin": 4,
      "responseMax": 829,
      "responseSd": 105.32808165727751,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669855538372,
      "completed": 1669855565030
    },
    "executions": [
      {
        "id": "e404821e-9f53-49e4-bd65-ce902c972abe",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "96613497-ce60-4dad-b7a6-ef2c32e3784e",
          "httpRequestId": "bbf2b0b6-f231-471a-ad92-ff6b69aa2668"
        },
        "item": {
          "id": "e404821e-9f53-49e4-bd65-ce902c972abe",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8651e6cb-03b2-4755-95ce-5ec2582a9044",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "0e4d0656-09a8-45c6-9eec-607c3029bc40",
        "cursor": {
          "ref": "fd5e7f7a-a5e8-42c8-9bc6-25cb47de6ace",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d5dce06d-1ad4-43e5-a484-972d1f8b9545"
        },
        "item": {
          "id": "0e4d0656-09a8-45c6-9eec-607c3029bc40",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2d3e4e86-a476-4ddd-ad54-d496409b053b",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "c67054a5-4d59-464a-9efd-c23ca58d8be7",
        "cursor": {
          "ref": "ede3eb15-3ddc-4cfc-9922-1fb39abb5b1a",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c6eb7345-437b-41aa-a62b-3ccb49c6d487"
        },
        "item": {
          "id": "c67054a5-4d59-464a-9efd-c23ca58d8be7",
          "name": "did_json"
        },
        "response": {
          "id": "9430a82d-5066-49fc-a175-cdd5c98e13cf",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652ca5a3-549b-40c1-b03a-6b60120820f9",
        "cursor": {
          "ref": "f41344f5-db46-4fb1-a8c7-2221b952c8ad",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2a262ad8-8df0-49c6-9722-1bc2c3df5082"
        },
        "item": {
          "id": "652ca5a3-549b-40c1-b03a-6b60120820f9",
          "name": "did:invalid"
        },
        "response": {
          "id": "a78ddbb0-2f53-46df-ba6f-ef1dcdba18a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652ca5a3-549b-40c1-b03a-6b60120820f9",
        "cursor": {
          "ref": "f41344f5-db46-4fb1-a8c7-2221b952c8ad",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2a262ad8-8df0-49c6-9722-1bc2c3df5082"
        },
        "item": {
          "id": "652ca5a3-549b-40c1-b03a-6b60120820f9",
          "name": "did:invalid"
        },
        "response": {
          "id": "a78ddbb0-2f53-46df-ba6f-ef1dcdba18a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414375e8-7525-4643-ab2f-edf471de601f",
        "cursor": {
          "ref": "c7f55ab8-ab42-474d-b93d-d1558d5fb562",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c90eab6a-e7eb-4daf-ab05-c192197724f8"
        },
        "item": {
          "id": "414375e8-7525-4643-ab2f-edf471de601f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "171ad763-d094-4fc5-8ade-a559b64fe441",
          "status": "Not Found",
          "code": 404,
          "responseTime": 232,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64325a43-5866-4158-b0f9-bc05d529ccd2",
        "cursor": {
          "ref": "2fe5803b-faa3-4a2f-9564-d189e532fb77",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f7f1d2e3-75aa-4176-bbc0-d064ffe33dcc"
        },
        "item": {
          "id": "64325a43-5866-4158-b0f9-bc05d529ccd2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b2e19b98-1bc9-45c6-8c77-d52db3f809ce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 6,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39028757-07fd-4089-b217-43c25187f8cd",
        "cursor": {
          "ref": "d0b13853-714c-4c88-8d81-64c2191657b2",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b5070785-6dcf-4da0-93db-f7ed215c180e"
        },
        "item": {
          "id": "39028757-07fd-4089-b217-43c25187f8cd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "77521ea8-3024-4b73-84b2-0a586e8f681c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ffbef4-522c-446f-bf96-7407a74bd9d2",
        "cursor": {
          "ref": "fe954bc8-6ac4-4d09-84d2-54e017f8dfd8",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "91bb9df4-f301-46a3-8d60-ece3dcf7e272"
        },
        "item": {
          "id": "a5ffbef4-522c-446f-bf96-7407a74bd9d2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c5501e52-8511-4ca3-8526-48901c634541",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ffbef4-522c-446f-bf96-7407a74bd9d2",
        "cursor": {
          "ref": "fe954bc8-6ac4-4d09-84d2-54e017f8dfd8",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "91bb9df4-f301-46a3-8d60-ece3dcf7e272"
        },
        "item": {
          "id": "a5ffbef4-522c-446f-bf96-7407a74bd9d2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c5501e52-8511-4ca3-8526-48901c634541",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784fe7e7-b862-4a86-ad2d-5056abaa5765",
        "cursor": {
          "ref": "d9b844a0-c75d-4e74-9ba0-badc099469d2",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7cbdad97-83c0-445d-90be-dc3134036a51"
        },
        "item": {
          "id": "784fe7e7-b862-4a86-ad2d-5056abaa5765",
          "name": "identifiers"
        },
        "response": {
          "id": "4c84892b-969a-4714-9974-d5823b4a3868",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d44479f-2de6-4213-a250-757e89f90949",
        "cursor": {
          "ref": "d20395d3-31d6-4ac5-92a8-5fa89e145de5",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "caff9f5e-3058-43c8-8cba-f3fa99162d1b"
        },
        "item": {
          "id": "3d44479f-2de6-4213-a250-757e89f90949",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "08ea1068-03f3-4d2a-86ec-3f66b2caac65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d44479f-2de6-4213-a250-757e89f90949",
        "cursor": {
          "ref": "d20395d3-31d6-4ac5-92a8-5fa89e145de5",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "caff9f5e-3058-43c8-8cba-f3fa99162d1b"
        },
        "item": {
          "id": "3d44479f-2de6-4213-a250-757e89f90949",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "08ea1068-03f3-4d2a-86ec-3f66b2caac65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04cd855f-f2e4-45fc-b3f6-ef2e3048e28c",
        "cursor": {
          "ref": "8b175b53-357f-4804-ab7d-99df31b1e89c",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "99d0d863-f9e1-4dcc-b5d8-e3a216b9b6a8"
        },
        "item": {
          "id": "04cd855f-f2e4-45fc-b3f6-ef2e3048e28c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a0581880-3ec4-4a2b-8f20-8d249c057057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e90970-4d23-4b07-8bf6-ee2f3bfd33ae",
        "cursor": {
          "ref": "ea42afb6-b963-4e00-8596-3a471bd1a9f2",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "392c5e0c-351a-4238-a2e9-6333837ca2df"
        },
        "item": {
          "id": "c2e90970-4d23-4b07-8bf6-ee2f3bfd33ae",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ea352a72-d042-4d9c-8a2c-a2bc1bc487cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e3b151-ce37-4d3a-9ad1-6a60d07f9d60",
        "cursor": {
          "ref": "c5c04dee-3c2e-49d8-a849-013f90246552",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "724855f7-62f5-4462-ae3e-acac29e3377d"
        },
        "item": {
          "id": "78e3b151-ce37-4d3a-9ad1-6a60d07f9d60",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "863d969e-301f-4cf6-ac1e-d986c59c0fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cb5baa-4c28-4155-836e-1e3f1be39973",
        "cursor": {
          "ref": "a4e86875-1e65-474c-bf0d-57b771a7b376",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fa53f37d-3b6c-4bbd-9968-55c165122e0e"
        },
        "item": {
          "id": "24cb5baa-4c28-4155-836e-1e3f1be39973",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4263b08f-25a3-4e99-b994-f85c12f16b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec91cfd-b401-4c92-82fa-3143e907d901",
        "cursor": {
          "ref": "2fde6455-9baf-4b70-8fb4-e18071cbec6e",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7a836e62-e916-41ed-a96d-0ec92d1b9a61"
        },
        "item": {
          "id": "9ec91cfd-b401-4c92-82fa-3143e907d901",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cc5d1356-cdec-41b1-a290-fccce39317a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2377577-63fd-4b89-b1fe-2b5489a7f0a2",
        "cursor": {
          "ref": "7a14fc22-c4c6-4bc2-85a7-ab50672051bf",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2bc7f2f8-5f30-47c8-9f62-7de9f87d5556"
        },
        "item": {
          "id": "a2377577-63fd-4b89-b1fe-2b5489a7f0a2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6f59326d-b1db-4843-a20d-fb1aa99f346c",
          "status": "Created",
          "code": 201,
          "responseTime": 389,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "f0cf3536-9169-413f-9901-e3e36c5c2bb8",
        "cursor": {
          "ref": "3e286cbc-54b1-4c6d-b3c2-b09ec496844f",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cb47beec-1f9e-47c1-bdc0-48e4c5733c19"
        },
        "item": {
          "id": "f0cf3536-9169-413f-9901-e3e36c5c2bb8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e614d4a7-a2dd-445f-b013-660de0de4316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25453103-3aad-46e5-ad7e-b5baee755f58",
        "cursor": {
          "ref": "ec383095-48a7-4c5f-8f2b-599407531005",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8363bca7-0016-411b-8d48-3f176a6691b6"
        },
        "item": {
          "id": "25453103-3aad-46e5-ad7e-b5baee755f58",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1c0752d9-f798-4ff7-ab60-6dd31688e726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc368ec-982c-4f17-a054-ca4f47d9d73f",
        "cursor": {
          "ref": "8e5836f5-2a7c-46ed-9790-84c1e73fb6ec",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "378eae48-8923-4ff7-8cd7-3802b2d40639"
        },
        "item": {
          "id": "8fc368ec-982c-4f17-a054-ca4f47d9d73f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6f7dc33e-dec3-4461-86a6-6fd09ed13fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b28b7f-7f2b-4eb2-8dc0-c654bfceca54",
        "cursor": {
          "ref": "f1723b64-e8f5-4e6e-8933-39cac93a0eae",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0a32058e-57d0-4a58-80d5-094a1de0f79c"
        },
        "item": {
          "id": "d7b28b7f-7f2b-4eb2-8dc0-c654bfceca54",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d4ebe463-8753-43a0-afe0-dedea3cc0569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da16821-15df-48b6-956d-dcfde4cf7961",
        "cursor": {
          "ref": "b7975da7-a8b8-4071-9e2e-9bd3248a9161",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dfa35715-1527-4c2e-ab96-76dd1b5cb7a5"
        },
        "item": {
          "id": "5da16821-15df-48b6-956d-dcfde4cf7961",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f1219c2a-bbb7-48e3-a26f-b15b2c8eb7cc",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f9240a0c-488d-4d3b-baa0-6aaf9cb6ccfd",
        "cursor": {
          "ref": "43336d52-a54f-438f-802c-9bc136eea122",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "de8a79d2-350a-4fac-9bee-589febdac13e"
        },
        "item": {
          "id": "f9240a0c-488d-4d3b-baa0-6aaf9cb6ccfd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "75ea5abd-d978-4898-b325-d8916478a90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c220325-28bd-4c6e-8744-9aede28f5c7d",
        "cursor": {
          "ref": "704ea389-4c63-4270-b0b6-17f07842a6a7",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3b91fbff-b5ad-4f44-9478-dd0780b8c407"
        },
        "item": {
          "id": "8c220325-28bd-4c6e-8744-9aede28f5c7d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "00bb2b12-dd2e-4061-9524-2a569e856dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadf02d2-b3e7-4dd7-b3ee-8736bb2d525c",
        "cursor": {
          "ref": "c95577ff-74e6-42b0-a278-f5501441747e",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "29adbef1-ed2d-4d05-9990-02053e0e5c70"
        },
        "item": {
          "id": "fadf02d2-b3e7-4dd7-b3ee-8736bb2d525c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f798ef0f-3fbe-4ce3-9372-10962c689f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b31baa-f85a-44d1-9768-7ec251e68062",
        "cursor": {
          "ref": "da1a684f-3479-47b5-9299-bb4df99bf94c",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4b2ae86d-0d03-4687-9bc9-f03997e409cc"
        },
        "item": {
          "id": "83b31baa-f85a-44d1-9768-7ec251e68062",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2884a09f-c9b2-4465-a922-55c44128907f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96bfb280-1379-4f09-99a2-e9ac19ef993b",
        "cursor": {
          "ref": "035954c3-977d-4953-8584-2442139259d1",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "388ee27d-a615-44d2-95ed-9687aed798e8"
        },
        "item": {
          "id": "96bfb280-1379-4f09-99a2-e9ac19ef993b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4810c1dc-a969-4e7f-9cb3-da792665506c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698b08e6-dd1c-49b8-a6f4-3554711292a8",
        "cursor": {
          "ref": "b6691643-78ea-4cc2-a5f5-452b30aa95cf",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c96d604a-544f-48a6-8eba-b80dda35ae32"
        },
        "item": {
          "id": "698b08e6-dd1c-49b8-a6f4-3554711292a8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "940963a9-b842-41f1-b5c3-708e6d657a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb6a623-c7bc-41ed-b6a3-397a0fd4da10",
        "cursor": {
          "ref": "3dd59248-b345-42d3-9b85-a988182b5c07",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "66c6d5c9-ec4f-4e85-b71f-188287b97342"
        },
        "item": {
          "id": "7bb6a623-c7bc-41ed-b6a3-397a0fd4da10",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dc4cf7de-7524-4191-b498-6863d027efd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096158a2-9faf-4ba6-84d8-7a8dd1d01a5a",
        "cursor": {
          "ref": "e3cb0378-c7c9-4e1f-9888-6fd227b9dd1c",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1742cd8d-9a26-4062-aade-02f999f27089"
        },
        "item": {
          "id": "096158a2-9faf-4ba6-84d8-7a8dd1d01a5a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c5c77450-12ad-4051-bf39-1c97eff9c0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f173fa-4a53-4cc3-97dd-67dbd038049b",
        "cursor": {
          "ref": "033f6538-dc7b-439f-9565-76a20e74575c",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dfd7b43a-ce9c-447e-8167-df22e8786a3e"
        },
        "item": {
          "id": "80f173fa-4a53-4cc3-97dd-67dbd038049b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fa4727fe-0f52-43ae-ab59-d5cdc1997663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b968f6-b4d8-45f5-83a8-9cc122521f6f",
        "cursor": {
          "ref": "1bd46f47-50ab-40e2-8209-74902b9c6201",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e355df4e-2b73-4815-b7d0-dbdb27728a54"
        },
        "item": {
          "id": "38b968f6-b4d8-45f5-83a8-9cc122521f6f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "73af0497-9980-4fb1-b1a7-4389a4504581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8625fb64-4d2f-4e34-8808-c2c31af9999f",
        "cursor": {
          "ref": "b1171901-d1e7-470d-9395-21b726e93064",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ae096887-00c1-43cf-85c8-4111beadbf1a"
        },
        "item": {
          "id": "8625fb64-4d2f-4e34-8808-c2c31af9999f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5f13131f-0703-4ae1-a675-3dc3f2048ace",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "7663fa40-dac3-4580-bbd6-dc0b2888aad5",
        "cursor": {
          "ref": "37577b62-6eb0-43bd-b993-557f8d47a6b2",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c3faba9f-1044-49b6-bddc-f5ffc61fc1ef"
        },
        "item": {
          "id": "7663fa40-dac3-4580-bbd6-dc0b2888aad5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cf850941-1054-4512-8edd-1d811b17d1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b380e98d-4fad-4cd6-b51b-08d84679ae07",
        "cursor": {
          "ref": "90bca28d-e904-4ef3-9e79-0d0f4dab4962",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0340b0de-2e6a-4daa-9e54-31ea7306b96d"
        },
        "item": {
          "id": "b380e98d-4fad-4cd6-b51b-08d84679ae07",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "102b40e3-dd21-4b1b-9fce-236e3eeba511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3bfb75-331a-4dae-8ab2-a6e0ebf2423b",
        "cursor": {
          "ref": "6af32b38-13b6-4b1b-9150-a041ff06a8ea",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "66f76094-aedb-4119-80af-7005f49ef170"
        },
        "item": {
          "id": "7c3bfb75-331a-4dae-8ab2-a6e0ebf2423b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "98172f24-8fb1-4989-9c5c-3a1045d3e68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc3130f-a5f6-4ac2-b1f3-195e2798141c",
        "cursor": {
          "ref": "43cdaf07-bb86-427d-bed4-7199bffe06aa",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "dca4a004-ef7f-4461-842a-973e37fd2ba9"
        },
        "item": {
          "id": "2cc3130f-a5f6-4ac2-b1f3-195e2798141c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "37157130-e333-40f3-857d-cf85844c7a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34367d7a-e80c-4550-9e27-1337e6eb3710",
        "cursor": {
          "ref": "ae40186a-0ddc-439f-855f-199167226a82",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "709e83bc-2758-4803-9e89-3115ec95da4a"
        },
        "item": {
          "id": "34367d7a-e80c-4550-9e27-1337e6eb3710",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b1446753-4dc4-48a0-bac9-8d30486e39df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2e2478-4842-43a1-ba39-0bc30fde640f",
        "cursor": {
          "ref": "866b9ad5-3cc1-49e5-ae1e-df11e402856e",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1b01aa7f-9e3d-403c-a1a0-9097582f39d5"
        },
        "item": {
          "id": "bc2e2478-4842-43a1-ba39-0bc30fde640f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7fb3c382-811c-4e8f-9236-3d7969d6ddc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd238c05-d55a-4225-9054-7a2ee8969764",
        "cursor": {
          "ref": "2c9ec881-f935-42a1-bd27-04c0dd9baa36",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fdc2bd78-f7f5-46ed-8250-39c77601565e"
        },
        "item": {
          "id": "dd238c05-d55a-4225-9054-7a2ee8969764",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bd33c753-4c8d-45f1-a249-497de043ddb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce57e8fc-4505-4189-a355-d05b942cacb2",
        "cursor": {
          "ref": "29b1b1c1-9956-4514-b33d-1e8d552b05d0",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "237ca236-d83f-48d3-8633-4703553a7535"
        },
        "item": {
          "id": "ce57e8fc-4505-4189-a355-d05b942cacb2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c238d6c0-3ef3-49e2-8c3b-6f443f77df6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4c10b8-c22e-4c5d-b629-0d603b07deab",
        "cursor": {
          "ref": "2da111c8-fd4f-40cc-b786-ec86ce85cf98",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2d25c475-1251-440a-81b5-2b1704bbae93"
        },
        "item": {
          "id": "cf4c10b8-c22e-4c5d-b629-0d603b07deab",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6e542ca5-88c5-4f66-8f18-d53020abd715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d464d3-258b-48b5-91f0-a987f71bfa43",
        "cursor": {
          "ref": "4d4e2efd-cc47-42f5-82d7-addd116f9cd7",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ba435cb8-9bd3-4b56-adb2-0adba0847bba"
        },
        "item": {
          "id": "b3d464d3-258b-48b5-91f0-a987f71bfa43",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7f229b3e-d7d1-4ea8-bc9f-72da3b2c30b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef70e45a-6afd-4e2d-aa1a-10f1582cd188",
        "cursor": {
          "ref": "bea5eaa7-5d9a-46c4-93aa-7b4cbf5222ed",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e19ec9c0-ebe7-4874-a2b4-a373779a748d"
        },
        "item": {
          "id": "ef70e45a-6afd-4e2d-aa1a-10f1582cd188",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "443f21a7-288f-4028-a510-a85d111dee4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6385880-3166-4592-846c-cdec754c29cd",
        "cursor": {
          "ref": "bf7ca173-3685-417c-9647-922d7b63ec5e",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "70c00764-04fc-4ce6-aeb2-a3b2f00f6337"
        },
        "item": {
          "id": "a6385880-3166-4592-846c-cdec754c29cd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7d58e51a-5655-422c-ac37-8602c092adbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7fe67b-53dd-4aa3-8416-33941a0c5135",
        "cursor": {
          "ref": "d39e85fd-b0a6-46d3-bd68-f17ba64a5059",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8a9feab6-a9cb-44cf-8647-09b59ceb48ea"
        },
        "item": {
          "id": "0a7fe67b-53dd-4aa3-8416-33941a0c5135",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d1a80675-4349-4423-b969-a9702da73517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c94a73f8-d695-4f64-b82d-cba87ffd59ae",
        "cursor": {
          "ref": "4c3c8f9c-1511-4382-abbe-d5249bb9900c",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "145d6017-fec3-40f8-98dd-83ee77e8161a"
        },
        "item": {
          "id": "c94a73f8-d695-4f64-b82d-cba87ffd59ae",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "17d4c8b4-a6f7-43d6-b84a-1c90bd92b288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83851018-dccd-4faf-acda-7766cf5e7459",
        "cursor": {
          "ref": "8fd3a5cd-f261-4017-b823-8dba3c486ffe",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "36d029cb-3da3-46de-980c-56f537126e36"
        },
        "item": {
          "id": "83851018-dccd-4faf-acda-7766cf5e7459",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "33120095-7e2e-4977-8bd6-e64f53843992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c7404c2-0860-4657-88b2-19200a83886d",
        "cursor": {
          "ref": "28be1828-cc21-43e7-a96f-8fdec0e2d579",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "733d3f15-f710-4a1a-823e-0b94f93ad0a5"
        },
        "item": {
          "id": "6c7404c2-0860-4657-88b2-19200a83886d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9e0b4068-1c99-4ec9-9b44-441092671f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcd5a4a-265a-4e99-9845-3bae9eba20cd",
        "cursor": {
          "ref": "8701129d-d7ac-4f09-9d39-b27354e53e0c",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a2698912-4c7a-47c4-befe-ad89c4818164"
        },
        "item": {
          "id": "dbcd5a4a-265a-4e99-9845-3bae9eba20cd",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a9550777-10fb-4053-a471-0fe08722936f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2ec26c-4b59-43ad-8e59-33edc1d61c83",
        "cursor": {
          "ref": "0d6f3f79-81e7-49dd-89a1-e12ba884cda0",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "16648069-0310-456e-8915-28247ded637a"
        },
        "item": {
          "id": "dc2ec26c-4b59-43ad-8e59-33edc1d61c83",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "705a51f1-752d-471e-9add-88656a553eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8d800c-2e03-4079-be68-7cf696509900",
        "cursor": {
          "ref": "429e5713-00eb-4094-b68f-460970772d76",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3d16cf2c-aaab-4b66-b1ad-94945dd53d51"
        },
        "item": {
          "id": "df8d800c-2e03-4079-be68-7cf696509900",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "aeddd68a-1f28-40b5-94be-36e0f3f23b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58afed99-02fd-4124-b663-06e5e4703124",
        "cursor": {
          "ref": "f98ffb81-ba36-4eac-a85f-51656c9b24f2",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "88a2dccb-5dbd-4cf7-b5b0-9a7bd03fb0d1"
        },
        "item": {
          "id": "58afed99-02fd-4124-b663-06e5e4703124",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "54913bb1-737a-4e53-9872-acc1ff64f905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "63504b1e-2303-4c33-b16d-23a44f788204",
        "cursor": {
          "ref": "3c246d53-56bd-48a4-ae51-0e036e7a4934",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "22a124fb-1b8d-4c62-b313-1b03e6c7f164"
        },
        "item": {
          "id": "63504b1e-2303-4c33-b16d-23a44f788204",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "739e1da1-a55f-49c3-ad29-0a5cafc4d991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbeb1e9a-7d94-45e0-9d46-7a7afdde8229",
        "cursor": {
          "ref": "acbbcfd0-89d2-46d2-b257-5ea34f5d8d8d",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "46b73d12-a9f5-4b93-a42d-a63ac4116fdb"
        },
        "item": {
          "id": "cbeb1e9a-7d94-45e0-9d46-7a7afdde8229",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4e579c0d-77b5-4007-a5ab-e30fc51f2549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23680716-9b09-4d93-b892-3c01f4acf1ec",
        "cursor": {
          "ref": "947256fa-ec26-4cd8-b7d3-b7c2c20d1e8d",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ff5de5f8-917e-4f75-9a32-d602fea41a4b"
        },
        "item": {
          "id": "23680716-9b09-4d93-b892-3c01f4acf1ec",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8c5bb0f1-87f2-49c0-a288-dacc112f8674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100c142c-55e4-4552-a0dc-0e2c70fe1424",
        "cursor": {
          "ref": "50bbaf6e-0822-4866-a647-7317609995c9",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f6fb681e-a27f-4c2c-97f4-d82005f33d2d"
        },
        "item": {
          "id": "100c142c-55e4-4552-a0dc-0e2c70fe1424",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "99568274-1f8b-4294-9c9a-bb3c2765c80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59553a0-14cf-4be1-9f5a-c01eeb7c43be",
        "cursor": {
          "ref": "7c33c795-91ce-4dc3-b8a6-abb7d795a7f8",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ddb4b479-5a5e-4ab4-98a9-936f72cb0f7c"
        },
        "item": {
          "id": "d59553a0-14cf-4be1-9f5a-c01eeb7c43be",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7b208d56-b781-4e17-877e-9aa8eeb65ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869065db-3be2-4092-bee8-f77d365a9e49",
        "cursor": {
          "ref": "9891e28c-4274-42e0-9ed8-b93afeebfa0c",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4e3dd62b-21c4-4de1-a6c4-b5dc092f9647"
        },
        "item": {
          "id": "869065db-3be2-4092-bee8-f77d365a9e49",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "08a39912-2537-4624-96a5-5f827a28a877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72396104-0a22-4a73-afc9-bb68a0e3ffe6",
        "cursor": {
          "ref": "a7f85a61-daff-4ab3-bada-7e1d78667a78",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "122889d1-dc89-4d52-99a3-5d0045da7b44"
        },
        "item": {
          "id": "72396104-0a22-4a73-afc9-bb68a0e3ffe6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d2f95b2a-b740-44f6-871d-bfdbc950b759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa862147-fdab-4df5-ba4d-9cac1066858a",
        "cursor": {
          "ref": "af116113-ae8d-4cf8-b89e-3e050f2cc439",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dd44ec88-9bf4-4875-af9e-f12086c42c84"
        },
        "item": {
          "id": "aa862147-fdab-4df5-ba4d-9cac1066858a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0aa4b7ea-f2a9-4d68-8e72-93df4f2cbd59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750da4e9-0193-422b-8014-0bdb5be69f1b",
        "cursor": {
          "ref": "dcbb6c85-3a58-4f7e-ae58-ddf1211010ea",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7ee47707-307b-4e4f-9209-e94b2dec99da"
        },
        "item": {
          "id": "750da4e9-0193-422b-8014-0bdb5be69f1b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9a13d397-90f1-44eb-b3b9-21d1e744866d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81179a8f-144f-4715-92fb-2cd4302ed7ef",
        "cursor": {
          "ref": "2550992e-abae-4dbc-9273-6eefeffb5a5e",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "00b7b041-d29e-4127-b5b7-b30727595211"
        },
        "item": {
          "id": "81179a8f-144f-4715-92fb-2cd4302ed7ef",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6592eb56-f7bb-444e-bed7-113148502af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a7d768-ea79-4dcd-85ec-124075fae3c3",
        "cursor": {
          "ref": "b47d856b-630e-4356-a282-5e576704ddea",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3b96ad42-8c2d-4f21-9437-c1bde90d1d66"
        },
        "item": {
          "id": "c4a7d768-ea79-4dcd-85ec-124075fae3c3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "58722ad7-a7cc-4fc8-9f8c-c2cbcc470a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8808f0d5-fe5b-408f-ba89-7cf50d1fdb55",
        "cursor": {
          "ref": "20d5afe5-8ddb-4b8d-81c3-6d4dcefc19ba",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "eed6e00d-0c66-4e4c-8c9b-8872325e815b"
        },
        "item": {
          "id": "8808f0d5-fe5b-408f-ba89-7cf50d1fdb55",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "dff9589b-28e6-439c-8395-69a1cfc721ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8858fcdc-3f98-44af-9cfd-cff000b9b885",
        "cursor": {
          "ref": "56782355-211e-4fc0-a17e-4f4711e06c80",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "078578bd-3cf0-4f4c-9bc0-52d4e28ef14e"
        },
        "item": {
          "id": "8858fcdc-3f98-44af-9cfd-cff000b9b885",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b8cd2866-0c20-4b99-a174-7f9fabc62d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbe12c6-e027-485f-991e-0a5451dfe41f",
        "cursor": {
          "ref": "50215ee8-6389-4a30-b979-ed8d8597cb2c",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ce1d564b-875b-4dd6-8950-bd84c141f7d1"
        },
        "item": {
          "id": "fcbe12c6-e027-485f-991e-0a5451dfe41f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9c3f489e-8dfd-4532-824f-8a7958e45bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c239eadf-e184-413f-a7d6-52a00f2f1f32",
        "cursor": {
          "ref": "1c74b34d-b859-414d-aef4-f1ad37d6d8fa",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "afda5ac9-d915-4fd6-a226-cad323fc1646"
        },
        "item": {
          "id": "c239eadf-e184-413f-a7d6-52a00f2f1f32",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "607085ae-6cb1-4aaa-8b54-4c8902e11a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b7fb15-6bfe-4a98-ae07-c8b4d7c18d92",
        "cursor": {
          "ref": "ee49e7c9-d058-499b-8449-151a009def2d",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "81db5ef1-6228-44a6-88aa-32df9952c88a"
        },
        "item": {
          "id": "62b7fb15-6bfe-4a98-ae07-c8b4d7c18d92",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "69c30120-d517-4958-9f87-ec9a4fa36b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33854661-8ce9-443d-b232-9b3abcb1bd9c",
        "cursor": {
          "ref": "b3b89ded-95d1-475b-bdc1-b773e9d049f1",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "46205a36-3217-4eab-be39-9d2442225371"
        },
        "item": {
          "id": "33854661-8ce9-443d-b232-9b3abcb1bd9c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d819e63f-bda1-4a3f-b029-83698f85beec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a08e94-3048-44bd-b3ee-6b522ed3b4c8",
        "cursor": {
          "ref": "edaf9c3e-ea53-4ecc-9311-c3281eed7287",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "57ed9d48-f7f6-477e-85c7-1c77576bbfda"
        },
        "item": {
          "id": "c4a08e94-3048-44bd-b3ee-6b522ed3b4c8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8b60aba5-7bcb-4d26-b127-867ac06b2908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a64053-68fd-4fc7-b019-14dfabb1ebd2",
        "cursor": {
          "ref": "ecf43123-e800-4c6c-96fb-26d1a029d7e6",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5431e415-e131-4ee0-b5ff-0eac86b2ac7b"
        },
        "item": {
          "id": "a7a64053-68fd-4fc7-b019-14dfabb1ebd2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d0d52699-f834-441b-94d1-84392ae7c38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd26a8d-c358-409d-98cf-9d33ad8bbf30",
        "cursor": {
          "ref": "5fd75a96-b9b4-4eb9-b02f-4048e6e7bae6",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c6a6b74d-87ef-4377-86fc-f5bf734e9a61"
        },
        "item": {
          "id": "3fd26a8d-c358-409d-98cf-9d33ad8bbf30",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b8bdba5d-106a-49bd-93a9-9b61b3a37655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae97ddc-b2a2-45e0-a29e-3f4e4a4e65c3",
        "cursor": {
          "ref": "db630346-ad8d-4245-b4ae-1bf868a78b59",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "53233f33-b9a2-419c-b96f-1974c331cc57"
        },
        "item": {
          "id": "9ae97ddc-b2a2-45e0-a29e-3f4e4a4e65c3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "96891d0b-6311-49ba-9e4e-82c3e821a5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3045ab8-1bce-4d58-aec1-cac7db32baa3",
        "cursor": {
          "ref": "d294a589-c7ea-4b4d-ada6-3c1681384494",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "907292b0-dac5-4826-8fb0-911c85de6164"
        },
        "item": {
          "id": "e3045ab8-1bce-4d58-aec1-cac7db32baa3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cc7a98a5-32d4-482d-a143-64c3eacf1d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b99926-d913-43fa-8b96-8e32d558a781",
        "cursor": {
          "ref": "b529ab0d-bf92-48a8-a0b9-de494cd74ac6",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a133b44c-c0ab-4f4a-9034-60ac8c3cad66"
        },
        "item": {
          "id": "11b99926-d913-43fa-8b96-8e32d558a781",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "db70f5c8-5911-405e-993c-d43e020e3428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a5e155-5907-44a7-83cf-84976db01ea7",
        "cursor": {
          "ref": "a8e0e647-fe45-4f2f-9bdf-a35e0252a929",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e95efe13-89b7-449c-9da5-0cd1cda142cb"
        },
        "item": {
          "id": "45a5e155-5907-44a7-83cf-84976db01ea7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "325768a4-34a9-4d4f-84c1-61fbc28ca402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77c7d68-884d-4cc2-bd02-6f938feaa29f",
        "cursor": {
          "ref": "cf973484-0fff-4f1e-bace-5fa7e774eba7",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9c3b50ec-33a4-4bb0-9bdb-b3d4a4665236"
        },
        "item": {
          "id": "c77c7d68-884d-4cc2-bd02-6f938feaa29f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "24ce8635-7639-463b-8435-e4a3781f49b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54396bbf-631d-40c3-8742-85108e88826c",
        "cursor": {
          "ref": "1d4ec1f4-2594-4d5b-8125-f3a88ae2c4a4",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f4a1397c-bb4b-492f-9600-dcfe57bdbdf9"
        },
        "item": {
          "id": "54396bbf-631d-40c3-8742-85108e88826c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c0ab5d9d-2e85-4f4c-9a63-c2aa9504771f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1d4b25-3007-4137-9375-2b6355bb0d56",
        "cursor": {
          "ref": "d03fb433-dd4c-4ecd-9269-428280f11dde",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4b2b1564-8b0d-4104-8d37-87fff4bbc3ae"
        },
        "item": {
          "id": "9e1d4b25-3007-4137-9375-2b6355bb0d56",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f7d4916b-4b46-43df-9a8d-67fb7795e5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085f1868-f3fc-4c1e-b622-48f242900ca9",
        "cursor": {
          "ref": "6c5534fa-cc82-4802-800e-3f0f4e92f440",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2e78233d-ffb8-42f5-8b2a-90b682ab383c"
        },
        "item": {
          "id": "085f1868-f3fc-4c1e-b622-48f242900ca9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9036768d-9c5d-4980-ac58-7c71fdf0501d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedde68e-6bf3-490f-8b8e-c5d4f63bdd6b",
        "cursor": {
          "ref": "90c06dd0-c978-468f-9937-135212aa696a",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e68ba6d6-c28f-4654-9f72-c764facb3a51"
        },
        "item": {
          "id": "aedde68e-6bf3-490f-8b8e-c5d4f63bdd6b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fb2e896c-0b17-4c6b-a707-d820b17de2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd9b167-56f8-40d2-81df-430ed3ef72a9",
        "cursor": {
          "ref": "a5fd7f29-b03a-4fe9-b690-22f8105e9ef4",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "70e1d625-c6d7-42ed-857c-07379d59fa45"
        },
        "item": {
          "id": "8cd9b167-56f8-40d2-81df-430ed3ef72a9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9269db81-0687-4036-8b26-ffc3151a491a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7c7622-2199-45db-bec7-d89e44d9a9ef",
        "cursor": {
          "ref": "8834c5b5-5c39-461a-84f8-45800d03ec92",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4739fb34-c4ea-49cb-94cc-36d14c5acec8"
        },
        "item": {
          "id": "9c7c7622-2199-45db-bec7-d89e44d9a9ef",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1249d0f8-5a56-45ab-96ee-6950e3e68a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9faba1c2-2ddc-4aa9-a39e-455d2a211514",
        "cursor": {
          "ref": "426c499f-b8c6-4bff-858b-958d73517b9a",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "997cd600-3e2b-4065-9a31-ebb7e091cf83"
        },
        "item": {
          "id": "9faba1c2-2ddc-4aa9-a39e-455d2a211514",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "64c6ec6f-a772-4190-b502-b7930977a88c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ac0114-a567-4021-b97f-632733853b12",
        "cursor": {
          "ref": "1346f299-e2bb-49cc-856c-d88a48ee48fc",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7643f71f-f4f0-4847-8879-ac9d4106af74"
        },
        "item": {
          "id": "98ac0114-a567-4021-b97f-632733853b12",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c7fa68dc-8bcc-40e2-a7db-d8c22f8e47ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38503388-9dc9-411c-98a4-30bbf380fb97",
        "cursor": {
          "ref": "95b1bd83-9203-42d8-becd-019f3190fc57",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9f703480-8d18-463d-9a38-e0e551ce6f31"
        },
        "item": {
          "id": "38503388-9dc9-411c-98a4-30bbf380fb97",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f65deccc-4edf-4bff-abd0-51075431c27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da22c455-2505-4c26-bf7f-e5e5e3dae5c4",
        "cursor": {
          "ref": "5e5986cf-3d73-4987-84f1-d1f6b84b92e4",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "00e77c7e-6063-4299-a668-c0cc48fe0f63"
        },
        "item": {
          "id": "da22c455-2505-4c26-bf7f-e5e5e3dae5c4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6e9dbab6-e31a-43af-9e45-fba305434a8e",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "eb922b22-ce70-43e9-8db8-062c1fb84bd4",
        "cursor": {
          "ref": "4c3d3f52-b347-48d1-9efa-bcb1545b603b",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b8b9aca7-12d6-4963-97c6-6d1581e55b0a"
        },
        "item": {
          "id": "eb922b22-ce70-43e9-8db8-062c1fb84bd4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "742969f3-24bf-4295-8d31-16337cdd417f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d639d7-459e-40de-8918-d06c3b8cf958",
        "cursor": {
          "ref": "ac848043-8247-457d-a948-8b949cc1bd6e",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7282ef9b-1c9c-4b3b-912c-71a486e5ed76"
        },
        "item": {
          "id": "29d639d7-459e-40de-8918-d06c3b8cf958",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "815c278d-b5b0-4ad3-996c-b4aeb5d61eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f16a1f9-ac9b-457d-94ca-1bdf2e0cc952",
        "cursor": {
          "ref": "91c48529-1115-4cbd-b211-706b9196687f",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "73588d07-186d-40bc-85da-b723944f77e3"
        },
        "item": {
          "id": "7f16a1f9-ac9b-457d-94ca-1bdf2e0cc952",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "76d8a56e-ccf2-4149-9730-6cbfdd51696d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc0f5d7-c537-4ccb-9e9e-06dcb4004cb1",
        "cursor": {
          "ref": "f9715e78-b645-4dd2-9d70-1a7f246f8e3f",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e9e25ec4-1b2c-4f93-82fb-30177abfd432"
        },
        "item": {
          "id": "5fc0f5d7-c537-4ccb-9e9e-06dcb4004cb1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "53b1422f-1326-43ab-9bac-da1994b5cf64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84979207-d1c7-4211-b717-bff1dcbb47c2",
        "cursor": {
          "ref": "be4a50a1-aa08-4f4b-b591-8f38533cee8c",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3387572f-affe-4cbf-8b42-3a3d2897be35"
        },
        "item": {
          "id": "84979207-d1c7-4211-b717-bff1dcbb47c2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9fa56cbf-b189-41a0-a445-7c9ee2082e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6fec8b-b621-48cb-bf10-81c786be62d7",
        "cursor": {
          "ref": "3a0abe28-e888-4d8e-bb49-b06b92d10c48",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6f6e0807-febc-4676-86c3-b469591bf96e"
        },
        "item": {
          "id": "4e6fec8b-b621-48cb-bf10-81c786be62d7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9621cf50-4864-4375-9ec0-ce8318cba3ac",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "80d085ef-005f-4ecc-9840-3332c62d62a4",
        "cursor": {
          "ref": "70cab3b2-a8f3-4cff-96ee-55ad84862d75",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d74f63e0-4d17-4aaf-ba55-2ebff19397dd"
        },
        "item": {
          "id": "80d085ef-005f-4ecc-9840-3332c62d62a4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ee90a0b0-f76b-41cd-8b73-bdeb858ce733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62eafe36-1bbc-4cd7-a96d-facab38bb7cf",
        "cursor": {
          "ref": "5218f1fd-7a78-46d2-a774-1e6ec3d78a63",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "63047281-f286-4c30-bc66-21f12e898ba5"
        },
        "item": {
          "id": "62eafe36-1bbc-4cd7-a96d-facab38bb7cf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "20ddd8c3-4d25-4ad9-8cdc-bb0eea2e9cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6bd5c1-d545-491e-a035-bb82b9f52e7b",
        "cursor": {
          "ref": "418e506e-b685-4e3c-a255-1e6b1ac9416e",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e92f30e9-4c28-4199-8e0d-a7771093b425"
        },
        "item": {
          "id": "3f6bd5c1-d545-491e-a035-bb82b9f52e7b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2dcd11a3-72a2-49c3-a5df-0982e9fb56e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031cab95-52e7-49b1-9660-dc21ed487574",
        "cursor": {
          "ref": "251b1925-081f-4ead-bb84-88496e7ccf92",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0cfa930c-d68b-4454-9df9-f7044b09cecd"
        },
        "item": {
          "id": "031cab95-52e7-49b1-9660-dc21ed487574",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d7c2209b-7d83-41d2-894d-ecff3d7129a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ef13b1-a736-4b64-ac48-753550332cb8",
        "cursor": {
          "ref": "ebc48aab-ef09-4b80-b63a-6d4c2b20b061",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a7155044-dc36-42f2-96db-028f84e982a5"
        },
        "item": {
          "id": "e8ef13b1-a736-4b64-ac48-753550332cb8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "10fa5822-ce9b-4b82-9ee9-6f50222a8758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b573752-44b9-4781-8a07-d30f4c27528d",
        "cursor": {
          "ref": "3143830c-d657-47f9-96f5-650643b0891d",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2cbe521e-4f13-4036-ae6b-0f3ebec6229d"
        },
        "item": {
          "id": "6b573752-44b9-4781-8a07-d30f4c27528d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "304784be-457d-47f5-9e20-171bd74e3166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e7f010-5b10-476c-bd77-d8ff93877e52",
        "cursor": {
          "ref": "666a99a9-8c48-4dc3-aeec-d71911a87da8",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "22f2503e-0a10-423c-82e4-a9f3492ab089"
        },
        "item": {
          "id": "55e7f010-5b10-476c-bd77-d8ff93877e52",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "aa424b67-f3f0-41ba-b026-4f2fe479f2ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ab47a5-06d3-4193-af6e-eaca0a9109cd",
        "cursor": {
          "ref": "093c54b4-b1d0-40a4-9910-93f59a7103a6",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "be68d2de-4ac4-4c50-b4f9-f86569c5c979"
        },
        "item": {
          "id": "d8ab47a5-06d3-4193-af6e-eaca0a9109cd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4513f726-42fd-490d-b949-f7b51ce67c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d5f6604-e50f-4b36-b683-fab9954a80df",
        "cursor": {
          "ref": "d4af8815-6b9b-40c9-b7d5-ec071a1f6629",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5718c208-d74e-4426-8005-38d0f368223d"
        },
        "item": {
          "id": "0d5f6604-e50f-4b36-b683-fab9954a80df",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "308a1a44-a0c1-48f5-aa52-55e46ac70124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "feb09b01-67e8-4d50-aa3f-286cbd757d87",
        "cursor": {
          "ref": "ef5e563e-463e-4a9b-a29c-eb6f4708613d",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f761a613-a744-4e5f-b477-701e02c634a9"
        },
        "item": {
          "id": "feb09b01-67e8-4d50-aa3f-286cbd757d87",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "35eb59e7-f396-4616-866f-457916fa4a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "5744322d-75ee-4cc9-9fea-058027a4c8a1",
        "cursor": {
          "ref": "d80d4243-4321-4a45-9eb3-540676f1c8fe",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "564347f8-74b9-4c0f-a319-5ea8b7c55225"
        },
        "item": {
          "id": "5744322d-75ee-4cc9-9fea-058027a4c8a1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "69544ccd-e692-4505-89c8-20c439bec088",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ec3f03-1091-43d9-aab5-da1230e2019c",
        "cursor": {
          "ref": "9339179e-d116-4a2c-85ad-88fa04122886",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3e92f372-03e8-466e-ad01-2217103dcb17"
        },
        "item": {
          "id": "a9ec3f03-1091-43d9-aab5-da1230e2019c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "7e0f89b2-6cf6-4d24-8c51-079e8a2b4ba6",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b597b70c-83ca-47a2-9ae5-e69ed0111888",
        "cursor": {
          "ref": "bdb70809-6963-4b71-99ee-4a325317dcd2",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d16e473b-6938-49c1-a2a0-634f01fe7460"
        },
        "item": {
          "id": "b597b70c-83ca-47a2-9ae5-e69ed0111888",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "926dbc5e-9901-4e33-b3a0-d16a12eff840",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c329e7-ca90-4159-834d-43f9c3feed42",
        "cursor": {
          "ref": "2dd2e635-719b-40a3-b12a-470a0fc27717",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f1f41cce-7e8f-42af-b734-337de0a75e89"
        },
        "item": {
          "id": "41c329e7-ca90-4159-834d-43f9c3feed42",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "68225962-edc6-47a7-9c00-64f7bbbe8fae",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "94531b79-f91c-4315-8807-d7fed1551b77",
        "cursor": {
          "ref": "4276d218-36bf-4f9e-a1af-358ac41fb88d",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "44237f84-656d-481b-a9f1-7b25aac4f238"
        },
        "item": {
          "id": "94531b79-f91c-4315-8807-d7fed1551b77",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c4fc3b8b-5c1e-45ce-8868-edc2d7a65e1b",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c462008-1775-4651-bb10-ee3c218ddb38",
        "cursor": {
          "ref": "03a57bc6-589c-4b18-82a8-b72496d79f5e",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f32b5415-656b-4029-b195-1b242b00807e"
        },
        "item": {
          "id": "0c462008-1775-4651-bb10-ee3c218ddb38",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "60a2f361-e61b-43a0-81ae-7658dfe19d64",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3deb9ef-05b7-4f78-b9f7-f1e64446cb4b",
        "cursor": {
          "ref": "f9a6381a-efc0-4c34-8212-409aa1af7358",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "442b779b-7737-4363-be7f-1ccec3e1f542"
        },
        "item": {
          "id": "f3deb9ef-05b7-4f78-b9f7-f1e64446cb4b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c8eb3eb2-d729-44de-9cea-6741863f2323",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f3deb9ef-05b7-4f78-b9f7-f1e64446cb4b",
        "cursor": {
          "ref": "f9a6381a-efc0-4c34-8212-409aa1af7358",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "442b779b-7737-4363-be7f-1ccec3e1f542"
        },
        "item": {
          "id": "f3deb9ef-05b7-4f78-b9f7-f1e64446cb4b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c8eb3eb2-d729-44de-9cea-6741863f2323",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "bc931e4d-6eba-4839-b9a5-a1a8cd5749d9",
        "cursor": {
          "ref": "f33de899-c09c-4e9d-88fe-b153fd3f5e75",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "137bf5e9-c7cc-46ae-8464-5df69afbece6"
        },
        "item": {
          "id": "bc931e4d-6eba-4839-b9a5-a1a8cd5749d9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1d8d7f7f-5fbd-4e45-9af0-96b45429b2cd",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "bf6617d8-9350-408d-8ea4-906242534cff",
        "cursor": {
          "ref": "2df6fa10-18c1-4f27-aaa7-9562066a7e1b",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a9887a01-21bb-43eb-a136-586471de8977"
        },
        "item": {
          "id": "bf6617d8-9350-408d-8ea4-906242534cff",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b0b831a8-d312-4002-9290-fdae4dc828de",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a79089f8-f3b7-4a9f-b966-1d9827236cd7",
        "cursor": {
          "ref": "8cc47d72-5223-4a81-adcb-3647d4e421f2",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "eaf5fc80-2692-4f07-8ed1-781ee892d1df"
        },
        "item": {
          "id": "a79089f8-f3b7-4a9f-b966-1d9827236cd7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "79b1e525-7fcc-477f-b486-a6464c55e716",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "9d4b5b94-ec48-4d9a-90d8-8e01202c058e",
        "cursor": {
          "ref": "6aa96572-8ed1-4e8f-b315-0b723827c24d",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6299efb1-c5df-4722-9325-48fbb259c53a"
        },
        "item": {
          "id": "9d4b5b94-ec48-4d9a-90d8-8e01202c058e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4f6942cc-b21c-4616-ac45-2aaf2106c1e5",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "1919ba70-c94a-42d3-9fd9-edd3d449eef2",
        "cursor": {
          "ref": "46794dcd-c7f0-4f62-bde5-c5cd9b394c69",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "13d9ffcf-0580-49cf-9933-0f74dc38e576"
        },
        "item": {
          "id": "1919ba70-c94a-42d3-9fd9-edd3d449eef2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5c0ee421-b92d-4438-97d6-947a799ef141",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "127eaea0-df8d-4719-9bc0-76ed9a603d20",
        "cursor": {
          "ref": "bc012744-59f6-4c93-8126-5a6dd6eb92f5",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f8fd4c40-2919-4ab2-b148-1b262f71fff6"
        },
        "item": {
          "id": "127eaea0-df8d-4719-9bc0-76ed9a603d20",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "97790901-8800-4287-820d-48ec61314387",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "4a60e878-266c-4887-8e52-57d0fad3ca03",
        "cursor": {
          "ref": "183b7960-3d6c-438c-971e-6017b0dde822",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "28262809-a3a9-4909-b3c3-cb213e18f9f6"
        },
        "item": {
          "id": "4a60e878-266c-4887-8e52-57d0fad3ca03",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5bed0c91-c685-47e2-acb0-5f0002d0ee94",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "d64c8736-38e3-4c16-a0ac-2b1ee1573abb",
        "cursor": {
          "ref": "b11258f0-4a22-4eb2-8685-242f61daef1d",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "52ecce77-8a2a-45fc-8d6b-2fe8593101ca"
        },
        "item": {
          "id": "d64c8736-38e3-4c16-a0ac-2b1ee1573abb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "74c17806-d5cf-40a4-9ca7-7e5bc2ae8c13",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "d2e1ad62-c8ff-4bbe-8ed8-d997d86f7705",
        "cursor": {
          "ref": "7919ddc3-5126-4751-b52b-5beedc796836",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "235c1483-b4c9-4e4f-8744-29a31b958d61"
        },
        "item": {
          "id": "d2e1ad62-c8ff-4bbe-8ed8-d997d86f7705",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b9ad39fb-a382-45d2-a0fe-b189c322fe79",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "ab364459-84d4-4c30-be8e-c64d6ed2e172",
        "cursor": {
          "ref": "34821ea7-0520-44ca-8f7c-5e15fd98fc75",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1f42fed7-448c-4ea9-9de2-7b46a30ef766"
        },
        "item": {
          "id": "ab364459-84d4-4c30-be8e-c64d6ed2e172",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2cc3f7eb-54d9-4783-b5d8-f6094e07e5e5",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "17c26a4d-ac47-49f9-9f03-816ebfc4bb98",
        "cursor": {
          "ref": "dfd0fc09-fd49-4eea-91e3-3decd9506903",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "32411fe1-c0ab-497d-9f2c-e40bfd6bae6e"
        },
        "item": {
          "id": "17c26a4d-ac47-49f9-9f03-816ebfc4bb98",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0a5c8d48-bec4-4ed6-9fc9-09f0a5fa6141",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "5c287eee-1b07-4b3a-8989-c3a75cdab3b8",
        "cursor": {
          "ref": "2932ae5e-b7c4-47d7-abc7-9abb188dec2b",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4f296b24-2b72-4c5e-8be5-f39a933a1f6f"
        },
        "item": {
          "id": "5c287eee-1b07-4b3a-8989-c3a75cdab3b8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8e01ee0b-c75c-453e-892c-296d5e054646",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "559aa8f0-96e9-4cfe-957d-d760fcb64336",
        "cursor": {
          "ref": "4cb6171b-d222-4569-8899-5090e107f8c4",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "eb3f1190-6cb9-44b9-b51f-62f366d6f2ee"
        },
        "item": {
          "id": "559aa8f0-96e9-4cfe-957d-d760fcb64336",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "62ade88d-975f-4db3-8453-98cb22362aba",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "1d5c3e37-2fee-4817-af96-bd22cab7a954",
        "cursor": {
          "ref": "8b11356c-2937-490f-816a-30c2ae023d7d",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "46393b43-5919-400f-b4e3-23c3789adad4"
        },
        "item": {
          "id": "1d5c3e37-2fee-4817-af96-bd22cab7a954",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5b663d3d-c73f-4e9e-843c-c961377f5e7b",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c9f86640-0a21-4c1f-87c4-4c8d64a14e01",
        "cursor": {
          "ref": "4a29192c-6f6e-43e9-8246-c45a2b0a1e29",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d5294e4b-9d2c-4cbd-8ae5-5e2ba4a9c713"
        },
        "item": {
          "id": "c9f86640-0a21-4c1f-87c4-4c8d64a14e01",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "92532de7-dfd3-4f7c-89dc-5f8a9f96508c",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "51b8e78f-4c1e-477e-bb30-4ba7ae3fdf7f",
        "cursor": {
          "ref": "7b370eb9-aab5-4131-bb78-090df6317786",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "89b1d308-4e20-4c19-bed6-50a53b61f7c6"
        },
        "item": {
          "id": "51b8e78f-4c1e-477e-bb30-4ba7ae3fdf7f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a723a198-b414-40aa-9fa9-40267a68b64e",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c6b73b4a-dda0-4879-b400-577d5e1c3dd7",
        "cursor": {
          "ref": "ff4bd4d2-3b3d-49f5-bd41-a786b70909ee",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fd77c58b-63cd-4316-99d8-b2a6e7093643"
        },
        "item": {
          "id": "c6b73b4a-dda0-4879-b400-577d5e1c3dd7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "60627976-5207-4010-8820-584be522b5d0",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4833c01c-cfdb-46bf-9812-cae9c37ef817",
        "cursor": {
          "ref": "3cf61fd0-f562-4b73-9f6b-f025240d3d92",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d2051852-419e-42f6-bc46-882d91b2973b"
        },
        "item": {
          "id": "4833c01c-cfdb-46bf-9812-cae9c37ef817",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c167bf9f-17c7-4a24-9b1b-0943dc929aa9",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "71f13f28-ee3f-4d66-8609-0c806d447500",
        "cursor": {
          "ref": "5b863a49-0ea0-4ebd-bbec-c7d36a949105",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "31fdd4b8-79b0-48e0-90d4-3b6e812038f8"
        },
        "item": {
          "id": "71f13f28-ee3f-4d66-8609-0c806d447500",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0fda11a2-f811-424e-acf0-c48384c3b3ee",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "86f95bea-f0ed-4bc6-949e-054778baf58f",
        "cursor": {
          "ref": "5a6eedfa-7182-458c-aa03-2322c8b4c511",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9ee2822a-d9e2-493f-8b57-50caaef3d5d0"
        },
        "item": {
          "id": "86f95bea-f0ed-4bc6-949e-054778baf58f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "aae4a915-99b6-4a70-9f97-695e25bc0be2",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "e011b384-6df8-423e-89f7-b6e4cab55280",
        "cursor": {
          "ref": "976d28a6-9927-484a-bcb4-72e0019e2cb2",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6eb7c7b5-6ea9-4903-8098-c12b0172b091"
        },
        "item": {
          "id": "e011b384-6df8-423e-89f7-b6e4cab55280",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0d0e0b25-eb7a-4212-82cf-c67c79ea21b4",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "570bc6ac-1aa4-430e-b41f-fc868bb986cd",
        "cursor": {
          "ref": "7bbc44c3-fb42-4802-b643-faed1e35ef17",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b93915ba-62e3-4a0b-9d88-e40d2c898df5"
        },
        "item": {
          "id": "570bc6ac-1aa4-430e-b41f-fc868bb986cd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fdd050a9-d7c3-4130-8e12-42d6dd3acc31",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "85a89c8f-9cce-4563-ade7-6be82c4dcb07",
        "cursor": {
          "ref": "7e07a7ca-628b-4397-baf1-6f11a4b4cecd",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "90b00066-7bbc-499c-ab25-cf877d29b9d7"
        },
        "item": {
          "id": "85a89c8f-9cce-4563-ade7-6be82c4dcb07",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0b27c1cd-07d5-4c28-b2de-9978313c0e49",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "f24087d9-d55d-44a6-b76c-d7446bb5a7a7",
        "cursor": {
          "ref": "255dc15e-8766-4d31-aa95-92e7fab2e265",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0458d73c-a7fa-4851-945c-bc8ae43a3066"
        },
        "item": {
          "id": "f24087d9-d55d-44a6-b76c-d7446bb5a7a7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "26435786-9b72-420c-b268-8f6c29bc0cd6",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a158974c-316a-4618-bf31-9b3254466981",
        "cursor": {
          "ref": "3908acf0-9f3c-491f-a29d-eebd5679696e",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1b279ddc-92b1-43ea-a1d7-794729ea70bc"
        },
        "item": {
          "id": "a158974c-316a-4618-bf31-9b3254466981",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b41cf093-d815-43d4-8d48-9f4af3ad2e44",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1af42bc7-2e55-48f8-a559-9297ffd8bfa1",
        "cursor": {
          "ref": "2520c425-f86b-4924-aa68-cc8ab21bdecf",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "29b4f8ed-22cc-478a-a4d2-685b30387709"
        },
        "item": {
          "id": "1af42bc7-2e55-48f8-a559-9297ffd8bfa1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cb4a7441-f64c-49fa-a661-6546eec61c9d",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "c9bfd142-4515-45dc-80cb-f715aad7e792",
        "cursor": {
          "ref": "f1cc8541-2cb9-4b81-a661-ddc781641463",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "44fc7afb-13cc-429e-b736-edcbf5c75b72"
        },
        "item": {
          "id": "c9bfd142-4515-45dc-80cb-f715aad7e792",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9052a641-4f91-4b5b-b2a0-b31a6747fa7c",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "44f588dd-aec3-48d7-941b-b6776b86d485",
        "cursor": {
          "ref": "d1f16fed-573f-4812-9878-625b9010b03d",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1ddc6c60-5cb6-4762-9a7a-b686312bb296"
        },
        "item": {
          "id": "44f588dd-aec3-48d7-941b-b6776b86d485",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "45fd1a64-da68-4fd0-a88a-905451f99c3f",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "d1c9be6d-f35d-4b3f-ae58-8235307a7330",
        "cursor": {
          "ref": "a8eef59e-c231-4e50-8ce8-32973b286377",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4bef993c-0055-4cfb-be03-61d3b53bda7d"
        },
        "item": {
          "id": "d1c9be6d-f35d-4b3f-ae58-8235307a7330",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7bde8e05-1024-401c-8643-4537bb2f5961",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "63589589-1355-4b5a-80ae-d109790fd63a",
        "cursor": {
          "ref": "dea02cca-a52f-4ad1-ad23-132869d66808",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a5e8d92e-ca09-4413-91cf-27a9375c8e8e"
        },
        "item": {
          "id": "63589589-1355-4b5a-80ae-d109790fd63a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dab10a91-4647-4ebf-bd01-7cb287e4e733",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "a9eac9a0-7ad5-4bb4-84d4-776f6accbefb",
        "cursor": {
          "ref": "2875c001-76a8-4e5c-9252-9b54ffe4f549",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "779f16e9-3d96-4078-b8fa-f1d7c743eb19"
        },
        "item": {
          "id": "a9eac9a0-7ad5-4bb4-84d4-776f6accbefb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e31a51f0-a85e-4a57-953f-787d35cfeaab",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "a60d02bf-acba-427b-93c8-1fda7617a722",
        "cursor": {
          "ref": "bcc5ff38-3cf2-4d1d-b2e4-55c4dc372c99",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3af1c0de-af5d-4419-859c-4de34ebaa738"
        },
        "item": {
          "id": "a60d02bf-acba-427b-93c8-1fda7617a722",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f0d7906b-a588-48d3-b7c0-83073853b7f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609acef8-aa53-4486-af19-2e685a1d3fdb",
        "cursor": {
          "ref": "03255036-214b-403e-8da5-dfc6ef16ebbb",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "18971d94-a80b-401c-8c20-dca6ba944937"
        },
        "item": {
          "id": "609acef8-aa53-4486-af19-2e685a1d3fdb",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "7ae62bc4-6603-4adc-8bd0-6113734a6bb4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adfe84ad-3f90-4851-b9ef-40d7c3097269",
        "cursor": {
          "ref": "b35dc206-61cf-452a-b851-fbfb598eebdc",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "25b4c5aa-b368-4121-97d8-6e0f431e2e8b"
        },
        "item": {
          "id": "adfe84ad-3f90-4851-b9ef-40d7c3097269",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2c989917-d779-4a69-8ff6-ec7b70eb1e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adfe84ad-3f90-4851-b9ef-40d7c3097269",
        "cursor": {
          "ref": "b35dc206-61cf-452a-b851-fbfb598eebdc",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "25b4c5aa-b368-4121-97d8-6e0f431e2e8b"
        },
        "item": {
          "id": "adfe84ad-3f90-4851-b9ef-40d7c3097269",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2c989917-d779-4a69-8ff6-ec7b70eb1e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b189ef-5171-4f81-bbf6-c071401996eb",
        "cursor": {
          "ref": "3146e730-f343-49f2-978d-4c8268d1863e",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "fc044a42-d3ec-497f-90b5-6b3984311e68"
        },
        "item": {
          "id": "87b189ef-5171-4f81-bbf6-c071401996eb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2576e9c3-865f-4205-901e-2b2111497521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7a5eea-1668-4d81-bcb6-51fc332d655b",
        "cursor": {
          "ref": "70a1c08f-2d26-4f11-84bf-428a73bfffff",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b3e0276e-a078-409f-b3be-0adf59ff9945"
        },
        "item": {
          "id": "2f7a5eea-1668-4d81-bcb6-51fc332d655b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fa9108f0-d1ca-4b51-8066-019c3dc7b5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8f6b00-ac6e-47d6-a3da-6ad1442856cc",
        "cursor": {
          "ref": "ae436284-f91e-429e-be3b-c394527f65f0",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9fd9175b-6618-491e-bb0f-f0ab3682310c"
        },
        "item": {
          "id": "7c8f6b00-ac6e-47d6-a3da-6ad1442856cc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4e68e0b8-379e-43e2-bafa-aff2b22de077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b973d032-bcd1-4f86-83aa-7f44a4d50aa6",
        "cursor": {
          "ref": "5796fe19-9706-4f0e-9714-47820f3df10d",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "db75b071-7c26-46a1-90e2-84df13ba8ba4"
        },
        "item": {
          "id": "b973d032-bcd1-4f86-83aa-7f44a4d50aa6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "80a08293-268d-433b-8d32-a4c82e3818ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c79348c-6c89-4f2d-aff0-7fe143b50d9f",
        "cursor": {
          "ref": "063b3d33-4641-4f1d-ba5a-917e54ca85f9",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "76280fd8-d7f5-4952-b379-9e7a2ddde571"
        },
        "item": {
          "id": "3c79348c-6c89-4f2d-aff0-7fe143b50d9f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fe718b85-1597-4dbc-a289-8e68f237a702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b71111b-ce61-47c1-8b47-cbbd52b4c932",
        "cursor": {
          "ref": "e46ab473-2b51-4d12-bf36-48b531e08c90",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1260f994-e1d8-4512-9588-921a4ea4450c"
        },
        "item": {
          "id": "7b71111b-ce61-47c1-8b47-cbbd52b4c932",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "208c4a9e-9b87-44dc-9b57-7c23f3feb9f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 829,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3cae68-950e-4d73-a339-14c7e0a03b90",
        "cursor": {
          "ref": "a0f2c724-7993-4f36-b9b2-7a424b590b03",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e768f13c-2742-4c00-99ac-dbd0bd7b03b4"
        },
        "item": {
          "id": "8e3cae68-950e-4d73-a339-14c7e0a03b90",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d584e7f9-c293-40ad-b188-0eaa5fca6a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53eae7e1-129f-46e5-a6b1-ad964b4918be",
        "cursor": {
          "ref": "f22ea95f-8a80-469b-9341-a63462a2d1c9",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b0348c9a-e35c-4d8c-9cba-baeb8be78684"
        },
        "item": {
          "id": "53eae7e1-129f-46e5-a6b1-ad964b4918be",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d899991e-3b21-4fdc-8c26-8de1a24ecb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead2a652-63a6-4eec-964d-8ea3d4600fc9",
        "cursor": {
          "ref": "e5095342-98e3-4afb-a8d8-8330abac3768",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "87d71d91-6678-4797-b546-89de9bb6d18c"
        },
        "item": {
          "id": "ead2a652-63a6-4eec-964d-8ea3d4600fc9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2ac332d7-2bf4-4ba4-be3b-33770af09ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d6ef11-ebe5-4337-95c6-bf241080ed20",
        "cursor": {
          "ref": "5285ec1f-0007-47dc-995b-c4f8cfb611b8",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7a17c88d-58b6-471d-8b3d-650b81f01548"
        },
        "item": {
          "id": "85d6ef11-ebe5-4337-95c6-bf241080ed20",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d5f1c56e-067c-4f02-b053-2d40b0a0ec24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5020e7-c54a-4387-8d25-901940a0a2c4",
        "cursor": {
          "ref": "85925237-0115-43dc-a428-0e11ae499b85",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "deb65946-d397-4be2-b774-fd1a1cd33ec8"
        },
        "item": {
          "id": "3c5020e7-c54a-4387-8d25-901940a0a2c4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8e077259-24bc-4756-92b4-e703901e86f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feaf0fe2-1486-4358-8342-26469de4479c",
        "cursor": {
          "ref": "1e23645a-f747-42fd-94e7-dc69ae16b699",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2505b0aa-fb28-4454-a2bc-5c59d7789871"
        },
        "item": {
          "id": "feaf0fe2-1486-4358-8342-26469de4479c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f0927541-496d-4f6f-bef9-0c4da24c4a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b8458e-6a2d-4d26-866f-b41ac7b2daf0",
        "cursor": {
          "ref": "471a528f-2e40-4daa-bc08-7cf4d2a17688",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "def5f71c-3a6d-4398-a9e6-b7aed42f2483"
        },
        "item": {
          "id": "87b8458e-6a2d-4d26-866f-b41ac7b2daf0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "31a16662-6bbf-43cd-866a-e881e24f47e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156fa1a7-c09f-475f-92e9-0e8361d57a31",
        "cursor": {
          "ref": "bb07b06c-064b-45ec-8759-ba3a87ee3062",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0fe7b8da-f18a-4c0a-a5fe-6a227ce1785c"
        },
        "item": {
          "id": "156fa1a7-c09f-475f-92e9-0e8361d57a31",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7b7571a2-876a-43ee-8585-0a8b4558c2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d1e55c-a971-44f7-8363-430093a041cb",
        "cursor": {
          "ref": "32891d70-2839-485d-935e-5b95d43091dc",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a6eb0fa3-e792-4c6f-b0ac-c4d717c7af63"
        },
        "item": {
          "id": "22d1e55c-a971-44f7-8363-430093a041cb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3bc1bea1-b1b8-4811-bdcc-1843095abe51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47156f76-f5cb-42fd-9bc5-02627c676cb1",
        "cursor": {
          "ref": "9c6d976b-9a5e-41ad-9d8e-d647fcda4b63",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9a2a97e5-70ff-403b-b0ad-214d091ac872"
        },
        "item": {
          "id": "47156f76-f5cb-42fd-9bc5-02627c676cb1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "704f610f-3a7f-41d5-82fd-bdd34819df6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588e5973-c109-4567-ac8e-88dd502cd4bf",
        "cursor": {
          "ref": "2b3e105f-a6ce-432d-9459-19beaec8d166",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1df5f4a8-ee9a-4a9d-af69-3293b5a97e47"
        },
        "item": {
          "id": "588e5973-c109-4567-ac8e-88dd502cd4bf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "dda50dfa-ec8d-47ba-b463-508a31f9f859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6aef8d-3b27-42df-ae75-e3b86ee84944",
        "cursor": {
          "ref": "05f1d3f9-1ef8-4a06-9f2f-932c3bcf170a",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "84b936d0-a55c-4f80-a6a3-3c7a3191fd00"
        },
        "item": {
          "id": "ce6aef8d-3b27-42df-ae75-e3b86ee84944",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "31e3e9ba-1c3d-4e5d-996a-7c957429387b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c82444-1f86-408c-82d6-a4fc77dbdb5f",
        "cursor": {
          "ref": "3d1c5a7f-0552-445c-b609-97b3830ec679",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dc47f43e-e329-4212-980e-659aad8a1e14"
        },
        "item": {
          "id": "76c82444-1f86-408c-82d6-a4fc77dbdb5f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8a1ee04a-77c9-4670-b453-57e069630925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fdf0486-bd00-4ad6-8261-681a30272b21",
        "cursor": {
          "ref": "764cb692-d431-4647-b1c9-a647e4142e60",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b0a07592-0470-410f-bd92-445caaea7b82"
        },
        "item": {
          "id": "3fdf0486-bd00-4ad6-8261-681a30272b21",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c0dcf497-e3b8-4dfe-9176-27baec51bd8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96d3ccc-233f-4bb9-b2b8-aea047b49af4",
        "cursor": {
          "ref": "af0e33fd-5752-4a4b-873f-3d4511c486db",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a27e02d8-e61f-4cd8-99e6-989d44e8d9b7"
        },
        "item": {
          "id": "f96d3ccc-233f-4bb9-b2b8-aea047b49af4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5841091c-4231-41af-9194-c3d61ee4b42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62380d8f-2c4f-4fa2-9e31-bd0f8f79539b",
        "cursor": {
          "ref": "2bf012ce-6ef1-462e-9011-1f48849bac09",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9c4de434-e654-4dcb-b877-be6a89f27e8f"
        },
        "item": {
          "id": "62380d8f-2c4f-4fa2-9e31-bd0f8f79539b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b2a68df2-d83c-44da-934c-a107386f1a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f768bf95-00d8-43c9-b9bd-02e4882b3291",
        "cursor": {
          "ref": "5193585e-9c8d-41e4-8e5c-e2a80f9b3062",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ac8a5578-c5f5-4b40-8a08-138f33ea51ce"
        },
        "item": {
          "id": "f768bf95-00d8-43c9-b9bd-02e4882b3291",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "14e80e9a-9c59-4272-9d52-649a876209ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce52812d-8cb0-4f5f-83e4-785e85468918",
        "cursor": {
          "ref": "b1353590-254e-4ffe-8ddb-f15c400283d1",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "14b18f19-bb10-48b4-ba9c-1b7a043c5a70"
        },
        "item": {
          "id": "ce52812d-8cb0-4f5f-83e4-785e85468918",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c3f6994a-431e-4231-9cae-c607d7f89ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36178ac0-8dac-47f6-b051-1c00d3b39f18",
        "cursor": {
          "ref": "6e1e009e-0fac-49ad-af91-eb94cd378078",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "cbbfacb5-ccb4-4354-b493-177f0d91ea2f"
        },
        "item": {
          "id": "36178ac0-8dac-47f6-b051-1c00d3b39f18",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e52e8fc1-93e7-4743-8bf3-8e7e5248c201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dede1005-a829-4eeb-88f1-21e0686f8771",
        "cursor": {
          "ref": "6cf4437c-182a-48b5-8841-a11493a76f00",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b6616822-d520-49bc-9045-b11481fc7258"
        },
        "item": {
          "id": "dede1005-a829-4eeb-88f1-21e0686f8771",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "eee0c116-cfdf-43cc-9102-5c54c7012bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cf5aaa-468a-41cf-bf4f-0b31af95f402",
        "cursor": {
          "ref": "bcb6da7a-34b6-49a1-bf22-2e2d9cb6585f",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b969b892-95c0-4dbd-a262-ce5d833dc709"
        },
        "item": {
          "id": "e2cf5aaa-468a-41cf-bf4f-0b31af95f402",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3d982298-c4f3-468d-b7b4-eac5f2888ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa645da-068d-4d04-9e75-4c06bcb96474",
        "cursor": {
          "ref": "589ed4c5-1f96-4253-8cb0-82afae98b921",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "08d6a805-2bb4-4c1e-8e1d-382296767381"
        },
        "item": {
          "id": "eaa645da-068d-4d04-9e75-4c06bcb96474",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "39d5a8fb-ae62-4e56-a48c-f7e99e7764d7",
          "status": "OK",
          "code": 200,
          "responseTime": 223,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "fb4a07af-ebbc-436e-9257-63acf4077ac4",
        "cursor": {
          "ref": "613872d4-b0fd-4031-98b3-35c29d67a4dc",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b825ce47-724d-4069-84ff-b5d97e0717fa"
        },
        "item": {
          "id": "fb4a07af-ebbc-436e-9257-63acf4077ac4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "01c6027b-ea2d-4b8e-acec-5c207a5d9c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04dfbe8-9a37-4235-a002-691e7494b45b",
        "cursor": {
          "ref": "987e1fe9-a171-472f-aa54-c32f500adc13",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d3e6fe56-d845-44f6-b01d-cb53c61d1dd6"
        },
        "item": {
          "id": "a04dfbe8-9a37-4235-a002-691e7494b45b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f3a0686f-73e2-4c4e-b3a3-4dc907f45d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77325893-2d50-4a9f-aa74-7b5cb08d505b",
        "cursor": {
          "ref": "362ba503-236e-4d10-bf66-6f60a25209b5",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f2ba2e97-7947-42c9-8196-27cce9f216c1"
        },
        "item": {
          "id": "77325893-2d50-4a9f-aa74-7b5cb08d505b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "97d1e805-210a-4232-91b1-a9bbf24509a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdeb7bf-5657-489e-aaf1-de639bc8c5ab",
        "cursor": {
          "ref": "01b3af3c-41ba-41f6-bdd5-08c57a13ba4a",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1f5ae477-8f86-4abd-8f4a-535cabb85e88"
        },
        "item": {
          "id": "ecdeb7bf-5657-489e-aaf1-de639bc8c5ab",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a0d12ac7-92f1-41be-a532-1add30f695ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ed0f94-a335-44e4-9cf7-4471551def11",
        "cursor": {
          "ref": "68611c67-c018-4667-9d83-716273a6ba04",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "dc8d90ae-7c30-4d60-acb6-48432e8e7023"
        },
        "item": {
          "id": "c7ed0f94-a335-44e4-9cf7-4471551def11",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bf3f5465-60a1-47cf-b05a-59848f22c145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f96f862-c846-4208-9589-5d3c38b4ee60",
        "cursor": {
          "ref": "b217283d-dd76-4882-ad5e-03515e8e36f0",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9be9f7cb-876e-4bf4-864f-9779b74bb97f"
        },
        "item": {
          "id": "2f96f862-c846-4208-9589-5d3c38b4ee60",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5326368b-14a0-4122-bdd6-378042f855e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e7407b-b1e0-4314-a963-6c167f9a69bb",
        "cursor": {
          "ref": "ac95c9f5-3e85-44ee-89d5-1a3fffe72df7",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "94f75d6c-4db3-426b-97ed-59a90128606c"
        },
        "item": {
          "id": "02e7407b-b1e0-4314-a963-6c167f9a69bb",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "42a4c7d4-201b-44f1-b182-afea8ae77692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3eb26b6-3a16-446d-836e-2305195512dd",
        "cursor": {
          "ref": "16bd89fe-5e59-4a8a-96b1-3215a4b983a2",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8dfab894-c0f7-4740-9154-b696a002f128"
        },
        "item": {
          "id": "d3eb26b6-3a16-446d-836e-2305195512dd",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d343a530-fc0a-4108-8626-491622719219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894a0198-d42c-4b57-bb25-fde37f8e8daa",
        "cursor": {
          "ref": "263b2f41-28b7-4de0-8506-480ef61b196a",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ec637d9c-b568-4a2d-81ba-04e62f565204"
        },
        "item": {
          "id": "894a0198-d42c-4b57-bb25-fde37f8e8daa",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9fdd78f6-97ea-45da-88ed-d73de9bcdc13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b00668-e92e-4455-905a-b4b0fd64d657",
        "cursor": {
          "ref": "145ab107-5534-448c-b929-3c1e1c7da3ef",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "672dfa75-b8f6-4bed-8885-0f63af58ff9a"
        },
        "item": {
          "id": "a6b00668-e92e-4455-905a-b4b0fd64d657",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b674a3ed-26ed-4abd-9029-9533983664ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae34acc-3f44-40d1-88bf-2fdb706b7705",
        "cursor": {
          "ref": "a36e3484-9829-4a32-bbce-123701adde79",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8d99b8e7-9059-4b41-bdf9-070b4ac3872c"
        },
        "item": {
          "id": "3ae34acc-3f44-40d1-88bf-2fdb706b7705",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cfe3c55e-b977-4d1e-985e-34630984583b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68d9e83-c93b-4802-a2a6-449523b177c0",
        "cursor": {
          "ref": "bfcf2ef4-c035-4042-9444-650b753228f2",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "bb5cbf72-e8f4-46b3-a765-78b0acd50f47"
        },
        "item": {
          "id": "f68d9e83-c93b-4802-a2a6-449523b177c0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "69f19544-7a0e-4a19-8766-51fc181832d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ded1ae6-456d-48db-a917-6d14b6a2a9ce",
        "cursor": {
          "ref": "f6f406bf-0cf1-474d-b4e5-b0a201512d17",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "87bc02c4-52de-480d-b048-c5bd49069951"
        },
        "item": {
          "id": "2ded1ae6-456d-48db-a917-6d14b6a2a9ce",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "994ccdb8-9361-45be-973d-a71984f03415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6147f426-c427-4def-9ed2-ec97b6f18ae7",
        "cursor": {
          "ref": "86a0a5b3-bca2-4be9-a320-6faeb3352c49",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7d03d0d1-b184-48b9-8c5a-cd47df3b4b0b"
        },
        "item": {
          "id": "6147f426-c427-4def-9ed2-ec97b6f18ae7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4cf5b1e7-b910-425b-bcdf-1b04f4a404fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3164b05d-0534-401b-8aa0-41c0b099cf78",
        "cursor": {
          "ref": "f7d50b5c-5311-4555-a8ab-26ccbdfdd345",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "666908a1-2c91-4af6-94d9-4e9a0d7f6ebe"
        },
        "item": {
          "id": "3164b05d-0534-401b-8aa0-41c0b099cf78",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "468a6770-7cd0-4ff5-a96f-4db289f4b59c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4826855-c4ed-488a-b907-c9348837a172",
        "cursor": {
          "ref": "43a1ef96-daf6-440e-8bb5-2fea801ecd51",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0ef2bf1b-a642-4591-ae3d-58037d99c3c7"
        },
        "item": {
          "id": "c4826855-c4ed-488a-b907-c9348837a172",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d36612a2-eaaf-483d-9870-34e282caf019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c604db50-6466-4415-9a78-cbbafc5b2212",
        "cursor": {
          "ref": "aa7feec6-5996-47be-8485-3d8b56a841ed",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "cf9da981-76d6-48cf-bd6f-7fca90ebecdc"
        },
        "item": {
          "id": "c604db50-6466-4415-9a78-cbbafc5b2212",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d0c9b98b-a5b7-40b3-996f-324ea62f60bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59330db8-aa6f-40f9-b72f-af66c24323ea",
        "cursor": {
          "ref": "480b3be4-1b25-4647-a875-fa31b38866b4",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ec32f021-bdd8-452f-b822-9fce9964142c"
        },
        "item": {
          "id": "59330db8-aa6f-40f9-b72f-af66c24323ea",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "361879a7-2233-4935-b174-6b35e15ce82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73c10e1-e101-4caa-b3df-523cade4f2a7",
        "cursor": {
          "ref": "50c98346-8cd7-4299-8cad-6b090fc0d509",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e3d22170-bb3e-496d-acf0-284213b1cbdd"
        },
        "item": {
          "id": "b73c10e1-e101-4caa-b3df-523cade4f2a7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4ce016e8-1a1a-4aeb-805b-d05446f8da9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bd0433-7a7e-474b-9e62-aa27fd1b45b7",
        "cursor": {
          "ref": "9bf26f17-0f90-4a7d-87b6-3e1e50f705df",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "297edbbb-1cd1-4f5a-b459-d1e714ab13f7"
        },
        "item": {
          "id": "03bd0433-7a7e-474b-9e62-aa27fd1b45b7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3c233056-c773-4871-9c6b-18da935b0e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04926ae7-fd02-4fa8-9708-398beaf1a974",
        "cursor": {
          "ref": "ecfb8e9d-b547-45ad-a15a-980ab04a35a7",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1dab0926-e38c-4aa1-aae1-318bb2c113f6"
        },
        "item": {
          "id": "04926ae7-fd02-4fa8-9708-398beaf1a974",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "448a7b30-8747-4d41-9069-1b0f18d394ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a28165-ff2e-43af-b19b-749363811731",
        "cursor": {
          "ref": "e3757b43-91b2-46d4-bee9-1c8b5a104030",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8ee121ec-8606-47b7-8566-8b9f01dbbeb5"
        },
        "item": {
          "id": "52a28165-ff2e-43af-b19b-749363811731",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f2766787-9982-4935-984d-c4e34f842d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dba2cf5-c5c0-4f65-9d7b-b15df223406a",
        "cursor": {
          "ref": "8fe14972-e952-4d36-90f7-121fecf76977",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0eb49538-2dce-4729-abef-d7bc5eb27dcd"
        },
        "item": {
          "id": "4dba2cf5-c5c0-4f65-9d7b-b15df223406a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ab2ce5ff-ae84-44ac-8338-ecff505defe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a07b28-701b-4dfe-a119-a6d2d0cd17b7",
        "cursor": {
          "ref": "7590d288-80c3-4168-b29b-65e82201720b",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f6de9ad6-5a39-4d05-b0b2-cdf272a2d6ff"
        },
        "item": {
          "id": "b9a07b28-701b-4dfe-a119-a6d2d0cd17b7",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "45d797d1-bb54-4e0a-8b96-008ccbf42a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae20517-a8e5-4e64-93fc-83573f3a8f31",
        "cursor": {
          "ref": "3d1d058a-427f-4fe7-a1c4-0e0a4534a84a",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "177919ba-7a5f-454f-8fd8-ab0f8eff1cba"
        },
        "item": {
          "id": "6ae20517-a8e5-4e64-93fc-83573f3a8f31",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1f61ab67-ebeb-4dbc-87aa-db929218a6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659f305e-672b-43c2-9222-47ae73be2e0f",
        "cursor": {
          "ref": "fca035fe-5c1a-42e9-9482-89b6185ef280",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "57ba687d-5ba3-4648-9072-3c6217ed34fc"
        },
        "item": {
          "id": "659f305e-672b-43c2-9222-47ae73be2e0f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4d7a7589-d0b0-41be-a0a4-1b7fe5d89cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04050a0d-704e-40ff-bb36-a118547f7329",
        "cursor": {
          "ref": "40f84cac-d1ff-4916-845d-f9a2c0aa86a4",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4b5b5f49-6e29-435c-9fbc-3be56d1f8947"
        },
        "item": {
          "id": "04050a0d-704e-40ff-bb36-a118547f7329",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8906d311-781c-41a7-9cf8-eec532ca2626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e5bbb2-01e4-435a-83d8-f83dad7752ca",
        "cursor": {
          "ref": "14bad32a-7959-445d-9d04-436901f340fe",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a2007fd9-9273-4c97-bf92-bed7d60dfa03"
        },
        "item": {
          "id": "d0e5bbb2-01e4-435a-83d8-f83dad7752ca",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ee6dd093-04c3-467a-9812-dc276af2cdae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2341e0b9-4db3-4753-a00a-73fd9d9f63cd",
        "cursor": {
          "ref": "d78b5d83-fda9-490f-a143-c4dad082cd0a",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "180e408f-d7da-4f37-8648-a9c13bed9f5a"
        },
        "item": {
          "id": "2341e0b9-4db3-4753-a00a-73fd9d9f63cd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4ca4c963-d583-466c-ac58-7037e240cb3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5a905f-6bb4-4680-a2b4-136ba83e6940",
        "cursor": {
          "ref": "087359fd-9bd4-4eb1-a859-8aaa31d36be0",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "90f94f31-d052-4a5c-8e3d-6e1387f0f4e0"
        },
        "item": {
          "id": "0f5a905f-6bb4-4680-a2b4-136ba83e6940",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8d9632d7-042f-4e5b-ac77-400f3acd0722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03772e0a-4ec9-4143-bc19-dd278d27eef3",
        "cursor": {
          "ref": "a6e7ec0d-bf91-4c43-a70a-5c986f9bf992",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "05c50ef5-5cea-4b12-ab3e-ee70e35fa51f"
        },
        "item": {
          "id": "03772e0a-4ec9-4143-bc19-dd278d27eef3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3e93873a-314c-47a0-9deb-a37c62225284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf5b0af-8635-4be6-9302-ff4c5ada62aa",
        "cursor": {
          "ref": "a9023d3b-4391-416a-ad79-7fe421d28ffc",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "619094e1-b049-4d08-bfe8-0c9ad6679603"
        },
        "item": {
          "id": "fcf5b0af-8635-4be6-9302-ff4c5ada62aa",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e198b782-2b34-4ceb-acf0-c08a03fb359e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69570bae-36fd-49aa-b802-470d05d2fe48",
        "cursor": {
          "ref": "49d57fb7-ab45-40b3-8ddf-44325ed4f606",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5d2827ad-d714-49aa-a281-cc5033453362"
        },
        "item": {
          "id": "69570bae-36fd-49aa-b802-470d05d2fe48",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3a4d90c2-5a06-480a-bb29-14ca3a7130a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a03d0427-5451-453a-8385-f6c7c729bdc3",
        "cursor": {
          "ref": "55ae6dc7-9efc-4d65-91d7-e3a6a634c16e",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4b4d49cf-aa2b-47c7-abeb-059cfa21df0d"
        },
        "item": {
          "id": "a03d0427-5451-453a-8385-f6c7c729bdc3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "366b6a49-b298-4cd4-9a23-5292d9212cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feef7c78-f835-48ed-ae37-e1cc198dbe42",
        "cursor": {
          "ref": "2142af93-76bc-4574-a492-5f79c524cb18",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "53376e77-3ee7-4dbd-8450-143a0d29ff26"
        },
        "item": {
          "id": "feef7c78-f835-48ed-ae37-e1cc198dbe42",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a4eff890-aca0-460f-8667-20b495e45c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4ce349-55b3-4fc3-894c-71eb7c3f9035",
        "cursor": {
          "ref": "54ff4a0b-b1ee-4e92-85b3-19478c556ba1",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1ac47adb-23d9-49e1-8427-cddaa3f598a7"
        },
        "item": {
          "id": "3b4ce349-55b3-4fc3-894c-71eb7c3f9035",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ba726052-bb39-41e3-b5f2-7f5ea68d2061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4d72ba-eb15-4118-b9d7-e7b0039f7d72",
        "cursor": {
          "ref": "34c2856b-3ceb-443e-8582-72a190c97a70",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "38f41e9a-1228-4dfe-819d-fed64c6d94b7"
        },
        "item": {
          "id": "1d4d72ba-eb15-4118-b9d7-e7b0039f7d72",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b3c87d6b-046d-40e2-b45e-c244f6344f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1362183-2a3b-43dc-85a5-9177fcd3379d",
        "cursor": {
          "ref": "5d1793e6-8436-467c-8cad-dd9ff73cd5c2",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5e68e316-be12-4717-b7fc-2b69b7d5eab4"
        },
        "item": {
          "id": "c1362183-2a3b-43dc-85a5-9177fcd3379d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f7a5cbe1-a748-4758-850e-41e3bd1280d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c0c41c-a3ec-4809-86cd-c6a5cd3c757c",
        "cursor": {
          "ref": "0a434bf5-1b3f-43bd-ba2f-ea0795f59015",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8aa56d29-2664-4648-8c00-051c21a3e762"
        },
        "item": {
          "id": "f7c0c41c-a3ec-4809-86cd-c6a5cd3c757c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9f54bac8-be53-4f3f-ae52-4055d5ad3511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb3b480-1942-4726-91a6-85b08904cb76",
        "cursor": {
          "ref": "110b284c-4deb-43a5-ba9f-68ae68638a60",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a46b8cbf-840f-4907-9701-4d7a6d56e5d4"
        },
        "item": {
          "id": "aeb3b480-1942-4726-91a6-85b08904cb76",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "598247b3-0c55-4079-b788-1eb1fe929a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1303ff35-305f-4088-80b9-8014bf8dcb48",
        "cursor": {
          "ref": "d4b5c26e-d712-4f2a-bdde-733cbfe5884a",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ce5a856d-3f0d-457d-9d69-5b44ed22fddf"
        },
        "item": {
          "id": "1303ff35-305f-4088-80b9-8014bf8dcb48",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6fff6b23-9858-4d32-a667-3ec3829230f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ba97b5-b652-43d6-bce6-c8cf23a11474",
        "cursor": {
          "ref": "9ee4c8f1-40f3-45a2-8496-721af14198f1",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c15bde08-745c-4145-abbb-5f6c6664563d"
        },
        "item": {
          "id": "64ba97b5-b652-43d6-bce6-c8cf23a11474",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5efc9553-dcbb-44bf-aa6f-3a4b37e9e29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55ff9c8-ea28-4980-a501-5939ec750ec2",
        "cursor": {
          "ref": "ff1fedd0-cacf-4704-9c31-e96580744de2",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fc9ecd71-633e-4011-b184-15f9a1d0f9f5"
        },
        "item": {
          "id": "f55ff9c8-ea28-4980-a501-5939ec750ec2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "674631bd-4ee0-4a29-a068-b69becf11507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00198f23-6681-4456-b543-d5d869ca9867",
        "cursor": {
          "ref": "6f7db191-1f06-4bd3-a14d-c23748d1a172",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8d8552ae-54af-4707-9e89-fbc405d1396e"
        },
        "item": {
          "id": "00198f23-6681-4456-b543-d5d869ca9867",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "096223cd-0bd3-4341-abbf-9fdf639ccbee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8a1398-f669-4a9d-b432-2d3116afcac5",
        "cursor": {
          "ref": "7bec34f2-c3e8-4942-9ee9-770e77c553eb",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "711eb5fc-7aca-4916-a188-3ea4a0289c47"
        },
        "item": {
          "id": "0f8a1398-f669-4a9d-b432-2d3116afcac5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "246ae6af-3b4b-445c-b3e0-9599f0a1fff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534a5645-506d-4b46-9aef-0d259f5f1366",
        "cursor": {
          "ref": "f59962a2-3116-4374-9800-bb1f79db5089",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "dd029378-4a3b-4f4e-ac59-cd15a7dafc51"
        },
        "item": {
          "id": "534a5645-506d-4b46-9aef-0d259f5f1366",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7188494f-fae0-4ac0-89dd-dbfdcf2c58f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86aeb04a-a6a4-4973-89b2-9733d2729371",
        "cursor": {
          "ref": "aea25257-dfc3-4038-b204-70817a17ff13",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7a270409-9515-4059-9bbc-2984f55b6a25"
        },
        "item": {
          "id": "86aeb04a-a6a4-4973-89b2-9733d2729371",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f1fc91eb-b11c-422c-82cd-2fcafc4434d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8d6f8e-4b13-4959-a630-af89141ba2e5",
        "cursor": {
          "ref": "ca30282b-2e7c-4059-90e2-86dcae5538dd",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ec34cd29-b482-48b2-904b-1cd38b91857c"
        },
        "item": {
          "id": "4c8d6f8e-4b13-4959-a630-af89141ba2e5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5ac0f8ac-a929-4f5c-a9b7-e350a75d1177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b8abeb-30ba-4cbf-8960-7339545e3708",
        "cursor": {
          "ref": "520fd167-1c04-4205-adb5-bb4736c556c2",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "767448cb-9171-4d48-b9e5-d1735abad478"
        },
        "item": {
          "id": "13b8abeb-30ba-4cbf-8960-7339545e3708",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d90b6ca2-dac5-4f25-93a1-10b5073dd0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16ee931-854e-418a-b3a5-4c1d47ee73e3",
        "cursor": {
          "ref": "6be123a5-e6e5-4e97-9cf2-dc0472ad8f6e",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0e25ee76-0b31-45fb-9a0e-ab72e23ebcb7"
        },
        "item": {
          "id": "c16ee931-854e-418a-b3a5-4c1d47ee73e3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ecfefef6-2fd8-429f-8844-9d54fafd9b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3556cd-3e98-4ca3-9dd3-005fb7898253",
        "cursor": {
          "ref": "02fc0e08-7d4a-46f2-a67b-73b0e3f1863c",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cd74037a-db99-4a17-8187-64b2ee66f1ab"
        },
        "item": {
          "id": "3e3556cd-3e98-4ca3-9dd3-005fb7898253",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "27c7ef6b-af5c-4979-bf61-6e4c64f10ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75258077-b8b6-4b90-8a9d-8bbdb80d3b11",
        "cursor": {
          "ref": "c66a99e4-5096-490e-9646-af3de51699ba",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a50a6ecf-affe-44bd-aa12-66b91aaaf599"
        },
        "item": {
          "id": "75258077-b8b6-4b90-8a9d-8bbdb80d3b11",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d293f855-8394-4904-ae48-dbb04c5441a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f33d15b-07e0-4032-a652-b60915e5a5e6",
        "cursor": {
          "ref": "6c036e4b-e663-457e-acc9-efa727998735",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "173bfc87-bf7e-4bce-a109-a543d648fef7"
        },
        "item": {
          "id": "6f33d15b-07e0-4032-a652-b60915e5a5e6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "32477829-88ad-4a5b-a892-42a258456ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481fd7d6-437c-40d4-9903-875ae6111180",
        "cursor": {
          "ref": "591bf478-5c4d-4d19-b52b-0209c915bdb8",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7d315f7d-2826-4e07-a36d-73d4db667c72"
        },
        "item": {
          "id": "481fd7d6-437c-40d4-9903-875ae6111180",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "28232ad5-58f1-4c8a-9726-cba1b534b88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f05e2b-fd7a-44b8-8e72-d5bd8ce513f8",
        "cursor": {
          "ref": "db01279c-749f-45e0-b655-b1c72ff844fd",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d10942c6-e80b-43c4-a923-593c059249aa"
        },
        "item": {
          "id": "f7f05e2b-fd7a-44b8-8e72-d5bd8ce513f8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "04a7e706-1d59-4aa8-af14-d67580ced759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45358653-12d2-4a29-8dfb-7dcfb05a30c2",
        "cursor": {
          "ref": "8b64c0f8-899a-46e6-a820-ff616c6f5dcc",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "847ed048-2973-409b-bfbf-233478aa9503"
        },
        "item": {
          "id": "45358653-12d2-4a29-8dfb-7dcfb05a30c2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ea805382-2213-48be-92a8-bc4d785f0ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e541e7-376a-429a-a893-7278b053c3e4",
        "cursor": {
          "ref": "78b45837-6786-4dde-9289-79172557e9f1",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9f477c29-762b-496d-ad78-2fca23971e0f"
        },
        "item": {
          "id": "65e541e7-376a-429a-a893-7278b053c3e4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e7f5086a-680f-4c89-9ca0-cc1567413815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5a9dc0-66d4-4ecf-a762-93f9954fd428",
        "cursor": {
          "ref": "f2382c58-9c8f-4021-b549-8a895b95f1e1",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "51fab320-1adb-405c-8b49-865052da0279"
        },
        "item": {
          "id": "bb5a9dc0-66d4-4ecf-a762-93f9954fd428",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c3f8f6bf-c4d2-432e-a372-556be1c34fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e658b4-8284-4d5c-b71a-6a1f56380c8c",
        "cursor": {
          "ref": "f0867845-3a91-4a08-9d9b-de924e424daa",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3db4cdc5-2924-4447-8d9b-4d76a8612133"
        },
        "item": {
          "id": "22e658b4-8284-4d5c-b71a-6a1f56380c8c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "624bfb7e-90bf-462a-89da-d6319e3d6066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fe328c-5953-4e33-a2e9-55f13d7077b5",
        "cursor": {
          "ref": "67b6f436-b335-4f72-aa04-8f3b30bbdd45",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a7ec3b37-793e-4727-9e47-61f88d22962f"
        },
        "item": {
          "id": "d0fe328c-5953-4e33-a2e9-55f13d7077b5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "79fdc4c7-798c-42c8-b0ab-660b206f5de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490c2f38-e547-4968-af70-a97c879088f7",
        "cursor": {
          "ref": "49f55744-00bb-4fdb-8306-19e91b316f72",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7c9d6d0d-ca77-4210-99fd-7b54ff2a0dec"
        },
        "item": {
          "id": "490c2f38-e547-4968-af70-a97c879088f7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fbaea4a3-f394-497c-86dc-b272a7ba4ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27790468-fb89-4e01-b107-81192d8ffa28",
        "cursor": {
          "ref": "9846f2d5-d445-4372-a881-74581b3117e1",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4f40cef4-4c04-4761-b9e3-c32aa3a98d97"
        },
        "item": {
          "id": "27790468-fb89-4e01-b107-81192d8ffa28",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0cff54dc-f0bf-43bf-af21-9e76cfb85452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e63607f5-f8e1-49cb-8e64-a8a76cff5d09",
        "cursor": {
          "ref": "33a92b93-a508-4a42-964c-9f4ef01fbf1b",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8b7ecdca-371d-4740-bcde-a95cbdc21ceb"
        },
        "item": {
          "id": "e63607f5-f8e1-49cb-8e64-a8a76cff5d09",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b8abc48a-3795-4c96-be1f-b1f5765ea66c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a231f060-18d5-4a10-8999-a7301c6204bb",
        "cursor": {
          "ref": "a896a173-c74c-4add-ae14-c9b8e4ce4f33",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1e461f32-eda4-41b4-9c45-208f5a18d6b6"
        },
        "item": {
          "id": "a231f060-18d5-4a10-8999-a7301c6204bb",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "528984d0-3a2d-4aa9-af73-21b5b89c9231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b84864-4bd2-4287-97d7-59327077bcfd",
        "cursor": {
          "ref": "632da44e-4f5e-44bf-8aae-dbbb54f45d6d",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ffb5e544-727f-409c-bc6e-5b4bfb438137"
        },
        "item": {
          "id": "46b84864-4bd2-4287-97d7-59327077bcfd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ca643a6e-bf61-49cd-b9b6-ec94625d29c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9419f7a-22b2-4905-ae7e-720c16e2baa2",
        "cursor": {
          "ref": "12d30a3c-ad06-4a4d-a26f-f4ce3c1d1ca4",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7b606516-fded-42ea-8a33-50f9022d5b0a"
        },
        "item": {
          "id": "b9419f7a-22b2-4905-ae7e-720c16e2baa2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e2f5c014-3b62-4bd9-8b51-2398fc2d145b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ccbd3ce-4e9f-4234-9b84-d208a0520cfa",
        "cursor": {
          "ref": "f731cd4b-97a3-4719-9803-defc4d9ea217",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c609d84d-20b8-422e-aa41-5dcd42225de6"
        },
        "item": {
          "id": "1ccbd3ce-4e9f-4234-9b84-d208a0520cfa",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2847916c-629f-4a7e-90d8-84c0f29e6299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5c4368-88fb-47a7-bf80-111f1cf9dbbb",
        "cursor": {
          "ref": "2a5d3766-610e-4683-81ed-8928d05ac89e",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "22e33cef-cab2-40dd-8a8e-f31d6be2ebde"
        },
        "item": {
          "id": "ce5c4368-88fb-47a7-bf80-111f1cf9dbbb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2e678216-f393-4aff-8940-c6acb6cf1766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d3cc92-b4f4-4cca-9d07-c73dd485fa7f",
        "cursor": {
          "ref": "3aeb3287-3536-4306-a565-ebaa5bccd764",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ce7fec70-921b-4904-8c5a-5ac66cd1e52e"
        },
        "item": {
          "id": "71d3cc92-b4f4-4cca-9d07-c73dd485fa7f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a5bf8ae7-c45c-48e8-8166-2923dd1a6c1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25172604-39f5-400f-a65f-e4c3718999e9",
        "cursor": {
          "ref": "de1310ab-e076-4746-af04-f2e73911f867",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "00dcefbf-086b-4ed3-8360-a302bf35dea4"
        },
        "item": {
          "id": "25172604-39f5-400f-a65f-e4c3718999e9",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8416dead-2a6f-4286-be35-773fe0fc2511",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3923f44-3f7d-4c97-a14e-3660aca8c310",
        "cursor": {
          "ref": "d9396167-8ffc-4cec-8383-b7b2ef84b3ba",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "800d8c80-5f1b-4fda-959a-0688c6e2a9b2"
        },
        "item": {
          "id": "b3923f44-3f7d-4c97-a14e-3660aca8c310",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7e8112b5-fabc-4721-ad1f-03596d259d4a",
          "status": "OK",
          "code": 200,
          "responseTime": 265,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e37daa-4e3d-4255-a5da-9ed916a91915",
        "cursor": {
          "ref": "06dc4374-baf9-4e9e-bfa3-a89edba45880",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9ca3de72-1ab5-426d-a431-6839c9b3d189"
        },
        "item": {
          "id": "05e37daa-4e3d-4255-a5da-9ed916a91915",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c92c8c44-de3a-4c0a-b758-6c0c38539c52",
          "status": "OK",
          "code": 200,
          "responseTime": 303,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45435c8-dddd-435d-8427-01414292e9e9",
        "cursor": {
          "ref": "cd3f2673-d403-42f9-b992-8a2871b0c882",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4de904ef-50ec-4c4a-bed5-5bf73dccec9b"
        },
        "item": {
          "id": "a45435c8-dddd-435d-8427-01414292e9e9",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "6b40c867-b3f5-4994-b2bd-99b92bd26bd5",
          "status": "OK",
          "code": 200,
          "responseTime": 526,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea89575-9028-43b9-8eec-7166c5886a45",
        "cursor": {
          "ref": "a65db3b3-2103-4089-af14-c39104f72998",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6661e3f9-dc73-4909-a365-8a7eea5cd915"
        },
        "item": {
          "id": "aea89575-9028-43b9-8eec-7166c5886a45",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "42a0534d-189e-476c-93b3-06cae56be681",
          "status": "OK",
          "code": 200,
          "responseTime": 365,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58a118d-e10e-4b03-8db5-6bcc192f7674",
        "cursor": {
          "ref": "0e299e3a-ed2e-4877-9826-07246f33805c",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "87004a15-92e0-4fbf-919b-acb0765598b5"
        },
        "item": {
          "id": "b58a118d-e10e-4b03-8db5-6bcc192f7674",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fcc2c43b-0939-40a8-9c6f-bef25254b080",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58a118d-e10e-4b03-8db5-6bcc192f7674",
        "cursor": {
          "ref": "0e299e3a-ed2e-4877-9826-07246f33805c",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "87004a15-92e0-4fbf-919b-acb0765598b5"
        },
        "item": {
          "id": "b58a118d-e10e-4b03-8db5-6bcc192f7674",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fcc2c43b-0939-40a8-9c6f-bef25254b080",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58a118d-e10e-4b03-8db5-6bcc192f7674",
        "cursor": {
          "ref": "0e299e3a-ed2e-4877-9826-07246f33805c",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "87004a15-92e0-4fbf-919b-acb0765598b5"
        },
        "item": {
          "id": "b58a118d-e10e-4b03-8db5-6bcc192f7674",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fcc2c43b-0939-40a8-9c6f-bef25254b080",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acff3b63-627b-4511-a946-2bbf31aeb03e",
        "cursor": {
          "ref": "8a67a76a-b8c6-4bf5-ae37-12b26f012dfa",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "75ad76cd-386b-41ac-8ccd-8df1e5d24b0e"
        },
        "item": {
          "id": "acff3b63-627b-4511-a946-2bbf31aeb03e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e8a57997-dbd5-4c4a-9057-a682836d6da8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae50ce2-a772-4f81-98b3-9448d467dedf",
        "cursor": {
          "ref": "fb92a0d9-f2a8-435a-b441-cf1fa37a4ae3",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "40be38d4-7267-415b-93a5-b895a825eb64"
        },
        "item": {
          "id": "bae50ce2-a772-4f81-98b3-9448d467dedf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f5b8102e-b0e9-4035-8400-1a937ef2dc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "bae50ce2-a772-4f81-98b3-9448d467dedf",
        "cursor": {
          "ref": "fb92a0d9-f2a8-435a-b441-cf1fa37a4ae3",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "40be38d4-7267-415b-93a5-b895a825eb64"
        },
        "item": {
          "id": "bae50ce2-a772-4f81-98b3-9448d467dedf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f5b8102e-b0e9-4035-8400-1a937ef2dc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "75257055-7c8a-4654-a989-a7373243c745",
        "cursor": {
          "ref": "a5fe187c-6d51-4fee-9050-5df8817c4ebf",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6f36d025-3abe-46f4-abe0-f04dbb512723"
        },
        "item": {
          "id": "75257055-7c8a-4654-a989-a7373243c745",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "6bd19939-61eb-4557-8b5b-45b21db65a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "29655fa0-1565-4763-a5f1-0d325728f31a",
        "cursor": {
          "ref": "08cdfdf7-3d38-407e-a9cc-2c5771c12c43",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e9de0ed5-3f82-4f1f-a73a-89ab0cdbaf7a"
        },
        "item": {
          "id": "29655fa0-1565-4763-a5f1-0d325728f31a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8bdee1b8-69f0-4198-8a44-f1f01b359888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "29655fa0-1565-4763-a5f1-0d325728f31a",
        "cursor": {
          "ref": "08cdfdf7-3d38-407e-a9cc-2c5771c12c43",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e9de0ed5-3f82-4f1f-a73a-89ab0cdbaf7a"
        },
        "item": {
          "id": "29655fa0-1565-4763-a5f1-0d325728f31a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8bdee1b8-69f0-4198-8a44-f1f01b359888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "cc4f8494-8a58-47e5-a023-e8d0643634c1",
        "cursor": {
          "ref": "43e2df66-42b4-459d-8384-56ce6d359a01",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "16355d63-ec85-47c1-9541-f2f062b5c390"
        },
        "item": {
          "id": "cc4f8494-8a58-47e5-a023-e8d0643634c1",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "1224d335-a2ec-4b40-ab92-436cc4e1be57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}