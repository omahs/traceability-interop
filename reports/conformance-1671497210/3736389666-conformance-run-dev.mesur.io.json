{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "efd6bfcf-faa8-41e6-9244-5356bf500db8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3f217743-120f-43af-b3f2-4bd858758f4e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "519a1e2e-f6d9-4c60-9193-e84b1a9b9b41",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fe61f56c-58f2-43d7-8874-f175854f5d47"
                }
              }
            ]
          },
          {
            "id": "b9369dfb-8445-42bc-a033-011266621720",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3beac375-ba94-49f5-8563-738d2b76991a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "45f82e26-fa0e-4b5b-a9b3-9d137cfee379"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1bfa2042-6014-4a2c-bc7a-9c7020275808",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d6f8e86b-e087-4131-b4e1-bab699b36d54",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b4d24a30-3fe0-4e42-ba23-3df02a315936",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "175a9641-424b-4d86-8b45-0554a93e5b6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe27ef09-99a9-4877-b7b5-ccbabad778a3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "94fac094-625b-4170-a2ce-98359497f9dd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "de6e1e54-4448-4a56-987d-777f7cde4658"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "582715e0-3e81-4006-9522-e508973f2dd3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4ec2c49d-a56b-45c3-8d2c-2bfc67dc0fa5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0756a77c-ccb1-4b2b-abc9-921cebee3799",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a48b2b9d-fd41-4e82-855c-4c07e0547359"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "301ac55f-f06e-4292-9087-39a22b9d50e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "babf6299-b5fe-443e-83a9-9b49788f14c7"
            }
          }
        ]
      },
      {
        "id": "1dfcca13-7c77-4921-a10e-6ec3fe9b2aa0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3e590424-67f2-4ecc-a153-74352adcb3cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a48d435c-754d-4fcd-bf9e-ef6cd4fa9ccf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dac69535-4d25-417d-88e3-770e3ee9e722",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2eaf8ba-938c-4b71-99fd-86c71a0fd867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1661d55d-560e-4acc-9c73-bd9b9b13d93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80304aa3-debb-44c3-8a9c-705dbe080210",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b376bcf-f163-40ba-8041-dd42560c4464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0dcd79ac-45be-4109-b3f4-10891d9cc11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf520d4b-22af-451f-ba3b-87e8902ac3c8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9d8f61-8ff8-4085-a8cc-dc4685b18d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fd22ba6-fdd4-47b1-a24d-16668cf2d975"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3cfac407-363a-4162-a919-279078bf88fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46a1dcd0-e153-475a-a8a2-63f897ea37fc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2d4fea-73b8-4e70-a943-90cce73ace38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc88e944-763c-4685-89a6-6e9c1a47e0de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3322bb66-771f-412b-af33-eb3d914e073e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4838ae1b-a8f6-4101-9c67-aa4a1a8c1e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582fcb15-4b85-456a-9547-cd155bc65ece",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25536a0a-6240-4164-bb7b-812beda6aae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71cb7ecb-9c3a-490a-9199-6d5e7801c84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc41a40-c996-44cd-ab05-c5974a81884c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2bf84ec4-a04a-4adc-9525-373610eed7ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e702a93d-7f94-48fd-b6ed-4d09d0be0984",
            "name": "Positive Testing",
            "item": [
              {
                "id": "70796367-c195-4bc2-a9fd-3c72e6f0100d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "993b8718-5812-4f4e-9e14-db0f93526251",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "509d6874-74aa-4c3e-970e-225b215223e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02a5e319-0918-49d3-ae59-92977d086ae6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c6e46137-b587-448f-b0fd-5bec01f01b90"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd03a51e-d216-45db-8ec5-56777c293449",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03408b45-ad5b-4b68-9356-c812b27cbd66"
            }
          }
        ]
      },
      {
        "id": "3ec6cb74-2fac-4fa2-bc7c-afc08556b71e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "04e0556c-f60f-456c-8c9e-c601b0f559f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9af923f1-97be-4956-84c5-860dfb6c2e69",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ccc4c071-30e3-4d3f-a9d9-bb12456c99b5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576601be-71c1-4203-ba30-9ae67fd1452f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb41f11-0f9c-4a33-80bb-d39f2e2c7e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1825be5b-b85c-4bd6-a7aa-86780708d4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8abe2fe-7143-4ad5-bcb7-d9324cc31846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08999bd0-6ee8-49f2-981a-9c7bd99856af",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ff44bd-ca35-4837-a9d9-57d3204ba070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5761639e-8afb-4261-9cf3-14e10d2fc294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c217a8-4495-4ccc-bb90-ed3270802923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5b51b44-b4a9-432b-9d64-ca9fbf18c211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43f0f79-1db4-4f47-9ea5-1997749b2e6d",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc0fa69-c1a7-4321-86bc-e23e113c445d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744bd970-19fa-47b6-88c9-d09e50762ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549e95db-1791-4d93-93d9-c6fe28a43866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb05b9c7-3af8-405e-a3a8-3dc36d030865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507e991c-a041-433e-9f15-11077d77b46c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85dd7b0-acdd-484a-8290-cb32e9d2db0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815427cf-20ed-4a2d-bdcd-5abb9c59b2f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fa6b24-399e-47ce-a1a4-c7c59b1bfc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e36e7f98-efb2-44d4-aebe-d944218fba82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693c3f76-8e4f-4865-8af5-ea0f477373d6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49515919-58cf-466d-9e20-ce1193714295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d931d29a-b649-4098-b8d2-1d185bc96c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2259f2-c1f8-4f4c-94f2-01fb0004962e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "854f4506-c71c-488f-a705-0d07e25da315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37de47c8-c3b8-4f4f-8091-ea770020ae5a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4aa986-8e36-4b89-9617-837ff1f80b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b134b40a-07a9-4b54-b856-b67b26808dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12dbbda1-692e-4ef6-b6ea-35ef68d1b57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1d47ff3-c4b1-4426-8728-94724228db1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4908fb3f-a28f-436b-92f5-05f58148bbdd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e5dc24-fd98-4548-8a94-777587a0bdbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6006482b-ea29-4a9e-9724-a9510de9e3f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e15a136-bc03-4521-9fa0-8e977ac9920d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32633452-d26f-43df-9fdc-afe3a42bbd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a1a0bc-ed92-4129-953c-3fcd149e4f4d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970c3d1b-ccd4-4211-af3a-7d0b884976fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2b8242-268f-4bca-9893-8318b2e7f6dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bf8191-7a73-4fe6-8f3e-9904b512c25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0067dee-c08e-42f1-aa65-8cf71816900b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff070a8f-2d3c-4d8c-80e4-3c612fa42660",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f83d85-ccf9-4895-959b-978895caa845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9ca55d-24b4-4605-a5b7-295bd5a2a758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5073df56-06ec-4afe-9fb1-511bbdd0d207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e5b4308-90ac-4c0b-bc58-2edf1e4a514b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d5c259-661c-41fa-937d-e5e224b6e4fa",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c311aab-136d-4514-a972-80c24d86bdee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24cae21-d1ea-49b3-8885-e419ac5f7dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3667534-7286-48f5-bdd9-6760d4705efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9657ed0d-0e8a-4bd5-937c-641456f7c94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ac4dc5-5ac7-4068-aa3c-e0536abd9850",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "072870d2-e3f2-4f6c-a788-72dfaee292d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e02fb8-a470-4e23-bddc-1a5cd8031f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073c004b-770c-4597-b8c4-9e14354e45ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b42653f5-9442-45ac-aaf5-48b7af60081c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a26fe5-1c90-4034-ae56-7e480d1458f7",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbfbfe2-76d3-46cd-8b89-ec0db01a3939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c86539-89b0-47ed-9090-866593603f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c030c408-e0cb-492a-ba6b-f1a0f78bbd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0aa4244-065e-43bd-b4f6-01833a8c6df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da01c1a-8dab-422f-9695-9449dcf1da9b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4eebdb-0380-47a0-b86f-84b82f214aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a54976-ddb5-495b-9655-0863609d60f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65569eb5-d5b5-4574-83c1-a4877bc85a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b7f8c7a-3601-4aa0-b9f7-d43272775d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844042bf-e26a-423d-94e6-46aea8912351",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "663c281b-72eb-49e8-80e7-54cff6c09a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345fd899-5620-488d-bba8-da85f2fb7f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba6dbb9-91bb-4f70-89d1-e2785e87f48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f98d1cb-9aab-4c4a-848f-7f2ff9ba9602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9127c7-a3a2-40fe-be56-c63a28316b15",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29e22e2-7873-472c-b72d-7bb030b30daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b48f47c-f4a8-43ae-9d80-04cf415c955b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0184be80-6370-4da2-a062-73893e8fdd85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c1791d8-979d-4300-b1f3-d61e912b66d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1effc91-a30a-497d-8806-08a8b2e9dfc8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07dc4276-25be-489d-b6ec-5e748132ca80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1bf4e75-776e-48be-b701-aed73bed405a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b633b2-f39b-4956-bf2a-4540f0a1b6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70ab2030-7e02-4425-80b2-49b3186b7274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fd6406-c10f-44f2-8d98-324d42bd2281",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8733166-b771-44bb-8737-ead11e40e1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8923b961-4578-4987-8090-1aa3f4b7d394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d22b09-7927-45db-8706-65042bde2a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b864ccd-c034-4b22-b25c-7b3f72a34856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23953074-6171-41c6-a2e2-054fdf6e1030",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e79eb3-77a6-4e3b-8ef5-8ed89e09e469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f6548e-e466-41e2-be92-09c495bb5a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b6300c-c35c-4b91-b26c-ce9e4558618c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c452da8f-83b8-4486-a409-744a757c2d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3029dbe0-ae63-493c-864e-82c2d7e95bd3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7881fe5a-1614-43e6-840d-5258ba1e3a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e9a8d8-855a-4912-bf2c-5577a0f4b4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0c9bc0-c2c9-4d83-b120-3d4240388e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e81bdecd-75ff-489e-823a-3c593235cde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fce77f5-88eb-4454-9de0-ff6c4fd50a50",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3197e2a2-3823-490f-a8c6-17e8e8bcadff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640c4a80-d7e0-4c06-9354-68d22bf5c867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c7b29b-c61c-433e-8527-1774101fdbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "32430952-1781-4868-8d67-ab4d7d6b9c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d268623-dbf7-47b9-a10e-87224f688f3b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6901cfd4-70ff-4030-b0ad-e752196679b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8dbb6f0-3aba-4368-acf5-bf2dff170116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564ee279-c61f-47b2-88f4-4697467ad679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9aceb636-7643-4323-975c-be7d2605f702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d404c9e5-62ec-417a-bee6-91ef61b88e03",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6caad23d-21f6-4223-806e-821cb1bec69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e43787-de39-4024-be06-0fceb1111907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c1889a-abee-44ce-b128-3bc236e8ba62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a35b430-7648-4090-85ba-ebeed923b858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a689fe-2ff3-4d4a-a5f0-e7a505e053ee",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5687538-25bb-44a8-aeca-7a39ae738b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc1be79-73f5-41c7-8edd-f48bc6f57c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce41ee24-6cd3-433f-b828-0fd8eac133c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4575f44d-4989-4d2e-96d4-00aafdf57b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5142180c-7859-4b64-9e3f-ba3fb4f2492d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7518c4e2-e5a4-4abf-bb94-4192ca43f425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a404f90f-720f-4110-b419-3c8e75d2e562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347129e0-bca3-4532-9bb3-7c49b68d0500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6175c43c-b016-4085-b56f-a25a17324914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584ad333-e350-4d46-b6b3-4bd523d666fb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f2e749-181a-4bf3-b59e-340af92a8be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "899bc10c-a504-4367-a22a-d8e0dc4e3a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e94daa-7d04-488f-b13a-ce517e5de17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12d5c550-8356-4c17-b9cb-d15b02fa8134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b83e7c1-4bd8-409a-b16f-46a5de6521a8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44888ebe-e9b4-4e87-a226-68ad2daddce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df302ba0-612f-43ef-ad1d-83bf1872b60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7356c76-cd36-40c8-a036-6e46daf12143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6f39da-930f-4170-92f4-30fe2d7fe386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a82002e-afee-47c7-8815-c5be28e7abd4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5c249d-ef6b-4130-9ce0-e6053041bb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d9248d-8e0b-4075-b340-9dfc2703850c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7409f03d-be75-40d4-8b53-d49fcfdbe6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e44b0a9e-b75a-4af5-8d94-617103d5a88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba205ef6-1c6c-4143-bf08-16642f896bcd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ed65f6-85c1-45ae-b4f6-4899a85764bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750058e9-467a-4260-bed9-77534154e99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451b8128-35cd-47be-a159-75bbc368f18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9abef590-22a8-474d-aefe-6e3af11f8a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f3e47c-9f9c-4b16-bcbd-eacbbfcee516",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942a2968-5570-462d-86fb-7a7e2cdcbf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e52434b-01d5-4873-898f-d8676fb19bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f912a35-d9a5-434b-8ac8-0e03b18f7969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b8348d7-8068-4192-8ff7-f1f3ae55c420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20b1002-ec55-4f1f-b410-e346285cd8b5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094e4c65-ee17-443e-a4c3-60843c36244d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93594019-8a48-4404-bf1c-ecbcaaae38a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28cfb87a-b374-4684-b1b4-bb673e619181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8db828-7ca6-4592-aa1d-35924319172b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949fc7a7-ec6b-4a5b-8b2c-bb3208625b83",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55471ec-7097-4bbb-80bd-45599f156037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482450f8-f56e-4f2d-99a4-23347a256796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d8cb61-782e-4e3e-8a8e-4f20d814b707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "193f3d5b-90e8-4b2d-8210-792d6cc70b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8702a622-1f2d-490d-804d-4cbb9b0fcf06",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29ad9eb-7db2-4214-a88d-8f948aead048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017df50d-db4d-4074-a6ba-60d7c61fd51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0210a7-6376-4b9a-82a6-cf71455c4d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f4e2372-a699-48df-b1e7-a1719292b815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737272df-b5e4-4402-bff6-312d35e03dfc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d84368-7232-40f1-86b1-ef3adca3e29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "984356eb-aca2-483b-b0d5-63f33b3844b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6e9036-728b-4138-b727-9402b400fcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc527710-b061-469a-88c3-c13aa3203edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6f4e4d-9ef9-4de1-ba8a-e3f28853c0f6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c753c9-32c5-47e9-ab2e-09a615136e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b4bacb-30a1-48d4-9a52-597f6e8e3a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a2339d-909f-4fa4-869d-53d49b2a37af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5976c8f-e6c2-4825-a2b3-2d24a30c2852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957f21de-48e1-41b3-a172-d1189aeaf3e3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924b6edc-05b0-4eaa-9110-33b65296138f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c49f186-b43d-4533-a1fd-486ce375661e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db086b10-66dd-4ddc-a17f-e0aca2662206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb3c3ca-cfca-424d-b3cc-6978778ea080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8319539b-d8dd-4cf6-b6fe-52b85ac18848",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4981c0e9-eee3-4193-834d-d8ef1b78cb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ef2cac-db3f-48c7-a46f-e715045ea48a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd0594d-74eb-4a81-838d-615c009bb8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ffd8d46-9b7d-4887-ba78-1aab6edeb5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d73eee34-c492-4340-960a-be25283202e1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8873d4f0-2596-42be-9fd4-3a89917611dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c685e9-ce2e-4e4f-861c-a0cd9e525e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c88d534-72e2-4cd6-96d9-507dd24a2eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b2788110-baf3-4ffc-9674-01f35219cba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b270ec72-ce01-4282-8181-adde1d896fcd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391b422d-03cd-490e-b3b7-ee7fb146f765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1849722b-c6c8-41c3-a03a-545508fdc4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1734b7fe-3f8b-400b-a577-69aa802d04f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17573050-8009-4253-9da1-f7f056fb1536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be2a56a-5667-4d3f-8b8f-92d0f292368d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e3af4c-3ac0-4114-8ddb-b3a4e9524ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298e8ba0-bfba-4c81-ac03-cc56d0e4aea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d790bc-dc1a-4549-9f62-fc55f42cbf20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f993c67-d346-4c9b-b57f-6eeea2cdad99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73fedc9-13fd-4e40-a4c2-974750d8443c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0a650d-7020-43cd-a430-c1433fc1f0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d3ec103-49fc-4efc-8e98-3a7efbbd8bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665ea3d4-50b5-4bd5-b67c-69d39b60a1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a51ce9d-e620-487d-b5ac-4cc5ce014909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c03f2b3-e5be-4053-b9ba-92669810c393",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c9e682-6b0e-4eff-8194-6401226eddaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270eea6a-b5c7-41bb-9d9c-9f567d0f2f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2110c4-17e6-45de-bb9c-2c5dfca3e903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "48608f7f-cd8c-42ff-a163-9f171bea6033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9cfe3d-2458-4f32-bd25-0084e71e76c2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdbe57e-1867-4ab4-8bce-bfa61ef297a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca4e260-6bca-4025-8c80-72ec3856564a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcf2fa0-e2be-4d44-bbd6-01e113a328b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "14070c4a-f185-4a87-8a28-66e627732975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31af8cb1-e614-44ca-aad1-29d9506c31e7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1781c43-871c-4455-b83d-2e0aec4f4856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bce3bbf-0213-4692-9ca9-fb198bb8b60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176f877a-69c6-4832-895b-81d4c6b25b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5841e722-9e3e-4806-b3df-d5bf87390e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dc1c83-546c-44cf-ac5f-39d3cdedafbc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ee3a20-ee0e-4aaa-a510-41fca7cb1770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1e6a46-3da5-4061-a622-83e6f1d4cd3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3986901-3361-4e66-972e-9fa738839c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "9863f340-5705-4dfb-8556-d9e817e547dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10597cd9-71ef-4128-bfe2-3dc22f1053af",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9a8eb2-d241-4683-a6f0-ba9b56105f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e490c10a-c474-49bc-8a60-afaa021d9d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a083ba15-5acc-44a9-bb98-70a2b34ca663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "510acecd-8f4c-4a30-9b20-5b911efa1296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02523ea6-cb96-40d0-ad5f-b86339519606",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d246289-de80-462a-935a-41285dabc846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d10be28-6911-4751-955f-91adc2eb5d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a23f008-8105-4dec-ae97-2200926d6af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4211bc8-f0d8-4f5c-ba4b-8403b614901a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a065690-75ce-4811-b4e9-0c7162ec4a7b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183dbfb0-ee93-4c09-a55b-047c9c41eba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf89ad4d-2ffe-4227-be6e-91b7bb1beabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b96764-0d21-44b4-9427-1e2eb767f5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c603f65-6c4e-4280-91f8-ac2760b0dd28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b00eb6-b53f-47bc-80c1-246e2d6b9f8f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a64d4f-b1a6-4baf-b716-8e6b1dad4349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1708e4b4-87eb-414c-80c2-ce9e8e3561bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d4976c-6043-40f4-b4fd-fd0d14c6b7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08787be2-bc4f-4c77-bb58-3e721e4d2925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7a4209-050d-4b36-8801-d2a96df5cf44",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a380f05d-c405-4401-a897-0a195751e5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa6a608-63c6-408d-baf3-a552be3c2c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d45c0a3-9e3a-4ba7-b4cc-897c10ab52ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff996aaf-ed64-48ad-914b-5a67276e94b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e7e594-a9d7-4f89-8705-e4d40284599a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048a0164-f745-4cc4-8bf2-82053c5dead7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c95816a-6054-4b1b-a643-a4c8b69120e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b91a50-b166-4e85-a7d9-100afd9bd254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0bca2be-3a6c-4599-ba19-c2fd06513bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b578cf-d4ea-42bc-bf97-98ce687582f6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f29e7f-a4d5-416b-90d5-a3c480cd4b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ff0740-8d93-4b1e-8094-e2a38a36aa66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b7a637-7a49-4e4a-a7ae-302bdd6afdd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c31b5b1-3374-4c9b-b8e3-b89e436f0c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338b34cf-040d-4507-9423-c3e2792f5a02",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ebf8607-67f0-45ec-abb4-78d6e48dde8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab4c019b-2cb3-4042-9252-f94820f89f45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d426ebd7-2ae6-453e-9384-446063f04768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41b0b153-7f93-4d9e-ab78-591a0314b759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f504f8-2ac7-4d43-ac4b-e4da897dd692",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94043afa-0a4f-4434-8275-dda21d67c080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df033c39-5051-476c-a17b-e8bcac9cf53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93a9eb3-b8d7-42ee-8599-d0ae9f959ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5de380e-ec9e-42c8-ad4a-6fca8f1d92f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debba915-1bf0-4494-bc72-55c3529ac453",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a664822-47f1-45d3-a724-e5b645095017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75d789f-e232-41d5-a8da-93cd6d8c8b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c800910-690a-4b32-926a-8c1bb1524c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea69efc8-5e11-487b-91b0-a4ad67328195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9029dc27-04d5-4454-85d0-42871ecb7430",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dc1cec-5a03-4690-92e7-04def7ee38dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0aa65f-3c3b-4bd8-a481-481fcb21090d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58e91a8-6938-46e3-bc6a-ccd2c5265e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6a56b2-4a11-4fda-8f05-9c02255a5316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c94bf8-6bf1-4dd2-8577-8df85bd5f549",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18a00dc-0c93-4cea-b5d0-6ed48e657415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33aa29e-a891-41bc-823f-e6b97e7519b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34948808-9a7f-421c-bc0f-1523093bf15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd27495b-a1bf-4a24-837a-3696f1fab4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfe6433-fe93-478f-8677-e864f5de39fc",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705ee136-bba3-454a-a865-4cc8c7c75ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f509ff71-607f-4881-b788-9dbdee1eddd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080ca83a-fa3b-4ce3-990e-f7e2898d6f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae835a2-7d9b-4c07-bf33-83543f28de5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3645315c-e8a5-4918-be87-b7171a1a253d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25e961a-6b7e-41da-baf4-2eb94aead3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecef945-3c14-4e8b-ae3e-135b0e1b6f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca56de9-6d15-4416-90d8-271a9e085a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fe472c72-33b5-4b66-b714-f318c5e385e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb04e1f-8045-433e-adb8-6921553e2d7d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c4b01b-c7bc-424d-85d1-f5ee5544291c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af056fe-6014-4331-8d7b-3656bec70599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74577464-bfa0-4744-86bf-cfc80a7697d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c604303-f75f-4f4b-8aeb-a6a8a8636ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e0cf71-9981-4dfd-963d-6601bde3fad3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71330765-4291-462f-a653-d25dd3ed90e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52fc37ef-c151-4795-af15-210a24910b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3f4baf-537a-43ba-973e-c3669bde495a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "769b5faa-3053-4537-877d-767e53eb98d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99eb15df-8b18-4a78-9056-6fe7f594e19e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1752f907-2f80-43b2-b84c-7c5487b3f8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69315943-5a90-4f58-af3e-6ab2ddf87423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4cc4aa-7739-4ac2-b14c-2c2142e71247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "95a76ac3-9b68-4318-99c5-05b751f8b120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d508d088-9190-43e5-ad0c-4417544732cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7858ef23-d66a-4d01-8ebc-f58c88059c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baad4492-d883-4711-b173-a575b686db9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a0a512-001a-4ce6-a444-a2f94a6ccac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b977c50-f463-4ebd-8485-cb9c2207fa2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033d0c97-c2a8-42e8-891c-c4a3ddf55ece",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd99214-2277-4c1f-9c1b-99d97c70b31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d78ed7-60a0-4e6f-9c35-b344649e25c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4293d2-3906-4460-bdc5-34e053f59cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "73ff0fb6-53c8-4c1d-ae8f-98cd12bd2f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bf9877-67aa-4935-bcf5-fd057ea407b2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a889a2-3873-42c4-9834-8c88591595a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e792da-27d6-45e8-a6b0-f96b5e64eb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ec9f8f-fcc4-435f-bce7-3e8dd8ddf997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e06315a-2f07-446c-a00f-1bc8f329fa4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf04792-8815-4bda-85b1-0f56e8bd93a9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0122190-57d3-4918-97b0-9f9178c64202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf25833-1a9f-4192-b9c0-78c275b6a302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4feb3ef4-4724-4855-b16b-c3128f4a9789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "342830eb-79a8-4643-b472-1e52e6fd1c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ef5c08-71a1-4577-8a8c-436cc7d39184",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46dfaee3-2a5f-424b-ac8d-11c421a23d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0c58cf-c853-4e7a-ab0f-7c0b9d067ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084287fd-ea15-43e4-8bea-c53b9cfc03e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73f62b94-092c-4cca-9edb-b2d82bc08e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19f1f1a-4b8b-459e-acd6-3f55f71fbb82",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a10973-105a-490f-9ad1-d7e2e3628111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8f6829-5fca-4106-b9fc-2c519590bce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693b3a4b-650f-4cb4-9264-5d3b34f4721e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebacd666-c977-440b-a6cd-8c7343318b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9166be8f-dd00-442e-8581-dfc10749f0f4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3222adc-0104-4610-9ae0-df0f78833339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee5da10-3571-4695-9dce-7d41f73fd675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8152dbe2-ba1e-403a-9f96-31d8f847e439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "499ad4e4-1da0-4953-99ad-ca2d6604c6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f15bd27-f136-473a-904b-0e8810265517",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9954856f-6988-4927-a285-7975670c9858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a212013d-e8e3-4a59-904b-c49b17a918ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52b8cd8-86f5-4bce-9cdf-2a238dcc6442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "720d66dd-9d58-44a5-9480-6203955c6430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f514ec3-bb0d-48c0-88fc-d1f71f38fd8e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb27e10-ba86-4722-8ea6-ffe3321a3660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889ac75c-d7a5-4292-8f0f-f0f215e86b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f383bdd7-0168-46b2-938a-956cd220fe83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "99566765-714e-4c76-b822-b5a0fdd81d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a916bc78-0beb-4550-a072-efa9d38f54cf",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd8d869-5056-4b56-a95a-d9991ade3d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab4a8e45-e09c-4893-8a6c-fb3d3565068c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2618c49-928a-467f-88e7-ba6b843652b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a163fe9-5489-44ed-ad2b-170abbfadc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3f0c9a-925e-46b4-8b36-1c8332e81553",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9eee353-af52-4399-878c-a11b885849cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49e719a-70a5-400e-9dac-bfcdee9495c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5945588a-aa74-43e9-acae-8cfd99d691cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d6e42ea-d14a-4db8-9f20-acb615318e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339b9e9c-a010-40c0-8b72-3fe76ccf1a71",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37fd417-0914-4e8a-9d98-915580618d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f672b7-4e48-43db-991e-19c28ca520cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a7339a-76f2-4933-acdf-90c2093eeb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe6f06a-8905-4391-a24d-7f13ec1d32dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcdafe7-670c-45d5-9815-0ec650ef1be0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca67cb2d-adc1-4b8d-afb3-baa0883b5301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "addca1af-5f3a-43a4-9a8b-d8c94dbfddec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cac2c4a-3e64-41cd-9612-abaeb24ffe90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57e25e65-9635-46ef-b6f0-11d67fea1799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87edb27c-7f1c-4f88-bd99-7cb38ac9e984",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94aaeb2-be65-47f6-8d12-79c77db4c523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d197eec-3fa5-4768-85c6-28cd86773ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e89688-2714-4b31-888f-6c872925917b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a766aee-3f66-4021-a72d-413eb853c504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0948ea-6890-4e96-8cdf-20f0888a9465",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7944f1d-6227-42a9-ab32-cdecf10dbc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c433c10-6299-4c10-9687-0424b8d90321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca54079-742d-492a-a23e-c4cf9f6e078b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3580f9-34ac-4a7f-b20b-5ba3b4692c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7abb726-59f7-4717-b91a-7890bd4dc0ad",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04943dd1-83c2-412a-9851-d9676d70699c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b443ff7-8cbc-4ee1-ab39-f6153ec01ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66048478-e8eb-4940-b7b1-bbc5702d22b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "42bc2464-e8fb-48e4-89c8-1ecc5de97a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0440366e-53f0-4bc5-b5c4-9e56171850ca",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afae8b1a-4fb3-4cf5-8dec-fea2630d81fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea1566f-d7cd-4994-a1a2-2d071b640c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582bf7da-a455-4ff8-b092-24dff10e3792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8882b4c8-dc68-4524-8d90-ca763a6c2334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0617a6-7647-491d-9db0-dd1869ef86fe",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd5cc65-07a3-47e2-8632-527a233a223d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03d030d-407d-45b6-a778-617c3d68adcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227ac1d2-4b2f-4ad5-95df-d53cc5723de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d26dfc4-5c4d-4760-a159-626bd2f32e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e28a5f0-6c53-418a-8b83-3ffd104caf2c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac926138-8c81-48fd-b82d-3f04f2f6f20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e15fd0e-a4f9-41b0-9183-1e93a31a9b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bca53b-2c25-457e-b7d9-c9d22a8997ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "abfb86ce-c0ba-427c-bf56-9ca36bc88831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fd4e0a-1fba-48ea-8165-0eda12f036ec",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2383df3-73e4-4568-af7a-3bc4ed93ba5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a6398b7-16e8-4564-9084-9d490edef097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ffe810-eef0-4894-b101-6400ca074a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8c09f9-7cc7-4ac8-b044-0d5b4b1456e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736f52ed-9942-46aa-a95f-5cd73cd1726d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099d0bac-6d40-41c7-beaf-66d4dcdd29e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4444650d-67eb-4689-a091-759523ff79e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c35e82-c59f-475e-84bb-2996f3f2f322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33e38d1e-c7c2-4a34-b65f-b84a5b9c328f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5845dcc-1dc9-4c69-a96a-db506ea71f8c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6750487-1392-48ef-8d49-7a1f49f48aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb9645b-c882-47fe-8b01-c61ab795e51b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbedb91-0c85-4f19-8051-cb207a34185d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc05977-fefe-4b89-843f-d76ba0ed7a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec795248-15ef-4115-8383-fcd3fc59bb2a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0bdbf8-0316-49e1-b635-528e5de1d67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7fae60f-43f2-40ec-b71d-b62a342dfbb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81485177-f6eb-4804-bb42-e1eff504c58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff5fc9c1-c528-4ebc-a5b9-5a9b8e707a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b41914-6b57-4913-b0cf-a840457713ca",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03dc6371-ef79-4056-bcba-211b0fe1c20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f807759-39bb-4395-9c87-13870ab5c90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba0d6ef-b85a-4bcc-884d-197dafef2ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7938597-dccf-47f2-a3cb-a4b2f6a646c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cca71d-a68c-4531-8c80-97915e5e6d81",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4633e31-c689-4f74-bfba-1ecf39294c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd13c6fa-ed5a-410f-ac47-53ea2dbb6e98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a822b0f9-9d72-4007-a38f-da78b8033dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f96a25ce-8eca-45c0-af48-678e76d8f3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cd02f9-1eed-4708-8e8c-2fd13b160898",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002ef250-53bb-41cb-bba4-12c1dd80ba82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30253ad5-38ce-484c-ae5c-f9ff28051e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ce1ccb-d580-4c02-a474-1d8cd89bf8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ada92c68-a011-4548-8ec8-6c07087eb38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ac53c3-60b3-4047-9367-8a14fa781012",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a141e8c-20fa-4a4d-97c1-d3882f4d81da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2833b7ba-fb08-4d97-9cf2-0a9813e87d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c307f9f1-40f2-4b31-b579-31a4e2b271fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d59e63f3-e1f3-4fdd-b702-816f3368b65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ccd326-0d8c-4772-be17-ac67b78163f3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa4ae18-e10d-4f34-b845-f6af3485cc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f77a47e-aa3b-46b9-b11b-34d31a200f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee614047-d7b0-4ded-a7f0-b1836941bf75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "39a6ab6c-11b3-4952-9d81-0509d78bea91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a3611a-c5c6-4702-9c94-361d2ab7d811",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059f96f4-3996-42bf-ae62-4f01cab1c706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1d0cd1-59ae-4f67-905e-d28d5a504642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6d4e71-d080-4eb6-8597-a2e778b08f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "118d334a-1100-45a2-af7a-6ec55c3efa2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1476e80-1864-492d-b6db-a517eb657e28",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf76804-3224-4e4b-a71c-5b8608cea8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce671f73-b3b1-4c61-8c37-5d667b51f6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c730c8f5-73e7-40ac-ba30-bca74720c63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "14d30bab-bf76-42ec-909c-462a6dbef0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3986f1-d414-4775-924e-5fe5ee299a36",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f357a8-4047-49d9-9f0d-0fb35d37d845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da767320-075d-4bde-9a68-321f84512706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2a2d6c-f88b-4176-b9cf-c136dc820335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d84964-a793-4c02-9d3a-701f4852f6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70ae9d1-32d2-4ddf-b801-9edd6577fa0e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "700e16cb-2477-47c5-bf55-2d3a55df9dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e13d183-9490-4306-9d06-c6b5d5469040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2f426b-8b25-4b03-86ff-40ef2024059b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb05ee59-44e2-4446-a995-439d27e20b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c7df87-e20b-464b-b5cb-db20ae2106ab",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c695c50-0349-4a84-8e75-ccb2f4666d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "eb392f4f-944e-4a7f-9718-180d9956345e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae8d784-6883-45e8-bd8f-38e881f9eec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "baba49a3-320a-4bf8-ae56-d3b2d4e8a78a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e08b1972-12e4-4eb8-bf13-831eaf8024b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43cc2ac5-2d91-4ce6-ad18-867e64d7059f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00613c9b-b318-4dde-b2bb-457b373a0a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b46e7733-767e-4e4a-909c-611eb1c8e37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f75e32f-6f50-42fd-9b75-09045f45a9f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0d5d9bf1-7828-4610-b270-1a80f5be748b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75efd417-d7fd-4fdb-ab55-8b66217d1f6e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed68f4df-e7a3-4b2e-ab44-8ea57c51aa96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "958f4238-1669-4450-a810-36865c3f188b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45db63e2-eb43-41d6-b954-e04ac4b5a4e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "756b03db-4b61-474e-a904-0cf1edef0a0f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e52532e-c8e2-40da-a65d-373b6f5f852d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4e88982-2c91-4b49-b314-956e0ce15783"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ec21786-5ab4-4c65-85c2-7b2c7aa21d39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6eb47d4-3117-439d-9318-14caa20c075e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3c6dca3a-0498-4971-8d58-b1992887daec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1600e167-b661-4f37-8fb3-870643fc310f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "05b51c3b-606f-4a76-9b74-4f08a64f753a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c330bf71-98ca-4c1b-824e-3bf33923e6a0"
                }
              }
            ]
          },
          {
            "id": "22cd6ba6-6b1d-4f49-b5f7-35eca6f01b3c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "90be4fe6-d057-4ea0-9d3c-3c63005c4394",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcd641a9-52d2-4272-bf01-7c08de2ca5c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "38b6c00c-9ba2-4200-a553-f1df8cdc9d1e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33ae519b-36b1-453d-95fe-d16883d2fc2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9823000-d835-4eed-91b7-13785a6a2e61"
                    }
                  }
                ]
              },
              {
                "id": "a1aaa015-2cd0-4ba8-971e-501580bf6331",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b5d9531-3e55-4e7a-b541-7c409547fc14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "27e7b48e-954c-4423-a4ab-2d9f5ff4d011"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efbb40e3-670c-4330-98fd-388d56086cb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "095a35ed-8b35-432a-9b29-eb86a22d544d"
                    }
                  }
                ]
              },
              {
                "id": "3caa7340-54e8-488d-95b8-6a4637c15397",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edebcbdb-bd2e-4511-acdc-d12e591af98b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56e13070-34e2-481b-a95d-f08ba6e7a7f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3eea49a-40d7-43a4-8fc7-3ce5480fec20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2941c6e5-79a0-42aa-871b-b4df1898d8ed"
                    }
                  }
                ]
              },
              {
                "id": "a4b7bc00-332f-4d9c-9898-39e0320b921b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10cecfa7-1065-432f-80e6-7692b739d069",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da5cb4e6-c3eb-46af-a45c-a14dc86cc2a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99d59599-8d85-4b82-ac89-8f1589a8d78e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "510fa906-70cb-4d7a-bc44-447df2ac52a0"
                    }
                  }
                ]
              },
              {
                "id": "5377343f-4df1-40f3-abae-82044d4a44f4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49a1095b-c5be-4809-aae8-04e058c62344",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02048a9b-c9c9-4280-a2d3-ff7e5a32c50c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99cb0945-b968-44b5-9d37-6d692a2a6b68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "00640223-3386-479e-8a0e-69d146246c09"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "39b88582-005f-4a65-a142-777a9b7d6493",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f295966-e854-49d7-9bab-5ed1d155af00"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "07821d77-fd8d-46f0-9b84-773925dce514",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7d66ebe2-be10-4f6f-a240-28f1f7638b1a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2141086a-124f-4e64-a46b-608429617e4d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "81813c5d-da7b-4a74-b566-7fcdc7e65dc4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5e80f51-b22a-42ca-8163-dd156ef508a2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30f0063e-e652-4ca1-8dd2-63ce1d448e9c"
            }
          }
        ]
      },
      {
        "id": "3ae0dfb8-3f73-4bfe-a1e0-d2154bc9c155",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "162af9ce-3191-4ba3-befb-af5d466b7ad4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee062672-b100-45fd-8c32-36cc8ca431b7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "51930489-b6a9-45f4-9a93-ba408b1b76e9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885c0fa3-4d01-4b79-b49c-00f9346fadb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e96ae4-aa46-4696-b1c9-dcf3fac0c84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4664101-4ea4-4e4c-85fd-ed600d013933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6832162c-8023-492a-a972-001c825aebff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36916b09-2b41-439f-ace3-b5115f792f93",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f24be1-a9be-426e-b700-8e6b3f112226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dad813b-b7eb-46a0-83a6-ca44df90eaa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c06cd7c-73f6-41db-8d10-c114f71e1520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be54903e-f4d2-4262-88a2-9b8c1e74a564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45eeb2f2-c316-4329-8440-3990fd8d96e8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49630460-42e9-4de2-904d-db9e9f4e7f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0de08f-1665-47e1-a19f-924e61261d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319613be-a0fc-40b2-8979-efd20ea099df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68a497f1-7f1b-4ab9-8a5f-c76c55f26562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0043ccb0-2416-435f-a4d6-218a882efd13",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37423a4d-cda3-47f0-aaa7-6c1db14e30eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c358d1d-4a33-453c-b40c-32427e16ac54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde08bd8-dc91-4ed2-9393-f4511234d532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd5d7e0-c95b-4d16-ada6-981a94d427cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6173b048-0a4e-499f-8d28-9f4aec8b4c36",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0508a7c2-bd89-4efc-8961-49b1bd935c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da19f30f-2111-41a6-babb-c7b27c1ec774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587a0eb2-e983-46bf-9040-21ea58437f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99e68f1b-6863-4d1e-99a1-8f625d613692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245332a8-5b79-47d3-b45a-ddc13bb35352",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f472c010-dc50-414a-81d7-230f427d6819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72ac198-5ba2-43a6-81a2-4b49b328047f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec55385-ae14-4810-8283-1ff92c749911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa8485f-3c75-466b-b3cf-aadf379c772c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ed8faf-0851-4c23-9f44-d2247001aab6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edecac70-8b66-42b3-8e5c-9acfbf64fe40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a806cfa4-acc3-458e-874d-4c75b27c9dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d2ef0a-3fd2-4fec-bb6b-936dbced2c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b5d6cc-bdea-4900-8793-4b35ecdfe940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7dfb21-48ed-4eaf-a0d9-72b43454f3d9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2205de86-a472-4185-a469-44de3992d36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726bbbc0-de52-4953-b466-982575d18f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae9a116-7ebe-41e0-8a82-c7f4d8defea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b272264-e36e-43d6-b0a6-0c26ce737115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3b7a54-2be0-47f6-9e5d-20d7737251af",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f010a2-01aa-4224-95d3-460016d6985e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0d2527-cf47-40ad-a2f8-a49c5fafa981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f29c1b2-8571-4dfd-a2c4-1da6f4693625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e5b1789-08fc-43f9-9251-c91c2646c514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541a4da4-f817-434d-a66d-4b385fdaf4c3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502bc4b8-8eab-4ebb-81c0-a051d4c38c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad60865-c8ca-4fe9-b1d1-581c71ab27b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994594b5-75e9-406e-acb2-6f74b08dc5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bfccb46-f361-4da0-af88-7696b5837ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97d5913-c571-4b83-87d0-f4c9201d125d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf871d0-7fb9-4632-81ef-7ccd312e4d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c55d7e5-aecc-41d3-ab37-affaedf41d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b1f57c-e4cc-426f-a7f7-189140550b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "78b2bb1d-b0ed-48e5-bf2c-adbeb0a334b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7774662c-5122-48c9-8434-46b5163207c5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7db147b-d558-4cff-a2ea-97aa6f6914fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1219d90-807e-4002-b2b7-fc9d916b701f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab15a74d-6775-4804-8f1c-99a133a3d789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9be5970-b7c9-4df5-8f01-4d13d0bc1e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb262989-6a70-457c-8353-9b7d86b9bf86",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7700ee5-edb1-4cfb-b1fa-13af14d4fa8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf640f73-5313-49ca-9cbc-62dd27453e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c9ba28-bc02-444b-9b3f-9f29b1343f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0896d76a-f111-4c83-b02c-82399d043dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82985671-a53b-4763-bb50-873c9e37336a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8f7fda-71aa-4c9f-a3f2-a07cac322730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6403a313-17ee-419e-a9d3-8812a48fa56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a80b135-4931-4948-98ca-196967ccef81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "60a4c98e-b677-4deb-85ae-554415e8fe5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbf9e5a-5d8f-4161-97bf-d57a748ebc1f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c11c0b3-d7bb-4f6c-8828-0dd343494f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55b0583-1e31-4075-86d6-b3819e7973d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce083de9-cb40-4b15-8e3a-ca1fa0cfcbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a75cc9-f2f2-4c8c-9089-27a23d0ca819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5c8b32-e53d-4fab-acc8-f68976fc6e75",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efaf36d-6dfd-41c1-8b1b-1a0e4b5172ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5739977c-5d45-4d06-ae2d-56fd3d5056ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a07fac8-c09c-415a-83af-42d60c776fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "84fd840d-3745-4ff3-a36d-8c664bbcc740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2a5cd9-01d8-4eb7-8d90-c72505eb4035",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f276e1f0-f955-47e2-873c-dd966d350e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fac283-c293-483e-86b9-e5cb19f83ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69bce30-b516-4531-b295-57ee016c44f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a637373-87f5-41d5-b6a4-b17d0efb3791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f00a2a8-80b7-407f-ac55-29ff244e9f93",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9a6ce2-6517-4850-a0ba-9e4cdfae0f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a5aefe-f439-4ef0-bc72-d65ecfd5571a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f548d1c-7b12-4d18-b362-236923bf4662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeadee03-eb82-4afe-8164-db86d11766a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd146b6-033f-40ee-bd86-0a5766c47387",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc7e73a-55b7-4631-a1b7-d4db12731351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a1ae181-50da-4107-8f42-87cd39246840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70494d95-3e62-4350-9273-d2899883c35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "136a4d4f-b547-41c2-8c99-d408a2155436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb88198a-a07a-4833-b56e-21dfa30f9f82",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b3480f-547a-4976-b8a9-95a49d4f2c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c13bc29-1cb6-4ae2-9544-ba426f1149b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b2f718-f10a-4c31-9ec6-32d40a7191bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ace0c5-2e26-48db-ac08-22de7f2e8d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f9a715-55e5-4ed6-a13f-03fc5beb85a2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35fbf30-5372-4a9a-ae25-a133a4c4f007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385cbd87-3be6-4eda-88f9-d454f31ff8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b69ce47-c14f-4c20-b2d8-331484892b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b055f69c-a509-424a-9163-157b63d741c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7809e1-3607-4f48-b922-291f5bb305cd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f041f2-bd8e-4b77-8bfb-6b4a9e56ff6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4305d7b1-4188-41ea-8296-539e7e7c0753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526c3f0c-9f0c-4792-87bd-8d38f6f46e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "069cb580-ef48-4ec0-84ea-a21ba11a290b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a92ff8-3252-4e75-86f9-e653c388799e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d0b253-ff51-4eae-b4c8-2a84b08c12c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af714f53-9c62-470e-8b9f-caafd06f2a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eccdf88d-6408-4899-86ce-e214b988d119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b210d5a-ee27-43f5-824f-9b2339bef828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb4e44b-daee-4dc5-9a89-911d86a89d6f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d6190f-ca4d-4c62-b857-c0b25bd5db97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dde08db-55ba-4e28-9c1f-696afbc082cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526a6a40-c1fb-4e6f-b781-97d64ea868db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4987c985-b525-46ab-86d5-dde71cbd46a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac7d699-b46e-459c-abda-dcc6961fae6d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "546390bb-f9cc-419c-93da-a1b4fbb80011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f853041d-acfa-4b90-9a8f-4b6e287f48df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c300b02b-3305-4715-ae8f-237760249ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a11dcac9-30ef-4746-8b22-54549b6da5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282ec929-d06f-4076-8282-d7607f09b28a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2544c54e-1c5e-40e9-adeb-fb639615b7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec96688-8ffe-4e2c-9c6f-bdf7f2b5da7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1e7821-a964-40eb-802a-04dd0e786d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbdfe16d-0a87-44a8-ad11-676f749de89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d77473-b864-4a23-8f26-42fe4691b488",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07e936f-2132-4d9d-8018-36ea49184dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566a1e9f-d0d2-49a4-b14e-ef446c927ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1646b63c-d3ff-47ea-8c83-5364115650eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b673256-f86f-48ee-b11b-cfe221adf13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da5f46a-a55e-4874-af16-5d60497b9078",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1be573-8211-479a-b9ad-99c07c54bda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b6ef642-1cce-4996-9b47-55f32eb637d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce89e7d-a1d9-4f4c-809c-44b4553b1f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aad781a-1061-4923-b153-bf68ac7b9937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e6fa58-370a-4a70-b99e-bdd705901929",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083cbf0e-ce0a-4928-8683-e02d83e8478b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10362afd-f650-4b1f-8b0d-e312ce28af37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2102fa9-41be-4c1c-9acd-487c45c3191b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1913047d-8203-4a51-93b1-9eed812754d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f40ed7f-8924-476a-bbed-5fe1cfaca204",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefcc8a9-b8c2-4589-85b7-0a591b9d11d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1bff544-6527-4368-a49b-c7506dc14f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edd6278-1b0c-4809-bd41-50fbc82c5d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a26b41-1d1e-4b60-bdf7-4519f80b5a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8c7f29-75b7-4802-81f2-8ddaa1f5c0b2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7776449a-4497-4843-88d7-a0a464110218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8df2127-d348-452c-ae5c-238176bf7eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0759dd9-b958-4cd2-8961-fa3e43c5e37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2963844-b8cb-46e7-a4e5-e85955a628c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69be7cf-bf89-445c-8ea4-93dac31f78e9",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94076359-a124-40bc-b372-cdf8b09abfc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94602030-1bef-4d69-bd9d-ec36925602d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afc058a-9a01-4c27-8c45-748c2de3182b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf02de4-4434-4664-9ddd-7fedf1f2f672"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "92538141-f0bf-4567-a990-39ba3586053b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25e434c5-77da-4cc8-bd63-28873b723eec",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469f01e7-92a9-4241-b98d-692d5c723bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c741250f-e590-490c-bf30-7435bc3fb062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7647e1b6-08d2-4888-a1d9-43778117785f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94b9fadc-bf70-49a6-af92-7e9cb9f52ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5f2d78-6fe4-497d-befe-8306512e20f5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5eaf3e9-6cc6-4eb5-b8aa-afe20de1f3d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "213fdfb4-46b6-4fa6-b73b-bc9ac5368da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e60516-76c7-4b56-95e7-b7d997608aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87954904-fccf-4a12-ae5d-4bd05dc5f7ff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0cd9d60-8655-4d1d-88f9-b1465659895a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a405f6e-471a-4838-a38a-4f69c1be7077"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3b4ec8b-67bf-43f6-b572-3833b28b90f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48073614-f08a-43a7-b4ab-699336568869"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8d03c6a-12e4-43c7-b32c-076478a5e21b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "60033a28-eec0-4307-8fe2-79233e52361c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "750f5891-9c21-4a9e-a055-654e675b60a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "401a15da-8458-4d3f-8cd4-79bf68676ac0"
            }
          }
        ]
      },
      {
        "id": "b4e6e7b1-2ea4-4052-b3dd-598765e882ff",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6035965f-d50c-4d5e-8b60-9c7aee6bcab7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2564e68-0ed5-4dfe-887b-789029df3d41",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "66c2c9b3-7877-40f6-a162-fc2ea6ec28d2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3d0d41-b1a2-4a35-a530-73cbbc5fef2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa92d44-789f-4368-b6de-a92acb11d517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7842f231-f7b3-44b8-8728-ed34926d8df7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74facb27-c682-4314-a1b2-b58f0f660a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae4ed7ec-c3ed-409d-a64f-4d27bea397a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a62f447-cdf9-4af9-87bd-39af103a2611",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01feec36-1277-4fda-baa1-61d46529d41b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54fb4621-8cac-4e1a-b4da-20b672dc8df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1f777b-06a6-48ce-8024-c9c49b73ef90",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1302671-a2de-494e-afc4-37ee907a4199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7431fdcb-66ec-4be7-9f8a-ed07522960c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb19162-69cf-4523-8cbb-ea2ddfd5eb42",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6e74be-f545-486d-bc16-6bc14cfc3545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daacd13d-90ca-47e6-a921-d6fab0ffdf85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff0abd5-6491-4f81-9ac2-95c3210cd795",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfc76c2-49b7-4b77-b14d-4714ef02da20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c0c3e6-5acb-4f1e-9f1d-f4f44ef7c06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a991b36f-18ea-41fe-aab6-3b1fa8449c35",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611bb85e-34ac-46d5-8189-502ca37c7366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b055084-f422-4131-8bbb-407a9b15ad0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2c8b7b-e74f-45c2-961a-a8219400d645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779ef8d5-81dd-4ac6-b8f5-183a27ed2c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa0fb17-6487-4bf6-9df3-0e5b7eeed877",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c99a38f-41ef-4e0b-b29b-2d894f45bd99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c3636a0-3e66-42ca-b7dd-70521befd600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c41f50-992d-46e8-a257-4f366f20cd06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf388015-b57d-4c54-90a0-c7e41532758a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeeb8787-cb3b-4127-a1cc-d545229a36ce",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e04879e-fcdf-4390-8d22-7f87b40f60fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc545057-a039-4691-9234-9bea191b4286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e27c0c7-82b8-4c98-8d15-a359e323bf41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b311cb-56db-49f0-99cc-a1fe5bfc320a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2237f85-ec63-480e-8add-82d14d8911a0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57c246e-1cc2-4cb2-904c-d1a467090239",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35c5a192-612b-405d-b84b-22b6c6664eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27dfe05-0f8a-487d-a805-bc074510bc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089aa816-f062-44e7-b65b-a40fbbdd9f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc5b2cd-5597-46a5-8895-090517fefae6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9697c996-b1f1-4cab-9f0a-14fca8cb7732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38db9697-4b87-4b87-8dd1-8c9de74d14ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c3f7a3-f6c5-489c-88da-3d50dff41d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a306b3bc-9e92-430f-85ed-e9ff59d17ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ea2db5-f09f-4cea-9965-f593ca9ef41e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d774dd68-e95b-4ad9-b4d5-5807b13917d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d17a7b-3151-46a7-9aae-93fb1294f968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb937d5c-477d-44b1-b958-c64605de4dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4565bc4-403a-4fdf-8a49-d68d8502c6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9551d2c-9986-4bb9-8367-b49b699fa351",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae1feac-ee33-48ae-925c-6d773049d890",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56c2acac-218f-40d1-891b-45fd3d6a9216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b83124b-af1d-4706-9e12-eca44008f032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34251ad1-f168-4161-93fa-c7781e2dd156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c4b697-574d-4951-bb28-423be60138ed",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d21a650-eb50-40f1-94a9-fa3adb9c4132",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4bb3e65-0789-439c-bab2-2295cc64d5ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f9e979-7387-4ff7-8114-c469444f3d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01a542e-3868-4c63-aa1e-be07e2841f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf492495-2600-4e18-99b7-ef69bac369ea",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e27648-274d-44da-b54c-b6540121af15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7681bd1f-1f4f-4c12-bf4c-bfbee1e2da8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225360f9-e6cb-484f-a049-3c5a9bf48721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc8d8d8-40da-4f0e-aadf-d00cc8f77a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61df97a5-8c52-428f-bf31-da97ff05ef28",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccdc19c5-7491-4461-b556-7b0cf682cd46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87e110aa-6131-4680-92a1-a01b9edf7250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d003b9d-010b-4919-bb30-9193b0e51d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200af24e-8529-49ee-bda1-f501172d06d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20703a5e-82c3-40de-ac6b-d93573ff7825",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678f7cbd-b14b-496e-b210-bae3912cb39a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8a1c38-6438-40ce-9200-2424b6659a9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "757b5914-c8b4-43a9-98de-afb20d8fafc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09bdad0-a148-414b-a680-b7a8f18fe2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61d401b-170a-4493-a02b-c634666fed87",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6a1ee6-01ac-446a-9e5b-e64d3e0dd437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9ff200-1046-4a15-ae84-a75b9c3fb75d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cc632c-7f6e-4882-9c42-d1f9bfaf6868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da683c3a-3a85-4764-a36a-a4f0a9e5b223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b090139-e425-4ed0-8bdb-62aeef36f766",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e833dbe7-1d3d-4ad7-bfaa-dedb30928171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b083f4fa-cd72-4c97-b280-5f53e15faf4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1a0505-2d7e-43cc-a057-bdce531e70b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2de1bb1-4fb4-4803-a9c2-a18cdd925f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6723e417-babd-48bf-91b7-49bcc17c0aae",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec69311-5a61-47b8-9314-fbb6951cf911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58cae070-017d-4f30-89bd-21f6d34f5f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9159f28-669a-4148-8176-262227ca5bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792616c4-c331-40d5-b512-f668402c244c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7d640d-c508-48d5-adf7-6f50d848203f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164b3582-e8db-4508-86bd-995eedf9dfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9404e486-a222-46cd-ac67-10f1fba5a67c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfb66cf-cb65-4d6a-b95f-89ac4bd71d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c7d879-1355-46fc-a28e-7c8bc5c6d391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378274f7-ef0b-4aaf-bf55-f2d491ddcb0f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8093adb0-987e-414b-b3f2-825656cb3564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f17fea91-bbfb-4e45-98b5-66f4fa683d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea243a9-e10a-49e3-92ce-5099e006c1d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0b2587-8fdd-4bd2-a935-32653a6bb1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8a4db7-aedc-4b41-acd6-1547f5354f4a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624af46d-9ee8-4047-a37c-6e2a0a09ecc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c986ef7-cde9-4b57-ba8f-47ace1cb5b7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bc61df-b6fc-4dae-80e8-1aae3e5463b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9231b01b-ed19-41a4-a213-082024bf5ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef7c84d-e28c-44b9-9f2d-5f5aea0bfba9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ae17c9-f19e-4c6e-8430-aec814478fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e88c28-fd8d-4b57-8854-16ea869a473e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfc13bc-b78e-4d19-9e6a-51889c306fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fcf7bfe-94eb-4518-aff8-7b9a3348c721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705ac09a-9c90-4980-845e-1d4076be8149",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b44fa0-1c30-45e9-8214-f4c7e8a792c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e226abc-2843-45f7-bbc4-f40956d74efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9693a765-755c-41ab-a9e3-5d491ba77acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff7c3e6-641c-4264-aa82-7ca3cb276b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725f626e-4b38-48c2-9b54-9d1a415b6644",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f4bf3a-3e43-475f-8ff6-93579d441d69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eadd1ba-b38b-41c3-a6ba-611ca1e7cced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bcdd6d-b2bc-4fb8-9f10-1c59c5d3091d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34cfc97f-2036-48e0-bf4e-7b8ca6782948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0497c2cd-6698-4da8-864b-bc4b98ff439f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12326d1-a4b1-4c5f-9349-5ed3ab46b2bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fcb9b6a-557d-4a0b-bb10-a8bbff4d9bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d383629-5d47-432e-9da8-6522fd642728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0968cb-d9e2-4eba-97a0-d5134d70b80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d01f5fa-5e48-49d2-aa4c-81debdf57caf",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25df107b-f9b6-4a2e-8869-56e3485d4e77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1108872-63e6-4ae9-abc4-14d59939a7af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16287e4-e3b0-4eb8-a77d-0fce87417420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72bcd66d-3015-4e3f-a98b-ca8cc197b74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e99c2d-6540-4535-925e-9934da62149d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54f29ef-8e38-488c-a97c-dafb8133f66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c44e01c-83cc-4613-9628-3201c24fe85f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4384b243-f1d7-425c-a52a-f83e0d3a1f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54b6635-e076-4599-925c-1149deb4b7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb13501-2cb5-4566-ba15-6c3572bfe92a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc92b401-e1ae-43b4-81df-34074f892171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d80ab248-3bb8-4bf0-9d76-faaf95d8e656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8170409e-8a75-4586-9a33-c1e85e7cce6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c7ebbf-7016-4172-b45c-3d4f92a53401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3cf2894-bfb3-41e4-813e-6685593cd6a4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a790b7-c358-40d4-8796-39ad6f2d6e58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4aa0c6d-b237-4cd1-b50f-0b577eab2eae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66df0d8e-14cf-4060-acc4-a173fc67207c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e5365d9-2037-4d2d-87b3-60b6ca5c2549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a7cd6a-f7ba-4e1a-81d9-d9a3b0d6dd55",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b24bf62-5d55-421e-91a1-363f741827e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9733688e-95a1-45cc-a971-e585fff5a29d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df54cbcd-7032-42b1-a7c9-74c396b57bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1484c4a-cf73-4aa4-97f0-91eeed6cefe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92c4d40-f2d3-4c43-932e-49a520c75b0a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61d1222-f766-4dd5-a3da-ca4b231c3035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d793cee-0186-4942-85aa-0d0faffb4437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbbc640-796e-4bff-a6d8-b0d596920eef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9457b997-3037-44a8-a6e5-e7ea9b7909bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514867b5-1abc-4f70-b4c0-b4db421dbfa1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84367079-4a4c-45f3-a640-2851920fa19b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11bbeb21-a3d9-4a9f-86b9-c2bb46f5f71b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "976ed3ae-cee2-448b-9471-df70b4d9568f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc96615e-008a-404a-b9e2-5003343768cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25333754-4a3f-4d5d-9c7e-caa850486205",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf11e8bb-6fe0-4451-be87-c69c74400075",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa6d16f9-e212-4ac4-8f07-5721c7d19c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af9b877-2781-4661-9fc4-8ee5b43fc1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "213a223c-e905-4253-bc81-eeed85080029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae138e7-9fb4-49e0-920c-b81c07566e71",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229edcf7-c5cb-41b4-8366-9d3cd0088507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d295294d-d525-4a92-843f-04248d4c5d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a7bcd6-58f2-4aae-9e71-e4310db2cc7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c92d08f2-133a-44d6-96e5-15612a4f0d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a08e2b-d3c1-4c64-ab0e-a61a6517667e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d49d2f-f12c-4aa1-af1f-028a7696b443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a693ec-1050-4acb-a3f2-48715b20c1c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cdd587-134a-42dc-b617-926b9bbfc2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d747f0-e7e7-41ff-a179-96b79a1389d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd25c4c-253c-4d57-8736-75d0bf05046a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee919b8e-c9be-4bd4-a4fe-33305f29d8c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0390edb8-4713-4d63-81d0-a9a2e06c1cce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1822af-8d84-4628-b793-ef490b5c6cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d62350e-be97-4b50-b1f4-a70c67d37c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca9f710-6b60-4241-8e07-a7b3bdd2ed47",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad21b82a-0e78-46f9-87bc-757e5ef095cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5196d4e6-e799-4ac8-ab17-d6732eb1a7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8445c874-41a5-4bad-8d35-5d5dcea7e5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6272548d-4c6a-41d4-93d7-85dc1b409dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64cda84-9759-4259-bfde-3e344157ab71",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066a0c3d-d794-491d-b4c4-0da58adca79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42287b86-619a-4614-ba1a-8b0acfd23453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0342907-d793-400c-aad1-c0179df30b7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d43d674b-4083-4778-b112-d87194f9ef6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae317e47-0da7-4adf-96f0-045bae09d956",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28898791-00e3-400e-8114-0102d8c445ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c1c43a-e3e9-470c-b7c4-c9da7c7317dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9792937a-f363-42cb-b0cd-dee1b21462d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6693bd-3686-4977-aa03-440475f39232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bdfd2c-b965-41b8-9587-fa76297f32d4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4cf486-64cf-4198-8f88-39dfda4994af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "695dd95c-bcc8-4fd4-8c32-63f1f8e1a4c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbebf9d-0cc7-40bf-b3b1-9892234695e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a11919ae-8df9-4fa0-be63-4ef9602486fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb0c410-9476-4416-a3b6-6ac56fb47f76",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216f5476-ae06-4bfc-9113-3fe02ff6b32d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c37c66-ba11-4751-968f-89c9a9be9c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "705f17be-4943-48a4-a782-f974847a0b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ee202d-4866-47c2-942a-31113de1a856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93d0e26-41d3-4a67-9aff-23e76fdc2f31",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a5f73e-fa68-4441-85dc-733f8bc0231e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f49df4-6b34-47e7-8caf-20d136c4cd38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ec56c8-14fb-4ed6-a4a5-e98b156ef8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "283a54b7-c0db-4938-b117-4e2ffd59be13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b91242-3520-4ffb-bb5a-fedbab71a35c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e4959f-241a-46b1-8b54-743edd2480f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc260d4-2891-4a66-8459-c5ebc00b8241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb08ebb-4e55-4110-adc0-82d1b2863181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8c7c7a-7f97-4ba3-827b-5ad5efa278c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3c7667-66be-4c69-94a9-90fd30eb076a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f74546-4ae1-4133-99bd-b2c1f8f198ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09512ea2-4593-4a62-8de3-ecfc13acd66a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94b153c-b94b-4a86-bbe8-854fccfa22bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2795993-feed-4889-896d-8413ab58e92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b64e0cc-38b0-4caa-ae5c-1f7eb6e97177",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f212df-9301-479c-9d88-dd463e9d88f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30cc5d4-23ca-4219-abb6-47a86b3391d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49081b55-0425-42ea-a137-fecf916eed47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2408099-9339-48dd-bdf9-45b1ffbd8578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9996fec1-e1be-45d6-a4ae-fd83826e2f6e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436b04f7-1363-4728-879a-e1d86b4752fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e79e6f80-a676-416c-9f1e-ffd4e15b816b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ac9027-55cf-4e4c-8000-a68739b2cf8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3329d0c-172b-4bf6-af84-7c4c85cf2680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afad03b-4e97-4337-bf78-e722091f332b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eab9942-ba4c-49fc-af41-a9638075efcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a62c6f3f-a8a2-44a9-a193-6041b20287db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5454b6-5373-4484-ac61-f64d325194d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8047fbe7-2be7-4876-abf1-65c031f411a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b28f3a6-e343-4c31-87f4-b8955dc86c99",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8173eb41-6256-48b3-9d09-f42476b5fed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921c77cb-9f64-4621-901a-4932df40810d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e997d2-a374-4e9e-9e02-a9a216999697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f17ad732-e4d7-42ab-89f6-6b39d4322623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cad17f-7d67-4f74-b2c6-607d932e0a65",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd408fc-f3f7-40d5-a189-aad9b3e582b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b8269a-889a-4cc0-a86c-0461a20abc58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12021cc5-4e6c-4f1e-98ee-1df551332ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df814d88-15d8-4782-8373-d4055cdec41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a2ea6b-8761-4f44-8355-32af058a5b5c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b88f2f0-53e8-4da2-a979-e67b7f6b6abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "245e7b73-d947-4030-b443-b266c8483ccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d627f7-2e79-4262-a92f-ea0fa77b238a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b2b4a4-5582-4f3e-bcb6-10d473a891b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1eee90-24e8-44ed-960a-1fb9c4a697f5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eefb68a-1374-45c5-b7f6-ab7383e671d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05075fab-dbd0-4a13-8861-91f81c707e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "837a4068-1736-444b-a326-285eeab32e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e741499f-83bb-496f-8cc0-d34e3e42016f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42670b0f-d421-4467-97b4-3230bff961ec",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a8caeb-75bf-4841-b176-387a3e1d338e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66d9756-7f75-45f2-a5f3-817f23febc3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb37fbaa-2872-44ff-b12a-6bb40999782a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41afa484-2a75-4c12-bb48-017e609e1734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e93d7ee-d33d-4b94-a804-fe215542c06a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3712a9ad-e94b-40b4-9d05-c8ce68d993cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d4de28-91b9-4414-b725-5a6b82e28465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f7bd11-935e-4e82-a1cd-c662a5b5a338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aed5851-4905-47ea-ba35-86a5e93ac2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc67b738-2f45-4e18-9354-0f980c0daed0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599be88e-7764-4e96-a780-ee4c414b2819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8d64c8-0482-45b0-96fa-3c3a410e7a92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e86b14-dfe6-415c-bae6-4acb83a893b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f30bb3-c23e-4146-be1e-548896e50614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018a28f0-66f7-4bef-8636-6c2a41453da0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c25986-8d85-4bf8-917f-0251c7dc8190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a86dddb-8133-423f-8491-ad4e4fc4c816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fbdf0f-f2a5-4661-8e68-02ff94ad7ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06a05e1-e835-4630-b9a7-786908f40855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9438e29a-6fbd-4aa5-80c4-5dae1e2960f1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8003102-e8e1-43dc-a05d-fdbdd019f1a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01480695-9f6b-47e8-8e9f-19ccfe6c7cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba19db34-c102-4d6d-8535-f6fa0be0d350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "665944c9-de85-43da-853e-0e926bbd4a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29fa6c1a-b319-4478-9099-100779d77153",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e011ada-0716-41c5-9fa2-8f78f599d974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16cb8031-2b88-4336-9b7c-4f53f9bcf3bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f226776-76ec-4d32-ae5e-5c765c1495ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8f7585-e13c-4a6b-a0c0-ee186e394751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6264026e-6910-4f94-bbee-ab2729072e6f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fa644c-8cdd-4ffd-916c-2912f40d0348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c327a0c-c22b-49e3-a2c0-b3a43b705150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c7fd5d-7313-4db0-8556-f68cc93aef59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78770043-9b10-4f9f-9ccf-db88853eb304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd106d2-f7ba-4f11-91a6-466c9de75f96",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64636adb-24bf-47c9-a512-7d1cb6c66fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad1b4b9-310e-4c57-8e9f-5e7caa7452b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f1346d-2ac9-4e8d-8768-7394dce71f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4979d91d-0ea9-4feb-97e1-bcc7c5c7f112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88cdf079-4e1e-4a62-8606-05bbc8ce12c2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3d4394-8657-4fec-baf6-2ac3d228cfc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac402515-2101-436b-b662-cab84bab414f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c12e048-c7f9-4ee6-a31d-b80fd74086a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0f1724-7eb8-453f-b3a0-5e7818216acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059e2e1b-97ca-44f4-b275-553e970f39b8",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adc4a98-457e-4fcc-b776-fe39519264e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f35a87-9a65-4ad1-bf3f-78932eb77f0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebfb2ce-9720-4963-a57a-384681b30e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "090b8c2d-df63-451a-9c06-ea261bdeca47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444a48b1-6320-4d13-a848-09394f39db10",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68e1186-f16e-40a9-8e7e-a7b26e5dc9d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba7f4d6-60ec-499d-b9f7-ac4867274c44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2416319-9f1a-48cf-aee3-814afd7e1cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c02486-1b59-42fb-a0e4-54247548cc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0979f58-1b44-4734-9901-4fc640d0a982",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e70695a-79b5-4151-a098-12d2c540bc08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8ae58bb-90be-48c2-a3c4-d3c267ea4d72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bd54c6-c1d3-44b5-a8ec-c9f2b2654987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf028d6-6070-477f-999e-17f792acc260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34accfa-cb2f-4e84-a7cd-a7d43313d284",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5a060f-1685-47ef-b840-e915ef0c3967",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4654fae8-bdf4-449d-a46b-45e39f433101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5e8634-ba2b-4076-ad61-4451a5ca0322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6ebdff-fb6c-4617-8126-59e63e133cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538230d5-d188-439f-8b04-c1d8804c4953",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26ce093-d119-4a77-8d0e-1278ed35cfed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d52385d6-ea91-4c65-a3b1-4039eec84e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b09f80a-4413-44a1-8bee-ca71e3c434e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d73be3-2e16-411d-bacf-eebe18eadf63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cd34ba-a89a-4a35-bbd3-47104a0ff72e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c8e788-53fd-4781-ac28-d40f5fd451d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c597638-0634-4e0b-a697-aa0e78c43549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "386de19c-c7c1-403b-834a-ada707705914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0cf3bee-7cd7-4534-86d3-7d474ab667ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025945f5-a089-44f2-a558-21fb4c23bc00",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9ea4dd-a007-4beb-b64f-066bb217bd85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caaaf1b5-2942-4aad-860d-765449c8c61c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3752dec2-4f9f-4caa-bab6-cc88b03ff3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bb0afc-573a-4205-8ec7-12ac69697fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056022cc-7012-4a25-8e40-a4c30b7ce0c6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c6664f-8e39-432d-a6dc-99ac3868160a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f543aa0-bb1e-4203-8ce1-8afd08404f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f443e4f2-4b3e-4610-81b6-8365e222789e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43772de6-fffc-48d5-b6e8-48e40b90000f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da39079e-b607-4a96-98ba-1770050377b9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f131f0d-f040-4a79-b772-e943f754a17a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f5fdf9-4a53-42db-86f6-192e17f8038a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c7a904-8919-4eb8-9435-495ce534e7b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91389585-2c35-445b-a1d4-fa4a75f65041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdccde47-999e-4cbe-a07b-d5c16e6f4400",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1380ebae-2cb1-4a5b-902e-6c677637bed3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b0aa16e-ae26-4470-ad79-3cc6cbfcdf53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d94bd5b-46af-4c95-8025-61d9f772ae84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3194a51-aeba-4eb4-8a70-91e5151c6699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5669d634-bfa0-4a66-bb3a-fea64c5b9921",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f328046-8008-4a7e-b1f9-75eea7db489b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31362255-c8f8-4c1c-97f9-4f509f30c300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16ca326-4e7a-438d-a0b0-8fd16a1b5b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e99df3d-a6e3-4c97-8e0f-cb43dac18571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cac128-e618-4c17-ad2a-f9e586ccdf25",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2649c5-7b8f-4c64-99f4-79552d3fd7a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ce67a01-501d-46c4-9857-1eb8bab8b886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a53f2bc-af6b-4e56-ab39-fbf73711d09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed22a9a-dca1-4fea-9d45-cf7c82bc256e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9550b85-53cf-473c-bd76-22c238beeab4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d267d0f-5efd-4875-a197-13244bd91e18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df0cb6a1-44e2-4d73-ae3d-67447172ff33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cee927-4110-439e-8dc8-67f3709312ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8273f66-d562-4de4-bfaa-c85fe4a87483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d6129c-17d0-4f93-9511-f27160776e0b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fde1f33-4a3d-4cc8-8cdd-ec79335bec07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9b1f172-5e92-49a5-b026-0b198282fd86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bc3186-2210-4757-9aa6-a65b69652cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59bbc2f6-f4a4-4bef-b0c1-ce0caf95245b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec615dd-31aa-4e95-82f2-fbdc0550b213",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22609fcf-ca59-4f69-bdeb-a4971e4b5074",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a6e50e8-db2f-49fe-b416-43a4bb212451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc455201-5e1a-4208-b8a4-95c1c9d0a628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2c14be-537b-4496-9218-ee2ec2cd18de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cf97ec-8eb8-4866-9f5b-bf95f5cdb32f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b270d6cb-8b6c-4ecf-91c4-6772f34a37b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20921016-25a8-4cb9-afe9-02921b980986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69946f7-b11f-42f3-84c9-c702cde58f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51363775-c7bf-4136-b387-1948d57dccfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b650add-6886-4704-a84a-9eb49a6721e0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c960cf46-5af3-437e-9463-710278695e47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cbb0254-d56b-429a-86b7-023f6869801e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e40fe9a-77b8-43fd-9990-004301e021d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bbbbebd-2a7c-46ac-a815-8734cb53771a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd59c23-88e1-42ab-b3be-fc9ae348509b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79faad4-a900-48e1-82dc-5f65f055a4be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21731409-b69c-4fe6-984a-67bc9707237e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82aa825b-e8ab-42ef-b6ac-e89332bdd9ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119b2c5e-2475-4b38-9bb1-611ed7faaaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffe26b8-8a44-458a-8632-4143c21b88cd",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620e96c5-8432-4d05-809a-d43c2a239bea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95f854e4-224b-4353-b845-4b5a7893db35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02412460-4aaf-48e5-b6d7-2a1e458ccc34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ce0407-a33d-47ae-a622-ce5e5b2036be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882a680b-3d4b-46ae-a185-8742dbf17b5a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49a5683-36a3-4ffb-b4a3-7b8ec1a7d0b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "812e934f-ef28-4671-902a-64356b449621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2210de56-1aeb-41ba-b6bb-183ffa075150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf126da4-a5e2-4bbb-a8a4-312666eaf92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d29031-0c66-4bd3-b22a-6f4d8735a3da",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbff9b7-adf8-4104-b2ee-d6c4e73ca906",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f98da435-b3b9-40af-882e-fab137566dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c622fa8b-9f0c-476f-bf79-70d21d172899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15dc6ad-22d9-45aa-bbbb-6fdb800396f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2772a3-dbe1-4272-a080-f210893b4c91",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd60720-c56a-4f3a-98a3-b51d19fe5f3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8f58ca8-b18b-4c52-9de6-21067c74dbbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5d3dec-bab7-4a99-8f33-3f7c7d175363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1455184a-20ac-4d89-b0ac-0f5e8e63e8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0607627c-8102-48f1-a17b-29ef536143ae",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8eb649-fe04-4bb4-9cbf-ed13cd349111",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7adc835-54ec-4995-898f-e057fe13e4f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66096d81-6260-48bf-a8e8-7d743f532ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5309661-cb3e-4c1b-be8d-4407c0c741aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f70afe1-13d1-42cd-bc28-cdd8bbec338c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eda0569-8bd5-4cea-8507-6b3047fe9c6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6a0caef-9b7b-44cb-afb5-6b0e3eecb6cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea65ddc0-c936-40a8-a6ef-97446b20220c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f36a97-78c8-4481-8dcb-105da3e4ad07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babc98e4-2d67-43ce-9d75-888b01ff99d9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d0afa7-5f32-4137-a24a-690bf9040cf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfdf550f-f4a9-4e7c-ab8f-717b77d37c6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7846269-3994-401c-a4c2-8e74c039dfce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e45efd-1a94-433e-8ad6-8375b9012b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6e7e8d-df7f-4f43-bdaa-7a1335bd65cd",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e623e71-89dc-42df-93a8-09324767702d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2efa488b-7584-4457-b5be-0f3e4d53645c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553fdb28-2fcb-4e3e-b10d-cb3c71a6b2ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b490c7-4eb2-4d8f-94a6-c452dc29d2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a68718e-e8e0-4f95-8a41-65a03492745a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca05af5-1543-4e63-ac15-a7e77a072058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98270c49-b4a7-4d38-82ac-d81cbddb732b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fa8ce7-f068-492a-9bf1-feaa13596800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e778386-f20f-4526-8826-11764ab2b1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b43f08-3c3b-439c-8670-54b027facfcf",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6709aa-27d6-4dc7-aaae-d1771f890dcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "748169af-8c5c-40b9-9166-4f32a1afbe13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29903e2-53d6-41e5-b7c2-0c0b9d752c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82e5acc-ee62-4acc-8d30-004233c14992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36abb24-f96a-4fc6-bfd4-7ecd1fac4661",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf9b860-0403-44b9-b81b-7168861c79a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ce4ceaf-ecdb-46af-9d5a-b36cd36e3c12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7faee866-34c3-4a16-82e6-40289f32d8ec",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be7c7bf-ab6e-4ee7-8e80-2b25ff2fb5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260e9906-c2e7-4294-b326-811487a29d7b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e4f60e-8999-4cad-bf63-19067bac6fed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5714a36-ad62-4e69-a016-15c082916c90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "660c7328-2f43-4bb8-897f-148c7f26be8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb9458a1-6931-4c72-ac49-7f85971cd6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad441cf-6962-4226-b740-37b06c732f8f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c51b82-39e1-4f3e-b722-eaad37ae37fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "670f60fb-6e26-48bf-b755-2d613b37418f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b216fa3e-e007-45b3-b27f-3f383dc31d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5595c5b0-0790-4fd9-a11e-dfc556e6233a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8afde4-8b89-4c7b-ab96-cdbff2cf4b3f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6a5a46-872d-44b6-b503-4e7a5531e8c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68f04d0e-cdc9-4650-8e9f-f751e07db25b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd51df38-1abc-4cf8-89ef-caf7c48ef9b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d508e5f-9619-487b-8c80-86e0845b5b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc05324-7499-4d71-80c5-58ba273a472d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b2f520-c503-4884-a517-98fb1601946c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a96b3cfd-1efc-40cc-8344-f33422124e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d20a63a-1ebc-44b6-bb7b-79ba0f0abf33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c90cb4e3-5096-43ef-b2f5-6b540228431f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4b0de7-ead3-4833-86eb-f326b0dca534",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ef9599-7182-43c5-bf8a-09347bf9780b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93f442c9-3a56-47e3-84a3-27283e2dd3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4869ef-e334-40f1-add9-def0c14a3019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00bf9477-3495-4fb6-83ac-4cbf6fceca24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631448af-9640-4741-934c-ae5e094931fd",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8aeef3-1386-4493-ad96-ba078715eb2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0adfab29-4d33-4119-975f-4d6be4caf11e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae079bf-df27-4a79-a10f-8c523ca6c84f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d3bcb0-a113-4be7-bf75-9fd1058cd275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98258c7b-46f0-4576-bb5a-37b695318b49",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37abd8a7-201d-4b23-824f-18aef13afa99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "039a7dc7-1262-4022-876b-e1c2dbf6eba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6037fa83-aa64-4240-a349-ea0f92e9dacb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6226243e-88be-4239-b603-d3b1bdd2e5e2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27f7e5ac-3efe-4259-8a3f-a672b51ade60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f10c23b3-36b6-470f-ae47-808fce0af7db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "efe6fec7-d93b-4db8-a7a3-179959c35cba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c4e9f2d-8a5d-4b9b-96f1-70f2869ec9be"
                    }
                  }
                ]
              },
              {
                "id": "5143e387-d25a-4089-93eb-b3198fcafdf1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4d816f5-985e-4201-bf05-6cba3b7e1015",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c6703a-1432-4f1c-9de9-583127a45d39",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "971d9ce1-44a9-4113-9ed8-094bed46b62e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99eef814-f01b-4a97-9108-639be962b04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0431f6c3-e33e-4b3a-a6c4-da69b577b810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6027e3c6-f604-4fd7-b232-9ed52187177a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a17219-bbfd-432b-8c24-98fad9a30a1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6c183795-187b-4c3d-a2d4-29be17000bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cb4918-2986-47da-b994-3255d026cf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35c5df85-dbc2-4819-beb1-e5e691f5711c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70d92b9f-3eb4-4a46-86f5-1738ec306202",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6500e1a8-0964-4c85-9435-d416e49fa8c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4041fbe1-9f02-43c4-8a68-2b992fbbf522",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54481529-5a14-488e-b20e-a854be5edc77"
                    }
                  }
                ]
              },
              {
                "id": "c0007dc4-ef30-4c13-a37e-f0e1af0d572b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "66edd1c3-69b9-430a-ad15-5515a8f1aa18",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6664b39-7713-4d30-8308-68c78fa0f533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a64bf37a-cf21-4eae-a5a8-96a146a1329f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea068112-3c39-4f76-bb0e-dfb620e5bd1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6524796f-6aa9-4cfb-87de-7fe80b591b50"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6d77fc89-5072-43b3-a72c-befc37b15e4c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "57fa7d3d-2cb7-4f57-b605-733a622b6264",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "956cf645-6128-4bdb-9467-a9605a9496bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "32b35b06-8a03-4b54-bb6b-77bcfcd9b15d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09c3234b-7ec0-401a-add4-7bd9e44ee519",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76a5aa0e-ff27-473e-87a0-2742fb706d46"
                    }
                  }
                ]
              },
              {
                "id": "73044c39-452d-40ac-a75b-3513897bb5df",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e98b6514-b5f0-4543-892b-127934c3b003",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dfd97972-62ed-4b93-93ba-c8a122d3c605"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f56b326-68cf-42f9-a561-01c6d82b5ab9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17f97a0c-6873-47ac-a130-0a60e3fb510a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "030f4b9e-7e16-478c-8168-aed09cda09ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8af5e1a7-2afb-4026-82da-735362f4f84d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b02f5ddf-758f-4097-9727-0fad215b8b43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "973fa249-afa0-406c-bd46-751dda90b426"
            }
          }
        ]
      },
      {
        "id": "689f0af0-1ad8-4fcf-a486-1f82aea89d3d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "34011fec-886d-42b9-ba3f-3ebd770586c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc8af10d-c5ee-45fc-a980-ddafb304acae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b2358ba5-7887-4c8c-a77f-a7f985a2a6f5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f477a0ff-e5ec-47fc-a039-cd027a93d793",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c5c6938d-436d-46e7-8ec5-c67da35eb9a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a322342-05df-4ef9-8e48-f752d75fc973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b53cda89-2057-41f6-b4f2-6eb4eef2170e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b9c41e-13bb-46f7-b671-d9382205a9c6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17e5fba-da30-42e0-8152-8b3692f10d47",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d4af4f16-1c3b-4693-9abc-6f09f8dfd25c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb2345cd-aa62-4f75-b25e-6cf1d5623af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69f78e4f-7938-431e-8fbb-71b892ce5483"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84b1382c-61fc-425d-8e74-99bcbf0d8ea3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53d3526f-3c13-44a2-bc00-758cdb61cae3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bda4791-dc8d-4257-af7a-68f4d07dfea8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29230056-6d5a-4aff-bb8b-beb061b630ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5a706cf-3820-4b2f-ae8d-c24ced3971bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a8ed2edc-e6d2-4181-b7ed-6341d679862b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "02460cd3-7f60-46b9-ac4e-e9b7d3080240",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f85994f-8386-4b84-b511-5da976d1c922"
            }
          }
        ]
      },
      {
        "id": "1f3395f1-9b2f-4d47-b76b-50f3387c5950",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7b15137f-ee3e-42f2-85dc-eb9056d02ded",
            "name": "Negative Testing",
            "item": [
              {
                "id": "290e41bc-d406-4042-8b10-f26bcbcaaaea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3b9a8596-9b02-4aff-90f2-f4c9b02fefcb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6614f95-95ae-4ab7-b0d6-b09c18603ffc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "61c0a369-93ac-47f2-b612-57d1404eb591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f18afb-83ce-4c4f-bcb0-b0b202c83e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fe0f501-d208-40e3-9765-5ef74c732f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9326ff0-2fc8-4c95-aa78-55daf99fcd43",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817c72f1-b583-44a0-b906-46ab9a2573d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1f62fec3-78da-44d5-b792-8d0bcc3bcd6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc717cf-20a3-4124-b971-6b28893967d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17f9bcb7-4356-41f1-867f-5a146e0dac3c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd41b589-8206-46b5-86c4-c690c5560929",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16be123f-df3b-4cc1-821f-cf78d7a098d4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80a7de24-a072-48c5-a2e3-3d281e9fa7b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a633d646-c2b2-46c5-8c26-a664d1bb0761"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "894804b2-905b-44a3-96e2-f96bdc82e4f1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d2f449ec-8377-464c-be76-3cd7f0d526f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89b8e05c-8ade-4bca-94d0-a5f8593b1def",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f750dfd0-0b42-4312-99d1-0600d7321f03"
            }
          }
        ]
      },
      {
        "id": "792cc433-0c87-46f5-aba2-ff6933ead7ae",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "874fbd6f-fa82-4fb8-b994-4784e75c969e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3cc528c-29cd-4c4b-bc61-9ce29a266c2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dabb78ce-1c9e-4eda-88a8-be54ad820119",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03efec3-684c-45dd-b969-f632bf75e015",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dc001ba0-66da-4c81-afe4-fa5aefbb2ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9ce73a-03c1-491a-9f8c-57a4cda7ea59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdd4b36c-a723-4bc4-a832-afdb6001df0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6575de-9690-4832-940f-73a6318622fb",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736cc203-346f-49b2-b873-7a68e4c5c251",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d4174adb-403b-4f63-9d40-893036d58816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f44988f-9b66-440e-ab02-5439bcc14409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c2acdc2-c48e-429d-9af8-6bb1a77a1516"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1154e407-3da0-43de-bee7-eae1644a1137",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83fe4777-5c23-476d-99fb-2300a91b7e6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eabea5f7-d815-449e-9905-1f248362eff0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cad91a9-1dd5-46d6-963f-44ece61fa86e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2fd0919-54ee-456b-b1f8-04604948e08f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "58857ac2-d66d-4568-9814-1fe339e93405"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42e73602-dbb0-45a1-a00a-c939d9ca715b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b40900e-56ef-46ed-b124-2e765950bf26"
            }
          }
        ]
      },
      {
        "id": "b053e839-6984-41e8-baed-4b490ee950fc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e664a9e9-61ca-4f85-8707-0cd97863d19b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcede68b-6608-4d05-9c58-b062368260d5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c3d9dd20-ef40-4ebe-83b8-a273f2298237",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7019c0a7-7ad9-4a98-8a04-80e18ad8723f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f14ed6af-4a15-44fb-9a64-ceab19c7c57a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 110.32061068702289,
      "responseMin": 13,
      "responseMax": 859,
      "responseSd": 169.05490626102753,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671496723294,
      "completed": 1671496763015
    },
    "executions": [
      {
        "id": "3f217743-120f-43af-b3f2-4bd858758f4e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "aa8a28ca-6039-4e59-9601-9ea0306e6b44",
          "httpRequestId": "ec56ee52-7c0d-4d22-b284-890519e5c927"
        },
        "item": {
          "id": "3f217743-120f-43af-b3f2-4bd858758f4e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8543c9ea-aa6d-4962-9328-1a84953d935a",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 0
        }
      },
      {
        "id": "b9369dfb-8445-42bc-a033-011266621720",
        "cursor": {
          "ref": "dad9b19e-c140-4e9b-881a-b5b3a0ce7f5b",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d0f12e20-03a0-48f4-a7f9-195d9a8e4217"
        },
        "item": {
          "id": "b9369dfb-8445-42bc-a033-011266621720",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5ed31c5b-56b6-4bdf-a8c4-ef9c286a0739",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "b4d24a30-3fe0-4e42-ba23-3df02a315936",
        "cursor": {
          "ref": "e16b5e22-dd4b-428b-a4da-af9b071123b8",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "858787b0-64ce-4e0d-8c69-339f54227eee"
        },
        "item": {
          "id": "b4d24a30-3fe0-4e42-ba23-3df02a315936",
          "name": "did_json"
        },
        "response": {
          "id": "c6bb8c0c-a218-4541-9466-f4946ba4741e",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac69535-4d25-417d-88e3-770e3ee9e722",
        "cursor": {
          "ref": "4fe44eba-cbf9-4b4e-bf05-c1dcc867218c",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c7f8c637-b8bf-4004-abf2-941aa8a24887"
        },
        "item": {
          "id": "dac69535-4d25-417d-88e3-770e3ee9e722",
          "name": "did:invalid"
        },
        "response": {
          "id": "bbffffe3-16f1-4508-83e5-810331e353fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac69535-4d25-417d-88e3-770e3ee9e722",
        "cursor": {
          "ref": "4fe44eba-cbf9-4b4e-bf05-c1dcc867218c",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c7f8c637-b8bf-4004-abf2-941aa8a24887"
        },
        "item": {
          "id": "dac69535-4d25-417d-88e3-770e3ee9e722",
          "name": "did:invalid"
        },
        "response": {
          "id": "bbffffe3-16f1-4508-83e5-810331e353fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80304aa3-debb-44c3-8a9c-705dbe080210",
        "cursor": {
          "ref": "3d9cab9a-8adb-4339-ae8f-34999e824012",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5a0a2276-9189-4253-9e90-a451f0d51549"
        },
        "item": {
          "id": "80304aa3-debb-44c3-8a9c-705dbe080210",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b96b35ac-dc36-4281-8c44-afc288ccb2ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf520d4b-22af-451f-ba3b-87e8902ac3c8",
        "cursor": {
          "ref": "0fb48d11-3b3f-48c2-ab63-216d6edb1edb",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "427287dd-2e9f-4314-a305-afaa2afcd9aa"
        },
        "item": {
          "id": "cf520d4b-22af-451f-ba3b-87e8902ac3c8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "beb4149e-73a0-42fc-af20-919312b1e873",
          "status": "Not Found",
          "code": 404,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a1dcd0-e153-475a-a8a2-63f897ea37fc",
        "cursor": {
          "ref": "e729a667-5442-41d5-8087-2982e8ccd608",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "99c909be-cb74-432d-9621-71e6b2ea8dd3"
        },
        "item": {
          "id": "46a1dcd0-e153-475a-a8a2-63f897ea37fc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c32508a8-0504-4960-9567-45bf669492ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582fcb15-4b85-456a-9547-cd155bc65ece",
        "cursor": {
          "ref": "d3986f81-c707-4617-b6c4-0dd38144e945",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4ec141ad-c832-46e9-bea1-708b9b7d35c4"
        },
        "item": {
          "id": "582fcb15-4b85-456a-9547-cd155bc65ece",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "38de04b8-fc4f-413c-989b-2578389f2f10",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582fcb15-4b85-456a-9547-cd155bc65ece",
        "cursor": {
          "ref": "d3986f81-c707-4617-b6c4-0dd38144e945",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4ec141ad-c832-46e9-bea1-708b9b7d35c4"
        },
        "item": {
          "id": "582fcb15-4b85-456a-9547-cd155bc65ece",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "38de04b8-fc4f-413c-989b-2578389f2f10",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70796367-c195-4bc2-a9fd-3c72e6f0100d",
        "cursor": {
          "ref": "0d064d9b-a58b-446a-bd87-a38170c8e77e",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "809873bd-d5bb-4eac-baf8-fc78c5b1e831"
        },
        "item": {
          "id": "70796367-c195-4bc2-a9fd-3c72e6f0100d",
          "name": "identifiers"
        },
        "response": {
          "id": "496af21c-adde-4d83-b1be-35eb1eae4801",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc4c071-30e3-4d3f-a9d9-bb12456c99b5",
        "cursor": {
          "ref": "eb6a9aad-8d9e-4c8f-bdc6-cb8386ea38fd",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0abb6374-5fdf-4de1-a7d9-0146c6e46431"
        },
        "item": {
          "id": "ccc4c071-30e3-4d3f-a9d9-bb12456c99b5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "28f70c99-5581-4055-a324-a03c164d7c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc4c071-30e3-4d3f-a9d9-bb12456c99b5",
        "cursor": {
          "ref": "eb6a9aad-8d9e-4c8f-bdc6-cb8386ea38fd",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0abb6374-5fdf-4de1-a7d9-0146c6e46431"
        },
        "item": {
          "id": "ccc4c071-30e3-4d3f-a9d9-bb12456c99b5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "28f70c99-5581-4055-a324-a03c164d7c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08999bd0-6ee8-49f2-981a-9c7bd99856af",
        "cursor": {
          "ref": "eb119d1c-cf8a-4fee-9791-16e8c357541e",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c6c54e40-0a2f-4adc-9a0a-02b1fb52672f"
        },
        "item": {
          "id": "08999bd0-6ee8-49f2-981a-9c7bd99856af",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a750942c-97ff-40b1-ad35-d68672d94975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43f0f79-1db4-4f47-9ea5-1997749b2e6d",
        "cursor": {
          "ref": "19c2af5d-f755-4911-af29-faefd56bb575",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fab7f669-6edf-4ade-b988-1a1676565158"
        },
        "item": {
          "id": "b43f0f79-1db4-4f47-9ea5-1997749b2e6d",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "2a6c991f-e2ad-4d12-a75b-76d874907947",
          "status": "Created",
          "code": 201,
          "responseTime": 823,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "507e991c-a041-433e-9f15-11077d77b46c",
        "cursor": {
          "ref": "11cc6e5d-1209-4402-b031-a26d3ab3631c",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "933df21b-57d2-4a38-969a-465b78c7510d"
        },
        "item": {
          "id": "507e991c-a041-433e-9f15-11077d77b46c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8ff4524a-0e78-4406-aae3-eab90e554b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693c3f76-8e4f-4865-8af5-ea0f477373d6",
        "cursor": {
          "ref": "975019b6-aecc-43a5-80f0-a80029752f0c",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c05d0d17-b8b0-4155-af3c-102ce6ea1947"
        },
        "item": {
          "id": "693c3f76-8e4f-4865-8af5-ea0f477373d6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a37a7b63-e631-484c-95ef-019790a96ca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37de47c8-c3b8-4f4f-8091-ea770020ae5a",
        "cursor": {
          "ref": "d2573b3b-59cd-4bab-8121-f8f523539c35",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "af9e77c3-c5dc-4b1a-9287-a8a70e1975b4"
        },
        "item": {
          "id": "37de47c8-c3b8-4f4f-8091-ea770020ae5a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "afa20abc-1887-48e2-82b4-45d3573d08ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4908fb3f-a28f-436b-92f5-05f58148bbdd",
        "cursor": {
          "ref": "f018f374-5862-4627-b5a6-8885604c9c63",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ae213f91-21df-48d0-816d-ac276f31881e"
        },
        "item": {
          "id": "4908fb3f-a28f-436b-92f5-05f58148bbdd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "237d8216-f6ca-4d75-8f2c-6a46716b69b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a1a0bc-ed92-4129-953c-3fcd149e4f4d",
        "cursor": {
          "ref": "04f08a4c-3f58-4a0e-b083-e8c7dc2a64f6",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d8875201-6f83-41a0-a4fc-342adf293171"
        },
        "item": {
          "id": "46a1a0bc-ed92-4129-953c-3fcd149e4f4d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ad9cf4b0-7fba-4f88-b03b-71babbe3f37b",
          "status": "Created",
          "code": 201,
          "responseTime": 529,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "ff070a8f-2d3c-4d8c-80e4-3c612fa42660",
        "cursor": {
          "ref": "461b4f3c-5da3-4982-8fba-cb82cfa575fe",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "71f91454-d35a-4965-b3bc-a00382c0eb0b"
        },
        "item": {
          "id": "ff070a8f-2d3c-4d8c-80e4-3c612fa42660",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "abaf9656-c336-4b0f-ba14-0d7a75a63be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d5c259-661c-41fa-937d-e5e224b6e4fa",
        "cursor": {
          "ref": "8d24b6ea-e6b8-4d7a-af27-f9224fe4c0c0",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ed4d7dd0-d3b2-4f07-b48d-8eec1775eb8b"
        },
        "item": {
          "id": "d8d5c259-661c-41fa-937d-e5e224b6e4fa",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "079d0a32-9077-4da7-96c9-37ca2d1c4c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ac4dc5-5ac7-4068-aa3c-e0536abd9850",
        "cursor": {
          "ref": "474766c9-bedd-47ec-83aa-f0bb8fd62ae8",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1113b880-d4be-4f9b-8f3d-2330e980465c"
        },
        "item": {
          "id": "a3ac4dc5-5ac7-4068-aa3c-e0536abd9850",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "54813da8-a7d8-4709-9776-e7df9bc42150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a26fe5-1c90-4034-ae56-7e480d1458f7",
        "cursor": {
          "ref": "0e03a0c7-734e-4fbf-8b74-0374289b5528",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1ad1e5d6-6e37-4b81-a18e-b87223fb7429"
        },
        "item": {
          "id": "86a26fe5-1c90-4034-ae56-7e480d1458f7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1b9a9542-a841-4f52-a75d-2b7ee274333c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da01c1a-8dab-422f-9695-9449dcf1da9b",
        "cursor": {
          "ref": "0359cc28-1870-43ca-938e-b3b164fd0941",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d9c0a35f-cd05-4724-a52e-b0398efa12d7"
        },
        "item": {
          "id": "6da01c1a-8dab-422f-9695-9449dcf1da9b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bc2596f7-898c-4bb6-b2af-138a56ef169e",
          "status": "Created",
          "code": 201,
          "responseTime": 557,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "844042bf-e26a-423d-94e6-46aea8912351",
        "cursor": {
          "ref": "8a3c119b-43d8-43e7-b5b6-2e06441951ff",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "936ead49-321b-4646-a392-d15eb46bc3e0"
        },
        "item": {
          "id": "844042bf-e26a-423d-94e6-46aea8912351",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "328cee35-5531-425f-acd2-dd1ce727856b",
          "status": "Created",
          "code": 201,
          "responseTime": 859,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2a9127c7-a3a2-40fe-be56-c63a28316b15",
        "cursor": {
          "ref": "98b6de3b-8e97-42c0-a77f-7d1a30ed6306",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "97961c1d-7ae7-4316-97e7-4e8223d1bff4"
        },
        "item": {
          "id": "2a9127c7-a3a2-40fe-be56-c63a28316b15",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "04134f75-28bb-48c3-954b-8cf817a7a9f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1effc91-a30a-497d-8806-08a8b2e9dfc8",
        "cursor": {
          "ref": "27f92028-d847-4fed-8542-8042495eea88",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d018e4ad-3cd2-4752-b944-d91034aa9068"
        },
        "item": {
          "id": "e1effc91-a30a-497d-8806-08a8b2e9dfc8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "617188e2-2cf9-42a5-9dc3-a714511ff7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27fd6406-c10f-44f2-8d98-324d42bd2281",
        "cursor": {
          "ref": "5f56dcbb-a7a2-4d63-86c9-bd17f36f42f1",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "382f9e72-3b17-45a4-ad2e-2ca46427349b"
        },
        "item": {
          "id": "27fd6406-c10f-44f2-8d98-324d42bd2281",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5806a427-020e-4c20-85ba-b343d5aa8ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23953074-6171-41c6-a2e2-054fdf6e1030",
        "cursor": {
          "ref": "9d1c9675-1ee5-4a4e-8573-2c252bd27033",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "51e1030c-0afd-4d6a-83dc-4217db9deec3"
        },
        "item": {
          "id": "23953074-6171-41c6-a2e2-054fdf6e1030",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "564c2754-d04f-4175-94bd-25e38fd0947a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3029dbe0-ae63-493c-864e-82c2d7e95bd3",
        "cursor": {
          "ref": "a074d346-89e9-42ed-a5c2-b824c41a3229",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "45f04d8c-5ec4-4322-96d6-e8069783e09d"
        },
        "item": {
          "id": "3029dbe0-ae63-493c-864e-82c2d7e95bd3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5c219177-84b7-4e14-82e2-31d0da4f983d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fce77f5-88eb-4454-9de0-ff6c4fd50a50",
        "cursor": {
          "ref": "3ee48b72-c6a0-47e8-b477-7228dcee23f1",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "37a094f9-f790-408a-aac0-6de80806230e"
        },
        "item": {
          "id": "8fce77f5-88eb-4454-9de0-ff6c4fd50a50",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a3b6901e-7064-4dae-b426-c90e098bb10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d268623-dbf7-47b9-a10e-87224f688f3b",
        "cursor": {
          "ref": "378d2321-3595-4a75-b097-fd1becc9a96a",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "34b08e2c-49cc-49f3-afaa-bbd3d7f101dd"
        },
        "item": {
          "id": "8d268623-dbf7-47b9-a10e-87224f688f3b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ee8ea060-4a33-4222-8b0d-9acb70a95697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d404c9e5-62ec-417a-bee6-91ef61b88e03",
        "cursor": {
          "ref": "8d864af8-c9d2-4c7c-8187-908cd47dd7ce",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7aefa075-1bc0-4b80-a7fa-a0221c894f4e"
        },
        "item": {
          "id": "d404c9e5-62ec-417a-bee6-91ef61b88e03",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7882e8bc-1f60-4c42-a707-8432ece99893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a689fe-2ff3-4d4a-a5f0-e7a505e053ee",
        "cursor": {
          "ref": "63fc54a8-0982-4356-87fc-cccbab4f86d8",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "78af8843-53d3-45ff-b9ec-2bd13811edbd"
        },
        "item": {
          "id": "a9a689fe-2ff3-4d4a-a5f0-e7a505e053ee",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8b38c855-1e96-416e-9195-df402443e304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5142180c-7859-4b64-9e3f-ba3fb4f2492d",
        "cursor": {
          "ref": "f2457b51-5bad-4ad8-934b-84649f0f9988",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d749a862-d1bc-411e-8ed8-4ddaed933172"
        },
        "item": {
          "id": "5142180c-7859-4b64-9e3f-ba3fb4f2492d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a1522964-933f-488b-95dc-6383c98a2468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584ad333-e350-4d46-b6b3-4bd523d666fb",
        "cursor": {
          "ref": "52db2278-78f5-49c5-94dc-e251955b4b8a",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "edfaa6c9-de99-4a2d-84a9-d3a80c58d8d9"
        },
        "item": {
          "id": "584ad333-e350-4d46-b6b3-4bd523d666fb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0fca0b17-9a41-446f-817e-6a9d4991b7d2",
          "status": "Created",
          "code": 201,
          "responseTime": 685,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "7b83e7c1-4bd8-409a-b16f-46a5de6521a8",
        "cursor": {
          "ref": "edd5e3dc-a13d-4911-ab83-2bc79625408c",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a14bcb1c-f3e1-4da6-a449-4d038e0d182f"
        },
        "item": {
          "id": "7b83e7c1-4bd8-409a-b16f-46a5de6521a8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1b31d899-6037-4aba-b4f9-984532507885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a82002e-afee-47c7-8815-c5be28e7abd4",
        "cursor": {
          "ref": "1c23a51f-bb66-49a0-bfef-4fd9022f764b",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7e03fd90-422c-474b-ba68-5131b7b8ed18"
        },
        "item": {
          "id": "9a82002e-afee-47c7-8815-c5be28e7abd4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1ce36987-c8ac-433c-9b0d-986c6a02d4fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba205ef6-1c6c-4143-bf08-16642f896bcd",
        "cursor": {
          "ref": "0d5d835e-1d69-429a-963d-8c84279b7055",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c6b6bdec-17ab-4f43-aaa4-73965ef8609e"
        },
        "item": {
          "id": "ba205ef6-1c6c-4143-bf08-16642f896bcd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e90d77d4-c032-4ba5-9f10-1c878b5adad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f3e47c-9f9c-4b16-bcbd-eacbbfcee516",
        "cursor": {
          "ref": "4c9d73fe-6c12-4333-9064-da64fe512b72",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3b698165-f7d5-4887-a65a-a8ba93283886"
        },
        "item": {
          "id": "78f3e47c-9f9c-4b16-bcbd-eacbbfcee516",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2044e0eb-f84a-42bc-8ccf-e10134518910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20b1002-ec55-4f1f-b410-e346285cd8b5",
        "cursor": {
          "ref": "3b5e599c-dd6a-4d71-8397-c74e54ac757c",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0b0dccd8-4374-4973-b08d-9bb116e4f027"
        },
        "item": {
          "id": "c20b1002-ec55-4f1f-b410-e346285cd8b5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b8377cdd-e1d8-4fde-8d45-7e47d142fa8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949fc7a7-ec6b-4a5b-8b2c-bb3208625b83",
        "cursor": {
          "ref": "575cfe25-e1f8-4776-b904-9d800262d237",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "22f8c29a-737b-4e53-81fc-7291f68f1117"
        },
        "item": {
          "id": "949fc7a7-ec6b-4a5b-8b2c-bb3208625b83",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "615e313e-a1f2-46e8-b074-a2513bb2186b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8702a622-1f2d-490d-804d-4cbb9b0fcf06",
        "cursor": {
          "ref": "efe65845-1c35-4df5-978a-43113e1290de",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d3020dd8-3958-4d10-8e7e-3368ca883d49"
        },
        "item": {
          "id": "8702a622-1f2d-490d-804d-4cbb9b0fcf06",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a9f9d50a-97f8-433a-bb92-fed552f44131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737272df-b5e4-4402-bff6-312d35e03dfc",
        "cursor": {
          "ref": "1fe82bbc-083a-497c-97e2-8f796fb3c041",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c1597738-4ba7-4be4-81be-dfa971594d0c"
        },
        "item": {
          "id": "737272df-b5e4-4402-bff6-312d35e03dfc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "36574b86-6c79-46ac-943c-a51ad98328c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6f4e4d-9ef9-4de1-ba8a-e3f28853c0f6",
        "cursor": {
          "ref": "9f38c394-afe4-4a67-aa61-d01c0e970b40",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "10cd5594-ff0f-42f3-9a03-832af76a3cc5"
        },
        "item": {
          "id": "0f6f4e4d-9ef9-4de1-ba8a-e3f28853c0f6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c8fb78c0-08d9-414f-804d-c11a9233eea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957f21de-48e1-41b3-a172-d1189aeaf3e3",
        "cursor": {
          "ref": "c010be99-5ba4-4b33-8e1f-3a8e8bbe3a20",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bd45f445-4c5d-4afc-a236-363337b71500"
        },
        "item": {
          "id": "957f21de-48e1-41b3-a172-d1189aeaf3e3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ccbd562c-fd16-4fbf-9ff5-e5f89b2c2fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8319539b-d8dd-4cf6-b6fe-52b85ac18848",
        "cursor": {
          "ref": "1dc61828-c3aa-478a-8302-0be77efa71f4",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d433abff-f234-41f0-8497-0cd4232265ba"
        },
        "item": {
          "id": "8319539b-d8dd-4cf6-b6fe-52b85ac18848",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "979a8566-52b0-400d-9cc2-43c3c01850b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d73eee34-c492-4340-960a-be25283202e1",
        "cursor": {
          "ref": "06d52a79-f00d-4723-ad42-ad3f1dc6e7cf",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "eaeb5d89-5887-4f1e-b7ec-f90417013c8c"
        },
        "item": {
          "id": "d73eee34-c492-4340-960a-be25283202e1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4efa5db6-15d9-4f05-9d6f-ab22edc9dd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b270ec72-ce01-4282-8181-adde1d896fcd",
        "cursor": {
          "ref": "6728c85f-f8f0-42d8-8004-8012d15ad7cd",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2bb9b256-0b71-4bab-91e0-d9cd0a2abbfa"
        },
        "item": {
          "id": "b270ec72-ce01-4282-8181-adde1d896fcd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ce780b87-e343-41f0-be4a-4d038a51bcec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 343,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4be2a56a-5667-4d3f-8b8f-92d0f292368d",
        "cursor": {
          "ref": "298926d2-1220-4457-957d-d03a11498280",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "eb505f39-463f-4812-bb10-a95c01657010"
        },
        "item": {
          "id": "4be2a56a-5667-4d3f-8b8f-92d0f292368d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e75ae788-dfa0-4e68-b9f1-7877b7841800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73fedc9-13fd-4e40-a4c2-974750d8443c",
        "cursor": {
          "ref": "f9d80516-d826-4322-88bf-43a9ff48fbc7",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9b94ec17-5f5c-4d78-993c-fd08aa60d6e3"
        },
        "item": {
          "id": "f73fedc9-13fd-4e40-a4c2-974750d8443c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bff900e7-98c7-4c59-ac84-75d3392481f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c03f2b3-e5be-4053-b9ba-92669810c393",
        "cursor": {
          "ref": "3bab4e88-dc5a-4634-9c29-de553a335117",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5f5e184d-2bbd-4aff-87e0-df8a0500592f"
        },
        "item": {
          "id": "7c03f2b3-e5be-4053-b9ba-92669810c393",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "79ab1193-79df-4f60-a0e5-a5382691d420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9cfe3d-2458-4f32-bd25-0084e71e76c2",
        "cursor": {
          "ref": "3ac3babe-354c-44a2-86c1-5d86c5edce7e",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "efd29bd2-42ee-4de0-a79e-0fd725a4ab8b"
        },
        "item": {
          "id": "4d9cfe3d-2458-4f32-bd25-0084e71e76c2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "293783ff-8635-4f16-a59d-f14e14f888b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31af8cb1-e614-44ca-aad1-29d9506c31e7",
        "cursor": {
          "ref": "f4ffc840-5cf3-4a1c-9ce7-ceb7a106a6cd",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1d853ed5-2f7a-400f-a76e-b79249829624"
        },
        "item": {
          "id": "31af8cb1-e614-44ca-aad1-29d9506c31e7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d44e5041-3e35-4f79-b2e9-988e8d81efd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dc1c83-546c-44cf-ac5f-39d3cdedafbc",
        "cursor": {
          "ref": "899eaafc-6412-4e77-92a1-c7e15302bd03",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d8ecaf88-2d53-4045-b9cd-53fbda8e77fd"
        },
        "item": {
          "id": "30dc1c83-546c-44cf-ac5f-39d3cdedafbc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "15a6aff9-7fca-4d77-b7cc-8a7f3d4439ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10597cd9-71ef-4128-bfe2-3dc22f1053af",
        "cursor": {
          "ref": "e9f78a0a-5acc-47dd-9af8-087a1baeef31",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3687bff1-d63e-468c-8108-41ab48190df8"
        },
        "item": {
          "id": "10597cd9-71ef-4128-bfe2-3dc22f1053af",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f21d6378-e21b-4e8e-8e8e-97dc9785dc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "02523ea6-cb96-40d0-ad5f-b86339519606",
        "cursor": {
          "ref": "ea314713-4148-4d12-ae7c-813dbd048d9f",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6ac211e8-0803-480f-9d46-1a576827cae5"
        },
        "item": {
          "id": "02523ea6-cb96-40d0-ad5f-b86339519606",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2d54b4f4-43a9-4c03-8999-3a22c3e7dbd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a065690-75ce-4811-b4e9-0c7162ec4a7b",
        "cursor": {
          "ref": "258aff62-3242-495c-94b8-c1d4978d3761",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "52f27222-05b1-46b7-a137-4c34907f6f36"
        },
        "item": {
          "id": "4a065690-75ce-4811-b4e9-0c7162ec4a7b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b9195085-e318-4be4-864f-e90b501154fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b00eb6-b53f-47bc-80c1-246e2d6b9f8f",
        "cursor": {
          "ref": "0f147ca0-0ef3-419c-a214-f203108c0a36",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3f570285-0dec-4913-b40c-9e9c2743cc11"
        },
        "item": {
          "id": "51b00eb6-b53f-47bc-80c1-246e2d6b9f8f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9d980d34-b4e9-4243-aac3-dd0228e73a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7a4209-050d-4b36-8801-d2a96df5cf44",
        "cursor": {
          "ref": "667b9a21-e08c-4b87-9bd8-0b3e7b165518",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1f6d74b8-8810-473d-9930-79d06b929663"
        },
        "item": {
          "id": "2a7a4209-050d-4b36-8801-d2a96df5cf44",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "976bcea7-c338-464a-b80d-ae5c5e309e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e7e594-a9d7-4f89-8705-e4d40284599a",
        "cursor": {
          "ref": "14d3bf08-184e-4c42-93ab-f943afb2e6ab",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "37188680-eaa4-4056-ab3b-c0033d694575"
        },
        "item": {
          "id": "22e7e594-a9d7-4f89-8705-e4d40284599a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8ff3d622-3337-49cb-8753-cf051ba069a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b578cf-d4ea-42bc-bf97-98ce687582f6",
        "cursor": {
          "ref": "21a2ca7d-8b90-4960-ad71-43b4a1f87243",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "48c06c73-0ef5-4bce-8d77-461ea95e1966"
        },
        "item": {
          "id": "88b578cf-d4ea-42bc-bf97-98ce687582f6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "77234d76-22d2-474a-9bdc-dca2e0dc4f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338b34cf-040d-4507-9423-c3e2792f5a02",
        "cursor": {
          "ref": "c2296a09-48ea-4596-9262-7f9ae40f8b16",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "af066507-5d93-4749-845f-119b8815bc15"
        },
        "item": {
          "id": "338b34cf-040d-4507-9423-c3e2792f5a02",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "44f6725e-2307-4d0e-b0d7-32db4331bd18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f504f8-2ac7-4d43-ac4b-e4da897dd692",
        "cursor": {
          "ref": "6a010a1b-5111-499e-81a7-eff78a801ce6",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2ed2c34f-f02f-4566-a82f-f0f941f2e49f"
        },
        "item": {
          "id": "21f504f8-2ac7-4d43-ac4b-e4da897dd692",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7e0286d1-e196-437f-b29d-37c99d2d07b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debba915-1bf0-4494-bc72-55c3529ac453",
        "cursor": {
          "ref": "ac10d740-eb48-4b9c-998f-9737e5efaa89",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f1c54586-223d-431a-b3d9-fbd503c1c524"
        },
        "item": {
          "id": "debba915-1bf0-4494-bc72-55c3529ac453",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "da01319d-07dd-4239-af96-2df34a3ecf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9029dc27-04d5-4454-85d0-42871ecb7430",
        "cursor": {
          "ref": "ed026464-d5be-4f29-b706-32b1f94f012f",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ef9cedf6-66cf-46ae-b6de-5d7b59b8e21c"
        },
        "item": {
          "id": "9029dc27-04d5-4454-85d0-42871ecb7430",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "350464ac-5b01-461f-8e1f-70e4ed170f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c94bf8-6bf1-4dd2-8577-8df85bd5f549",
        "cursor": {
          "ref": "73ee0625-eb08-4dc3-a2e0-771aca5c7317",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "30e4adc3-29a1-4db4-a37a-d8b65e525af8"
        },
        "item": {
          "id": "95c94bf8-6bf1-4dd2-8577-8df85bd5f549",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "af5b461c-26d4-4a97-9311-90116423a8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfe6433-fe93-478f-8677-e864f5de39fc",
        "cursor": {
          "ref": "fa6666f2-b3e3-409b-9f2f-f9fcce6b9e00",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ba818126-4f33-49f6-a019-f71bc01dcd70"
        },
        "item": {
          "id": "ecfe6433-fe93-478f-8677-e864f5de39fc",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "435bfa8a-2a96-4108-b99c-da3989c52f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3645315c-e8a5-4918-be87-b7171a1a253d",
        "cursor": {
          "ref": "40a44a1c-fae6-4a2b-9104-73efddd1579b",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cdaf17d6-7078-4c5e-97e8-020128e510ea"
        },
        "item": {
          "id": "3645315c-e8a5-4918-be87-b7171a1a253d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7cc7d0c0-f923-4474-9573-11545a473dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb04e1f-8045-433e-adb8-6921553e2d7d",
        "cursor": {
          "ref": "2f08ded4-fcce-4b15-b268-58df839ac5bc",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f3fe094a-2def-4c47-9e04-66b84c84bb3e"
        },
        "item": {
          "id": "7fb04e1f-8045-433e-adb8-6921553e2d7d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cb96948b-3717-4cf0-aa01-c53f46bfa43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e0cf71-9981-4dfd-963d-6601bde3fad3",
        "cursor": {
          "ref": "f44021d8-71c9-4802-955b-7dabb20068e4",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9ee9f11d-68be-42ec-abc8-40583f4d6713"
        },
        "item": {
          "id": "36e0cf71-9981-4dfd-963d-6601bde3fad3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "58146656-6015-4554-95ee-162f79d81678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99eb15df-8b18-4a78-9056-6fe7f594e19e",
        "cursor": {
          "ref": "2d63a4eb-38f2-49b0-9d9a-b6666d4c33f1",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f7cec8ea-10c3-427d-a955-593ad4663057"
        },
        "item": {
          "id": "99eb15df-8b18-4a78-9056-6fe7f594e19e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f30baff6-77c4-45bc-b851-c8634de20a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d508d088-9190-43e5-ad0c-4417544732cc",
        "cursor": {
          "ref": "317db5a0-ca05-4cb3-9f72-113bcb008b09",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "55831901-040f-437e-bd40-0370fef5fcb8"
        },
        "item": {
          "id": "d508d088-9190-43e5-ad0c-4417544732cc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c0af9e09-b730-49f6-ac2b-35b5964e7cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033d0c97-c2a8-42e8-891c-c4a3ddf55ece",
        "cursor": {
          "ref": "f63397aa-a741-4676-a593-1cb8a994282f",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "36c2326c-32cd-4530-a945-1f40f568c2af"
        },
        "item": {
          "id": "033d0c97-c2a8-42e8-891c-c4a3ddf55ece",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "44956092-0908-4c9f-8ae6-260894eab53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bf9877-67aa-4935-bcf5-fd057ea407b2",
        "cursor": {
          "ref": "c321fca5-197c-4bef-b5db-de9799ae1b30",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fe9d5ea4-a9cb-4572-bfd8-9d60f4fd6fdb"
        },
        "item": {
          "id": "f9bf9877-67aa-4935-bcf5-fd057ea407b2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2ebb6b2b-03ca-4a98-aba0-975777c97482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf04792-8815-4bda-85b1-0f56e8bd93a9",
        "cursor": {
          "ref": "a355f38d-5ed5-425f-8461-f964805cc6a3",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1c1f480c-1aaf-4696-a6c7-8718b6858fbc"
        },
        "item": {
          "id": "ecf04792-8815-4bda-85b1-0f56e8bd93a9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f2a088f1-c8a3-49ec-80f1-dd03468c7685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ef5c08-71a1-4577-8a8c-436cc7d39184",
        "cursor": {
          "ref": "b66bd04d-578b-4752-b049-50b83942e1b5",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ab81125f-3ae4-44a8-b8b7-1904d2f7a960"
        },
        "item": {
          "id": "27ef5c08-71a1-4577-8a8c-436cc7d39184",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "aebab12a-90cc-49de-bcae-8a720822f0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19f1f1a-4b8b-459e-acd6-3f55f71fbb82",
        "cursor": {
          "ref": "e1b86663-8cf0-438b-a1e3-6d7a1cb3b9b6",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a468df44-f85c-4015-9e99-9e9ba1f551e8"
        },
        "item": {
          "id": "c19f1f1a-4b8b-459e-acd6-3f55f71fbb82",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5d604dac-2025-4b08-8022-b6dbfac41ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9166be8f-dd00-442e-8581-dfc10749f0f4",
        "cursor": {
          "ref": "25bdaa81-9e2f-44aa-a4a4-5d95e1a1269e",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "65127271-658c-4fce-8ec8-a1bc58ff711b"
        },
        "item": {
          "id": "9166be8f-dd00-442e-8581-dfc10749f0f4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5b1f0e32-1bfe-44c2-965f-651e43ae4ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f15bd27-f136-473a-904b-0e8810265517",
        "cursor": {
          "ref": "c359fea8-49de-40fa-92ff-34ca25431e5f",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1a4b60d3-62e1-43b2-9cd0-db9603162dac"
        },
        "item": {
          "id": "1f15bd27-f136-473a-904b-0e8810265517",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "84e6bed9-cc6b-4a18-8bf7-1d8c0d029946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f514ec3-bb0d-48c0-88fc-d1f71f38fd8e",
        "cursor": {
          "ref": "595fcf10-2356-4621-8a71-427315582393",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "16c1a78b-9306-4870-83a0-e1d4c930007a"
        },
        "item": {
          "id": "4f514ec3-bb0d-48c0-88fc-d1f71f38fd8e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b84d657a-0400-4ab0-87e9-5ee31b62836e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a916bc78-0beb-4550-a072-efa9d38f54cf",
        "cursor": {
          "ref": "a1134609-53d1-4181-bacf-09fd80670c22",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "97fc6402-7b63-4baf-a4b4-9751f2c9c385"
        },
        "item": {
          "id": "a916bc78-0beb-4550-a072-efa9d38f54cf",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "77fd6e74-2488-4a25-8ff4-16ba0de2bc9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3f0c9a-925e-46b4-8b36-1c8332e81553",
        "cursor": {
          "ref": "3d7394ec-84a3-4ca5-84da-2573fdc53d7d",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e475400d-5bae-45c5-a652-6878ebf2b22f"
        },
        "item": {
          "id": "fe3f0c9a-925e-46b4-8b36-1c8332e81553",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "417f0a18-8c11-45c2-9d19-127d9ddcb011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339b9e9c-a010-40c0-8b72-3fe76ccf1a71",
        "cursor": {
          "ref": "a622584b-3932-47f5-81ed-d575dd4b3b4b",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "21692b4a-11cb-4fd5-a985-e33270a466c7"
        },
        "item": {
          "id": "339b9e9c-a010-40c0-8b72-3fe76ccf1a71",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f979b373-9890-4dd7-9e34-01f297c77d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcdafe7-670c-45d5-9815-0ec650ef1be0",
        "cursor": {
          "ref": "3cfa9ac7-5949-44b6-8773-eb97bd001eea",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "67115e25-a75d-4280-8e09-4648c37f9ec6"
        },
        "item": {
          "id": "dfcdafe7-670c-45d5-9815-0ec650ef1be0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "aef02b42-cbc0-47ca-9d6e-257bbcd956bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87edb27c-7f1c-4f88-bd99-7cb38ac9e984",
        "cursor": {
          "ref": "d0c885cc-e61a-4b61-862f-41dc994b4f89",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6003a4fd-0a4d-4dde-bd08-fd21f0b3c8eb"
        },
        "item": {
          "id": "87edb27c-7f1c-4f88-bd99-7cb38ac9e984",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6ddc5c03-c235-4751-a891-2efc1c21acce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0948ea-6890-4e96-8cdf-20f0888a9465",
        "cursor": {
          "ref": "344fcd06-f780-4bd2-96c9-c51ebf2f1636",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7d21054a-19fc-46b7-8f71-6e98001a74e1"
        },
        "item": {
          "id": "1d0948ea-6890-4e96-8cdf-20f0888a9465",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0d5b517c-f956-49b0-9462-5769aaac708d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7abb726-59f7-4717-b91a-7890bd4dc0ad",
        "cursor": {
          "ref": "464c914f-942a-4c84-8ecb-5c09e0db0120",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cb7144d3-98ef-4e71-a0dd-505a042296cb"
        },
        "item": {
          "id": "f7abb726-59f7-4717-b91a-7890bd4dc0ad",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d9df3158-02e7-400d-94d9-7cf3322aaa97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0440366e-53f0-4bc5-b5c4-9e56171850ca",
        "cursor": {
          "ref": "59ad324b-e219-432d-b9a4-3128821c6a70",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c8eb6d89-3b3c-4a04-af98-ab96bba5181d"
        },
        "item": {
          "id": "0440366e-53f0-4bc5-b5c4-9e56171850ca",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d4cff23b-11c0-41a9-835f-25f7daaac630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0617a6-7647-491d-9db0-dd1869ef86fe",
        "cursor": {
          "ref": "46985ab0-e91b-4963-99ce-68aa28f8b9d5",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "48c2a0e0-1df8-4dab-9a7c-c25a7bc90883"
        },
        "item": {
          "id": "5a0617a6-7647-491d-9db0-dd1869ef86fe",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e89b402e-7e5b-423f-ac80-c13cc624fbbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e28a5f0-6c53-418a-8b83-3ffd104caf2c",
        "cursor": {
          "ref": "c8f2b281-362a-4a4a-bb24-c5775311e886",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8880274b-4bc5-4ab8-96aa-30a8566dd0a5"
        },
        "item": {
          "id": "0e28a5f0-6c53-418a-8b83-3ffd104caf2c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8183bc27-2ee1-4729-9670-1e31456694cb",
          "status": "Created",
          "code": 201,
          "responseTime": 643,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "50fd4e0a-1fba-48ea-8165-0eda12f036ec",
        "cursor": {
          "ref": "a3c3cc30-fd67-41fb-899f-4bc31124d046",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ee0e0171-50d7-46e6-817d-daa98f0a41fd"
        },
        "item": {
          "id": "50fd4e0a-1fba-48ea-8165-0eda12f036ec",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8aac8110-d75b-412d-81fb-a4d876246a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736f52ed-9942-46aa-a95f-5cd73cd1726d",
        "cursor": {
          "ref": "5f456e69-0d90-4fc0-af90-039a102c7224",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "921db3e8-fff4-4260-9083-945068f70bf6"
        },
        "item": {
          "id": "736f52ed-9942-46aa-a95f-5cd73cd1726d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "074785dd-e273-4028-9d7a-48656756153a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5845dcc-1dc9-4c69-a96a-db506ea71f8c",
        "cursor": {
          "ref": "aa1e678c-7da2-452f-91b4-ed4e61827c18",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8162bf08-fd6f-42c3-b4a2-b82eb14198d1"
        },
        "item": {
          "id": "b5845dcc-1dc9-4c69-a96a-db506ea71f8c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6b67fa00-2045-4e41-b7f8-01cc2b20703d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec795248-15ef-4115-8383-fcd3fc59bb2a",
        "cursor": {
          "ref": "4baf8f78-c3df-4a29-a37d-21748b5d2a61",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6bf97799-0b8d-44d3-81c2-5745fcc22fa4"
        },
        "item": {
          "id": "ec795248-15ef-4115-8383-fcd3fc59bb2a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6ad776df-f2f0-4e4c-86e7-41c736cde552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b41914-6b57-4913-b0cf-a840457713ca",
        "cursor": {
          "ref": "45f3030b-b000-431a-b8ea-2f9cb88fb346",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4034b4f0-e066-4f46-a275-28ba7ae984b7"
        },
        "item": {
          "id": "c3b41914-6b57-4913-b0cf-a840457713ca",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4171e56f-55a3-41cc-8a38-006dc0c2230d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4cca71d-a68c-4531-8c80-97915e5e6d81",
        "cursor": {
          "ref": "4f1f278d-71a4-4917-87b9-130b21499786",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6952a989-c074-4c91-83b4-c28dc0727d77"
        },
        "item": {
          "id": "c4cca71d-a68c-4531-8c80-97915e5e6d81",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e80591f0-78dd-4635-be41-f4a48a2f5ccd",
          "status": "Created",
          "code": 201,
          "responseTime": 638,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "87cd02f9-1eed-4708-8e8c-2fd13b160898",
        "cursor": {
          "ref": "f9c83eaa-89ae-4ef1-acd1-cffc24f56f65",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2fb5d02e-50f7-4c4d-945a-530760699320"
        },
        "item": {
          "id": "87cd02f9-1eed-4708-8e8c-2fd13b160898",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "89778e81-322e-42c3-ba0f-902f23a06f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ac53c3-60b3-4047-9367-8a14fa781012",
        "cursor": {
          "ref": "1585bcd1-1bd1-4ede-bf53-6ff27aa37cc9",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1e5eaad2-e8de-427e-a2a7-5e150a30c1db"
        },
        "item": {
          "id": "f9ac53c3-60b3-4047-9367-8a14fa781012",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "691dcb45-d8bd-43eb-8f7c-0816a03ca44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ccd326-0d8c-4772-be17-ac67b78163f3",
        "cursor": {
          "ref": "3f435b8f-d32a-40e0-9099-d8b08848dc87",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "02f2f8a6-0797-4a5d-a84f-f8c500ad8f33"
        },
        "item": {
          "id": "f9ccd326-0d8c-4772-be17-ac67b78163f3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e0e6f099-c1c4-4df6-98fa-c64d17f11184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a3611a-c5c6-4702-9c94-361d2ab7d811",
        "cursor": {
          "ref": "52faa5be-cb1f-47ec-b1a8-7d4947a9f6ce",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2da8c633-0a46-45c2-9d6e-d2586515cb42"
        },
        "item": {
          "id": "99a3611a-c5c6-4702-9c94-361d2ab7d811",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "23aa717b-5b02-4f81-b23d-2cc99d0a25f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1476e80-1864-492d-b6db-a517eb657e28",
        "cursor": {
          "ref": "a3526977-b379-4a13-b794-287ca4dc4250",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8f617ff8-8623-4776-adbb-198904adb9e2"
        },
        "item": {
          "id": "a1476e80-1864-492d-b6db-a517eb657e28",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3cc8c451-2587-4ac7-a9d1-096f8bd6e0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3986f1-d414-4775-924e-5fe5ee299a36",
        "cursor": {
          "ref": "2938d076-ccc7-48ac-b31a-14bbd2b34b4d",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8f434053-bdd9-4d48-b285-4fe364dc0279"
        },
        "item": {
          "id": "ad3986f1-d414-4775-924e-5fe5ee299a36",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b5184ba0-a1e6-4ee8-9e4f-13dbbbb298a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70ae9d1-32d2-4ddf-b801-9edd6577fa0e",
        "cursor": {
          "ref": "16c94f4a-6867-4399-8687-51624a13bc9b",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dd722f58-8e1f-4613-b784-ae4875319e81"
        },
        "item": {
          "id": "f70ae9d1-32d2-4ddf-b801-9edd6577fa0e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "10cce3a8-d25c-4e26-980c-43b84f7fe4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c7df87-e20b-464b-b5cb-db20ae2106ab",
        "cursor": {
          "ref": "773a9f2c-9455-458e-be0c-62308a7322f2",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b598b302-9877-4c87-a7ca-3400d0b6dd21"
        },
        "item": {
          "id": "a0c7df87-e20b-464b-b5cb-db20ae2106ab",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bc82caa0-a11b-4bd6-bf4d-2e6868aca076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43cc2ac5-2d91-4ce6-ad18-867e64d7059f",
        "cursor": {
          "ref": "9dc0f7c0-3cba-472b-9c18-34c6558a19de",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f8676f79-73a2-482f-9968-dfc38c0a4da6"
        },
        "item": {
          "id": "43cc2ac5-2d91-4ce6-ad18-867e64d7059f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1684fca2-f1ad-44c4-a021-17c08b4be71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "75efd417-d7fd-4fdb-ab55-8b66217d1f6e",
        "cursor": {
          "ref": "076e341e-0633-4589-a79d-07c315b558c7",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c5e50277-c59a-43ce-9c6f-57dda95f512c"
        },
        "item": {
          "id": "75efd417-d7fd-4fdb-ab55-8b66217d1f6e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "c547a543-5b2e-451d-bde5-72089a1e0287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "90be4fe6-d057-4ea0-9d3c-3c63005c4394",
        "cursor": {
          "ref": "2f2b4f48-7ef7-4b52-aeaa-c59662d2cef3",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "590e0e73-d384-4d73-94db-af85d3044ac6"
        },
        "item": {
          "id": "90be4fe6-d057-4ea0-9d3c-3c63005c4394",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c45bebf5-5c44-4e42-8d8b-235c50e73383",
          "status": "Created",
          "code": 201,
          "responseTime": 726,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1aaa015-2cd0-4ba8-971e-501580bf6331",
        "cursor": {
          "ref": "4a592ad7-1c69-4954-b7c2-4cb8dd60fb7d",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "821065d9-9824-410f-b3f9-189efbbc3209"
        },
        "item": {
          "id": "a1aaa015-2cd0-4ba8-971e-501580bf6331",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "268a134b-03d1-4e2f-83c7-3994c3fe7c8d",
          "status": "Created",
          "code": 201,
          "responseTime": 664,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3caa7340-54e8-488d-95b8-6a4637c15397",
        "cursor": {
          "ref": "c0442d3c-f712-4e64-9c0e-9b6a081ef86f",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9a89a330-839d-4823-bc0d-ee8d27deb59b"
        },
        "item": {
          "id": "3caa7340-54e8-488d-95b8-6a4637c15397",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7aa0ce54-f63b-4a19-b081-88b14cca7974",
          "status": "Created",
          "code": 201,
          "responseTime": 678,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b7bc00-332f-4d9c-9898-39e0320b921b",
        "cursor": {
          "ref": "2faf0856-5bd1-474d-977c-c67caccca972",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7d8aa24a-4837-401a-88d8-5c003230a778"
        },
        "item": {
          "id": "a4b7bc00-332f-4d9c-9898-39e0320b921b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2ddf6474-3fd7-4952-b84d-78362f73ecbf",
          "status": "Created",
          "code": 201,
          "responseTime": 791,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "5377343f-4df1-40f3-abae-82044d4a44f4",
        "cursor": {
          "ref": "6c290c9c-19f9-4a9c-9474-b3eb50c831c3",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4882e9d6-8250-4c21-88b1-91b616fbde3f"
        },
        "item": {
          "id": "5377343f-4df1-40f3-abae-82044d4a44f4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2346e26f-0403-4202-836e-b93c82aa9c34",
          "status": "Created",
          "code": 201,
          "responseTime": 701,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "51930489-b6a9-45f4-9a93-ba408b1b76e9",
        "cursor": {
          "ref": "c0fa2d7d-56dd-48c9-81da-eb05c563d79f",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dee33377-14bd-4517-99c7-88dbfd28c5fa"
        },
        "item": {
          "id": "51930489-b6a9-45f4-9a93-ba408b1b76e9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ada6fb04-c7f0-4d81-9a97-9c41a6a2512e",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "51930489-b6a9-45f4-9a93-ba408b1b76e9",
        "cursor": {
          "ref": "c0fa2d7d-56dd-48c9-81da-eb05c563d79f",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dee33377-14bd-4517-99c7-88dbfd28c5fa"
        },
        "item": {
          "id": "51930489-b6a9-45f4-9a93-ba408b1b76e9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ada6fb04-c7f0-4d81-9a97-9c41a6a2512e",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "36916b09-2b41-439f-ace3-b5115f792f93",
        "cursor": {
          "ref": "e6e34f00-c259-45c5-b802-1ddc503729b7",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c7fb8072-1955-4052-9549-9e098600d542"
        },
        "item": {
          "id": "36916b09-2b41-439f-ace3-b5115f792f93",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a3166d80-2b38-4d56-b38c-7617566cf585",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "45eeb2f2-c316-4329-8440-3990fd8d96e8",
        "cursor": {
          "ref": "08f757c2-2e3c-4405-a61b-8e2062e9f7e7",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "55b4f555-b116-442b-ad5e-0e71a4ee14e6"
        },
        "item": {
          "id": "45eeb2f2-c316-4329-8440-3990fd8d96e8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3e316d0d-e3ec-4046-988f-dd11c9a18c57",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "0043ccb0-2416-435f-a4d6-218a882efd13",
        "cursor": {
          "ref": "23df84f0-c833-4590-88c9-a150524850a2",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fafea9a8-6085-452e-b179-60d44bf1885f"
        },
        "item": {
          "id": "0043ccb0-2416-435f-a4d6-218a882efd13",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "46541971-e948-42ec-8db4-025fdfa114d5",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6173b048-0a4e-499f-8d28-9f4aec8b4c36",
        "cursor": {
          "ref": "979fc598-c7d0-45ee-955b-f67397e35555",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0c0ecccd-219f-43cc-bbac-c001834d4fe3"
        },
        "item": {
          "id": "6173b048-0a4e-499f-8d28-9f4aec8b4c36",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "39a2968f-935d-4ecd-ae13-81baac0ab16b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "245332a8-5b79-47d3-b45a-ddc13bb35352",
        "cursor": {
          "ref": "f5f20568-3645-4cf3-8850-63b20d29ed05",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7a6caae3-1bfb-42e9-9cfc-20104ebadad3"
        },
        "item": {
          "id": "245332a8-5b79-47d3-b45a-ddc13bb35352",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "424798a8-a99b-4715-b902-1cb08154ac9c",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "a2ed8faf-0851-4c23-9f44-d2247001aab6",
        "cursor": {
          "ref": "a0ab7c58-be6e-4e36-bdda-145c941cd2be",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "09b3473c-8b53-4de1-b95b-1a6d70e396d9"
        },
        "item": {
          "id": "a2ed8faf-0851-4c23-9f44-d2247001aab6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6d923d27-0fd6-4a57-9078-8d521f7da5f2",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "1b7dfb21-48ed-4eaf-a0d9-72b43454f3d9",
        "cursor": {
          "ref": "3b9cc5a1-3d59-4380-bf75-953948f01ead",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c4cb1a12-2ffe-4008-a055-c2fea56dfe45"
        },
        "item": {
          "id": "1b7dfb21-48ed-4eaf-a0d9-72b43454f3d9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "231007b6-25ae-4b50-b749-a90401f8c89f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "6f3b7a54-2be0-47f6-9e5d-20d7737251af",
        "cursor": {
          "ref": "c8c7b09f-f956-4bf3-b039-075a4c1380af",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5819068c-73ad-4d92-bcb1-0623bd8f7155"
        },
        "item": {
          "id": "6f3b7a54-2be0-47f6-9e5d-20d7737251af",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d08b69cf-3012-4329-bb78-09bf748a738f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "541a4da4-f817-434d-a66d-4b385fdaf4c3",
        "cursor": {
          "ref": "091197e4-5c64-4fc5-b1b5-d81ab04cd7db",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f295597f-4e3d-4d6f-8a32-c3398b0ed646"
        },
        "item": {
          "id": "541a4da4-f817-434d-a66d-4b385fdaf4c3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9a7de594-ca43-43e7-8f4c-2f9599ad57c3",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "b97d5913-c571-4b83-87d0-f4c9201d125d",
        "cursor": {
          "ref": "0932bfa5-5e4b-4587-9e9d-5ca90c445c70",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a6242f02-c767-40cb-897e-478b5b12ca0c"
        },
        "item": {
          "id": "b97d5913-c571-4b83-87d0-f4c9201d125d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9bdb965a-6592-44ef-bbc7-008f55e7aa00",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "7774662c-5122-48c9-8434-46b5163207c5",
        "cursor": {
          "ref": "957dc231-7db4-4ddb-ab69-5168fcf87aac",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "22e99ebc-5bbb-4d9e-87e3-b835563a445a"
        },
        "item": {
          "id": "7774662c-5122-48c9-8434-46b5163207c5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "43d2f06e-d7a2-4aa1-82cf-18cca44b3de2",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "eb262989-6a70-457c-8353-9b7d86b9bf86",
        "cursor": {
          "ref": "923ac4d8-465f-49b9-9ac2-941245b9165f",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2f056c97-f98e-4251-9384-09b4af9a12b9"
        },
        "item": {
          "id": "eb262989-6a70-457c-8353-9b7d86b9bf86",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bd6eb005-54f3-47ee-b30b-c5464328a88e",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "82985671-a53b-4763-bb50-873c9e37336a",
        "cursor": {
          "ref": "b6d32e2f-587c-4417-8d12-fabe54c0e5b4",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4bb06f7d-d82a-4cce-a159-631c39cc025a"
        },
        "item": {
          "id": "82985671-a53b-4763-bb50-873c9e37336a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1d82d0c8-5b48-4c32-967d-b5f4ec11672a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "ecbf9e5a-5d8f-4161-97bf-d57a748ebc1f",
        "cursor": {
          "ref": "977d00e5-3d20-4cd9-ace2-f2ddef2cb341",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "af73a62c-06dd-431e-bc0a-cb80b8cc932c"
        },
        "item": {
          "id": "ecbf9e5a-5d8f-4161-97bf-d57a748ebc1f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e6cb016f-f655-4b9e-a102-b42f7edc5cb0",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "6e5c8b32-e53d-4fab-acc8-f68976fc6e75",
        "cursor": {
          "ref": "24b3cc4a-25cb-4d49-832a-265259b22213",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0f655c4a-74fc-447d-aadb-ee9c9ec2590e"
        },
        "item": {
          "id": "6e5c8b32-e53d-4fab-acc8-f68976fc6e75",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "85c0c8a6-adaf-494a-847c-55f8a7722018",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "3c2a5cd9-01d8-4eb7-8d90-c72505eb4035",
        "cursor": {
          "ref": "4ef179b2-4fa4-4a73-a941-663e1ec4908b",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ef4f5703-e288-4542-a73a-ea12978467f4"
        },
        "item": {
          "id": "3c2a5cd9-01d8-4eb7-8d90-c72505eb4035",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7e8ae5fb-78bd-4b14-a866-2c528b91dc94",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "8f00a2a8-80b7-407f-ac55-29ff244e9f93",
        "cursor": {
          "ref": "4cd4a315-5542-4a01-a9c1-ccec556b6142",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d133da7b-18a2-4c4f-b0b7-ed61f95b175d"
        },
        "item": {
          "id": "8f00a2a8-80b7-407f-ac55-29ff244e9f93",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "50b01869-3d52-4d66-9c6f-5a7b9696ac6e",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "fbd146b6-033f-40ee-bd86-0a5766c47387",
        "cursor": {
          "ref": "f8d9b6ff-515a-47aa-bdc0-f0a12b031bb2",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "dda10058-4f1e-41c4-86cd-8f9198708ee5"
        },
        "item": {
          "id": "fbd146b6-033f-40ee-bd86-0a5766c47387",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "af4fc443-b39a-4aa3-83e7-1145724a8d2b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "eb88198a-a07a-4833-b56e-21dfa30f9f82",
        "cursor": {
          "ref": "2957ed3d-2b7b-4560-b997-3274833f8c1b",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fe588695-964f-44e7-a46e-7f00916d8d54"
        },
        "item": {
          "id": "eb88198a-a07a-4833-b56e-21dfa30f9f82",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ad02e51f-7d4e-4497-b7b9-83c4e6de2064",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "50f9a715-55e5-4ed6-a13f-03fc5beb85a2",
        "cursor": {
          "ref": "867ca659-48f4-44ef-af7c-0af5107b2a4c",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "287804ff-15b9-42f0-9f74-11446e9c4aec"
        },
        "item": {
          "id": "50f9a715-55e5-4ed6-a13f-03fc5beb85a2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3ff421ff-b7b4-4f78-be98-250aaf1ee451",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "cf7809e1-3607-4f48-b922-291f5bb305cd",
        "cursor": {
          "ref": "eb3f9e01-0888-4076-a555-d56f436ec92d",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "72df211d-c176-4b3a-bd1e-88b9f09f5743"
        },
        "item": {
          "id": "cf7809e1-3607-4f48-b922-291f5bb305cd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b726f1e1-0e28-4350-83e5-d4d1c7d43025",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "80a92ff8-3252-4e75-86f9-e653c388799e",
        "cursor": {
          "ref": "359c4d8e-55a0-4773-9ab7-538bf66b0d82",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9f2bb911-fdd1-40f1-936f-b10529ec1cb9"
        },
        "item": {
          "id": "80a92ff8-3252-4e75-86f9-e653c388799e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a4ec66d6-0b3d-4cdc-b28a-05fd7c212c4f",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "5eb4e44b-daee-4dc5-9a89-911d86a89d6f",
        "cursor": {
          "ref": "c256eb8c-4eb5-44e1-9ca5-b7b125b37776",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6373d7e9-863b-4a00-8da1-0be722b964a2"
        },
        "item": {
          "id": "5eb4e44b-daee-4dc5-9a89-911d86a89d6f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "05d6863d-b0bf-493d-8e2c-c99df4fc8733",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "9ac7d699-b46e-459c-abda-dcc6961fae6d",
        "cursor": {
          "ref": "5ff5f847-c879-4afc-b9a4-26328a9b9188",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a712e9c4-87d2-4217-9494-0479a3b667e5"
        },
        "item": {
          "id": "9ac7d699-b46e-459c-abda-dcc6961fae6d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bdf6d8db-5b8b-410b-a369-8b3ed7f010fe",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "282ec929-d06f-4076-8282-d7607f09b28a",
        "cursor": {
          "ref": "90ac459d-d0d5-4f4e-bb6d-1857659962cf",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "312b6881-c6d3-42e5-b9a5-6292b9b0cc4c"
        },
        "item": {
          "id": "282ec929-d06f-4076-8282-d7607f09b28a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0d2adc4f-c065-45bd-967e-8428689c50bd",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "37d77473-b864-4a23-8f26-42fe4691b488",
        "cursor": {
          "ref": "73c79ab8-4994-438d-9d8b-dd8c373ac5b1",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "56f27430-e081-47f2-a419-5c5ccd55067e"
        },
        "item": {
          "id": "37d77473-b864-4a23-8f26-42fe4691b488",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "977939d5-67df-42fb-a566-282310bb798a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "4da5f46a-a55e-4874-af16-5d60497b9078",
        "cursor": {
          "ref": "e0bf2a3d-f29c-4268-aa97-bd18b4d59e90",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "18b4ff67-7f4d-4029-a654-b6a1c12c6913"
        },
        "item": {
          "id": "4da5f46a-a55e-4874-af16-5d60497b9078",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cdebb3e9-f8bd-4b67-abe2-e773f1cbec3b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "d7e6fa58-370a-4a70-b99e-bdd705901929",
        "cursor": {
          "ref": "7fd48061-99ad-4e71-b81f-d753360bbe6a",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5e5e9c87-5755-46cc-bbae-1e80199bbf9b"
        },
        "item": {
          "id": "d7e6fa58-370a-4a70-b99e-bdd705901929",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "25f1c809-b903-4c70-b638-762401a5e8c4",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "6f40ed7f-8924-476a-bbed-5fe1cfaca204",
        "cursor": {
          "ref": "8d7ee220-8e03-4e25-9636-65a73c423767",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2a78cd5e-e600-45ab-a244-42d8a9987996"
        },
        "item": {
          "id": "6f40ed7f-8924-476a-bbed-5fe1cfaca204",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "79c379d6-90be-4742-967b-399b7217b93d",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ed8c7f29-75b7-4802-81f2-8ddaa1f5c0b2",
        "cursor": {
          "ref": "cde40b1b-c2c9-4a94-9a84-028c513f8e6f",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1dde21dc-c51b-42ae-b0de-f168cde253a7"
        },
        "item": {
          "id": "ed8c7f29-75b7-4802-81f2-8ddaa1f5c0b2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fc40a70b-fea8-4a4f-ac59-ce32d36edaa7",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d69be7cf-bf89-445c-8ea4-93dac31f78e9",
        "cursor": {
          "ref": "806396e1-feff-485a-b3d2-c48bf8cdb5e3",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d25c68e8-3f52-444d-9395-5c8ae4c59944"
        },
        "item": {
          "id": "d69be7cf-bf89-445c-8ea4-93dac31f78e9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "88398402-70e5-4489-9ac0-599cd7c9d7fa",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "25e434c5-77da-4cc8-bd63-28873b723eec",
        "cursor": {
          "ref": "46cc2adf-5a07-4618-a19d-18983d3a0ddc",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5d2dd4dd-48d0-4a25-98f0-c7a0ba3625dc"
        },
        "item": {
          "id": "25e434c5-77da-4cc8-bd63-28873b723eec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d6803a24-5c51-4609-8db6-63f95b2e36de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5f2d78-6fe4-497d-befe-8306512e20f5",
        "cursor": {
          "ref": "8016300c-d141-4e37-b343-068966aeb986",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "98d2d2ab-71de-4e28-8227-864a27316807"
        },
        "item": {
          "id": "5a5f2d78-6fe4-497d-befe-8306512e20f5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1fb7def9-46ce-43cf-86a0-9c13e746bccf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c2c9b3-7877-40f6-a162-fc2ea6ec28d2",
        "cursor": {
          "ref": "5ed8bc72-ef6a-474e-9e8e-52c7f4b793ab",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "56f02dea-3820-48ab-953b-d9b1406a56a2"
        },
        "item": {
          "id": "66c2c9b3-7877-40f6-a162-fc2ea6ec28d2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ad0f297e-7be9-469a-a86b-2bd831ae389c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c2c9b3-7877-40f6-a162-fc2ea6ec28d2",
        "cursor": {
          "ref": "5ed8bc72-ef6a-474e-9e8e-52c7f4b793ab",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "56f02dea-3820-48ab-953b-d9b1406a56a2"
        },
        "item": {
          "id": "66c2c9b3-7877-40f6-a162-fc2ea6ec28d2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ad0f297e-7be9-469a-a86b-2bd831ae389c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7842f231-f7b3-44b8-8728-ed34926d8df7",
        "cursor": {
          "ref": "d18b84dc-59ba-4e31-9c76-9ea65f99f266",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7240b8a5-dab3-43f9-9926-5e9908272d42"
        },
        "item": {
          "id": "7842f231-f7b3-44b8-8728-ed34926d8df7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e779bd77-270b-4228-ae74-85771b1b7c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a62f447-cdf9-4af9-87bd-39af103a2611",
        "cursor": {
          "ref": "9a2a66c8-2dfa-46ed-831b-2939c9c9a821",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7c88a5a6-5c79-46f2-9964-a440b59daee8"
        },
        "item": {
          "id": "5a62f447-cdf9-4af9-87bd-39af103a2611",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ef260f84-46b0-4981-a8b4-4f10a5a26763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1f777b-06a6-48ce-8024-c9c49b73ef90",
        "cursor": {
          "ref": "fa6b1b3b-2496-4841-8a6e-f154bad7a8a5",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b74b7366-09bc-480e-97e2-5a9e3d138033"
        },
        "item": {
          "id": "fd1f777b-06a6-48ce-8024-c9c49b73ef90",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f926ebc4-cd72-4600-95bc-4b07c8729b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb19162-69cf-4523-8cbb-ea2ddfd5eb42",
        "cursor": {
          "ref": "dec96d29-a925-440a-85c2-13a1e517a5f0",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d4552382-bfbe-4ed9-ba32-b3912f0a2c11"
        },
        "item": {
          "id": "6fb19162-69cf-4523-8cbb-ea2ddfd5eb42",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "be8b216f-8530-484a-b797-af802099026f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff0abd5-6491-4f81-9ac2-95c3210cd795",
        "cursor": {
          "ref": "9391ebae-1b40-4aa9-b970-d0512fcab255",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "570c6e09-0379-4d7c-a969-ac1017c3aaac"
        },
        "item": {
          "id": "5ff0abd5-6491-4f81-9ac2-95c3210cd795",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f9eb9f27-f4b9-446a-93c6-68d44833638c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a991b36f-18ea-41fe-aab6-3b1fa8449c35",
        "cursor": {
          "ref": "effccc43-4360-41e7-a968-fc60670ba67d",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5b114c80-4e79-4416-a120-63cbd5c017e9"
        },
        "item": {
          "id": "a991b36f-18ea-41fe-aab6-3b1fa8449c35",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "155812c0-deed-4d43-a0c5-848bd9791c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa0fb17-6487-4bf6-9df3-0e5b7eeed877",
        "cursor": {
          "ref": "aa0056e3-ed40-4215-9337-4356c1be0917",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8ecfb778-dbd2-411c-803d-8ca14b0f8721"
        },
        "item": {
          "id": "6fa0fb17-6487-4bf6-9df3-0e5b7eeed877",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "378a6f3e-693f-45a6-9550-a5ccd9a3b619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeeb8787-cb3b-4127-a1cc-d545229a36ce",
        "cursor": {
          "ref": "04334e6f-18e2-4679-ae20-b51459b8531f",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f47a24d8-98b8-4272-a2df-11ad2288712a"
        },
        "item": {
          "id": "eeeb8787-cb3b-4127-a1cc-d545229a36ce",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c1f5f9c8-de4c-4453-8579-55e45be52dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2237f85-ec63-480e-8add-82d14d8911a0",
        "cursor": {
          "ref": "0b1091bd-9361-4e41-8a23-68c8251e2701",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c2b53c79-ff2a-43ce-88cc-912592f11713"
        },
        "item": {
          "id": "d2237f85-ec63-480e-8add-82d14d8911a0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "99ec05c3-e09b-45e5-919d-b18e3b540a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc5b2cd-5597-46a5-8895-090517fefae6",
        "cursor": {
          "ref": "6a3b6759-6b39-4e5a-903c-feb50fe33950",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4bc44872-671e-41db-aff5-c92e37a91d65"
        },
        "item": {
          "id": "bcc5b2cd-5597-46a5-8895-090517fefae6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2a53776c-860e-4b02-baa4-489929d296ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ea2db5-f09f-4cea-9965-f593ca9ef41e",
        "cursor": {
          "ref": "e10d136a-64e0-45e9-8be5-a959a9b8d1c5",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5a210a77-d353-406d-9c97-5b832088a9b3"
        },
        "item": {
          "id": "36ea2db5-f09f-4cea-9965-f593ca9ef41e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a4930da6-2304-4f05-867e-86b0c8ebdb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9551d2c-9986-4bb9-8367-b49b699fa351",
        "cursor": {
          "ref": "96ff1fcf-a602-486e-bb4c-444003e0ce01",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a86fb745-f73d-4da9-a19d-c7876c2b81b6"
        },
        "item": {
          "id": "f9551d2c-9986-4bb9-8367-b49b699fa351",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "83416f0e-db6c-4649-aa0c-7b39d36ba3dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c4b697-574d-4951-bb28-423be60138ed",
        "cursor": {
          "ref": "2974abd6-ec19-48a3-9f0b-723738f1b05a",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c404b7e6-ef3c-433c-b981-5d451295a6cd"
        },
        "item": {
          "id": "b0c4b697-574d-4951-bb28-423be60138ed",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "54cb3cc5-bf54-4a26-9255-8c18f7822781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf492495-2600-4e18-99b7-ef69bac369ea",
        "cursor": {
          "ref": "35eff87e-7f00-46fb-8b4d-ff1ad08f3d9d",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0869a66b-0d17-4a9e-bcf8-2fb57b00e8e8"
        },
        "item": {
          "id": "cf492495-2600-4e18-99b7-ef69bac369ea",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e3fd635d-1e47-4755-8f25-3446da56c2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61df97a5-8c52-428f-bf31-da97ff05ef28",
        "cursor": {
          "ref": "e62e211c-3691-4862-bc15-a2510b2156cc",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c8d3d3e1-0ebe-4e1a-92e8-ab6a7121ad5e"
        },
        "item": {
          "id": "61df97a5-8c52-428f-bf31-da97ff05ef28",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0be500ae-aeca-4560-9256-dd45cdcc1976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20703a5e-82c3-40de-ac6b-d93573ff7825",
        "cursor": {
          "ref": "055f9634-e122-4b18-b961-3116e114a8eb",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ca237763-79da-4f24-a6d1-06def6866b88"
        },
        "item": {
          "id": "20703a5e-82c3-40de-ac6b-d93573ff7825",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cda73d9e-5ad7-4fb1-b1ae-590f285a908f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61d401b-170a-4493-a02b-c634666fed87",
        "cursor": {
          "ref": "d1b7276a-4a44-49b9-bc1b-19ad8e2e7849",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "080187c8-aec1-425e-9259-a04c2f0e3e9b"
        },
        "item": {
          "id": "c61d401b-170a-4493-a02b-c634666fed87",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "4640bb2f-48d4-4fca-bae5-ebce4d76868c",
          "status": "OK",
          "code": 200,
          "responseTime": 612,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "9b090139-e425-4ed0-8bdb-62aeef36f766",
        "cursor": {
          "ref": "aba3fcea-b0e6-4de8-936b-6d9ab624b820",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "79878b29-8b16-4d5c-a0d8-810ad8c87b8a"
        },
        "item": {
          "id": "9b090139-e425-4ed0-8bdb-62aeef36f766",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4eb6632e-f493-4521-b04f-1beefe6b201b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6723e417-babd-48bf-91b7-49bcc17c0aae",
        "cursor": {
          "ref": "bfb582c1-0b27-48df-a3f5-7d9aa33a9534",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "192e58dd-2e05-497b-aa86-8f37d23e5c2c"
        },
        "item": {
          "id": "6723e417-babd-48bf-91b7-49bcc17c0aae",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "809b5bf1-9e25-4c64-9031-5af7bebc8d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7d640d-c508-48d5-adf7-6f50d848203f",
        "cursor": {
          "ref": "c2b59f04-c62f-4c97-a958-b98b6968c6b6",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4b626b25-ed25-4962-bc55-c83ee042e1dc"
        },
        "item": {
          "id": "7b7d640d-c508-48d5-adf7-6f50d848203f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6d1e7643-44ff-4402-a428-1e5254627c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378274f7-ef0b-4aaf-bf55-f2d491ddcb0f",
        "cursor": {
          "ref": "2ee5ad7a-0112-482c-91a7-830f727d5381",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1a9989f0-1c04-4ee9-8a7e-5b2187864844"
        },
        "item": {
          "id": "378274f7-ef0b-4aaf-bf55-f2d491ddcb0f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "982e877f-065d-4a54-8406-0ca50b3fa78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8a4db7-aedc-4b41-acd6-1547f5354f4a",
        "cursor": {
          "ref": "a7cb7997-744d-4e3a-a125-ce059b476dd6",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "28896015-45b7-415b-8b1f-bb30721a451b"
        },
        "item": {
          "id": "2c8a4db7-aedc-4b41-acd6-1547f5354f4a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3e706a08-aa81-443d-838c-7dbbf8d7c505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef7c84d-e28c-44b9-9f2d-5f5aea0bfba9",
        "cursor": {
          "ref": "32b0e050-666d-494e-8114-45a2d008a9b3",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "71a052cc-73ed-4a22-8e68-e758bca94688"
        },
        "item": {
          "id": "cef7c84d-e28c-44b9-9f2d-5f5aea0bfba9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1214bf37-88c2-441d-84f3-7f4430045a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705ac09a-9c90-4980-845e-1d4076be8149",
        "cursor": {
          "ref": "415faa2f-52e6-441a-b4ac-bb8f87244812",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9eba929f-2a6d-4b24-ab4e-c2b1535ca473"
        },
        "item": {
          "id": "705ac09a-9c90-4980-845e-1d4076be8149",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9fc035c9-bec9-4d9f-8701-8e827d45e12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725f626e-4b38-48c2-9b54-9d1a415b6644",
        "cursor": {
          "ref": "c5200769-36b4-4aca-8409-158bebe5d032",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d6e893da-301c-4cfb-96bb-e54ab992ea14"
        },
        "item": {
          "id": "725f626e-4b38-48c2-9b54-9d1a415b6644",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "119eb635-a34f-45c8-a093-59d8cb1a4b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0497c2cd-6698-4da8-864b-bc4b98ff439f",
        "cursor": {
          "ref": "583f7e56-f1e0-4680-94ac-329205179463",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7953bee0-ab09-46fe-bea1-828ab9546bb1"
        },
        "item": {
          "id": "0497c2cd-6698-4da8-864b-bc4b98ff439f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "61dd57ca-c0b3-4181-b920-b9e2db65f1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d01f5fa-5e48-49d2-aa4c-81debdf57caf",
        "cursor": {
          "ref": "02663222-e4d3-40b9-b68b-7d4d88737396",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "674e9262-5ab6-4291-ab1c-b4fc459f5e6d"
        },
        "item": {
          "id": "4d01f5fa-5e48-49d2-aa4c-81debdf57caf",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b6a990dc-92b6-4da7-af84-20cc9d8a6a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e99c2d-6540-4535-925e-9934da62149d",
        "cursor": {
          "ref": "0ea87e97-a04b-48ed-9816-b48f07e6246e",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "55736965-bddf-4e99-aaa2-5f19319ceed2"
        },
        "item": {
          "id": "74e99c2d-6540-4535-925e-9934da62149d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f3a0a0bb-48a5-4a00-b40a-6f9bb9a3afa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb13501-2cb5-4566-ba15-6c3572bfe92a",
        "cursor": {
          "ref": "ed6e660d-6002-48ea-96d4-5ea3b8afa6ed",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "73e98cce-6038-4118-ab23-2cd8d2311500"
        },
        "item": {
          "id": "7bb13501-2cb5-4566-ba15-6c3572bfe92a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b4256217-b7dc-4453-bf97-e34586ff56f4",
          "status": "OK",
          "code": 200,
          "responseTime": 235,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "b3cf2894-bfb3-41e4-813e-6685593cd6a4",
        "cursor": {
          "ref": "7c6b9e76-e9cf-4786-8920-33079f8d0075",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1658e721-c6d5-4f00-bc74-3d22ee1ab16b"
        },
        "item": {
          "id": "b3cf2894-bfb3-41e4-813e-6685593cd6a4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9181a14f-6332-4d9e-ba4a-20b4ffb39740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a7cd6a-f7ba-4e1a-81d9-d9a3b0d6dd55",
        "cursor": {
          "ref": "dafae581-d929-403d-8931-32469286b334",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0f4b224c-f5e6-4a62-8667-178ea18269e3"
        },
        "item": {
          "id": "32a7cd6a-f7ba-4e1a-81d9-d9a3b0d6dd55",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d4f0b94c-e28c-4807-b375-a10de9ab4318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92c4d40-f2d3-4c43-932e-49a520c75b0a",
        "cursor": {
          "ref": "51a8e8bf-8d45-4b39-a851-58c0d4780326",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cda63c75-e9b8-4b59-bc1d-fbaead5b1282"
        },
        "item": {
          "id": "a92c4d40-f2d3-4c43-932e-49a520c75b0a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4b7503b0-e090-437c-b772-86996b005690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514867b5-1abc-4f70-b4c0-b4db421dbfa1",
        "cursor": {
          "ref": "6986d216-df2f-4344-87c8-d155755559a0",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b65fbbaa-32b1-4d1a-be9e-e0d1cc7e3484"
        },
        "item": {
          "id": "514867b5-1abc-4f70-b4c0-b4db421dbfa1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1400e14a-9bc1-4777-8128-728c12125aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25333754-4a3f-4d5d-9c7e-caa850486205",
        "cursor": {
          "ref": "09b206e9-03b5-4c87-969c-b9b3774b1354",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "499a632e-7d5f-49db-8149-bea389bc83b9"
        },
        "item": {
          "id": "25333754-4a3f-4d5d-9c7e-caa850486205",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1838e85d-eb48-4141-b8c3-2baf46ff4213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae138e7-9fb4-49e0-920c-b81c07566e71",
        "cursor": {
          "ref": "b4bbfb9a-2fb7-44ed-bb3a-10181464829f",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "81c5c6a2-e547-4a1f-8d6f-5a14781479e7"
        },
        "item": {
          "id": "cae138e7-9fb4-49e0-920c-b81c07566e71",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d60ee3f2-8c85-4adc-988e-7704ebc12c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a08e2b-d3c1-4c64-ab0e-a61a6517667e",
        "cursor": {
          "ref": "e7537c5e-c3f4-41ef-a2b8-a14a58844fec",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fa8c80bc-9622-4471-9356-344856b30447"
        },
        "item": {
          "id": "77a08e2b-d3c1-4c64-ab0e-a61a6517667e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "806d707e-c5fc-42a7-8824-3fff10875e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd25c4c-253c-4d57-8736-75d0bf05046a",
        "cursor": {
          "ref": "2a18d7c0-5180-4fd3-95f4-f512a5c4174c",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ce9e5f6a-46fb-4b69-b6b9-a5af78c2b1de"
        },
        "item": {
          "id": "6cd25c4c-253c-4d57-8736-75d0bf05046a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "aab79490-6a7b-4d88-8d48-565ddf3d2937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca9f710-6b60-4241-8e07-a7b3bdd2ed47",
        "cursor": {
          "ref": "4bafe6e7-1b3b-42ce-9f10-9070740177b5",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a6a93ab5-60f5-4485-9836-0ffd6c4d3d24"
        },
        "item": {
          "id": "eca9f710-6b60-4241-8e07-a7b3bdd2ed47",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "060b5c74-0eeb-4446-a23e-74a1f1e4d9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64cda84-9759-4259-bfde-3e344157ab71",
        "cursor": {
          "ref": "ecdaee33-2141-40ab-85d7-6c012813d558",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b022ce77-4fe8-4a62-a548-6bf790ad1cc5"
        },
        "item": {
          "id": "d64cda84-9759-4259-bfde-3e344157ab71",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ee955ae9-0580-4a7c-a1a9-d3e8776059f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 545,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae317e47-0da7-4adf-96f0-045bae09d956",
        "cursor": {
          "ref": "ec1f7ec7-21cb-411f-8637-38326d6dd661",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "228da7a6-8417-49b6-ae18-6f74b6c0d080"
        },
        "item": {
          "id": "ae317e47-0da7-4adf-96f0-045bae09d956",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0603e5a6-e0bd-4313-8124-02ad8b160582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 310,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bdfd2c-b965-41b8-9587-fa76297f32d4",
        "cursor": {
          "ref": "cbc18745-6300-44b1-8402-a99e20875c5b",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f0be8f9c-a4f8-4153-8666-41ea1477b55f"
        },
        "item": {
          "id": "d1bdfd2c-b965-41b8-9587-fa76297f32d4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c1b3cc31-a96c-47be-9843-757aab099cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb0c410-9476-4416-a3b6-6ac56fb47f76",
        "cursor": {
          "ref": "f66ea35d-7be2-402f-be39-4a22be9d6793",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "988b0264-7fb3-4a68-8099-69d757d04567"
        },
        "item": {
          "id": "6eb0c410-9476-4416-a3b6-6ac56fb47f76",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8ff26eb4-3da4-4f40-a145-053e3fac00ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93d0e26-41d3-4a67-9aff-23e76fdc2f31",
        "cursor": {
          "ref": "c3978395-7b7b-498a-9f7d-afb306019694",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ce930e0a-9093-4ce4-a6b2-c76b3a1b788a"
        },
        "item": {
          "id": "c93d0e26-41d3-4a67-9aff-23e76fdc2f31",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a52e4741-1201-4dc2-8447-19c7b688b556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 376,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b91242-3520-4ffb-bb5a-fedbab71a35c",
        "cursor": {
          "ref": "02c8015f-d1be-4c9f-8cf4-32ca4804911e",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "697381cc-569b-43dd-a9e1-aebba81828c4"
        },
        "item": {
          "id": "e4b91242-3520-4ffb-bb5a-fedbab71a35c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bce0b0a8-3a01-4dc3-9b49-5f4df2f5ae2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3c7667-66be-4c69-94a9-90fd30eb076a",
        "cursor": {
          "ref": "41f99a27-1669-49f0-8a5f-6d8928474e39",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "96edda2e-ba33-464e-a0e3-795a52dcf0c0"
        },
        "item": {
          "id": "ef3c7667-66be-4c69-94a9-90fd30eb076a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3371b4ab-62c6-4e3f-8c41-c5cb53006b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b64e0cc-38b0-4caa-ae5c-1f7eb6e97177",
        "cursor": {
          "ref": "5c8265a5-1e1c-42a9-a566-fecec24d4e02",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6a22105e-b2d0-46f8-9b1e-f4c53f61ac73"
        },
        "item": {
          "id": "8b64e0cc-38b0-4caa-ae5c-1f7eb6e97177",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e71269c6-4190-4ffb-acf9-81de1384ecac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9996fec1-e1be-45d6-a4ae-fd83826e2f6e",
        "cursor": {
          "ref": "1e829317-872f-40d8-b8fd-5694ffa78def",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "99c6058b-ee20-4268-89ed-0db43e2755ba"
        },
        "item": {
          "id": "9996fec1-e1be-45d6-a4ae-fd83826e2f6e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3312af49-0d76-4d48-a0a3-bbf2fee0440c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afad03b-4e97-4337-bf78-e722091f332b",
        "cursor": {
          "ref": "0c4ccae8-8ddf-4eaf-99f1-cbbe786175d5",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0fc68f85-96cc-4df1-9ba9-5729451b5000"
        },
        "item": {
          "id": "6afad03b-4e97-4337-bf78-e722091f332b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8d1ed1b2-ba7d-416f-bc93-8a6128364488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b28f3a6-e343-4c31-87f4-b8955dc86c99",
        "cursor": {
          "ref": "4a0f7bf7-8fa6-413b-9f86-4595ee31c7c3",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "24a5f809-faa3-4fde-bac6-06294b4cf5fe"
        },
        "item": {
          "id": "4b28f3a6-e343-4c31-87f4-b8955dc86c99",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ab13dfa9-0dc1-4dd4-b1b2-3e8809a7ac44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cad17f-7d67-4f74-b2c6-607d932e0a65",
        "cursor": {
          "ref": "b730b5f8-a562-4dcd-b242-f74db7956fed",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d1d59a85-6c97-4619-af6e-a7a696b658f8"
        },
        "item": {
          "id": "30cad17f-7d67-4f74-b2c6-607d932e0a65",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2eec27a9-4b6d-4f24-b665-f7794785d683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a2ea6b-8761-4f44-8355-32af058a5b5c",
        "cursor": {
          "ref": "d0056a1a-1942-4f19-be8f-73766bcd9511",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ee0b2961-0263-45b0-811d-01248b4465a6"
        },
        "item": {
          "id": "83a2ea6b-8761-4f44-8355-32af058a5b5c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "824df081-a14f-4ae9-8618-b2d72e6cdd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1eee90-24e8-44ed-960a-1fb9c4a697f5",
        "cursor": {
          "ref": "c128095f-7382-4ff1-ba01-ff0ff4d970d1",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8a3805ae-df51-41a0-8fc7-fbb4db7eb872"
        },
        "item": {
          "id": "ea1eee90-24e8-44ed-960a-1fb9c4a697f5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "22696a67-f93d-4d58-944b-ac62930a5978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42670b0f-d421-4467-97b4-3230bff961ec",
        "cursor": {
          "ref": "4ff06703-6a57-442f-b728-3afc7e4199b9",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d6a3a569-fdb7-4083-bbd0-e6c6f5691072"
        },
        "item": {
          "id": "42670b0f-d421-4467-97b4-3230bff961ec",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b41c95a0-edac-4c57-a56f-31a900551007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e93d7ee-d33d-4b94-a804-fe215542c06a",
        "cursor": {
          "ref": "5ccd10a5-a187-4b90-9020-fcf11d2453be",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6fe105a9-7298-4b0c-af8f-7720311a6a16"
        },
        "item": {
          "id": "4e93d7ee-d33d-4b94-a804-fe215542c06a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1c951e68-edc0-43f9-b291-333ae79ee1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc67b738-2f45-4e18-9354-0f980c0daed0",
        "cursor": {
          "ref": "a4ec85b9-0d9e-4c21-8c8b-f96922ff48a5",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5272c7ff-95b0-46a4-8059-6abbd4ab4b32"
        },
        "item": {
          "id": "fc67b738-2f45-4e18-9354-0f980c0daed0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8d7e4b22-2a62-404f-91b9-e1a226a53d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018a28f0-66f7-4bef-8636-6c2a41453da0",
        "cursor": {
          "ref": "20079959-bf08-4903-b23b-708546fe9d6c",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e49b5417-330a-44eb-a04c-1b119045f866"
        },
        "item": {
          "id": "018a28f0-66f7-4bef-8636-6c2a41453da0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f1431f65-4ae7-4505-a03e-8d3f1e7e0727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9438e29a-6fbd-4aa5-80c4-5dae1e2960f1",
        "cursor": {
          "ref": "5b7b7e55-8d8a-4278-a4c1-abca6f1c705e",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "324d656f-4309-4ee8-97fd-8b54ecb0dd5b"
        },
        "item": {
          "id": "9438e29a-6fbd-4aa5-80c4-5dae1e2960f1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "73f60547-6afd-44d3-b30b-3267a6156c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29fa6c1a-b319-4478-9099-100779d77153",
        "cursor": {
          "ref": "386b8ef1-cee3-4db8-b560-0d4a27cfae4e",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5746011e-c48a-48c8-9c18-eb46a08b3c49"
        },
        "item": {
          "id": "29fa6c1a-b319-4478-9099-100779d77153",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3c11fc4b-c340-47dc-b375-9a80c4506b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6264026e-6910-4f94-bbee-ab2729072e6f",
        "cursor": {
          "ref": "dd28834a-2deb-4a3a-80de-c7e9e082c231",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5eda8188-2b1a-4bb9-9919-cc9fa08f1ab4"
        },
        "item": {
          "id": "6264026e-6910-4f94-bbee-ab2729072e6f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5546c598-05dd-4e25-b240-b8097c9aea62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd106d2-f7ba-4f11-91a6-466c9de75f96",
        "cursor": {
          "ref": "3d4257bb-cc0d-424f-abf1-23ec42d871cb",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2c580432-d7a4-48a8-a61e-208a42cd1679"
        },
        "item": {
          "id": "efd106d2-f7ba-4f11-91a6-466c9de75f96",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "52bb2a9b-32cd-4d60-8ad8-c9330baa5837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88cdf079-4e1e-4a62-8606-05bbc8ce12c2",
        "cursor": {
          "ref": "cb64ba99-4046-4412-8f5d-15046178b1fd",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "575c9af7-a217-4a24-9ebe-d8d4bb9c2813"
        },
        "item": {
          "id": "88cdf079-4e1e-4a62-8606-05bbc8ce12c2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "abe4c123-8bcd-4b12-aabc-30b133f76ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059e2e1b-97ca-44f4-b275-553e970f39b8",
        "cursor": {
          "ref": "8a8caa3e-f88e-4df3-a586-1a05f7bc21ed",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4055e3e7-34ef-41f9-bea4-c382f70d2a93"
        },
        "item": {
          "id": "059e2e1b-97ca-44f4-b275-553e970f39b8",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1d6c8160-0a1d-498b-a321-17cbffcc34d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444a48b1-6320-4d13-a848-09394f39db10",
        "cursor": {
          "ref": "48f779ed-a3f9-4e84-bf82-a9d563bb944f",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b423ded6-865e-4c14-9443-9644819e371a"
        },
        "item": {
          "id": "444a48b1-6320-4d13-a848-09394f39db10",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "efaf0d11-d141-4a72-b3c1-22ff756f6a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0979f58-1b44-4734-9901-4fc640d0a982",
        "cursor": {
          "ref": "dfa6a03c-d53f-4bd3-ae2a-93d8e8f6c11c",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "41dc6e85-bad0-4a64-89e0-a51212cddb2a"
        },
        "item": {
          "id": "b0979f58-1b44-4734-9901-4fc640d0a982",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "74d02b50-2c51-432c-9e70-f491d0719d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34accfa-cb2f-4e84-a7cd-a7d43313d284",
        "cursor": {
          "ref": "853b6e94-3ba4-4577-a8cc-23e716bd6206",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1f6e833d-807c-40c1-b26a-5b01a7cd1531"
        },
        "item": {
          "id": "b34accfa-cb2f-4e84-a7cd-a7d43313d284",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b38d5c3b-1af6-42ef-92f0-0f75b82267be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538230d5-d188-439f-8b04-c1d8804c4953",
        "cursor": {
          "ref": "b5c3e2e3-3897-4642-84f8-0987c224df91",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "17b69057-eded-4cf2-80f8-07d2905ddcc1"
        },
        "item": {
          "id": "538230d5-d188-439f-8b04-c1d8804c4953",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3109f9ee-1a68-43c7-8c94-97727b5c2f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9cd34ba-a89a-4a35-bbd3-47104a0ff72e",
        "cursor": {
          "ref": "aa1743b6-1172-44ce-b721-d0431dd15bcd",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "069dafc6-520e-4395-91fd-6ecad5d58547"
        },
        "item": {
          "id": "e9cd34ba-a89a-4a35-bbd3-47104a0ff72e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "777b143d-e006-461c-b765-b07778a6b15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025945f5-a089-44f2-a558-21fb4c23bc00",
        "cursor": {
          "ref": "3bb3baf5-41ce-4aa8-ad49-9479f47127e0",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "47c237e8-dd8a-4a10-b2f2-151a3c09469c"
        },
        "item": {
          "id": "025945f5-a089-44f2-a558-21fb4c23bc00",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cdca4252-e009-4d3a-83b2-9426073fd7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056022cc-7012-4a25-8e40-a4c30b7ce0c6",
        "cursor": {
          "ref": "6ff728d9-1cd5-4047-b8d6-75e7c05e85fd",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d131a5c1-7962-4116-8103-96012c60b2e2"
        },
        "item": {
          "id": "056022cc-7012-4a25-8e40-a4c30b7ce0c6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "650c87b3-bbc6-4bfa-ac92-a56323dd7020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da39079e-b607-4a96-98ba-1770050377b9",
        "cursor": {
          "ref": "02174f24-d2b5-40a8-b071-31986c826d1e",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3c69c597-1e2f-45f3-bf5c-7111a6aa5c9f"
        },
        "item": {
          "id": "da39079e-b607-4a96-98ba-1770050377b9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "656ebff9-2ae8-4d99-a20e-70ccf2a032d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdccde47-999e-4cbe-a07b-d5c16e6f4400",
        "cursor": {
          "ref": "d454b1e6-cb43-4d3a-9553-40d7b436fcff",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "458c23dd-5b3e-469d-92f8-9265f2e2e1ff"
        },
        "item": {
          "id": "bdccde47-999e-4cbe-a07b-d5c16e6f4400",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5b9c03a3-7166-42c6-8215-0903c5cc21e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5669d634-bfa0-4a66-bb3a-fea64c5b9921",
        "cursor": {
          "ref": "bb3566ee-81fd-4ef4-a29a-2202a1f48b30",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "056aeb17-600a-47d6-a033-8466b5ea528c"
        },
        "item": {
          "id": "5669d634-bfa0-4a66-bb3a-fea64c5b9921",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "19fc9be7-2dd4-4d83-ba9d-1b8e305239e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cac128-e618-4c17-ad2a-f9e586ccdf25",
        "cursor": {
          "ref": "27daba2b-ef19-45c2-b047-b91110fc0c13",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cd3e4c9a-6224-4812-8ee0-5d1de044b2fe"
        },
        "item": {
          "id": "97cac128-e618-4c17-ad2a-f9e586ccdf25",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f1ceacdc-1c61-41ee-82a5-c46a48dbb39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9550b85-53cf-473c-bd76-22c238beeab4",
        "cursor": {
          "ref": "142fcebe-50b4-4536-aece-a4294dac8e9f",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1530ec0d-6fe3-44d0-80f9-9f6a83c42136"
        },
        "item": {
          "id": "c9550b85-53cf-473c-bd76-22c238beeab4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cb01e9c8-3928-46d9-8e2b-42c25358d39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d6129c-17d0-4f93-9511-f27160776e0b",
        "cursor": {
          "ref": "a75eed1e-98fd-4127-a80d-d673711d9f19",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2a6db5c1-7e2f-4a9d-a0b9-76cdcda0071c"
        },
        "item": {
          "id": "80d6129c-17d0-4f93-9511-f27160776e0b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d8afeb1d-0f4e-4957-b855-e735281e0cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec615dd-31aa-4e95-82f2-fbdc0550b213",
        "cursor": {
          "ref": "63ec5a9f-f7e3-4549-a081-fdadafc364aa",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0151d1c0-b1ba-4c0e-b231-4f981aa3d407"
        },
        "item": {
          "id": "5ec615dd-31aa-4e95-82f2-fbdc0550b213",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "89f4f13d-4fd3-42de-a2c5-e8132b17af68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8cf97ec-8eb8-4866-9f5b-bf95f5cdb32f",
        "cursor": {
          "ref": "15abec8b-4a8c-4390-b891-e512c8fde63a",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b3a41bcc-df15-4e02-9607-8fb8c2bcc075"
        },
        "item": {
          "id": "d8cf97ec-8eb8-4866-9f5b-bf95f5cdb32f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3a47462f-a316-451e-9d8c-011743d03097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b650add-6886-4704-a84a-9eb49a6721e0",
        "cursor": {
          "ref": "01d04b0c-b869-43bb-a02f-9df89ebc2875",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3232f338-1d96-4d7d-a4b8-b67c984eda64"
        },
        "item": {
          "id": "7b650add-6886-4704-a84a-9eb49a6721e0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9afb7db4-406f-4e6f-845a-7d6251e86eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd59c23-88e1-42ab-b3be-fc9ae348509b",
        "cursor": {
          "ref": "6e933ade-9a9d-423c-a152-f9e2b04f7b8d",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f06a4178-3d9e-42d6-835a-15d2a6ca790c"
        },
        "item": {
          "id": "0bd59c23-88e1-42ab-b3be-fc9ae348509b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "889de417-5739-4f97-9ae4-0839b54caf3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dffe26b8-8a44-458a-8632-4143c21b88cd",
        "cursor": {
          "ref": "f79f86c9-756a-49d4-96eb-b1f4d6579ced",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e18d1e83-fbd0-42b8-82d3-818a8ec65a35"
        },
        "item": {
          "id": "dffe26b8-8a44-458a-8632-4143c21b88cd",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "466ae97f-3bf3-4b6e-b670-d343763ed232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882a680b-3d4b-46ae-a185-8742dbf17b5a",
        "cursor": {
          "ref": "1888f6c9-106f-4fb4-be50-379e21599f17",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c8f76bc3-6f6a-44a4-9a2f-29e769046d43"
        },
        "item": {
          "id": "882a680b-3d4b-46ae-a185-8742dbf17b5a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c6a2877d-9852-42cd-b1c2-68ce998377f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d29031-0c66-4bd3-b22a-6f4d8735a3da",
        "cursor": {
          "ref": "33e8de4d-6a5a-412b-bdb1-5f65e1af7a9e",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e8bf708a-6ff1-4eda-ad2e-37cb5b797b4f"
        },
        "item": {
          "id": "37d29031-0c66-4bd3-b22a-6f4d8735a3da",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ac7987a6-1802-4622-b9e5-36a6c4e808fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2772a3-dbe1-4272-a080-f210893b4c91",
        "cursor": {
          "ref": "4e9d6e96-fede-4c3f-9a07-72994b4eed12",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7c1431c3-9338-4149-b977-0217b7e79855"
        },
        "item": {
          "id": "5b2772a3-dbe1-4272-a080-f210893b4c91",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "512881a1-ada2-4b5a-95db-ce77ffd90a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0607627c-8102-48f1-a17b-29ef536143ae",
        "cursor": {
          "ref": "ecd446dc-b808-4420-8f6a-3be434705d66",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0e99dd39-3290-4883-bfa9-cd9b6ba567e8"
        },
        "item": {
          "id": "0607627c-8102-48f1-a17b-29ef536143ae",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "001e71fb-d308-4d51-b508-6a8066e1d08d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f70afe1-13d1-42cd-bc28-cdd8bbec338c",
        "cursor": {
          "ref": "3109a8d4-429e-4d25-a7f2-8bd158b9e6a1",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8e250595-1c2c-49b7-b4a8-303dd6d4778c"
        },
        "item": {
          "id": "6f70afe1-13d1-42cd-bc28-cdd8bbec338c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e417f2b3-7cb7-4ac5-870a-f7ff35bbdfa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babc98e4-2d67-43ce-9d75-888b01ff99d9",
        "cursor": {
          "ref": "ab7baae4-1eed-4fec-a207-eb7a7d1811d6",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "af4c9fca-3aca-4109-ad45-7ba8cc5b8baa"
        },
        "item": {
          "id": "babc98e4-2d67-43ce-9d75-888b01ff99d9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2d1cdde7-b50d-488e-9fa5-2797cc5bcb24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6e7e8d-df7f-4f43-bdaa-7a1335bd65cd",
        "cursor": {
          "ref": "bdd7c79c-67df-4bea-8c93-138e9ec5cd13",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "61929ced-4f04-4fc1-8a21-a14faf874060"
        },
        "item": {
          "id": "1d6e7e8d-df7f-4f43-bdaa-7a1335bd65cd",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e41e49aa-8fd1-4ddb-af4b-07fda95af0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a68718e-e8e0-4f95-8a41-65a03492745a",
        "cursor": {
          "ref": "7842acbc-d672-4994-8d14-5ddd79944f5b",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "33e09beb-6f85-46e0-be13-3b452b958a59"
        },
        "item": {
          "id": "6a68718e-e8e0-4f95-8a41-65a03492745a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "64fc313c-6a01-4bf2-84f0-011df6785154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b43f08-3c3b-439c-8670-54b027facfcf",
        "cursor": {
          "ref": "9553a059-003f-4b08-81c7-837016d43690",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f32c817c-0de7-4e72-bcd2-4bc9b8f5a5a6"
        },
        "item": {
          "id": "41b43f08-3c3b-439c-8670-54b027facfcf",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "396eff23-d7ca-4b13-b2fc-1f08c75c4ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36abb24-f96a-4fc6-bfd4-7ecd1fac4661",
        "cursor": {
          "ref": "65dd2e82-c2ed-4b03-a4c5-48b72d11bc3f",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ee581849-452c-47a7-9d08-b5a2c6c9a5d9"
        },
        "item": {
          "id": "a36abb24-f96a-4fc6-bfd4-7ecd1fac4661",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c6ac6bad-c686-4453-b88c-960189a1f12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260e9906-c2e7-4294-b326-811487a29d7b",
        "cursor": {
          "ref": "eefe4478-1f92-4931-9147-0d875f2f6ba2",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "784a4c11-1b02-4c5c-92c5-dd903ca97174"
        },
        "item": {
          "id": "260e9906-c2e7-4294-b326-811487a29d7b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ed247cc1-5bb5-4b83-8a01-7133feb4dbbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad441cf-6962-4226-b740-37b06c732f8f",
        "cursor": {
          "ref": "ccb6aaf7-6fe4-4933-8054-1af72a7dc123",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b5d45173-d5af-4eaa-a072-e2eac01d1045"
        },
        "item": {
          "id": "3ad441cf-6962-4226-b740-37b06c732f8f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "89f09727-3303-42de-8aba-02e4d4041fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8afde4-8b89-4c7b-ab96-cdbff2cf4b3f",
        "cursor": {
          "ref": "51f0482f-db6b-4177-973b-399826354a3a",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5fc4ac46-5583-4ee5-9233-ba77713586d3"
        },
        "item": {
          "id": "9e8afde4-8b89-4c7b-ab96-cdbff2cf4b3f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a214a769-6100-4203-a7fd-4e39d15fb417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc05324-7499-4d71-80c5-58ba273a472d",
        "cursor": {
          "ref": "29e0e65f-3f01-4bbb-8680-6f77566d9511",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c4e98dac-082e-4a05-8ca1-b6827625e6b2"
        },
        "item": {
          "id": "1fc05324-7499-4d71-80c5-58ba273a472d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "545606b6-8a90-4c58-9dcf-cc77144c3883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4b0de7-ead3-4833-86eb-f326b0dca534",
        "cursor": {
          "ref": "64dda0df-dc34-4b5c-9d57-eb9db828b6dc",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "30adbe47-fcd9-4165-9f30-cc2fd4913fcc"
        },
        "item": {
          "id": "3e4b0de7-ead3-4833-86eb-f326b0dca534",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "463d2e4d-476d-4ec8-8fcd-7b8d8b054734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631448af-9640-4741-934c-ae5e094931fd",
        "cursor": {
          "ref": "e28a0248-ac50-4250-a7f8-a33dc50f9777",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "45515d71-e9a3-4863-b456-1b50bbb84262"
        },
        "item": {
          "id": "631448af-9640-4741-934c-ae5e094931fd",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4907a6b4-3de1-4b60-b444-e9dc1d2b5c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98258c7b-46f0-4576-bb5a-37b695318b49",
        "cursor": {
          "ref": "0e7b4419-b23c-4757-8b9c-e5327a8fa7f4",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "28b92184-815f-480e-9d28-8950ec8ff3e7"
        },
        "item": {
          "id": "98258c7b-46f0-4576-bb5a-37b695318b49",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "913f0d5a-faad-4506-b485-1a613975d8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d816f5-985e-4201-bf05-6cba3b7e1015",
        "cursor": {
          "ref": "d67d13ba-f255-4cf8-990e-28e9a8488796",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2d60f056-c4c6-4020-be2d-9b659585cab7"
        },
        "item": {
          "id": "b4d816f5-985e-4201-bf05-6cba3b7e1015",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8c77227b-7d3d-4ad3-9a10-c2f131454718",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6027e3c6-f604-4fd7-b232-9ed52187177a",
        "cursor": {
          "ref": "f161253a-4ee3-49ba-bd2c-e07b03d074a3",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1a7ba0d8-7f32-4d0f-b1c4-f12b0d10b323"
        },
        "item": {
          "id": "6027e3c6-f604-4fd7-b232-9ed52187177a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e8c7ca25-6eef-4808-9cf8-446c0b871a87",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66edd1c3-69b9-430a-ad15-5515a8f1aa18",
        "cursor": {
          "ref": "90fe73ec-1044-4ecf-ae7e-a305f2378318",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c019c558-9890-454d-9e9e-3aaab613ab0f"
        },
        "item": {
          "id": "66edd1c3-69b9-430a-ad15-5515a8f1aa18",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0de392a3-4821-43f7-b11d-7b10aaac78b2",
          "status": "OK",
          "code": 200,
          "responseTime": 244,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "57fa7d3d-2cb7-4f57-b605-733a622b6264",
        "cursor": {
          "ref": "e4ddcba3-e2ff-4f7e-973c-25aea9549bdb",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "26edbbae-a7fa-4bd5-9ac4-04ca81a8fc21"
        },
        "item": {
          "id": "57fa7d3d-2cb7-4f57-b605-733a622b6264",
          "name": "credentials_verify"
        },
        "response": {
          "id": "51eea686-9fb1-4814-8f64-97d3dcba6d08",
          "status": "OK",
          "code": 200,
          "responseTime": 585,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "73044c39-452d-40ac-a75b-3513897bb5df",
        "cursor": {
          "ref": "0e45f1f7-b6b1-4c63-ab09-d493b7120e07",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "888a7881-5132-4f5d-b07b-0a876bbb3c46"
        },
        "item": {
          "id": "73044c39-452d-40ac-a75b-3513897bb5df",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ed054cf2-90f5-46fb-8e3e-a7754c352c7e",
          "status": "OK",
          "code": 200,
          "responseTime": 627,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2358ba5-7887-4c8c-a77f-a7f985a2a6f5",
        "cursor": {
          "ref": "8b83df90-23f4-4e76-afe9-6727cb7509d8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b392d0b8-054d-4a98-9bac-7d1b9831552c"
        },
        "item": {
          "id": "b2358ba5-7887-4c8c-a77f-a7f985a2a6f5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5db7d69d-9912-4bce-9373-042bfa7c3fbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2358ba5-7887-4c8c-a77f-a7f985a2a6f5",
        "cursor": {
          "ref": "8b83df90-23f4-4e76-afe9-6727cb7509d8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b392d0b8-054d-4a98-9bac-7d1b9831552c"
        },
        "item": {
          "id": "b2358ba5-7887-4c8c-a77f-a7f985a2a6f5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5db7d69d-9912-4bce-9373-042bfa7c3fbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2358ba5-7887-4c8c-a77f-a7f985a2a6f5",
        "cursor": {
          "ref": "8b83df90-23f4-4e76-afe9-6727cb7509d8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b392d0b8-054d-4a98-9bac-7d1b9831552c"
        },
        "item": {
          "id": "b2358ba5-7887-4c8c-a77f-a7f985a2a6f5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5db7d69d-9912-4bce-9373-042bfa7c3fbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b9c41e-13bb-46f7-b671-d9382205a9c6",
        "cursor": {
          "ref": "9714ed5b-d2f5-49e1-aafb-3f8785fc5002",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5720f17f-9b29-4d78-b0dc-7145a4d8159d"
        },
        "item": {
          "id": "45b9c41e-13bb-46f7-b671-d9382205a9c6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f2fd89e3-fa22-4988-aa5c-50a6b3c006de",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9a8596-9b02-4aff-90f2-f4c9b02fefcb",
        "cursor": {
          "ref": "28ec07dc-54bd-4e26-a9d9-bbf72db94d20",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4a6e2e65-467b-43d8-b14b-30685a5e5a4f"
        },
        "item": {
          "id": "3b9a8596-9b02-4aff-90f2-f4c9b02fefcb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fd9f09f6-e06e-48a9-8c21-7f4bc97ee957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3b9a8596-9b02-4aff-90f2-f4c9b02fefcb",
        "cursor": {
          "ref": "28ec07dc-54bd-4e26-a9d9-bbf72db94d20",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4a6e2e65-467b-43d8-b14b-30685a5e5a4f"
        },
        "item": {
          "id": "3b9a8596-9b02-4aff-90f2-f4c9b02fefcb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fd9f09f6-e06e-48a9-8c21-7f4bc97ee957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e9326ff0-2fc8-4c95-aa78-55daf99fcd43",
        "cursor": {
          "ref": "cea4847b-7697-4c37-aa95-5ac11db9ea91",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6e7be31d-b122-48cb-85d3-6976aea125d9"
        },
        "item": {
          "id": "e9326ff0-2fc8-4c95-aa78-55daf99fcd43",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0a0b6d9d-51a8-4228-b000-a09d73740b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "dabb78ce-1c9e-4eda-88a8-be54ad820119",
        "cursor": {
          "ref": "5e789d90-d562-4ae2-ba78-f6f05ef982e9",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8a253f52-a667-4720-83cb-a1efcd69fcb7"
        },
        "item": {
          "id": "dabb78ce-1c9e-4eda-88a8-be54ad820119",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "79c080a3-1e76-499e-9ee2-2599e8cf0bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "dabb78ce-1c9e-4eda-88a8-be54ad820119",
        "cursor": {
          "ref": "5e789d90-d562-4ae2-ba78-f6f05ef982e9",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8a253f52-a667-4720-83cb-a1efcd69fcb7"
        },
        "item": {
          "id": "dabb78ce-1c9e-4eda-88a8-be54ad820119",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "79c080a3-1e76-499e-9ee2-2599e8cf0bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "eb6575de-9690-4832-940f-73a6318622fb",
        "cursor": {
          "ref": "21be155d-7b33-4c6d-87c2-38aca74ffbc7",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f1659d61-de3b-4df9-922e-e4a4583eb05b"
        },
        "item": {
          "id": "eb6575de-9690-4832-940f-73a6318622fb",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "054ade24-eab3-48c6-8e43-d4434f00983c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}