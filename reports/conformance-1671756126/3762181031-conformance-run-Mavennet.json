{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "38db1b19-abcf-452a-b0f6-3d156d61bba1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a5b125cb-eb11-4a4d-b931-b565901453d0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c67ba54b-5679-46f6-a905-c4431fac3aca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4b097a13-418a-4528-a782-7045cb2203c7"
                }
              }
            ]
          },
          {
            "id": "ab95dc76-bd03-41ed-a098-db5eaccd1474",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30b2a18e-facf-4fd8-95f5-2ab8c2554c1f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "24ed2113-a47f-4fc4-8594-e72266ac6b34"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b80aeddc-fff7-4322-ac24-796c4f59a026",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b2595c56-d6bc-4175-b01a-238703aa57fa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5d816502-5957-4f15-8d8c-359d5ed17ed4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "26ae56db-9983-408f-92e0-f1630d9b4646",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a22e00c9-8eb1-441b-8e77-9606346fc568"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff9521a8-5b73-4d38-aa60-973bcf20aee6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "59d40dd0-5b41-4526-8b50-f367655005c7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b10e289c-a9ee-4113-b073-c76b0471c1fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "203e08da-3d52-42b7-b1db-4dd152869e25"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b37b242-f612-4143-8864-5107eb005077",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1da01060-9c1b-4dc9-8b8f-60417ae1fe21"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64bab0c0-87db-483a-8723-072f67d75573",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4997fa14-95f3-479f-9951-cb99e89534c8"
            }
          }
        ]
      },
      {
        "id": "7073cc51-ef13-4017-b9e8-83235c519257",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "722637d7-b6c8-4f6a-b46b-bdd7ba7e69f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6dd9cb0-ecf6-4508-b919-fba0cc665a0a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2d669e72-55ea-4551-9e5b-3641cfc5d096",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f402ce-9f89-47ca-be0a-4a0ba0862d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23be11eb-5163-4643-adf8-fae225755d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652cbbd0-63ef-4847-bc92-cf5f1eef11ab",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3930988-564f-4041-9370-6f93a83ead41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90fb98af-771c-428b-aa11-8baa0a64e5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68796b93-82fe-4459-85d9-05d0e60c9e87",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc886db-ff7b-45ed-b3aa-be1a8c033018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5943ec6-7f17-4a23-86eb-001b78f4fa4f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a4479749-287f-4d86-8d73-1d5a14c51ae5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0351ba9-7470-4b2f-a47f-ad701fc801fc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17baaa39-39c7-4864-926a-7615d3948d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b66d707-1562-4d45-920d-9e85691fdd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4775a7-9035-46bf-b422-0d85690fd160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c758f5-7cac-413c-a97c-60e9d023b43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db269cdd-ce88-4a3a-93e8-4126c241bdfb",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4b2cce-5939-4d54-8a9a-73f080463d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc7ec8c4-a787-4932-a65a-7c43768e1e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e390dc4-450a-4c15-8211-3e30c121023b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0babee98-0fe1-46dc-adcb-24a5df690b35"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ed3c146e-b76a-4a51-a440-b6d1ca6c83f5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "92a7ade0-2463-4a39-ba01-9937704b717c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50f7aff5-7167-4bc7-b0a7-d152ef907cf4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "08fccc3c-02b7-47c8-9d74-3c4f47ece82a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82cc71c8-a085-4aa6-811e-c9ef4374a51b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e143e486-f96d-4271-b4d8-9ff1d5d140cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c412885c-8f07-4624-8cbd-0a2704436ed9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de450800-04a7-4dc1-9470-7b46b8dff782"
            }
          }
        ]
      },
      {
        "id": "4175f5b2-7f49-4fce-b332-aa829539530e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1f5c6942-9b0f-401c-bd55-891a2859cc7a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d59c049-0021-40d9-a656-4136f8eb86df",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "55b47a6c-a4da-4cfa-96a7-da6764bf47a3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5046fe8d-f165-409f-9082-2d4932289a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade95914-5d48-4bdb-ae05-71c68806c6fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a07f8dd-5b38-4a4f-bac0-5412bb37d102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "668b7abe-ddd0-46b5-970c-d35da87b37af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3db0465-6953-40d3-a2bc-58e051a3657e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa08dca2-fca1-4e59-bcb2-d0d7d1068289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a0f64e-22df-488c-973f-ed406fce780c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2a05e9-0009-4648-a459-e9f42524191a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48cea10b-e267-4b83-82b6-7af92aa48232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c06c63-7034-4972-82d6-5aa7c772b24e",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be834209-afb6-4c52-bfee-9c409ddfddf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093ad3dc-5322-40c5-b8b6-54db8310761e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e285aa9-3221-421b-bb2d-ef18919f900d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1eb37d48-9238-4bd7-82b9-8979dc8e3eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c965d3e-1f12-49a3-a3d2-ddf9868d973d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f861178-a2e3-4047-b844-9ee9c903b4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc292f4-08f5-4f4c-a34a-2bd57da7ed58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671b1cba-b1c6-470e-9c4c-c7d90ce8c37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e80a4ad-d110-48c1-aa67-3c4f91ca83a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e0fa11-84fc-4066-b22b-2a30647be49e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2594a572-4111-449f-b7ae-b02ca4f1f59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841f166b-5f48-49d0-af87-3b85616939aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3915f145-8a63-4a60-b1b1-01b06a5afba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b973d321-f311-42cd-a256-ccf281e491b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987ad0ac-a577-4f8b-908c-13b189f6779a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03ef628-bfca-4897-8634-0737ead3d6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c6e96b-fdd5-4ffb-910e-f37247896461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e8c13e-1d6b-49d1-85be-0f05f4b22f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c6ac00e-25b3-4ef8-8681-23f4c20166d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a419be-ae46-412f-9d13-ac29ec0da0ca",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7361be-11f7-40f6-b3b7-f0ba8392b71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b5cf69a-dfbd-4178-8c67-2e4cce799e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb454088-151b-4c33-985a-89d05140c6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7008d5a4-33dc-4b65-a478-147c58a98d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51b3ff9-6a84-42fd-a60d-31b3c5b83577",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fb598e-0f10-434a-94e7-5e6688a2e72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc8dd26-e703-42ff-b15f-a3b7386e610a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213ab3e4-6dc0-43ad-968a-e06ffc159993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce1f1efb-bfc0-41fb-be99-9f02c07ef81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b74d79-47ec-4386-85ab-10f998fe3168",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03397c4-8a31-48e7-b4b9-5ee60f19d6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2714d4ef-14eb-424e-a18b-de808452c443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e566824-e4eb-408d-8a9d-5f690b690b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b916253-10c2-4c42-ba2d-7102ff628192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81dcc09-6fa7-4a10-ab29-05cadbd0a43b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201d9b71-43b5-4603-93a0-55e2952a623c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87574da3-566d-4a82-a775-0ed701b9d014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3edacbe-6d61-47a4-b4fe-a555cfefc1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac2fe617-6cae-42b9-936b-8e6829d5fb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f231b8-51d6-42af-be80-4b7ba96f1d85",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "991c2ef3-be7c-4724-8a1b-81c7ca0598e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41a05cc-371c-42ea-9f5d-ef474e79bc4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284df03c-3c6f-4345-a4ce-8bf61639b08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d72296e3-1c9b-42a2-82bd-9cedfb3f27ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbaa782-eff8-4450-9539-9ab7c40efac1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28500ae5-46fc-4d6d-ab18-ce6807b2f628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2cd486d-6d17-4d13-b25d-b71b96aab8e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983b03cf-69ea-43f7-acb4-0c821f795a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2d186b9-3927-45f7-8a8b-1f985b37b120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb606712-4ce7-4ba9-8e0a-afd85c5e683c",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d55d62a-e3be-46c8-bc80-b18596d25a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21649294-0fec-48f8-82dc-a41f3252e6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86da82c6-aec9-45b3-a165-24b9915fc173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "324088a2-3acc-4dbf-b57a-064e2af77bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf88247-4ae1-4506-8cee-f900330673d7",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6760ecdb-c364-4e1d-b7f0-b02e3e4f7e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb08b1f-7fca-466d-b472-0be2cceb9e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6437fbb3-0a83-4d5b-b50e-33f41e8dd099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd3320db-8398-4f9f-a3ab-893dc9d80ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0a4ac2-eb74-4019-a254-716cf403c57e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc6c59d-24eb-41a0-8fd2-9fa03b8d0d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41935d0f-c20e-45c4-822d-73e0dd1eb24d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f0533e-7c15-483d-b8d6-dbb2b775b428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3de1b267-4ff5-42ab-ab74-d6b78cb70894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec215f1d-2edc-4edf-860c-ebfaabee3010",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fe023e-7fba-41c2-8fab-0fca67a1258e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6e079c-c6da-4ac5-8f7c-320657d58887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33267fec-a93a-40e3-a86f-f327750b817d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "379108ce-968d-400b-b832-f6f8ddc98764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43271bd6-e910-40b2-acb1-6ee987c1999a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e77031-4e3b-42c8-a7d7-711d28b43611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cfa7f3c-2957-4efd-ad7f-03849ed4ef00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd341bc-08a1-4e7e-8b82-2bcde48a96bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "309c44eb-b95b-41ca-b137-fb0b326840ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6780d8ff-45c8-481b-9b82-83e714838baa",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd04689-cb34-417b-bc9f-df75973bd6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8721247-d1f6-4253-9049-3ce09a827968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a362628a-92f6-49d8-ad55-6c8c249c1a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d414662-90d9-4c54-b26a-3ca0eaddfda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6c416a-ebb0-437c-b641-eeb77fd899b9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "795e8edb-6381-4036-9442-02a19618f73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0820de-fedf-46e6-83d9-d4706840fa04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf42c959-15e9-486c-b885-4810876fb386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99eb80f8-0904-43fb-8442-2cc65492885e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7850577-a645-4bde-bd36-1300efd55417",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855cde09-679d-43a8-9502-aa751c533ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b606b60d-0010-45e8-9ead-06084a3e1843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674e5b30-a660-4c65-8734-add38b117a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5f1425-37c4-4931-9494-b04a6fd7133a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7eb731-6832-4261-b339-59c68d99fecf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b0d721-bf1c-4b11-b183-c716bf8aaf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94643f4-5295-4043-a729-8652b5aaaf44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2f4011-f4ec-400e-8de2-fb0dcce455ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6acfef-e393-43ec-99b2-87f48321a0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14da8bc8-84cf-4a81-9f94-31526f322d8f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0b60f3-e305-4a57-ab4f-62986bcc86c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ea6cc6-0dbe-4ac9-952c-f34bd260042e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41c59e0-71d3-44d9-9fca-d57a5b8a5e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d7e3e6-d5fe-4608-8b0e-137004979112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27577260-40a6-4c84-999e-68200778f0bb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc43d2cd-4404-4da6-abe5-05c5c91e7bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e106daad-a692-467c-84af-f17e7cf71678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8285af7-a580-48ba-a331-4997510ba56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7f6560-cf9c-482f-acd9-a14167de1833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882fcbff-21e2-4412-a2de-a11a44663cd1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c04c08-40a8-445d-8e87-441399bf0ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a341723-e756-4d30-9531-654a8805ef58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06f394f-b687-4b01-8d96-84eecb6ca7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80fae6ee-5825-4442-b3ac-b89a5e8dfec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4ee3c0-3763-42fe-af98-0a5baa2a14ba",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa78d7d0-98c8-49e1-b29c-c0fb4a430d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413b6114-d73c-4feb-a9b2-3bf35d91c69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0588dfb1-aaf6-4be6-a1c1-344f6632c5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62c0ead1-7659-4716-a319-2984da3f17ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18ff1bf-a68e-42c8-9f6b-ae1cda3d7df0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5dde685-2d5c-4db5-8be4-d9eccc9ded3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30abd832-9833-4ac1-bbe0-58324c995f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5170a254-74e9-4962-b32a-a75111bc7496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff43c27e-c87a-4940-b747-40a9f1559e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53eb8a8a-08b3-4d46-b60d-fd106a5a53e1",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99b31cb-5b77-4e09-8a4c-448d789128e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4170f1e8-f5dd-421d-bc2e-cf72b293e1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a7a920-4ca8-475c-b2f0-7b78e660f895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "104c4bfe-6a04-4709-9cad-45aa439d83c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27630b5d-6906-447d-80da-68b5fe4db7b3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d623be-2ebf-469e-95eb-1708df539d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0000da27-5f48-4483-803d-0aad620391fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d0b0fc-35b6-47ed-9bef-c948ff64fd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1c61b7f-6721-439c-9426-d965c80636ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e3d713-b10b-449b-bcbb-85665149c916",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae88701-da2d-4900-8576-aad8d2550d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f434fea-5e2c-4912-9494-2761cd2adeb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad327b4-4a38-4675-9e0f-b75d6d21d04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5378df8a-f09f-41a3-83be-a28266e85af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c22385-4e3d-4780-9caf-04c8a35fb0ff",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2f4a77-6d8f-479c-83c2-c09743bb66c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ebed34d-6d4d-4c2a-b92d-7bfb460b5b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5c1ef3-df52-4316-8448-6670cd3437f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc3a3a2a-fddd-462d-b818-4c47e422ac88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f6b278-35fa-4e0a-ac29-a08cb1f0c1da",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd861a90-db79-41b0-a8a7-3208563fa5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "917e3e2f-8a9f-407f-b070-430350f89068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df873b7-ea8d-4036-b3c2-b0444dc95110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd07f0c0-a058-4552-b678-94099f04ac21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d65546-0e84-4de5-9dfa-40dd484f2499",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c175f99-e1d6-4c87-9afc-af626e4ee6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa926468-fef2-4991-b825-1f5db4fa83fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b316b4-c9b6-4395-a82e-8c55dbb565e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "11180a3c-96ae-442d-91af-04caa980eb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8447fa8e-6ef8-48b1-8585-011aeb90c1f7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca2637f-853d-457a-be58-96a1be40ab6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42b6089-97a5-43e9-b26f-0257df6991e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df9916e-0f74-4234-a6e3-de2f9a411638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf066af-da72-4a30-9ec2-6bc686dc3b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbcaec7e-c46b-43e9-b6a0-2ae0612fce9b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3815da5-51b3-4214-b966-4bc37c074402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0b0868-061a-46bb-a6a3-e8a965d2534c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdea0aaf-4c37-450b-8387-a6e811212459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be0df03e-e40b-4624-86de-65fe8599024e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd786ae8-c0fa-4f89-8eb3-051ed01fdcf8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6874daaa-9029-4f0e-a8c4-7c38d5de1c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32438d28-e43e-41bd-a0ee-64d35385d1d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190b388c-52bb-4f77-998b-bcc26a6649a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a387346b-7081-4ed4-85eb-4a929e0434ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdd1ea9-68a9-4db2-8a03-0a877a5e94e5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99def8b7-3c0f-4810-8a64-0aab16580139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b93cdb8-7605-443a-bfb1-7f1809c7a94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2645e7a2-2c86-4ae7-9794-3a80c7f71c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "180f7a7f-64e8-40cf-9781-d3306c760755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726be340-8f40-42bc-85e1-cd9041577caf",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203628c8-e43b-4bfa-8d4a-ff59d3eaeb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce05d2d-d26f-46de-941d-7237dc88f172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75f829c-57cf-4792-83ce-3a5d26fee2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4830e5e8-f07b-4c1a-bf63-0e9de0c35674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565bf501-897f-473e-aada-9d6bb4ade809",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b2ef33-b44a-4087-8afb-fbae0f50fd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "552622d0-96e1-4abd-b350-a87851cc5f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78176333-9822-4224-911a-7a7649bc1ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92d41233-7a59-425e-b0d7-1661cde10d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7343dd4-f773-4082-b0fc-a00ca212ba65",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1032a9-7c68-4eee-99f9-ed8b6f7c21c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d5596a8-4e77-4b5f-81b6-c94e8105a542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fb8cf5-43c1-4b22-958f-5f0608d266ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec19148c-eb9f-4dda-b0e0-9e52d5ca253b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f861a4ce-98a9-4905-a46f-c1a10a7ba55c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89761e3-c367-4310-9410-25774e30c4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80f6f91b-9747-4e60-833e-6a3c6348b490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0861b6-83da-4968-9e5c-b6e92e5ec1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecbaeb02-0e76-436b-8f0a-79fe82b18e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72172d52-04be-4ba2-bbe1-72a1fa222a69",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57fdf7b-766a-4dbe-845b-64f71e5f71d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5fff59a-10e3-40fc-bcf1-1c79b02f798f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686493cc-d7ff-4c31-a95b-12cd98d804a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0849f32-d55e-4ee2-80dd-57a8e53ea93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c3b995-5cd7-461d-add1-ed4ce9bce0c1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46caa3f-e64f-45d9-8d30-85455edb4f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5acaa5d0-4502-4c37-a537-f9ff6b256e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45be4531-e4ed-4d59-968b-b9a9e3ca97ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "872eef1c-de16-48e1-a232-2f3acca20441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde9a511-6205-4ba4-8cd6-89785f9828b0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc5f1c0-147d-45e6-88cf-e3fc3c656a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be83a5d1-93c7-4260-954a-d5a06780d2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c579c1-fd42-4d76-817c-1cea19294580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b766ff1-c6da-43ed-8d42-720e1af2580b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5b602e-7209-4996-a71c-351a46e3c99d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51d82fc-19ae-486e-ae70-31749da3f63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b124ceef-99d0-4784-b2ed-403b95c6e609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e81c7b-2062-416c-a908-519e54be2249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "efc1c77e-e7ce-4cfa-a50f-b6e67668904d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eaf16cf-2605-4fb0-8d17-d18fe2d73571",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22587501-184a-405c-95a4-ef3e325bd515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6cfce74-3222-4547-bfaa-3bb79d9f8d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b52636-868e-4544-8bbd-2a5a4de59eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b82e71ca-845d-45e2-ac58-9eab6329182a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7c580d-b80b-44c1-8712-709e209c4a83",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8f064b-04e5-4e0c-8d2e-dc0866cb72c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9042487c-890d-4825-89ab-3f47e8220405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f6a8d5-4a7c-45d8-a218-bd5a00ee11dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf7a5fb-3df3-49a2-9980-a025adefdcbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3ebf0d-6568-49c2-b639-a47ae4e11f9e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db98a03-39fc-4fc2-a535-000d44022414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ffa3220-182d-4930-a0a3-fb0c22116583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d185cc22-2af2-4ac8-ad2f-9ee81fa5aeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceae5a6c-3404-46c8-9a2a-2ff508bf3c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48244e5-de67-4f37-b69a-efc6e7d294ee",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3270a449-936a-4fd2-9f69-788c65d3e9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ff605e-2b46-416f-8ab3-b26489d03bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a43e00c-a4eb-4d4b-b83a-c4ad33e1d062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72d83527-9e7e-4248-8438-21e95fbdfb73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba078c48-524b-44d1-9e21-bfd0583fcf6f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6e281b-f7c9-46e9-9e4d-e503d4275ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30b931e-cf31-49e3-86b5-8f6c03628f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc492f8-264b-4ec2-bda4-9ea59f686096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd48654-2c53-4aca-baff-5ca26461b7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94cbdc39-4e10-4577-b700-1952d90bbd86",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e0b4d6-3e2d-43cb-a00d-49ce1010a214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8268032e-4c71-46b2-b343-d45e24202409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6443e3b4-c71a-40bc-9a82-b9b6b483aa7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b50e6762-84bc-4f32-bed7-c944b9f69a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19980b2-8b68-4189-825b-6aa9b7b3c224",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6346df8e-439e-444d-b69d-833da727333a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078221b1-9f72-45ab-9fcc-34f46da474ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c5a3c9-9d47-4241-aefe-6737a993f262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97a5d91b-0034-483d-bf22-22ccc4920001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0398e8b-7f4e-4b41-9c93-d562e1cee3e3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5602783-5dd9-4b09-bc60-80068416d182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d9e9682-29bc-42ce-bd8a-8f7a41081550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97829e59-dc55-46ab-8bf4-1698894727b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2048f73-0fca-4183-9128-dc2d658400e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7052bc42-e060-4688-ad73-c703294b65a1",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61537072-a8f8-4a47-8902-cc77d9bd558a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e49c39-c3d7-4ae5-8e3b-6598e89fedd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2945e3-0c07-42e5-95ad-1ce2a940b019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "831a925d-1110-45af-8bd5-72cf41681191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaea9b87-39d1-4bd7-9d78-87218d29bb68",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "facc9bdb-c9ff-4d8d-9d54-11ee73dad03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a439b0-7ca3-4b33-8f36-e737db4ac70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb555e9b-bd5e-460f-ac1f-bfbbff5b0cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff8472d-8970-4d41-afc9-c2246743c3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e498d15-89fe-4e89-83eb-fb5c00477d7a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db5f684-1c17-4cf9-b6c6-035ea346c449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71876b08-8bd9-4e18-9fed-eb9b6dc5a82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae660ae-fabe-476e-8867-298f35aa8896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f3da3c-d5ba-4176-a65a-d9788bed33db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2476f1b6-9f6e-42e3-8074-33f81ff94eb0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacca609-9ff2-41a2-a0ab-d866f5e042c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762d4879-4690-41ea-8b48-e69639f80ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84c07d0-9da7-4354-a83e-2b8a90c5226c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9473eed3-a4ea-4431-84db-8447254524b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e00a6a8-311e-4a29-8b32-04cc3e65cfe7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3613edc2-d9bc-485b-96e7-92400d02baaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c89305-6ae1-4bb5-a411-6f8d2fa249be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db812613-64e7-4c3e-b1dd-6f6481c6e2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3537e6ab-8258-4fa0-a72d-ddae44019a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388281c6-039c-4ae9-be6d-65068c326fba",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cbe1b4-77cc-4af4-a5dd-339caf08a6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e696ae-a656-4001-a774-7c208e5c60d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb87d161-7b9e-4811-9ab2-23eb1f471a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7107dafe-5a5b-4461-bdd5-56bf99e3b4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10dfaf95-8164-43e1-b3d1-946eff477e62",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573479f8-1d15-4588-8948-343989c90a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb79c3d-fa10-446e-86eb-27d0187c114b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b4c9ab-8c14-4b65-9ce1-c2f36cfb92cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "62a0fe73-9857-451a-9fd6-930ea29b0796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d462945d-2460-4d79-aaa2-b1b3d0258c80",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d290c7-7278-4162-bf4d-fd75f764a964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df6573e-7353-4668-b71b-0293956ebe68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eaee851-7c39-4ea0-a4e7-3b9b86502963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7405aad8-a2b3-4768-8462-b0db221492ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9553ff-f610-4570-9f8c-f0a8e7b93e9e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f836b2e-154e-462d-ae2c-5f34e27580be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d3a8e3-575d-462b-b541-25a2a87cc73a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9268d3-11b1-4e4b-bac3-63b642ff3bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "61f61656-119b-4f36-8565-f1066a96c891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4f2dce-1d8d-43ca-932a-a277f5f4b502",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f495d654-da1e-41d6-8876-039f677565c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e66842-b177-4db2-aa64-429acd12fc05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d62bfc-0dc6-4706-8013-3358a3866cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "98e9eaae-4031-46de-9fdd-968ca9226f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3aaad3-f263-47a1-a75d-7d9ccd2b654c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6240f8-ce58-4099-bea9-3ce1a4da5de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea0364c-7d53-4031-a97e-8e302c67da01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edba6bb4-4c4c-4ee0-b860-a96fd681c952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "21844002-73f0-4beb-8cd4-daa42eecb5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b00131a-3756-4d92-ba6b-24b1f5f6836e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58f8bc9-331e-4929-b465-861823dc90b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ae2e83-5d4c-4918-9b86-43bbc1205041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5969c6cf-be05-4c4e-949a-5e7627341ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "80ac5ffe-8370-445d-aece-420678715293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df79e0a-59ed-4761-847f-4a290434f426",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e6e1c7-e8c9-4343-9ae9-b446045c2fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e05a8104-b2c7-4f62-9714-7f2c5232e268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcabfd4-f036-49a6-b904-a6ddb0817063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1423be-a04c-4d5e-be89-666d1481b2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9dec54a-a4b5-4b55-a9ee-8750c3c7234d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad50f717-9b43-4939-93d7-b9201c657295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f8d298-612d-46e9-b0f3-9858d874331f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba74c26-99d6-4e36-91ee-d31df9c4e56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88552966-9018-499e-99d3-b4702207da46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b6a3e4-296e-431c-8b33-0cf1c014ac2f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d97712-ee1a-4e84-8c4b-4b5340d279b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251ac6a1-a6f1-460c-9697-297ce96c1fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee63b73-912a-45ff-947f-cbf18c68bab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5587000d-3278-4985-b93b-104d74f349bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c584b748-0748-4918-b210-319ef0127bce",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802fc9cf-8311-4aba-abf2-f6afe2a23be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb632fd-ac69-4281-80db-9fe67d980084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d98df8-845c-4d73-9886-875c234c272b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6be132-6a79-414a-adab-7dfedd189351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8797a33-c813-4056-b990-443e338566fb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d2c9f3-96cf-4212-9b66-71077326f58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b494ea68-5dee-4f53-98cd-2e0e91efd6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3305b76-9274-4d91-aa3c-60405bf86a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38aff140-80b4-4750-a78d-5ceb7224f738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae0bb81-7ce5-4266-8c60-a9b5a4414143",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6232502b-bed3-4fd2-b0b0-6ec6fa99554a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db735c2-1587-405c-9c7e-faa05ddb6a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4ca860-33e0-4c53-9e06-32f14e67e31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5063c84-42db-4846-bee7-5f45333d26cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda93b26-2a4a-4725-a70c-c6b1eea520f5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834e7461-2cea-42fd-a447-1d9364f1767a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4192e36-3c1f-44e2-a5e5-856fca350439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266d0b57-f70c-4c61-b83d-2e5917633eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "271d4cb8-cfa4-461d-91e5-912e518278fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e23d61e-fd4f-4ae8-aea8-9f5fe59e5645",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02dcde24-d86a-4334-9ff0-a1e9aee8e11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd9b0d96-bb90-4245-98cf-10869b228243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cf8351-a6d9-499f-84b5-bc83306decf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5754196-5980-4018-9da9-017be289c7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa4aa42-19d7-4b6c-8807-8197c8e9225f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5dfd291-d6fa-4c4e-9101-32d1e23ef0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec5ad74-781d-45d4-a9bd-53c5bd06d68d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eff6d8a-2e7a-4ae2-b094-5d861cf849a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e12cc40-b10c-42e4-acb1-412e5159161a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc7ebd3-3f3a-48b0-8d27-0c7248676f67",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca74c0b-ee38-43ff-a290-80b8db592a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "388aabd9-422b-44d5-87de-a68991ecc2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a431118-6348-405c-b1dc-3ae3450d6409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d457b4f-3eeb-4bea-9d06-c1bf66ba387c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72d1004-cdd7-43c7-954c-700588969d77",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2526e667-2489-4220-82a0-d4ae55ed4a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289e28c9-5703-4c66-981f-870ea4546db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054817ea-7f87-403b-8f6f-0cd75e2a9525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a4e6d1f-6267-4e13-9735-71c87874b7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5c6f27-2a5f-4add-a020-8345474ba2f6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "714a519b-8caf-4d4c-8b3a-91488165646b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745d2788-07c1-4526-9ee6-de6bb73a7ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b610795-7495-451f-a4b0-c84cd130c5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "818dbe88-7375-475d-88f4-b26d8a69019c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a4398d-a9ed-404a-9f49-7bf3fe92e0e6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1a2a40-3492-4b3f-95dd-7ed2f64f2e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c54fbf-ceb7-4e31-8596-e48c81503127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb85e8fa-9cd9-417e-87f6-17597808388e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b80a922f-72b4-47ab-8e7e-c2aca5e11397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5434c3-7d2f-4c07-87a6-3ae6d22c331a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d3d9f7-bb26-478d-b7b0-7c29bd7c40e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49ac506-938b-4d1d-a8db-0aed9ad31da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4942e4bc-e844-457e-9197-418f9d0bf34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e03764ce-1a43-4210-8cf9-463aaaef4bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95346d1a-4c72-455f-baf1-be5854cce33c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cce89f-a834-458c-bca6-52cdf0703d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21c9f5d-3f38-48bd-8fd4-256ab05df4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de55178a-92c8-4ac5-b127-b139289015d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b15805-d260-4682-ad33-1741a7c323fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d56914-5fcb-41e7-958d-e30f50acabee",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d348cf-0b8d-4e83-8ebf-d4bf9fc36603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d5024c-af2c-4671-945f-abff59a1abc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657980f1-466a-4eb3-b8fc-b8399cadaa62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6fff99a-3a3d-4404-b85c-742629da0d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17995d7-dc52-45c4-af75-7e0f1d37e774",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2776f534-1cbf-4b85-9eb8-ca7888ecbe4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4093e718-cfb8-460d-9cb9-7ddf85b7d93e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bba4603-956c-4c0d-82d9-706b8f09da80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e36685d2-0383-4ab2-ad28-29c5f1273347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68929e37-c191-4638-8aa6-767540b276bf",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18596e1-7159-4f0d-bb10-48eb82da7f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52bfcc1-37ef-456d-bd0f-1b1203d48ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490be4f3-f5cc-4a17-9fd8-5956137e961f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bddb1018-c52e-4644-9ecb-d6f44fd745a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d522aa2e-0a5b-4cd6-8b01-a40e02460044",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1c7de5-1123-481a-9a98-003dcfb7c24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd57861-1dd9-4ff2-a343-a9930350033f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9f8a91-64c7-4aff-9328-e7d0293be31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce4811ec-97d7-4c15-b2f0-ea61a54ff117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a32976b-5cfa-418d-b965-75ce8c0cbee4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a84ada-9796-4aec-bf54-ab103a48b934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d20907-85c4-40fd-9a90-61abc2ad69f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed43aca1-7378-42d4-b76b-ead401342aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6ec5fd8-0d85-46e5-a444-1cdc17a2556d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ca53a2-c7f8-4538-b866-55b1d04772b7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d0b408-edf1-4ea3-be03-8c4636a82cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c44c85ba-f14f-49e3-a7cc-8512a1410cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0319b9c5-41d4-4bdd-b961-87225b6c02ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3e6bfb-d961-4054-80aa-d6bb36b9c3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0e7f7a-3258-40da-8882-7b731bebd2ec",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5220ee22-710e-42ff-abf7-58582092afdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f943a41e-07c2-4e1c-9ed5-43479a1bed3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048b9d8a-563f-429d-8450-e3417d5d5331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e461e542-bcda-4259-85ff-3e20300e2773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e28ae9-90d6-464b-984f-432622dc5b84",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03b645b-73b0-43d8-8193-ba4e933fb74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad738ff7-ae37-47c1-9d3e-89f67fbfb5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7547dd04-a118-4f30-8a0e-ac40493b2193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8290360b-6c8a-4c48-9d19-204254507c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80627b2-388f-4663-ab21-e8f0f4a2cab3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984a5aa4-0fef-4d2e-98ef-993bf92b628c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6972df01-0663-48d8-8e73-5927b364cfc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1db85c9-7aac-4ee0-a7de-24c607f1595e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "20f4af70-7390-4ca2-a2ea-5be5f06411b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468944d0-de65-4079-9fa3-4ac8c4b915d4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddd1c6b-5a45-4d85-9c76-45617e4ff31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc2169c-cd63-4de9-93ab-42ae4223bce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf11cfa-b677-465a-b4d7-db8afcc43d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfcf3521-c38b-4111-b8bb-b6d9a15cf48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b4e512-c5aa-44ad-96b1-5e8fa6c88e5a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8add444b-526d-48b0-8173-4d08f4dc12fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8633631e-72eb-4454-a3ef-9f31fc93e260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850b16f2-ab0d-4a38-847f-6eaf2081040d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3de2d2f7-dbe7-42ff-b467-07b9c51e0ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa416c62-5f44-4c58-8bbf-167145679931",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd028a7-693d-4909-914d-ebee53c89a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e0001bf-3306-467b-9cdc-2cf1188cca2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d0eaec-f4f9-4359-8fea-ce2f5ee049bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc958de0-27ae-4dbe-ab26-648f22c096a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574cc138-8321-4c56-881e-83245744aea9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4de1b2-9712-4eab-b3ed-33d75fc767af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ae91e7-c739-4666-8e34-0810f46c4ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5499920a-c761-44b5-80c3-428c9cc812f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9572b338-cafa-4103-9e58-b6d453d7442f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2a43f1-9f50-4e79-a506-99a43cf3e651",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a975b54-0b6e-41cf-a6e3-2d4357a048b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2617e788-28ee-4f80-b811-1b4b8ee24c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b4df7d-760c-401a-8475-dbf0c2fe8da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "54675599-f5f4-45d4-8b56-cd347c29f670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39632c0f-7106-4174-8989-b8293e172d1a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08768fa5-54ff-4015-86b5-49cd0a465524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "daa8db26-d634-4b9c-a0a9-3a9f06508316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a25bd8-963f-4375-88f8-8b98a1fef942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "72f2cd36-b7ef-4467-afa4-e0965ad7de9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "afdc310c-bc19-4fd0-8ca7-cfb27adb652f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9704fde8-00a8-4e83-9ac9-dd5004fafda0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3804a1-93b4-484d-9fc5-44391ac322b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6858cf4-6df4-439e-a762-7d6abc358ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffabf5bf-7753-4c7c-b900-f4a0c3c10aa7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6fb4ed41-c4f7-4d0b-8895-d99166f9cea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d03af3e-22e0-4bf7-b3ed-e85a38a5f895",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b59bbf2-e59e-48ca-92ba-d5544d98bc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f04e05dc-fbb2-43ba-acff-d28237a09bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea46bb3b-01c7-4065-a6a2-5621c5fb7ead",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "531c21e6-b40e-4eb5-ad67-955059dbb970"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab4c10cc-8701-4b50-b37e-7bae12309d07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e788785-00d2-4a6f-b1c2-81585d9632f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58bbd8f2-cdd4-4662-b8d5-d55dcff22d97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "081e6741-b93e-4ff0-8b92-d27f692a134e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "10febd6f-ca18-4939-9b09-72242c0e0755",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9409ac55-d1d6-40d5-a885-0bec0c00b756"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "440261a8-697f-4951-8f88-75b48fc9467d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "88fb7fef-ba47-4492-8d54-e11536eaa834"
                }
              }
            ]
          },
          {
            "id": "e5884902-8978-4dc2-ae19-f0e767503629",
            "name": "Positive Testing",
            "item": [
              {
                "id": "57ce9c27-41f1-43e6-8487-6953b9b98e2e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82d386a4-a47c-481c-9dc0-83afa4d9b939",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2fbd636c-94ff-4621-b2b2-7f4164399ff5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd54dc0f-7a9f-4282-9064-3d31c7abd2ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa083ed7-142b-46b6-8e67-8887778d030c"
                    }
                  }
                ]
              },
              {
                "id": "49e75fec-4a8d-4d35-830f-e8117056ad88",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d72cca6-59e4-49ff-b3df-43e138dddb3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31f5a2a0-fe24-401a-9e0d-0db7d16640d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf6ce160-d394-4e47-835e-1ed29a421f20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4619a93d-1162-42b6-b829-ee6a180c6b6b"
                    }
                  }
                ]
              },
              {
                "id": "56df1985-eb46-4f48-90a1-7be623dce03f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "458c7203-3bb7-4864-b36e-8c55b8a1a1a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2899a7a4-2035-4582-9cbc-b18d61139298"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8d7f182-be36-4842-a980-85c7ee39125e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b4f9997b-cdbc-4120-9b1f-9b97a51747de"
                    }
                  }
                ]
              },
              {
                "id": "48eb18e3-be83-4720-9195-4b033958ab05",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f2eae05-6382-4d02-a32c-b4a35c2db2e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d55be77b-2345-4e63-aa96-4751841b0e63"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c6be672-e855-4945-81dd-aaa957fb9242",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "86562628-4cf8-40dc-b2ec-9b96a40a2266"
                    }
                  }
                ]
              },
              {
                "id": "f8a16ca5-a488-4089-9a08-5d1f3e7eb008",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49d9aa29-d80b-4e0b-80ee-1c9e5dd5f816",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb31d71d-7786-4a49-9881-5e37cabdbfc2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cb39c15-26dd-4f27-8e83-7da7b2261bb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cbff30a4-7c94-44fe-805a-fd1e95c75fb8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97bec01e-5d08-4642-b259-a0d09cf27731",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aeee06ac-2d28-46cc-aa16-0e3397eca12e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4126b635-a2ab-4832-b3ba-70ef9747ab61",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba2bd7df-3e8a-4ae7-a8e1-4512efdbcb1e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "196f1d8d-b7b4-4720-b9e9-3614a5dcc455",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "31851d54-e789-4e34-b1c2-374aa514e15b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdbf10c5-aed7-4c28-9e74-a4c8458bd1d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e603bfd-435b-45a7-9155-fba7d24c6782"
            }
          }
        ]
      },
      {
        "id": "c2643ace-0bcf-489a-9c1a-a68c307f8ba3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9a5f3e50-8dcf-4292-95d7-de8efdbb1e53",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c85716b-fd8a-4d5b-ae76-0adc38923512",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f729980-e305-4520-a5a6-f6de84f930b4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e115c1c-88c6-42ee-90c0-4613e409b580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b115bde0-a61d-4a83-a96c-740b7186fe6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633da918-1a6a-4103-8949-870759240632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd9da5dd-f649-4128-88f7-4d2f1df868dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b984a4e-1db9-48a7-bf6d-888666ec686c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f21870-18d5-4efc-bb03-e1756c9163b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f7a5df-e91e-460f-8ee4-fd00e46f397d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd04ea13-6561-4c07-bc48-9fee13fabe8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a967ccac-d482-4df9-8e08-518ad29d775f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3121eacb-04da-43cd-8a6b-c271f3a11c28",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b704494d-063a-4e6c-b7a8-6a1a47238cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c3d7d70-43fc-4c7f-9fb3-df75241bd463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d1a4e7-eafa-4dd6-871c-3ece90476f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45ce5471-40d9-4fd4-9bf4-7ffd1684db1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dde563e-4184-4a40-b291-78f3eb7aca27",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f91a68c-ad2e-44f8-b1dd-c55494094b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7685892-586b-450c-98d6-ee9dc25d71e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58051df-d03b-4d99-810c-beebfc841e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7818854-7c49-4e6d-b931-a588a1359f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d62014-574f-45e8-a9dd-5cc87f38e142",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da19e7e-60d0-4d32-9f78-92245414df70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f3116b-e666-4725-962e-5a9a590e574b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a28fd31-d4a8-4c9e-9ea9-43822120275c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd4f26cd-b909-4f8c-86a0-867c39e0010d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cc61ea-973a-426b-bad8-563273b89ade",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d182d4-fdf0-4e10-ac0c-a52257a29455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833799f5-9a05-4a34-a8d5-0e588606970a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1606dd5f-b947-4fa0-9338-cba87361b18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2edfcac6-5899-4012-b423-8c0a5e44c8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b23381f-203c-4d12-b390-739bdf8d018d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896f0728-ae1c-4249-bc8d-e41a722b595a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07952c09-a9b5-4311-8c7d-bff44718b782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69301e63-bd56-4a45-a256-a2de39497a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "70635d23-13d0-4dc6-9b79-81ecec5622ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9118980c-b537-453f-b8da-27794371d32e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf92f8b-02b5-4b32-8650-80a8c661a721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df25672-1406-45a4-a56c-6b7df8b6da1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e589e871-5bcc-4fb5-a666-933eb7ce891c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a659e557-37fd-4076-aa86-ad13efdba20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3d0143-1d6a-4869-86d8-c5a300b56ed9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f63c7c6-6216-4112-b9be-6afc728ea2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c80d1d8-3828-488c-b1f4-b1050ff89d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ef0217-d205-4544-9a7d-240c351f5977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0d6b5ee-db3f-4d98-aac4-f6ad36df69d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db4e22c-576e-4d4d-b847-09dde61173ba",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d0b78e-cb08-49ca-8531-515233581df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327ee099-b35e-4e62-affd-ac5ae45b73f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29571e06-f76b-4e0a-bdf0-574719e19bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3980ac6-063a-45b7-b469-14dc3aa7a11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547d508c-e727-4c68-9555-dc27962c23ef",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398bd974-23ef-41f7-b22d-70f08aed4e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e524ad-2df6-488a-9deb-22950dea1302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35f032a-63ac-4856-9ceb-26f6eab437df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "33cd31f3-16b5-4a0e-b964-848ac938fcfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8349dcf7-9c3f-4ff2-9c48-2e83e2da4adc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81199a99-f4e9-4ad0-b705-cb2f65775637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b7bf66-9d4f-463d-82ff-81c9889f4e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ddfb007-6c94-454b-9d24-3bdd54d2a6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb23f43d-ab24-46dc-ab47-c1fe440c41df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3da968-c256-4776-abd3-4fcbeb3d30cc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3604c220-4577-4f98-94cc-833521c81e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0774277-de92-453c-9222-8fcd35d5e8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f70a83-f9b8-4334-a990-e263f53dc88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "27a0cc25-ecbc-4721-bdfc-0c88c54d2d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa75bac-b13a-4a49-b088-1bac5dba7112",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56af3edb-200b-4740-9871-688417509fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1de71f9b-4e90-4312-8503-d9f1198cf66e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645d050c-257f-4274-a853-12837ad24d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a835e98-d722-44b4-b541-8bd2d5ab4a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d7dbb1-f78d-44b0-af8d-4723accaa96c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d60e74-2462-4c0c-993d-dd5e9e225ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0eca013-8ce3-451d-90b8-75308ebd5bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5e30c1-11d3-4259-9845-8d6baedae91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e84a5e5-6d00-4fe2-ba3e-7d4d6771a1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946847a9-547d-44f0-b722-ef9ff06cb37d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d38bb8-3112-43f5-a1b6-613591c3f244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c6fd483-b4bc-48a5-863f-b26c618fe23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1007d7c5-4f34-48b1-96d6-080a66c7fc4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "89512b98-782d-4e86-a1a6-c518aa5dd795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b5a8a5-c55f-4e53-9755-d7188f1fc4b6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce155bef-b634-474d-9ea7-6f3bb51d8729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ceda85e-e25c-4572-b7c3-b87efa6655da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2327c8c0-1628-4d83-b8e0-a04cc7a6c0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "930da507-6032-4f2d-aa1a-02d215915ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abdc3dea-49f6-476d-8ef4-b7ea6b558b85",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d6e9fd-334d-4abe-b23a-48ec8c139b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdaf7496-4fa0-42c8-86e2-ce30bad9e1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ceab2ac-b0d8-49e2-b3e1-74c336004433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7309659b-a545-4b76-995e-cd6f9a0b88f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff84efd7-9629-4a77-98e4-e216f8def504",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b41aecd-2d55-4004-a4fd-271b1028d1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a9dcca-5f11-4db1-bf46-37284169791e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0fc6dc-bc71-4a27-8e09-b2206e0763b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a1e0bb5-8964-4514-99a0-0b8b728f4ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1848f90-f574-49d9-b71a-2a79171aacbd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e9f14c-a249-4c12-8139-86ce7d3d830a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02b5960b-f158-4d13-afd8-d2cf1c400ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63a92d3-0b96-438b-ae0a-e3b9f0202181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b301aacc-1e97-436d-b9e2-dcd040ae27dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660f76bf-9ba7-489a-a8fe-450806d427a1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fad4e04-0148-4c5c-aebe-a796a1693c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1934dd01-c6e8-487d-bff3-905e2bded156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa8fbd4-aadb-43ac-9296-2d7ef350ddef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e28ef8-f78b-430e-ad88-b45b6fabc3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08c207d-ff9b-48ed-9fbe-4cf4439c344c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41128483-9fa7-470e-9311-3e6ddf48db3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e0fb79-29d1-45ef-bfb9-5769880cd4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6abc64-7844-4917-abae-b9b7e1a60317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc271d6e-f930-4f3d-a5ad-d7a626fa45dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a3c204-1d44-4c69-979a-fc0467efe4a5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73fb0b1-a611-4c9c-bbdc-ad88657e2d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e39e28-753b-40c8-a3b0-006bab457f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21533c3e-c1fe-4bf1-b1e3-edecee1f6d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99be4423-20c2-4853-a7a7-1078cf5f9bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4588b6d8-d488-44fc-ba47-61487434a601",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "661ed30b-cd8e-4735-82b5-814f10557440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1991454-e02e-4d5b-a0cb-ccbfc6b7a785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae13df64-341e-4c39-b1e0-7b479eb2e3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01c10694-0bd7-4cf3-9708-89920df08b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390b00e2-95ce-465e-9dda-6141e335c18f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "333700b9-433a-4673-a63d-56990ad3effe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5caa2dad-40ec-499e-a458-75c147c6aa7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d9237d-868d-4fcb-a220-c239385f651c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5407d33-3735-4f74-a782-49074d863398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a3b8e0-44cb-416a-8378-40eded115457",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abec37bf-9a68-4e99-aef3-bcc5bf5f08b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a471c7c9-2045-4967-b82d-9156ff4f8a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ce8189-0e5a-4e43-9210-0d27417ce0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00cbfcc9-9e3c-4d03-b2ab-c6bfbb5d8961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69a4673-934d-4c1b-96cd-1c762bd419e9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a93258-bf2a-4186-b279-8a42867081b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b84b38-c8a0-46de-8832-66a931baea71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421730ea-804d-4a50-baa4-f83bf079defa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a99cda-ea14-43e0-8a25-f017737a25f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5f5eda-ef55-4e20-8e61-e6a5d6ad5b7e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b68c383-a7b2-4d37-9437-c3cb7ded639e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5707e04-7961-4983-9dfa-9d20f82e1616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7142e3fe-706a-4da7-afdb-f9ada0d4302a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a743e463-ffca-45b4-9d5d-6e43fa1c0f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80c604f-f113-47e3-b732-4375342ffcbd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8128e38e-8e8a-4206-9bec-03a8f5e20636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a2c63e6-edc5-43e0-9b0f-3193f2e3f50e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38371b34-7aee-4ca2-a974-335ba315add3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "304e823e-7ea5-44d6-87d4-d0cbe10819f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a0a5ce-5011-4ffc-8497-d708ea9e6d77",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782dd13a-7f04-4318-938a-45609ab6d26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218409a2-f6f6-48a3-a796-759e20bdd450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e557bce-dc98-4645-89db-516de3e2fab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31893b54-62a1-41f6-b763-caddf99453fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978eac3e-3521-4756-a99a-95de0fecfe83",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae771a0-af2f-4e8c-abfb-951564d9fea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7badce14-9166-41fb-84ca-c748d99e35af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade63b17-37f0-4255-b772-3411c9de6952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fe9301d-e1e6-425d-bd79-f364e468bc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acaa33d0-250b-484f-b0f5-f9894137b788",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff48991d-dc90-4b71-bc59-c08a939180b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c1679a-5dd6-4ca8-87ef-2daac6f4388c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1db4475-256e-4c7c-804a-248b593eab7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "775701ec-1246-4806-ac42-0cf9673fd2a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fd091d02-e5ca-4fbe-85de-9a55caddb692",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2715f997-2857-4bc0-afa8-673f935d5625",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c986dcd1-6736-4591-a1a9-b7c390df69e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c664eb7-424b-496d-b47e-33d29f811021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bb81b4-e221-47a0-941a-522e332d3a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94038121-1ca4-4a59-88e7-85532457cf6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd9bc98-080f-440b-8c00-b6c8e9000864",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1b790a-b7d7-40bc-82dd-fd69573454ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c3b2be6f-c3b5-4bf3-a08d-79261f6f1380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1ab54f-fa32-4b45-9961-c34a982f7d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76ded5fd-81a0-4aa9-83a4-e6c6a83b0181"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ce12887-de9b-4cb6-93c8-b04946015651",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93653f7c-9448-491a-82a7-5fbd2ede5f2e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2a4cc8d-7f68-4f52-8a02-4fcee27cb7e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63454326-a3a7-4057-94ed-befc384bd2ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14d7b085-bcd3-4293-9bbd-2f0e2c63c3b8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "13a3070a-d959-4e21-89c0-c71f10beb6df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47c071b0-626e-444c-ba79-1d038df74730",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a74c77da-eb61-415e-ab08-5f2cc7929bf7"
            }
          }
        ]
      },
      {
        "id": "3a20f327-a410-4e1a-9b75-0adbd58c7ed1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cbc16d63-610b-4aea-a8b7-92bfc6e9503d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c7be85a-5f6c-4ecf-a61b-416e4c445d5b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cc71e32c-ed5b-4715-bed6-e0b0aa54584b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a821a6f-61dd-4bf6-ad5c-170b266ecc4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c52aaf-53b2-4ad5-b48a-064cee843479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ae18fb-9ccb-47ac-a6f0-e01568926fd5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f823b10b-c14d-4da7-9dba-0726cb8c301c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "075d1fc0-c91f-4ce3-8468-2f97090dee0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c10e5ca-bce9-4e31-86cc-6bae72289fdf",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04aaa428-89e2-4969-b856-cc23411387df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8547da7-332f-4ec9-bedf-fcdac42facba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194461d3-8356-47b3-8acd-505cc97b1ef3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7265a7f0-d458-442c-a19e-785a8ca1cf24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781cebeb-30b6-4a6f-8b6b-9623ae1b93c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e97dc9-d285-4838-a174-4294c0126da8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a2c1a5-5563-4cee-a098-971c80fc457d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf075bf0-d115-4053-a6db-78f73f55fd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea6722c-620a-4d26-afbf-a72226ae9e2a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2998e58a-18dc-43d4-9dc6-3d4bb73ae75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe7b5209-35be-498d-9421-b192f68b6e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89893c34-3f98-4566-a249-5d7dcee9b33c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd2e7f2-48cf-4315-8eab-7dbc172a1efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee40c13-3e52-4b37-b600-22ac874d621d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb857e96-89e4-414f-8178-f1a55c9815aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5757a2-542f-4236-b8fe-b7e5db379493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217dfa69-8b90-4491-99c0-65a2d8709872",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4029032b-a3ca-40f8-b7e4-cfa4f7da3551",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54dc3278-4fcc-4525-ba53-4e7f1ed81a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47dbeda-e9b8-44de-8980-1aa2c5e1cb08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2866bb-4f1b-4d09-9587-056ac57296ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e8334a-521c-4c4a-9e6d-9ab28c1bb67b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7d14e2-0ae1-4c2c-9996-9bc86e5b5379",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e949632-7da9-4082-9563-7e1fbc881f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45366977-d688-4ade-965e-3323c006e87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f9598d2-d37e-4e6e-a5cf-102ae2b6ab99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54262151-57cb-47fc-afc4-f2e5efbb218f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59621b01-2bfe-4cf3-adf5-7da86358455c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05512251-80e1-4bb4-a9a8-7ff6a4bd2e70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec51ef5a-62bb-487d-82dd-2767c33f65f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7826bd6-981d-4ba5-b59d-f27897c1a0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f7f886-ea62-43f5-9191-a4c017dac218",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e72514-9c25-41d7-8e42-17d1c3a4b671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77fb5210-5afe-457a-971f-0a3b2162db91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d373ad-93b0-4b48-aa90-bc222635706a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45df9a41-7ff3-4d5a-a21e-020cdbec7d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e137b7-8b1c-4cd1-b291-51d728c1e9de",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b987ddce-5818-4c7f-bccd-c602f4ce4f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b077be04-3561-4611-9067-432c9d38084e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d3c9e7-5e47-4c87-bfb3-181add732fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e24c7db-ee27-48ff-a8bb-16f078eb8904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ea17c7-12e0-4f7f-8f7b-fd1260c7dd01",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ead28d-faf3-42e8-83c1-c867160c7f81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c5b8c07-75d2-4587-9fe8-f7a261ed222b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7d1e5b-1272-4e1c-9f89-f53a0a782e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa30841-9b41-48de-a0e3-630bcd1af061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fd7eee-b746-4d26-a3ec-5175a8b1f0fe",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28b34e7-7620-429e-9efb-ad87ad897060",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0551e54b-9ce2-4ed1-b1dd-0dd93e52e5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f0a140-eecc-4744-b95d-02378e562ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8c9106-7ca1-478b-8533-12ee4a4ccb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62b3bd1-28cb-41a2-8457-ce099e0c073f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9035b1aa-ec17-4d45-95c6-86082d6d962d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad0e3831-3181-4c36-a192-2535c66aad7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92d106b-fe38-481f-b6c0-0e462b4c9a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3a9b90-55a9-4112-8b65-2760ef0f3418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94eecf20-cc75-4a21-8cd8-50bc9b4144d7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7115289a-df74-4358-b9cb-f42bf8196ddd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "314d43ae-9ccf-4400-b658-8ea426511e52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "245f2920-7c96-4d0e-9cf1-0ffbc907c0dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a950469-d05c-486c-a5b5-f1e4465cc190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667e7581-fa0d-43ec-b955-602a0319ae6b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78deaea7-aba6-4c31-af16-d3434b0b9ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ab9f34-504f-452c-aac9-186067d7d35b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "749d0577-7a98-45cf-bb56-e22a72c88ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d21a74d-5544-4b45-8908-ef180a52a423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dde274a-eb85-4d8a-8967-cef4455aa925",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d3861e-7f40-4e02-ae0f-ba2ac4918c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc12d4d-107c-465d-b5dd-2a9b6aa86209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98e0b83-17de-490f-9f0d-ad9dd5881150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2cebda-a65f-41b0-8ef2-91975c80f427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488a3da6-60a5-4f16-80eb-106d98ef1b2f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6867004d-0141-459a-9414-df7360ec9250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2623fee1-9a9b-4faa-915d-7c86b680ad41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75ea11f-4bd0-4d20-9b15-421f1fa189ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9109867-205f-4a45-993b-9602d2a42050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f7f680-bc87-476b-a5cf-aa136a51807b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fd834a-1f22-4fac-bec0-5e242e5f3a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78c06076-3043-4fc3-9f5c-b9c40f60a489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02fe55f-021b-45cc-90c0-5f6662c083bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a944ae-c89e-45c6-93a8-8c15f5a6ad6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927e6375-2404-4baf-bc2a-d92eee58de57",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8166f91e-7c7e-43ac-a73d-712972dc7477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a96fb9f-2fd4-4591-ae2a-bbb600faa248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c050f6-ffc9-4927-bb02-d23f4f57737e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db1aeca-4326-4b19-9824-0442b80af6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fa32f3-14e5-493b-b1bf-d1252c28193d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23de7f6b-0074-47a9-85fd-7b3ed1dca9c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30909c67-5988-453e-b3c3-e191d5ab38e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04e5349-2e4b-4008-bd26-746eda418149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aef4283-3cd4-4252-9e22-9b6408202b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284f57db-6bf0-40b3-978f-d0dc07508263",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a7f22f-d075-4406-a90d-d8b4a1be0468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59bb2b0-e238-4211-b6b6-ee2e65db78c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6c2513-f6b8-4568-b710-413290cbeeac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01dc627e-af92-4700-b8b7-44c78bf5f5c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35b0d24-e4e2-4a90-8227-410d1b3c35df",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae643e8-ae33-4d7e-a222-a126b21130b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8011d630-0336-465e-9f57-b4312cc50da3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "742780cc-0f12-4a3e-bfea-5aabaa6b18d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059d17d4-7bf4-41ab-9b16-501330761d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d6b7d8-2e1b-410e-b13b-ac5568c8c917",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e68fc4-7348-4a9b-bb0f-ea5207684c19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc7ffaab-2cfa-4874-b0a4-7fa157865570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f912cb3a-cb44-4431-9101-59c82fe3811c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d8298d-e253-48a1-8b2f-6d695fa3639c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00641d18-7fae-4e2c-902c-6f7cf6900c61",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250515a5-55dc-4637-ab13-d578b3063a18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c7f6d58-9ab2-410e-9398-91b44c5bd409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c4977f-4923-49d2-acb7-fae2755c56f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5693977-fe54-4587-bad1-571b0a3b424b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3f2954-c827-451b-ac38-22fc19180c4d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79f3395-4a5d-46c0-a65b-bb57e4f31856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dccbf7f-d030-40db-b5f3-bc62586d4cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e62d841-342c-4372-9101-d7dfb249b18f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdec03a9-552d-461b-8e0b-3a2c27f73934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76716b0d-372d-4ab4-83bd-f9ca9bb883aa",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e88f63-bd14-4e99-8899-15cba0cc111b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9481529b-d430-4cf4-9f53-5949dece0e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c4e3f6-8a3d-45d5-8e65-57be4e9912c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7bfb335-07fd-460d-a559-74b3f7a689a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb05f1e-a370-4317-8828-322c792da6c6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b85945-7a7f-4ca2-9980-59fd8d070dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "942f2081-1307-4cc0-a4c0-2f414c963a7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "230a8757-986a-41b6-8e31-e3b45fe7ef67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0fa0fb-f684-4d91-8de4-6f753d6d6bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f3d3b5-001d-4fde-8217-cd3b75264405",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec51533-de44-4282-9728-feca18e15763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f69fa9a-5938-41a8-b9c7-f2c9f88d8a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f740be14-c83a-4355-a98b-65efe9839daa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ab0d6e-efc4-4a31-b95d-26a8f80d7df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e8ddaf-0535-4fe1-9f7c-e520bf4c91fe",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5299c6b5-10c4-410d-ac46-7baeb0df031b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b313e659-73f7-458f-ac57-c5e70799fd96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889ed56d-d400-4926-a38d-7caf9c736ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a576b7-db27-41d3-8c84-cf3567ceed43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4add380d-19ed-494c-a186-7406b951284e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f920ea61-7605-4643-8c1e-4583f329944f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c23411eb-b1b2-4e30-8cec-c629bb83956b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f592e1a1-9790-4fa6-afe9-bd45836b9ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76cba965-2051-4d4f-9bb7-631b0f76c5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a511c57-e6ef-4736-85cc-cb075dfaa61a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5560fd3f-2e01-455b-bc71-ecebab3585a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01742a77-5c2d-4da0-b1b0-49939a1b3f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c858c1-dfe7-4c0a-a08a-01d976739eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31545fff-c828-4abd-9d3e-019abeac126d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4460b2-20fa-4002-9e4b-fb7a9b51da0f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ee61cc-ef19-47b3-8d1e-7b9f3cb23fae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc2912a6-b662-4689-8a89-599c91a9fd9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d86ff09-5d9d-431e-a183-ba29024c3018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e54eeca-67e2-4c34-a425-9702fda44144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21def667-708f-4ece-8247-c6a88ff8116d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb9a2f8-8614-4c49-a435-d9efee4524fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22c313c9-8c54-4bbc-8160-fe7364657e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cc030a-f98f-4fbd-af2c-4b4a561ae058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "860ca6be-17ce-495f-bf88-28d568d8d811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3021910-003e-4924-a580-8c12ff55d862",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d038b4ed-d83d-45e4-aad9-ea27d448897e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d31d7a9-714a-4eec-b6ae-5ac87e447901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674f162c-b02a-46f8-b012-0b584e3d8d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a689d2f-d567-442b-8e08-da890975b9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8237fdc5-c3da-407e-b235-87aa4a9e51d4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ecf0af-afc9-4cf3-8f0b-2ad89ade1ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f2f255-b04a-4279-8ec0-551c0d53b6e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadb1342-e1a1-4740-b4da-2f47e668d533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ee12ac-6744-41cf-af1c-a79562414c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5357ce5-5d84-4b6f-837d-0d5e131c2f85",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8423086-c903-4c1f-a79b-e20847ed2078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f311a0-f01d-432a-a413-2d1a6424878f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "988152c3-f9d6-44eb-9fc4-01fab36ac909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d54f7aa-d6b8-4416-a1c0-435b7366d795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcdbb7b-1258-45d8-8d97-6bf44ae9c2cf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69282e4-9f40-4604-b467-922ccf87b05d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c21285-c0af-4d3c-b282-f7910535efc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb41e284-2377-4a98-a451-6d5c552ce7ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ff5272-cecd-4d8a-9769-4c3c3a14eb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d58b863-35b6-4455-a42f-059bd413e89f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab16689d-f890-4318-80b0-5f78e33124d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17072059-f164-4913-a281-4dcbcee2d2f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c25bda4-665d-46d7-af28-16369d50dfc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f03b06-9025-495e-ab93-506ebf3a7233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72690654-7a0f-4982-8e17-133c1f7e47f5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5ca011-b07a-4489-b2e2-b6563a7066f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aec9d53-9a51-481d-82a9-759b4a218a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9a70c1-9441-4196-90a4-6fc842e18740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b04c75e-0cd4-47ab-aa65-8ab867b61062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b752b3ed-922d-4e12-9dab-3b98f3d3b1d0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be655eba-b0bc-4b48-ab74-01557925aad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53dbf338-2605-41f1-ae86-f597c259c216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e15ed7d-de94-4b24-8e82-c1f8548a02e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a3e690-26c2-4643-8d0b-659b8e9936ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651f4d81-1eb7-4f39-87cd-be16a9bf2176",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14456cbd-1fef-4735-981e-3abcb7d6092d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d158ef48-629f-4bf1-bbb3-93f3f07aec2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e81de43-b7ec-4988-ba9a-12f9ace5c385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d384188d-6395-4d1e-b656-faa2f4b62fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050c7a19-bab8-4c55-91a7-cc2ee508b373",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e5e715-1162-4026-ab98-c1dea856d794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a84d1cb-7705-4d6b-b3a9-954c1a1a55fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f846a6c-1b49-4445-9879-bc30e0468c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eeeba6d-317e-4aec-9cd9-bb5f5beff2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d8fb78-45a0-45d7-a9a8-d9d2e4b6fd80",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec7000c-fb3d-439e-8a75-695cf0826e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5068cf52-a652-42ab-ab4d-1fcecfead7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4964659-a882-480c-b993-ac4580b25f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a720c07-f7ac-44c1-bf1f-e61d5ff44c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd43c534-4717-490d-8a7d-708ab770a7fb",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d767e606-e39b-4d53-8cc1-8ac661c0b8b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3efe91-0947-46e6-8acd-766bfec563e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c992cdc-9cd3-4b86-aa7e-10178db742c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f40a4347-6d57-44cc-b421-46a3eb1b7c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcda4bfb-6343-4228-abb5-08774a5e46be",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28dbf14-5314-4439-93bb-0f77629c6319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9fe9e9-88b9-47c9-bd0a-a8b537a35bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a11545-96b4-43e9-b339-a72749269180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c86a45-4d2b-456c-a756-1b5fa2b53008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0867bd-1f62-45c7-adc6-418ac85eaccb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120632a3-9a9f-4d5a-a028-fe2bb95bc1f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a47f9f33-d090-4f73-800f-7fa110397d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "195fe075-1d6d-4f3f-8aa2-2d761fc99d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae2c074-411e-4efb-92cd-eb2c15bd10a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75229c0-db76-4ff4-ae64-5972d5037545",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6750757f-4b95-4823-8caa-3b4ecd2203b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba3fb2f-71eb-451c-8b47-f4c62a1e1c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4264d27f-7258-4c6d-977e-6a5e3a47ab06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400d6632-1424-4d1c-a0cd-e44f0a170159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56dcb52c-2df8-407c-8b2c-dcef10b72f3b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c3c96a-1de0-48ab-a46c-05e0c3dc7188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f65da31-78be-4325-9f7c-f7ad901e3727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3781f8d0-c63a-4c9a-87e1-8679f415ff9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e323c83e-be09-4931-aa31-92a6c4c3bf00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ac9e36-e081-4046-9b2b-833721cd90b5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8997edb9-fd43-4dcd-9ccf-d630e82eced0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ba131d-0967-4c60-b01a-2273fa77f801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46592898-487f-416e-bda0-1e85da8e52b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d204407-a75a-4f18-9212-a48b6578d7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76aff58-97e1-4aa9-a07e-20ad6b457903",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f9dfe4-770e-4162-a63f-df46b24c041e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ee1e8d-3b3a-4469-aace-c0131f4ad32f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41322ac3-43ba-4c90-b920-ed663f2a69ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c453960c-998c-45e9-81e9-f85c6c1715f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ba56bf-6cf8-4021-8e62-085306945fcc",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89811de-bc01-4897-b56f-4bb6f15410d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160c6a83-031d-4881-9ab4-42921ba0099a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce129b29-2711-4993-8fae-aa3f37cf6bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16ed7b9-6f26-4b7f-8e55-80764ff8de3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9e2216-042b-43cf-8803-c19b2b0a6568",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1956d8-9307-435e-8ec2-a2ac786f24c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30df9918-00b7-468f-8da6-c5f7b237919b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d880cd-43e9-4897-a6fb-f44f1b065a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2e3c62-78dd-490f-ace2-a051a916e03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6228edd9-a2d4-41bd-9fb0-23d7cedd0127",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456ff67e-3528-41d6-9ea9-e58a35a13f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04bd65c3-cb61-4700-9757-9987eb83188f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee02b56e-0f90-4554-9a62-1f32c951c0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c967a4c7-1ec6-4820-858b-ef5ffae84b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fb86bf-52e4-4ed9-b97d-97b16ddf4034",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f30d3a-c2e8-4a52-aa85-540060fbb6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd99dad2-103b-4ff7-b46c-2d0dc98b8470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c05fac4-8870-4a38-bf93-13dd82055aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b8bc22-f518-4351-883e-e7b8ea3f28b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12522257-e3b6-4544-80cd-b84ef0abab98",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081d1b6a-eeaf-4522-9914-6aab881b9149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f30365a-1fe4-4e9e-bfcd-77ef4a456328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed7a06c-cc21-4712-8ab7-73af322114fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7339abd7-f727-4e7f-bbe1-c67db8a21a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31f801c-3867-421a-8ea7-fe141737649c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ef5960-04ed-47e7-ae27-b9fdef8c6d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192e1d21-637d-48c4-9316-362cbb9b050f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87b4a2d-2c74-4301-8a59-247b14c2ba58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a968f254-a775-47e2-8860-ac8579925014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b46ce1-1bfb-4017-b649-cd6e80e2d2aa",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca8e09f-5816-414e-b648-76146e185a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f690ccf0-d98c-4f55-a8a4-8db85a74b1be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f8f5a6-bd2a-467e-9bf1-03d00da26c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5e09ce-9043-473b-9c01-24997f7203b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4545aa6e-d88f-4e5f-9fe7-cf33a2321c95",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6bbd7e-f517-4082-a6c0-3b019b2e7c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa560a12-9cb2-4685-8980-38cba43e20ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b112d38c-b25a-4760-b79f-44186123e769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927819e8-564b-4fa5-b72e-a28525d37a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0a9332-c6b7-4e08-b7ab-e6090f0722f5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4826ef-ca2d-422b-aaa7-e3a01d0c3ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f094131d-7136-4e96-be72-a98fcd6d2f8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e54008-89df-4bbb-9361-ae7dbe9f3528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f2e686-7d17-4547-92d1-b23384e3ba53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2ccf3c-7ace-4b66-a050-2e300983f221",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc453c2-9804-4439-847d-8f00b900bb4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372b4d30-1ce4-4aef-b62c-6e694db996b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4955b535-52f6-4178-b29c-20221267d1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d61d72-a0db-468d-a64c-b7305eff354f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5854ae-c26a-4427-b300-0ffe5522e5f4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caac3794-10b2-4b70-9bd6-66e05945551a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8084d4d-80f7-48c2-9029-61d018f8e27b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed3515d-8c0e-4b72-8431-eeaa954750d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554b7208-ef2d-45ec-a66e-5d33ee32c9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75a76a3-9f90-4c5f-ad54-3476553a0d7a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9f7e2d-bd8a-45d8-a688-80e631d1ab0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f55832a-27ff-4ef3-b687-812fe4b747ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "517e2d45-889c-4e3d-bb94-507233a07394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1671c8-721d-4541-865c-99d3084b3cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ca12af-cf12-493a-9932-e1fecdc2fe5f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e784e6-c28f-4175-9828-4c346ce21ccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a72d462-97c6-4c4f-93d7-56e493d2bcdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93240a11-ebeb-4a6e-b31f-39d947928e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cd8fde-bac0-4cd6-aa87-bfc44b6c4206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e46c654-8cee-48be-89a4-831dedc0f22f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1291de72-0a24-4dc3-b79e-9fced69e0d4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2474bed8-b872-48a5-8d59-bcf3b5dc8939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b42133c-514c-4d99-842c-da7e7f38140a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6057bcb8-b275-4e3c-b5fc-5b1fe514fd1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac8d0ed-dbf6-4d20-a690-4d253da2c7f1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ea429b-725a-4c08-ac21-4d17c3548ce0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63e6675d-9ee1-4d2d-9650-6b15769ae536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b938bf-8c52-48da-bd56-e7b31834c0a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74820132-277d-4c28-b84e-c45c93e4db39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaaaa59b-64fc-4c7c-8f24-006eb96aa6ab",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2e28a1-d5c3-4ed7-bb06-452c23144d7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ffafed4-49ac-45e4-84ec-0b48e1b256e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ce24f9-c2b9-44ff-ae3f-e07a2f9b48a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c252897-d44c-44ff-bbab-25ef5a8e472f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ce8d18-ff55-4097-a654-68727531f040",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3452afff-4b38-4b3f-92e1-38a994e5351a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fff2bde-5845-4cbb-99fb-b3f2d7a66968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9960cd85-90db-402e-8899-edc31cb688f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e33df3-b3af-4d10-a777-ed20a485d8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d3ce96-3eb8-4642-8f55-ded8ec41bc69",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9643364-d21b-483a-8545-947000111927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f2a8d34-2af0-428c-9203-5b26f660a84b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ce5d13-2d20-43b9-8354-68a84d91df35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59f973c-60fb-45d3-b069-8ee3a5e6cc7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f770759-fd69-4bc5-844d-6e86247c2ceb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf76a55-0c50-4772-84d6-145cd267fa88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71b41a0e-a7b3-49e4-8823-b664684d8808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6280c1-4611-41e3-90e6-2301416e48f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391fcec2-2ed3-4cfa-a172-1d1f82d96031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64081ff1-14ee-4483-a9fe-6334b17dd786",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a1a901-db39-4e78-97c3-188531a54b6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79a28827-2f1e-4b02-8fb1-21aa690ba950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c3933f-3e12-4796-b87d-34be50e1b9e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0224d18-4266-4999-98d5-5442e6bab2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0739695-9583-40e2-ba39-29bde993f6f2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada8a36f-d820-4fea-91e8-cf04f6f426ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83d25584-f313-4c66-b39a-8be32436a497"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165c0276-8103-424a-98f7-b15968b67254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123db5d6-5ecb-4d44-89eb-9a92b6a3a6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff48bcc5-fee0-4cf9-8143-43ec76a3ee92",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d465b4-3ffc-4cde-81f3-fff711b8e715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cc64ef6-28db-4326-ba30-5351c61455cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc429aa-7556-4388-b34e-49bf358329db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeae9fc0-fa5e-442d-8617-ad49f8c22e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965b4373-1259-4987-a15d-4f6aca29a958",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2784f0a5-249b-4445-b706-4ef627777ba7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e85eca-0c88-4406-b4e9-f4950491e4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79d2082-88ea-4215-99a6-0051343bf5c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042c702b-66ef-40de-8254-33dfdb21a97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a993aafd-5970-458d-a2e9-93182e6792e1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a4c0ad-2fcf-43b2-a2c0-40c1a7566370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eca777e1-edcf-4fa8-9f7a-c5115efe3e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac615553-b6f1-427e-84a3-43f5ffbd06fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1959b40-9872-4398-ab5d-c976e2a7baa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feea3a4e-3c1e-4b66-af7f-208febb853e6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2a7756-5ebc-4c43-aa8b-8d03e050f350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6cf9bb3-1c37-4986-b6de-0acb9cef88ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed75ddf7-7854-47d9-9130-03c3b47a5e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c265b3c2-c41f-433d-8373-ecd50c8efe0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be22b6d8-9306-4dac-b2ad-0bcf6e8f8844",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83266b2b-607b-47bd-81f0-3ccf07a98582",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cfba22a-c5cb-450a-80ba-dbfd50f7e940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1be707c-2469-499b-9d05-dbd02c76e21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2239bd1-266b-4192-8ac7-db8665b04884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376f0b7e-7afb-4edf-a96c-3912d48b9ca4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bfaad9-6025-4947-aa13-08ed13fe301f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8aa8370-423d-477d-bab3-874b79eb1a2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26802be-4c19-4977-afbe-0545434997a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769b26e5-0d09-4ca8-8b43-47a0d1a11ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c25ebc-2c32-4ff0-97d4-161402f6158d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e8fd48-3189-47fd-842f-b83f8a2227f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72a7beca-edb7-4ed7-ac33-84fdad1bff41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb087ed-473b-4cc7-bba1-c53bc25ee6f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c86e0b-1d87-4cd2-95fd-8707ef528b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0999dd-19ce-4335-842d-5e22acab2cca",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376e9ece-40bd-471e-92b3-44d14355f3ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22635a4e-e313-4f51-bd57-520adc4894fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7510ed-39e0-44db-8dfc-34bd7559e31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddfbd007-0267-42d1-b4de-664c1fc6ec09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd49de73-3ec9-458b-aa80-985577b4f11e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62dc971-53b9-441c-bcda-d92bb5501037",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45a8197b-7c8f-4196-a8b5-10f538169933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd47b52a-9c2c-40e3-8a9b-65433a119df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd83128-a07a-4672-872b-1adec967aa18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e33002-6492-4a05-8e20-d4bc2001a247",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0003083-d12b-4f2e-9ffa-ce7cf869157e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62db511b-aab0-41ac-8d61-741ab2732522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d4ed08-f26f-4273-9eed-ae102d1f5b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a866dcf-edd0-4641-a1d9-fb11490ee9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612bd5f8-061b-4833-80f0-08a44084e84c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5232ed-6cd5-431e-9d87-5362ac61b0e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cbff27f-27fc-4617-8380-7bdeec6c0b15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf4d82d-d27d-43bc-b743-51c43f191adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70408870-c72f-4482-bdaa-8204830edc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d021eb9-fc71-4265-8313-75d2a5e4bc6a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb5c2c9-6948-40cd-bd4d-52f123c7d8a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "858161eb-a9f3-4a12-81c5-0c1d1a01fd29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9abe5e-a432-4dc7-acec-d9aa3b24b65b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69483725-2241-429f-964d-3fee3ac6dc9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3277f2-9115-43b5-b1af-8aed78b08872",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640cdb4e-77fa-4bd5-ab63-fd1b51b6cd38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2de76c08-ce79-460c-975a-708e761cc578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5472186e-54f6-4c82-9f3c-8980424accb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a57f7e-1ce9-454d-9ade-0e08e9ed5720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e28a16a-20bd-4f8d-afcd-22b19f053b91",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8cf0e9-6292-4368-ab23-b6641b7a115a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46e5ed7b-2b1b-4b24-87b3-0f9ee675e47d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a9f794-5d20-4855-a5aa-838b8fb36419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d0a370-a147-47dc-9fae-64545d5317fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c271c7-9232-4fc3-afad-172b3385ec1d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c764a5a-4c01-4061-9f78-30d1b4394909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bc3d800-f8ce-4b52-b7a2-aaee46b0e224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "233d23cf-2087-4881-b0fd-11f1944ecc53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d010b9-23f0-4204-887a-78140af44b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96683c30-3d83-4be1-a824-aa65c6a8bdaf",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adbfa6b-02f9-41c0-88f8-271ebe9d4c5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0c57867-385d-4f2d-a347-d038646c7ac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ca01e0-39a8-42c3-898a-916647eb0c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a6a4583-6fc8-49ae-b513-7cb8b2722061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad10d44-8d08-4e19-a38e-8133fdefc22c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a384c3d9-fb63-475c-b09b-3e6e24b11ece",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a1a3f0c-dcad-4911-a7a4-f8aa1f619ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8834e63-f146-475e-a4ae-525ec65c08c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13b41ef1-74ca-47e1-a25a-4a74e633feeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3101f647-6c97-4f62-96a3-21548ae2a959",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d18512-da0c-4c77-bd95-4997f7feef8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2b0369a-9da0-4bf4-a7f1-da355d52b5b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b1d24e-01a4-403c-9fb4-eae51d4bc527",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "503ce4d7-73b9-4b2a-addc-2c3ca01d7640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e35c194-f5f5-457e-aadf-f493e60930ff",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0feb2cbf-1ec0-4d76-8a8b-2de58c78a860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5d09d0d-c847-4e89-a896-a8b027b839b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbe7ddf-a7b9-4c56-b945-3b0aa8760614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9645fd22-65a1-423f-851a-c90aba9e70a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7922cad5-5a46-475f-ade3-4a37cfb3ac39",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b91c2d-1218-4324-bb75-5eeb8572672f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "586c57ba-c016-4c8e-87ab-7340810d4d93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2688b9-7517-4e19-82ac-02cec6fa81d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d687fd-ea18-4166-8a6e-7a4d15b69a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23183294-ddbf-42d4-9782-1cc83eafce00",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccb9330-9294-4342-b116-eab88f3285e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c93d2b7-cec9-4eaf-944f-e3706673104d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0184af7-cff0-43a0-b60e-9fea80820429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0d4b24-4a54-4d1e-815b-c8c72722fb6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff32f07b-1312-40d4-9fb4-787b983a316b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25a7440-0bb4-487e-b2cf-d8d784ed0c9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23493c18-4f9b-4d34-83ad-707d9d81419e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c482cd73-d841-4219-8a1a-a85aa4a3fb2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0022a2d0-6d27-4671-ad8e-e34ec852b62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4089674e-6acb-4e75-a26f-fa99b05db00f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a79365-6f4c-438b-a17c-f6d57b3b1602",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98a89137-3612-4849-8e65-2a048e58da85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5289497-d91c-4734-b6d4-df28a3200cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a8a65cf-2645-4a2a-8de1-8e5c56dac44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa0996c-62d5-4f13-b786-dfb2f6985ec6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e4d169-3bef-4d77-8de4-a328e4a7cda7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2609663-ef86-43af-bf14-e90245e6ad6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5d7fb9-6d26-42d2-8d97-47e35d8314e0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01380c47-237d-46d2-9d3b-d96059817b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c963ab76-8f6e-4a1d-93bf-234639a2ffb1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee28fd8-8020-4f75-87f0-b65490e6714a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ce39097-6f8f-48e1-a40a-d335c2966693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72180f8-d9d8-46f3-b35d-4f46748e303c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47cc7b83-b6e3-4553-a025-16dbc363d3bb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8af2628a-12ce-481e-a7f8-0a26740ef614",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec1eef0b-0171-4c98-8586-d67b7498d634"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6ab8f96-0b7f-4a03-80cd-945630ae9fb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41a63cb3-8781-4049-a978-08c5f9dfa610"
                    }
                  }
                ]
              },
              {
                "id": "7c15961d-d0bb-4db8-aa09-259655f7e55b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3145a2b-41a6-49e7-8738-51a8d7e46836",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5450462-bc40-4916-9202-b3c4d76f2e82",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "725d5c87-3268-43f1-a00e-b4a985594af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cb64bb-6363-4cf2-90af-0c20003f0643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e20babfa-6d8e-49d2-9477-baa4ede9ea82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d2d511-592a-45df-822f-9f010c722141",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02c18e2-e4cd-45df-b4dc-989044f7baec",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c8414b07-05bd-465b-a851-3b7ff7e3f59c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8bff08-278c-4d15-b205-be6c08b29e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a43b1174-06d9-4fd4-8680-1581c544e7ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5ecf378-23a1-43a8-b6fc-746b81a3dd39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de2e51ea-b7b7-4b33-84c0-f9c2fde2c01d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "93a9c6de-1c96-4473-ba94-870106210723",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3229b8db-5e47-41a0-a7e6-10ea4829e7d4"
                    }
                  }
                ]
              },
              {
                "id": "39c61da3-8e23-48c4-be50-020be7f2105c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "fd24645d-0004-4146-bb38-02093472571e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1b53ee-840e-41e4-aa44-034156dbee49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9c3c5937-cba7-40d2-8796-239012becc9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d5a732-a204-4713-9499-dd9be4db13a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a65eab6-6fa6-44e6-b339-ba4e762f172f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "37af72af-5db9-4235-978e-0ec7fd35aa19",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1553d3f8-16df-489b-9805-5f1e0fb8bfeb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55eaf4f5-09a3-4d0e-9221-085ff208467a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f9109ddf-8caf-489c-a76e-5b960d94f525"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58fd317a-a353-4aa4-9106-deb140277662",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4af7c443-64b8-4c07-8887-fbf72eaec2ff"
                    }
                  }
                ]
              },
              {
                "id": "e5e1cf67-18f4-410d-9b3f-f853c41a5fed",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e3aab22-1e87-48d9-ba84-3fe84e2d8ab0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8f530c33-ed8e-4996-b6c5-49ec095c3595"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82d00ce4-5463-495a-afa8-8975fc275522",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01535162-5ea6-4b1e-b4ee-22d3245a8f41"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80a1d18b-9651-4fad-aa3d-9a64fc2e27d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "04f42a7d-b0ab-438c-a28d-454d83d79854"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2364fbc5-3dc7-4b6b-ad28-d64cd6155e3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6c41ea0-5389-4382-a274-4dcb2df3a180"
            }
          }
        ]
      },
      {
        "id": "459654a4-fda5-4eb8-b82a-08005d39d520",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d32989d8-69ac-494d-b2f2-0142f007be6f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd378eae-2746-4414-8cae-8456a5079a7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fabbada-fdb3-41fb-b71c-ff6a948edb62",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0c5a02-c90e-4a99-8840-83c94ba39a9c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f583bd50-58a2-4d4a-a4fe-a6b35df79ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07831458-c187-48ca-a6e3-9305e53e5aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ed307f4-8729-4456-a934-ae35845a4b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5ea852-8d09-485f-83eb-3d3d6d3c7330",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b702f472-8c8f-4c1a-8aca-d50d8995e149",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "76475d52-466a-4cc5-b858-7f45285fa7b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11043d42-89b8-458c-8a58-57c1fd17f933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2893a109-62a3-44ca-a244-cbc3da166c4d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ae8565b-ffe8-4ee3-b9d9-459337cdf63b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "905ab8f0-1d24-45e7-8b8e-679f4e7474c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8be4ed0c-3442-4a02-894a-b9d96c290105",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b23cb972-7c8d-48b1-b6eb-4ee0ba7d63e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ba35c76-6c88-4266-ae68-0facba79d7e2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8980ef24-3db0-4e7c-b8a6-5d57a99b99d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f2f04f8-c847-4c7a-ad93-9bf3b31bc6d8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "134e26b4-e3fc-42bd-8b7c-90fe6a13a97b"
            }
          }
        ]
      },
      {
        "id": "ad5812a5-d028-467e-a5db-0b77e83cc4e4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "91c716ca-fafc-41cf-865c-aebb68f5ad29",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4945198d-1fd8-48ad-8c1a-d5b147f7fe4c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78ca0c6c-83b2-4be4-b1ba-f721cc13788c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02de0c4-cc0b-4657-bd88-10da3fa60a60",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "574f4212-38f7-4ae3-9748-bfdecd5d8d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c6ccbd-824b-45be-9e76-61cb996756f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9affefe9-c195-47da-89a9-3a90cf8866d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de0c1ac-ed3b-448e-a550-24d01f880092",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b9f816-981e-467a-a7f2-cf5b7a382aa2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bbc68a7b-c4da-4d07-b2b6-5a1ccc19788f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d460d0-8b3c-4bdb-9be7-55b67aefc2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8924286-237b-46bc-b20e-5df0cc2fa495"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d25c6d8-91c8-43a6-921f-294ab9a01764",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7366734e-f77a-435d-b6f9-e55664d854dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02ad03af-94d7-4370-921f-cb2785ffd7e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22a2a626-0a24-4d79-950e-081b2a9a60cd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5daad464-3b3e-4499-b213-17a425d91bf5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d1bf8054-67e6-4eef-ad11-11931356a4f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c63f881-f878-4f6f-937e-d99e1ea854af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d180c1a0-5c11-4d7a-99d0-088025d25e4f"
            }
          }
        ]
      },
      {
        "id": "92c4260f-5e86-4b03-b86a-d5902321bd83",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "43bdd8f5-bcd3-498b-b210-36cd8d18400a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e7f2df90-2093-4039-a7cc-1f2dfdc0b9c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa1480b4-22e7-456f-85de-7a9e8c5d492c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e441d7a6-a142-4ecb-8c6a-601043077873",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "05c183db-3d05-4a3a-8f89-70ae6e7baaa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa94983c-51cc-486b-8c22-19fc3323ea16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0aca5b77-2637-44e9-9560-9f625d1e6a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28932fab-27bb-453a-81b6-48e2ee02d655",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4e0aa7-5756-4053-8d13-e3846b893780",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ecc96a8f-40b4-4c70-abbf-6596d9057bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec8d682-a3a7-4f07-8ea9-c4e7ba9e82cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2aa4829-f89f-46c8-bb0e-049822c64819"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e211a641-e87f-40f7-a4e9-fafc66a48995",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e633b2d6-3c8d-4ea7-a838-659fea4c4a96"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "425f4243-9c9d-407a-bf59-c794058b47b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d92bcf1-336b-4d91-81f9-18273206131b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5db62812-d4dc-40a5-8912-82f67180c0cc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7e571f1a-acaf-41fe-85b6-4f8a1c2e675d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48f81799-399e-4d38-ba0b-11a83d46001f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6641cfe6-9f93-43a8-ba6a-3d89cdfac5b3"
            }
          }
        ]
      },
      {
        "id": "7cdb0895-ea51-4dd8-b9d1-4c1dfa042ec1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "108ab727-a58d-4d09-972c-e729a6d320c7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8d39745-640e-4b17-9277-c97e658fddd7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "91758bd3-4be2-4fe7-a556-fbdbaedb996d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab8397af-82d5-4f27-b0be-b67c038538d1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60663d71-6f93-4706-8d51-e7afa054fc7d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 473
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 166.5303449235573,
      "responseMin": 18,
      "responseMax": 5664,
      "responseSd": 726.404316812438,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671755785561,
      "completed": 1671755862290
    },
    "executions": [
      {
        "id": "a5b125cb-eb11-4a4d-b931-b565901453d0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "de7e9906-ec6b-46f6-8817-fd2eee66768c",
          "httpRequestId": "ee12d8e1-ea70-43bc-a2de-43b84113b6fc"
        },
        "item": {
          "id": "a5b125cb-eb11-4a4d-b931-b565901453d0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2a4429dc-6db5-4c1c-9bcc-7540e15bb95f",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 0
        }
      },
      {
        "id": "ab95dc76-bd03-41ed-a098-db5eaccd1474",
        "cursor": {
          "ref": "88d0c60d-95fa-4ff8-955c-bbafc3baab03",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cde20c4c-e10c-4c43-a2b6-98e0a7aac946"
        },
        "item": {
          "id": "ab95dc76-bd03-41ed-a098-db5eaccd1474",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a289efa8-8083-40cc-b758-9313d7bf79f0",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "5d816502-5957-4f15-8d8c-359d5ed17ed4",
        "cursor": {
          "ref": "b2c30fa8-fc32-472d-a910-1097453e3d80",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "27e03fdb-c7b4-4565-8601-b772832e94cf"
        },
        "item": {
          "id": "5d816502-5957-4f15-8d8c-359d5ed17ed4",
          "name": "did_json"
        },
        "response": {
          "id": "7ba3170c-ec55-4ac6-8906-3f2f9da6a155",
          "status": "OK",
          "code": 200,
          "responseTime": 251,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d669e72-55ea-4551-9e5b-3641cfc5d096",
        "cursor": {
          "ref": "5b76fb4f-5016-4776-9297-4e09907bf1fe",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1366ed07-a511-491d-96a0-32867874e848"
        },
        "item": {
          "id": "2d669e72-55ea-4551-9e5b-3641cfc5d096",
          "name": "did:invalid"
        },
        "response": {
          "id": "93fd5d52-c6ea-42ce-8598-0ad99b4e098e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 496,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d669e72-55ea-4551-9e5b-3641cfc5d096",
        "cursor": {
          "ref": "5b76fb4f-5016-4776-9297-4e09907bf1fe",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1366ed07-a511-491d-96a0-32867874e848"
        },
        "item": {
          "id": "2d669e72-55ea-4551-9e5b-3641cfc5d096",
          "name": "did:invalid"
        },
        "response": {
          "id": "93fd5d52-c6ea-42ce-8598-0ad99b4e098e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 496,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652cbbd0-63ef-4847-bc92-cf5f1eef11ab",
        "cursor": {
          "ref": "21c3126e-1589-48b0-a2a9-befb1ac29ce2",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "28df21f1-d265-4c4e-9f64-66945beb2a4f"
        },
        "item": {
          "id": "652cbbd0-63ef-4847-bc92-cf5f1eef11ab",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b88e5d98-8429-4f9e-a615-2dc47147c1b2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 605,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68796b93-82fe-4459-85d9-05d0e60c9e87",
        "cursor": {
          "ref": "52cc26fe-1a8d-4d1a-970e-1bf342dd140e",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f9eead50-a74c-42c9-a107-988974788f88"
        },
        "item": {
          "id": "68796b93-82fe-4459-85d9-05d0e60c9e87",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "37ef7887-e96c-43af-8e8c-8974ade7968d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 54,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0351ba9-7470-4b2f-a47f-ad701fc801fc",
        "cursor": {
          "ref": "dbe8c672-b47d-4907-8816-8dd23c945df3",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6e68b1ff-c8e6-4c16-b8bd-865fe93fd8b0"
        },
        "item": {
          "id": "b0351ba9-7470-4b2f-a47f-ad701fc801fc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f2af60a2-47c2-462c-bc8f-b954df83181f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db269cdd-ce88-4a3a-93e8-4126c241bdfb",
        "cursor": {
          "ref": "0f355915-63c0-4bc7-94d2-930fbe93c2b2",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6eab96b1-30c4-47d9-977f-5616c4ae54c6"
        },
        "item": {
          "id": "db269cdd-ce88-4a3a-93e8-4126c241bdfb",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9e0ea957-a455-4903-972f-f55ee2de7b90",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "db269cdd-ce88-4a3a-93e8-4126c241bdfb",
        "cursor": {
          "ref": "0f355915-63c0-4bc7-94d2-930fbe93c2b2",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6eab96b1-30c4-47d9-977f-5616c4ae54c6"
        },
        "item": {
          "id": "db269cdd-ce88-4a3a-93e8-4126c241bdfb",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9e0ea957-a455-4903-972f-f55ee2de7b90",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "92a7ade0-2463-4a39-ba01-9937704b717c",
        "cursor": {
          "ref": "4b7e8ca1-44f5-47ae-a770-ae61a7383d8b",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4861aec4-e04f-4679-8c86-53ce2abae1c3"
        },
        "item": {
          "id": "92a7ade0-2463-4a39-ba01-9937704b717c",
          "name": "identifiers"
        },
        "response": {
          "id": "77e8db87-cee8-4e57-b432-c59e739dbf87",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b47a6c-a4da-4cfa-96a7-da6764bf47a3",
        "cursor": {
          "ref": "bf7cd090-2eeb-4e12-99be-c975b4df19f4",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e429b1ae-0dff-40d1-8bc0-8560bae755c2"
        },
        "item": {
          "id": "55b47a6c-a4da-4cfa-96a7-da6764bf47a3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3436cc3e-c75b-4bde-82c6-42baebd7f3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "55b47a6c-a4da-4cfa-96a7-da6764bf47a3",
        "cursor": {
          "ref": "bf7cd090-2eeb-4e12-99be-c975b4df19f4",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e429b1ae-0dff-40d1-8bc0-8560bae755c2"
        },
        "item": {
          "id": "55b47a6c-a4da-4cfa-96a7-da6764bf47a3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3436cc3e-c75b-4bde-82c6-42baebd7f3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f3db0465-6953-40d3-a2bc-58e051a3657e",
        "cursor": {
          "ref": "2e0b186c-45a7-411c-88fd-bf4f47a2d6ef",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e16a98f3-5737-4808-9c80-14740af4efd1"
        },
        "item": {
          "id": "f3db0465-6953-40d3-a2bc-58e051a3657e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "214087fe-a785-498c-b49c-0df992d9f39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "88c06c63-7034-4972-82d6-5aa7c772b24e",
        "cursor": {
          "ref": "784240b6-af04-4c56-b083-0a8fb1683a22",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a7af793e-ea13-4088-82b1-eaa4eb6c1c78"
        },
        "item": {
          "id": "88c06c63-7034-4972-82d6-5aa7c772b24e",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "0ebebf0d-86e0-4dc4-a7ce-25c2eeac314f",
          "status": "Created",
          "code": 201,
          "responseTime": 116,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "8c965d3e-1f12-49a3-a3d2-ddf9868d973d",
        "cursor": {
          "ref": "9758801f-0af2-4175-a4c9-6dfb76e07029",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e77c0dfb-8507-47a5-adec-8b728d09efdd"
        },
        "item": {
          "id": "8c965d3e-1f12-49a3-a3d2-ddf9868d973d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "21f3a390-df5d-40d8-9db9-6d52d80602a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "84e0fa11-84fc-4066-b22b-2a30647be49e",
        "cursor": {
          "ref": "cba28411-1023-4802-9b52-d47504714c01",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7c211800-2b37-4a39-99a9-b743595ef229"
        },
        "item": {
          "id": "84e0fa11-84fc-4066-b22b-2a30647be49e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a979bc23-651e-4218-ba1f-49e3dde3ac71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "987ad0ac-a577-4f8b-908c-13b189f6779a",
        "cursor": {
          "ref": "01694343-2a51-4a91-9d93-13a78944d5c5",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a31b6736-0622-49e9-87e7-b35a733fdcbf"
        },
        "item": {
          "id": "987ad0ac-a577-4f8b-908c-13b189f6779a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b67ea8af-c3ba-4aea-a5d5-eaa879920605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "d2a419be-ae46-412f-9d13-ac29ec0da0ca",
        "cursor": {
          "ref": "03636998-af1a-4727-9129-966e6a5e5a0c",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a8a81c50-5ee6-417d-b590-00d4b2fc4e32"
        },
        "item": {
          "id": "d2a419be-ae46-412f-9d13-ac29ec0da0ca",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1efa26ff-4c98-4727-9315-c98fbc5afc2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "c51b3ff9-6a84-42fd-a60d-31b3c5b83577",
        "cursor": {
          "ref": "c3760338-d69b-4dea-bbb1-a6c7eefe28f0",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c688ea6a-dc21-49e0-9019-92788372682e"
        },
        "item": {
          "id": "c51b3ff9-6a84-42fd-a60d-31b3c5b83577",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b9180fe7-4a93-4d79-8e4c-520a8af4a77e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "02b74d79-47ec-4386-85ab-10f998fe3168",
        "cursor": {
          "ref": "00424d7c-ec26-4e59-adf8-001034cee9ec",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "89b2e614-7e65-4775-927b-0932e55653eb"
        },
        "item": {
          "id": "02b74d79-47ec-4386-85ab-10f998fe3168",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "781756c7-87cd-47c0-8fda-b4095ccef6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "b81dcc09-6fa7-4a10-ab29-05cadbd0a43b",
        "cursor": {
          "ref": "284ab86d-f48c-452f-9ab7-ddb35a25e67b",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a6c2662f-c394-4f1d-a60e-2aef5af418b3"
        },
        "item": {
          "id": "b81dcc09-6fa7-4a10-ab29-05cadbd0a43b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "285fe4f4-7868-467a-a0f8-c20a3f3aae03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "77f231b8-51d6-42af-be80-4b7ba96f1d85",
        "cursor": {
          "ref": "d0d8e4c7-9a79-45b6-85a4-094ba2260154",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f28dd091-adf7-49eb-8d74-c3a16fbebd3a"
        },
        "item": {
          "id": "77f231b8-51d6-42af-be80-4b7ba96f1d85",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b91acab2-9f68-443b-aa3a-89cad43fb2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "2dbaa782-eff8-4450-9539-9ab7c40efac1",
        "cursor": {
          "ref": "a89d3f4b-4380-4d41-8ca8-58326b7fb00c",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "352a9a89-cbbc-4dd7-bc32-a5b34d3f940e"
        },
        "item": {
          "id": "2dbaa782-eff8-4450-9539-9ab7c40efac1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "908d759e-2bfa-4b2f-a0bc-954bffc23a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "fb606712-4ce7-4ba9-8e0a-afd85c5e683c",
        "cursor": {
          "ref": "cf550636-5e1e-4a6f-be77-6f386f265b30",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7a3d21e6-61b7-4bdf-b992-0ab23f0aeef9"
        },
        "item": {
          "id": "fb606712-4ce7-4ba9-8e0a-afd85c5e683c",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5cb91e88-adee-4838-8a5b-6b2f3d89a780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "abf88247-4ae1-4506-8cee-f900330673d7",
        "cursor": {
          "ref": "9e4c45af-8a70-412e-8bf8-4d1459f133bc",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7598ddae-e6fc-41bf-8e18-209b2e371b3e"
        },
        "item": {
          "id": "abf88247-4ae1-4506-8cee-f900330673d7",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "534845bd-7120-4d74-af13-b2b1f566249c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "de0a4ac2-eb74-4019-a254-716cf403c57e",
        "cursor": {
          "ref": "59860348-e655-40e9-a61c-ed2146e406ed",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bde36ee7-5db3-4bcd-96fb-a049ce39efc5"
        },
        "item": {
          "id": "de0a4ac2-eb74-4019-a254-716cf403c57e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "dbde3bb1-10e7-4e92-9016-d8607433921f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "ec215f1d-2edc-4edf-860c-ebfaabee3010",
        "cursor": {
          "ref": "e3ecd8ce-1668-4d1c-95a7-45cc99f4b9dc",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dc85b2a8-59dd-4f25-839f-ef2dcc792040"
        },
        "item": {
          "id": "ec215f1d-2edc-4edf-860c-ebfaabee3010",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "626d21d6-c035-4f2b-a4cb-fa0dfdd6250b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "43271bd6-e910-40b2-acb1-6ee987c1999a",
        "cursor": {
          "ref": "cab40a5f-a36d-4e67-a1c2-571347b3f006",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f3874529-1e25-4add-b054-4a9ae429e5be"
        },
        "item": {
          "id": "43271bd6-e910-40b2-acb1-6ee987c1999a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a15a1e63-a6ed-469d-b342-1407063a8cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "6780d8ff-45c8-481b-9b82-83e714838baa",
        "cursor": {
          "ref": "d4e115fb-d96c-4c0f-869d-ae75fd90c68a",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "03e135eb-de9c-44c0-8af8-9aa9a0c2ec65"
        },
        "item": {
          "id": "6780d8ff-45c8-481b-9b82-83e714838baa",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9d7f1cc1-95ff-4b14-9515-bb2be48003b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "cf6c416a-ebb0-437c-b641-eeb77fd899b9",
        "cursor": {
          "ref": "badf49cb-51c6-47e2-aa50-ea3a09a52e1e",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "72aacad9-0e7b-4d45-a922-07ffff06a1c4"
        },
        "item": {
          "id": "cf6c416a-ebb0-437c-b641-eeb77fd899b9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e3b7b297-aadf-4450-893a-cbda2c2e0d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "e7850577-a645-4bde-bd36-1300efd55417",
        "cursor": {
          "ref": "08c6f748-2fb6-4040-b177-d34f906efe86",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "80407240-5bc9-4319-936b-0ea773130279"
        },
        "item": {
          "id": "e7850577-a645-4bde-bd36-1300efd55417",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "37baaf25-1eda-41ff-ad80-eef105a15680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "6b7eb731-6832-4261-b339-59c68d99fecf",
        "cursor": {
          "ref": "bca92972-a9d3-4b01-a381-3393661d228d",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "905d4388-7498-4f75-a5d2-62f9c307c097"
        },
        "item": {
          "id": "6b7eb731-6832-4261-b339-59c68d99fecf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fcd6108a-5f74-4977-a6f5-f670a84121a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "14da8bc8-84cf-4a81-9f94-31526f322d8f",
        "cursor": {
          "ref": "d5b6f63e-d296-4a64-a31d-ba384bef0b74",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "01a3dec5-2edc-4084-a387-32a65fe425d8"
        },
        "item": {
          "id": "14da8bc8-84cf-4a81-9f94-31526f322d8f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3fbb1672-4ec4-4ff7-bb49-4cb604cb5143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "27577260-40a6-4c84-999e-68200778f0bb",
        "cursor": {
          "ref": "d031ca7f-e903-43f0-8e7e-936354ce7343",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ce6e3c28-110a-44b1-918f-c9872c85bfb6"
        },
        "item": {
          "id": "27577260-40a6-4c84-999e-68200778f0bb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "20d3184b-8f80-4e46-b1dd-f38de24b81f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "882fcbff-21e2-4412-a2de-a11a44663cd1",
        "cursor": {
          "ref": "077eb9f0-c6fd-49aa-9169-5ca5719d987d",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3685951f-756d-483c-9e4e-960d80278a39"
        },
        "item": {
          "id": "882fcbff-21e2-4412-a2de-a11a44663cd1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f6b95159-6e2c-4779-ade2-cad6667f5262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "7b4ee3c0-3763-42fe-af98-0a5baa2a14ba",
        "cursor": {
          "ref": "e3544085-2ebe-457e-ae04-ab7aef21978a",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "79962b55-702c-4c51-9356-5148df2c33dc"
        },
        "item": {
          "id": "7b4ee3c0-3763-42fe-af98-0a5baa2a14ba",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2526519e-dfdf-43c7-80ab-8929be7b1032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e18ff1bf-a68e-42c8-9f6b-ae1cda3d7df0",
        "cursor": {
          "ref": "5c0ed0ad-4e44-4fef-996a-4f7fff434f3f",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "acc9db37-4aa3-4b54-b1f5-a87e6cc7454a"
        },
        "item": {
          "id": "e18ff1bf-a68e-42c8-9f6b-ae1cda3d7df0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4046f6af-e4c7-4407-95ef-5db45a184f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "53eb8a8a-08b3-4d46-b60d-fd106a5a53e1",
        "cursor": {
          "ref": "3225ff9b-9dd8-4a1f-9e21-c2d58bed478b",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0464a6b6-46c7-4602-ae48-0422f751f129"
        },
        "item": {
          "id": "53eb8a8a-08b3-4d46-b60d-fd106a5a53e1",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a1a84b2a-c53a-4349-b79a-29e1a24a4c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4609,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "27630b5d-6906-447d-80da-68b5fe4db7b3",
        "cursor": {
          "ref": "c74c482c-fb9d-4c1e-8162-9c92699f7508",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d34d6256-a840-41d1-96af-d9d537baec4e"
        },
        "item": {
          "id": "27630b5d-6906-447d-80da-68b5fe4db7b3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "422caab4-83a7-4f97-a0f9-61ea06a0e123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4846,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "70e3d713-b10b-449b-bcbb-85665149c916",
        "cursor": {
          "ref": "f010d37d-9743-4c80-986c-622366bb31ec",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "41db23c8-75d6-4a20-8985-466c4f43a40c"
        },
        "item": {
          "id": "70e3d713-b10b-449b-bcbb-85665149c916",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "274e14ff-688b-4b15-b9d1-33de38c432af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5664,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "56c22385-4e3d-4780-9caf-04c8a35fb0ff",
        "cursor": {
          "ref": "6e2bd11a-fbca-4cbe-b652-6c51da80b096",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "639a026a-be5b-4b92-8611-3ed0fc560037"
        },
        "item": {
          "id": "56c22385-4e3d-4780-9caf-04c8a35fb0ff",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b4bc9a26-a2eb-42f9-a03e-c6ab33048fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3943,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "69f6b278-35fa-4e0a-ac29-a08cb1f0c1da",
        "cursor": {
          "ref": "2ba77595-4262-4f52-baf1-aa0dcbed0518",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7bc72246-b088-470e-87b4-635057b3f16b"
        },
        "item": {
          "id": "69f6b278-35fa-4e0a-ac29-a08cb1f0c1da",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "34a248c3-2d50-43af-95b4-13c54a752fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3765,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "95d65546-0e84-4de5-9dfa-40dd484f2499",
        "cursor": {
          "ref": "0b29f50f-9283-44ff-8ea5-6473202efd6c",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9857d96d-1bbe-4d82-9a8b-bc61d862f9f6"
        },
        "item": {
          "id": "95d65546-0e84-4de5-9dfa-40dd484f2499",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "704b064d-7880-4381-9b1f-1fd5f206e163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8447fa8e-6ef8-48b1-8585-011aeb90c1f7",
        "cursor": {
          "ref": "aa16f890-7039-48f8-ab42-bac4300f1078",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "39d2031a-bfdb-425d-8767-1dea0a434c35"
        },
        "item": {
          "id": "8447fa8e-6ef8-48b1-8585-011aeb90c1f7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e696281b-5f3c-44e2-9116-827262132809",
          "status": "Created",
          "code": 201,
          "responseTime": 4084,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "fbcaec7e-c46b-43e9-b6a0-2ae0612fce9b",
        "cursor": {
          "ref": "e5e8daaf-e500-48a4-86c9-eb27c0478895",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9bc8b483-f28b-4905-b13d-2cd101fcf893"
        },
        "item": {
          "id": "fbcaec7e-c46b-43e9-b6a0-2ae0612fce9b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b36b1c85-3672-4cce-95e4-e80c8a1e8628",
          "status": "Created",
          "code": 201,
          "responseTime": 4126,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "dd786ae8-c0fa-4f89-8eb3-051ed01fdcf8",
        "cursor": {
          "ref": "00797d07-847c-4ba1-b70b-d10bb0b83bfb",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8343e7eb-e13f-4c41-bf50-eeda2e80bdb1"
        },
        "item": {
          "id": "dd786ae8-c0fa-4f89-8eb3-051ed01fdcf8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8b910bb5-06a5-4e0d-99a9-005bf946b16a",
          "status": "Created",
          "code": 201,
          "responseTime": 4264,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ffdd1ea9-68a9-4db2-8a03-0a877a5e94e5",
        "cursor": {
          "ref": "0e7cf8db-f8f4-40f4-bf7b-b1ac262d09d1",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "90ef2b70-60f2-4448-bd1c-b6458d295e8d"
        },
        "item": {
          "id": "ffdd1ea9-68a9-4db2-8a03-0a877a5e94e5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "864b0c43-ef4f-4ab7-9b91-64be98248200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "726be340-8f40-42bc-85e1-cd9041577caf",
        "cursor": {
          "ref": "a9acfb7a-fd49-4813-b129-0ce7285e812b",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8ae1aa9f-1422-4a62-8a3d-1534473c4c98"
        },
        "item": {
          "id": "726be340-8f40-42bc-85e1-cd9041577caf",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "24f03422-51a9-4dfa-b85c-bbf2035b3b88",
          "status": "Created",
          "code": 201,
          "responseTime": 4578,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "565bf501-897f-473e-aada-9d6bb4ade809",
        "cursor": {
          "ref": "edf4049c-7bfb-4f82-a9e5-8f2a1549b23e",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "998be3b1-1b2e-4ba2-9495-001f02c61619"
        },
        "item": {
          "id": "565bf501-897f-473e-aada-9d6bb4ade809",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "99909bce-abd6-4aff-a089-c0ad1fd529ff",
          "status": "Created",
          "code": 201,
          "responseTime": 5559,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e7343dd4-f773-4082-b0fc-a00ca212ba65",
        "cursor": {
          "ref": "2ddd5619-9885-4132-a665-74bf4236ed13",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "db0b81c4-c139-49db-bbf2-040409bee6c1"
        },
        "item": {
          "id": "e7343dd4-f773-4082-b0fc-a00ca212ba65",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1b49e05a-5d43-4d3a-b02f-085454a33c38",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 3093,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f861a4ce-98a9-4905-a46f-c1a10a7ba55c",
        "cursor": {
          "ref": "aa9d356b-1146-4165-87e3-6d83be6b9392",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f1df879d-6ac5-4e0b-a6e5-913543260523"
        },
        "item": {
          "id": "f861a4ce-98a9-4905-a46f-c1a10a7ba55c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4d28ff26-2f3b-40c2-8fbf-f49aa1c90508",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "72172d52-04be-4ba2-bbe1-72a1fa222a69",
        "cursor": {
          "ref": "0c32e90d-986c-414e-9611-7a810b6eba7e",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cc161d41-2e3f-4447-ac8a-ec92de718c38"
        },
        "item": {
          "id": "72172d52-04be-4ba2-bbe1-72a1fa222a69",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5a1887a1-95e9-4423-8889-8d5f895e8f14",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "78c3b995-5cd7-461d-add1-ed4ce9bce0c1",
        "cursor": {
          "ref": "bc3d28ff-18c7-4372-bf34-f935f2668b79",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "70c764ba-ee84-4799-84b3-f8b286b60c0c"
        },
        "item": {
          "id": "78c3b995-5cd7-461d-add1-ed4ce9bce0c1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c6eb3303-20bc-4248-b23f-8a722ad7600e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cde9a511-6205-4ba4-8cd6-89785f9828b0",
        "cursor": {
          "ref": "e0580939-037e-4143-9e96-0ba78b28f9ee",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d59c942c-7111-469b-8c13-ea3eff0770aa"
        },
        "item": {
          "id": "cde9a511-6205-4ba4-8cd6-89785f9828b0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2a1018c2-f01e-46b7-a40b-90e5f210af5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "6e5b602e-7209-4996-a71c-351a46e3c99d",
        "cursor": {
          "ref": "2a74f12c-0260-4373-a01a-7d1ff841ca9c",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c9ba447d-a70f-4db3-a02f-bb1a274d6bd3"
        },
        "item": {
          "id": "6e5b602e-7209-4996-a71c-351a46e3c99d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c5280ff4-88de-408d-adef-d318eed14cab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "9eaf16cf-2605-4fb0-8d17-d18fe2d73571",
        "cursor": {
          "ref": "00e4aeea-9e91-49ca-9412-82f6980659c1",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a8f05973-d8b7-4ed8-bc2d-9dfafb01e562"
        },
        "item": {
          "id": "9eaf16cf-2605-4fb0-8d17-d18fe2d73571",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cacb25da-f307-4193-adb4-3805175d3ade",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "0a7c580d-b80b-44c1-8712-709e209c4a83",
        "cursor": {
          "ref": "904b6832-8b4c-4a9d-9cad-1dcfc7b1c368",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1a6098b3-fc8d-4331-a7bb-34caac3ebfab"
        },
        "item": {
          "id": "0a7c580d-b80b-44c1-8712-709e209c4a83",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "587bd96c-a6d0-4caf-88b7-4acc79dfb892",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "2f3ebf0d-6568-49c2-b639-a47ae4e11f9e",
        "cursor": {
          "ref": "8d1e1721-b286-4bf0-8ee9-adb1800ffd9c",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8f27e87a-f914-40d1-8273-7f16e353bd42"
        },
        "item": {
          "id": "2f3ebf0d-6568-49c2-b639-a47ae4e11f9e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c4455534-7f05-4072-a220-cc1dc2f2b092",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "b48244e5-de67-4f37-b69a-efc6e7d294ee",
        "cursor": {
          "ref": "e70d5534-5d31-477b-8225-903b792f82b7",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c0cc9592-a266-4046-a4bf-0cbda25c3a3c"
        },
        "item": {
          "id": "b48244e5-de67-4f37-b69a-efc6e7d294ee",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6726e756-68fe-4ef5-b762-3ae8e18cc482",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "ba078c48-524b-44d1-9e21-bfd0583fcf6f",
        "cursor": {
          "ref": "63669d48-742b-48d1-90a0-ab417ecc7bd3",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2b1e31d2-1213-46f5-a511-e6772e920f5b"
        },
        "item": {
          "id": "ba078c48-524b-44d1-9e21-bfd0583fcf6f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e474e801-eb19-455e-a0c5-21faa2e52ebd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "94cbdc39-4e10-4577-b700-1952d90bbd86",
        "cursor": {
          "ref": "8e8fb679-5bb6-46f8-a098-3c13919582ec",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c5020e05-c0c8-49d0-8ac3-4d80faee5e06"
        },
        "item": {
          "id": "94cbdc39-4e10-4577-b700-1952d90bbd86",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5aa72fed-eafa-4439-be98-02e46583cd44",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "c19980b2-8b68-4189-825b-6aa9b7b3c224",
        "cursor": {
          "ref": "77af9660-ac8f-47bb-9da5-91e1c1cb00a8",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6cbfa7e3-245f-45f1-a0b3-c000fd14fb1a"
        },
        "item": {
          "id": "c19980b2-8b68-4189-825b-6aa9b7b3c224",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "deb2419a-10ae-46ca-8e6d-31864982e98d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "c0398e8b-7f4e-4b41-9c93-d562e1cee3e3",
        "cursor": {
          "ref": "7989f326-7961-44bf-8d1f-80328c8e6684",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "58d95b33-02e1-4680-a703-2c8fbd22ed17"
        },
        "item": {
          "id": "c0398e8b-7f4e-4b41-9c93-d562e1cee3e3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "60017990-55ad-4e6f-8f8f-e1b4d173488c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "7052bc42-e060-4688-ad73-c703294b65a1",
        "cursor": {
          "ref": "d95787dd-fcd3-4258-95b8-dd82c497a36d",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "69bfe570-1d22-4674-9d33-f265dc1a6ccc"
        },
        "item": {
          "id": "7052bc42-e060-4688-ad73-c703294b65a1",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "548ea63e-3c67-4cbb-80dc-44c17733555d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "eaea9b87-39d1-4bd7-9d78-87218d29bb68",
        "cursor": {
          "ref": "6659546a-71ad-4b8c-9f28-247dea04a5d3",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "28f10551-1ea3-40ce-9b19-1c11bb39e52f"
        },
        "item": {
          "id": "eaea9b87-39d1-4bd7-9d78-87218d29bb68",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6956e939-4bc4-4549-9206-e414c37605b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "9e498d15-89fe-4e89-83eb-fb5c00477d7a",
        "cursor": {
          "ref": "561a9de2-c389-4982-bbff-4413a0f3c4c9",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b0dd65e0-63d4-4bb6-a5da-d9be75e95ec9"
        },
        "item": {
          "id": "9e498d15-89fe-4e89-83eb-fb5c00477d7a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "07c0407a-648a-4010-ad05-4f875ad8054a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "2476f1b6-9f6e-42e3-8074-33f81ff94eb0",
        "cursor": {
          "ref": "bbd74070-4864-44d3-9c72-2ed83dd52368",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7537bd27-df5f-4b5f-86b7-23cc783e7261"
        },
        "item": {
          "id": "2476f1b6-9f6e-42e3-8074-33f81ff94eb0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "89271fb2-9970-4e7e-b484-62981477944e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3e00a6a8-311e-4a29-8b32-04cc3e65cfe7",
        "cursor": {
          "ref": "40e4c221-c5ff-42b3-b513-2ad7b811d8ac",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bf6daf28-a7d3-4e45-a860-349c9a7755a6"
        },
        "item": {
          "id": "3e00a6a8-311e-4a29-8b32-04cc3e65cfe7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "79bf111a-2d9e-4658-8f56-267b134b60e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "388281c6-039c-4ae9-be6d-65068c326fba",
        "cursor": {
          "ref": "065abd3f-c3ec-4c79-9c06-87528973e7e0",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "187852f5-4ac1-4248-a02f-a5e240932d99"
        },
        "item": {
          "id": "388281c6-039c-4ae9-be6d-65068c326fba",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "dca56a9e-f4c8-40ed-938c-4d95aa5fb332",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "10dfaf95-8164-43e1-b3d1-946eff477e62",
        "cursor": {
          "ref": "cf0f7433-2b65-4e69-a197-34fa406e8335",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1589f81a-10e2-4020-b4af-fa9370685a01"
        },
        "item": {
          "id": "10dfaf95-8164-43e1-b3d1-946eff477e62",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "03d2123c-1362-499e-b475-7e2291cc7d98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d462945d-2460-4d79-aaa2-b1b3d0258c80",
        "cursor": {
          "ref": "1ba9b655-9c43-452a-8521-6dcf6f7fc592",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "99706f8a-642d-411f-9e10-379690f92526"
        },
        "item": {
          "id": "d462945d-2460-4d79-aaa2-b1b3d0258c80",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "45a7d9a9-9d16-483c-a2ad-fe0154919f56",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7f9553ff-f610-4570-9f8c-f0a8e7b93e9e",
        "cursor": {
          "ref": "5819f9f5-cabc-4939-bfb8-c9c7bd7951d9",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "462bc65c-2330-4f6e-89a0-f58c11fb4f08"
        },
        "item": {
          "id": "7f9553ff-f610-4570-9f8c-f0a8e7b93e9e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f247ce81-8d53-4a3f-9628-bcf8b74e27c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "fc4f2dce-1d8d-43ca-932a-a277f5f4b502",
        "cursor": {
          "ref": "11e70848-724f-4152-a2a8-2911ebbde8b8",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "59ad1317-547b-457b-94b7-5a6ba6b4fdf7"
        },
        "item": {
          "id": "fc4f2dce-1d8d-43ca-932a-a277f5f4b502",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6fb3edf6-5f63-4a04-8594-7e9e162789e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "4a3aaad3-f263-47a1-a75d-7d9ccd2b654c",
        "cursor": {
          "ref": "1c114589-9a14-4c33-9765-065b581d167b",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "821d1c7a-204c-4d5d-bd4b-db649689ccdb"
        },
        "item": {
          "id": "4a3aaad3-f263-47a1-a75d-7d9ccd2b654c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b83e86a9-8df2-443a-834a-be11fc316efe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "1b00131a-3756-4d92-ba6b-24b1f5f6836e",
        "cursor": {
          "ref": "b9db7f3f-f80c-4892-a383-7f87cd617018",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "432a0f2f-c06a-47e7-b934-df1327225168"
        },
        "item": {
          "id": "1b00131a-3756-4d92-ba6b-24b1f5f6836e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3d30d967-42be-42b9-9082-0c244a33a003",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "5df79e0a-59ed-4761-847f-4a290434f426",
        "cursor": {
          "ref": "8a83a175-8671-41eb-b4ff-40e484306155",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a833b783-09c0-4422-8fe1-c1b5e6f35ade"
        },
        "item": {
          "id": "5df79e0a-59ed-4761-847f-4a290434f426",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "74b9d6a2-d834-427a-ad11-d9ee222f0f7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "a9dec54a-a4b5-4b55-a9ee-8750c3c7234d",
        "cursor": {
          "ref": "8c0db9c8-0c65-40f1-a292-69b184c087b9",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7d5c1847-602e-42de-8452-e522ca94e9cc"
        },
        "item": {
          "id": "a9dec54a-a4b5-4b55-a9ee-8750c3c7234d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7cf82283-5890-423a-b7f5-47bb8b5be9f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "85b6a3e4-296e-431c-8b33-0cf1c014ac2f",
        "cursor": {
          "ref": "72a4399c-f7ef-43ee-ae7c-e74aaf0e9dea",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "74d18162-eb04-4916-ae14-bbb7e4257504"
        },
        "item": {
          "id": "85b6a3e4-296e-431c-8b33-0cf1c014ac2f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "265ef785-f080-4d98-9d88-a46ba302b357",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "c584b748-0748-4918-b210-319ef0127bce",
        "cursor": {
          "ref": "48c88648-2032-44bb-8664-fbad4f27060b",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a63d5428-9ead-4687-be9e-2501cf352983"
        },
        "item": {
          "id": "c584b748-0748-4918-b210-319ef0127bce",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d46e5193-0999-4d6d-b8c2-7dc212779f15",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "c8797a33-c813-4056-b990-443e338566fb",
        "cursor": {
          "ref": "f92ad1ed-9e9e-4068-af61-8e86e79739e3",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d6cf44f6-99a6-4606-a356-789d29eb04d9"
        },
        "item": {
          "id": "c8797a33-c813-4056-b990-443e338566fb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "59353662-9a81-4f89-9ffe-36d65820fc88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "0ae0bb81-7ce5-4266-8c60-a9b5a4414143",
        "cursor": {
          "ref": "dbc698bf-5bd7-42ff-a8db-8ffe4afe2962",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f0c1abd1-05b4-4f95-808b-204687518f22"
        },
        "item": {
          "id": "0ae0bb81-7ce5-4266-8c60-a9b5a4414143",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e11113f7-499c-463e-a0d8-03e88af560b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "eda93b26-2a4a-4725-a70c-c6b1eea520f5",
        "cursor": {
          "ref": "5feb31fc-4200-4413-a056-701f2c695888",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "06372121-babe-4827-863b-6cbbaaef2a82"
        },
        "item": {
          "id": "eda93b26-2a4a-4725-a70c-c6b1eea520f5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "bd8c3ee6-a129-4cec-b191-2a3bb8e4a2a5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "8e23d61e-fd4f-4ae8-aea8-9f5fe59e5645",
        "cursor": {
          "ref": "664303c0-aff9-4835-afab-7b66e81bd1dd",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a3e79cc6-7235-45cf-b071-93dde7bfbea5"
        },
        "item": {
          "id": "8e23d61e-fd4f-4ae8-aea8-9f5fe59e5645",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "71e03ff4-2510-4ad0-85b3-0faeaf3c53ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "eaa4aa42-19d7-4b6c-8807-8197c8e9225f",
        "cursor": {
          "ref": "5ce236a1-ae8f-40bd-9a43-6f6a9c1d3ede",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f3b217ed-740d-4c90-9794-5ef0aa965f87"
        },
        "item": {
          "id": "eaa4aa42-19d7-4b6c-8807-8197c8e9225f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4e835037-3635-4882-9fb7-036780025799",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "8fc7ebd3-3f3a-48b0-8d27-0c7248676f67",
        "cursor": {
          "ref": "f5d36525-e694-4f6f-bb5c-cfcc0d0abf6a",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "074b7681-c0bf-4788-8ac9-1061267a593b"
        },
        "item": {
          "id": "8fc7ebd3-3f3a-48b0-8d27-0c7248676f67",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "53c561ef-5c8a-4c50-9385-85a197659bc0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "c72d1004-cdd7-43c7-954c-700588969d77",
        "cursor": {
          "ref": "eefbfc25-443d-475a-922f-a353403e1a7d",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "af1f2b2f-af1a-454a-91e8-f77ee53dded0"
        },
        "item": {
          "id": "c72d1004-cdd7-43c7-954c-700588969d77",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ec0505cd-fbc2-47ac-b689-14ae7635417b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "ba5c6f27-2a5f-4add-a020-8345474ba2f6",
        "cursor": {
          "ref": "0a05abdc-b6a3-4d97-a571-e355fd4c4975",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "70da8677-f24a-4baa-9561-2e8402293dbf"
        },
        "item": {
          "id": "ba5c6f27-2a5f-4add-a020-8345474ba2f6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "05427528-0597-4fa0-8745-231930073629",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "90a4398d-a9ed-404a-9f49-7bf3fe92e0e6",
        "cursor": {
          "ref": "e1589fd0-1d54-47f8-acba-741b4869ccc5",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0b51aa85-5868-46be-8086-b5d7025657fe"
        },
        "item": {
          "id": "90a4398d-a9ed-404a-9f49-7bf3fe92e0e6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "827d7fd5-1540-4116-83f5-8cb48524c93d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "be5434c3-7d2f-4c07-87a6-3ae6d22c331a",
        "cursor": {
          "ref": "9d3a5355-3d81-45fd-8246-949748fe5f42",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "927fc83c-99fc-4cc5-80e2-2774b09e81db"
        },
        "item": {
          "id": "be5434c3-7d2f-4c07-87a6-3ae6d22c331a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "55be1641-2a15-4181-ab9a-b746c79f31fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "95346d1a-4c72-455f-baf1-be5854cce33c",
        "cursor": {
          "ref": "e9ede227-791e-4974-8edc-55a33a05736d",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6f95c73d-bc85-4e78-be46-b0442f7c4831"
        },
        "item": {
          "id": "95346d1a-4c72-455f-baf1-be5854cce33c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "11d5837e-7b32-478c-a32b-e9024965c885",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "82d56914-5fcb-41e7-958d-e30f50acabee",
        "cursor": {
          "ref": "24abcdcd-e7ed-4893-8c3b-32e16ea4d2ba",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a8d994d8-577e-4d1c-9d30-754dbd779187"
        },
        "item": {
          "id": "82d56914-5fcb-41e7-958d-e30f50acabee",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a72fa290-30ee-4604-b379-d06044e5c7ab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "f17995d7-dc52-45c4-af75-7e0f1d37e774",
        "cursor": {
          "ref": "d6418a37-c91a-46ed-a55a-5ab1cf289172",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3fa45d5b-e41f-4615-9097-c5d63fec07e4"
        },
        "item": {
          "id": "f17995d7-dc52-45c4-af75-7e0f1d37e774",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "abc78f84-31d6-4284-8d5b-5a5c4b42025b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "68929e37-c191-4638-8aa6-767540b276bf",
        "cursor": {
          "ref": "b914b682-8502-459f-895f-f9250e163817",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "62c1c5b5-d87f-4fd2-bcc9-7adb045d9a77"
        },
        "item": {
          "id": "68929e37-c191-4638-8aa6-767540b276bf",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "44fbfea9-ce18-46d3-995d-fc746b6510fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "d522aa2e-0a5b-4cd6-8b01-a40e02460044",
        "cursor": {
          "ref": "4bc04e48-cf92-427e-a8e4-940c6370ee91",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "34b0f6a4-a2dc-40a5-a0db-2285fe84a039"
        },
        "item": {
          "id": "d522aa2e-0a5b-4cd6-8b01-a40e02460044",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5acc3c12-86aa-4326-82ed-f936f99946af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "9a32976b-5cfa-418d-b965-75ce8c0cbee4",
        "cursor": {
          "ref": "8889fd21-b7d3-490d-96f5-ccc8d241dd29",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1790df0f-528e-4a4d-825a-836a88f89408"
        },
        "item": {
          "id": "9a32976b-5cfa-418d-b965-75ce8c0cbee4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b810ed87-f6e8-4d56-b3a9-812d23c4385d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "c4ca53a2-c7f8-4538-b866-55b1d04772b7",
        "cursor": {
          "ref": "873fe694-03b5-4fb4-a64f-602be989c4f0",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0a4c81f8-32d6-446e-965b-11e6b59fd9c0"
        },
        "item": {
          "id": "c4ca53a2-c7f8-4538-b866-55b1d04772b7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "46282501-7a4b-4f59-8f04-a63a7b6bbf22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "9d0e7f7a-3258-40da-8882-7b731bebd2ec",
        "cursor": {
          "ref": "d247efd6-2539-43f9-9b3f-df31f58b51ef",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3ce773f1-27ad-4b6a-ba7f-31f91335adfb"
        },
        "item": {
          "id": "9d0e7f7a-3258-40da-8882-7b731bebd2ec",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6826d660-1a92-4662-a57f-0089be444e67",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "f4e28ae9-90d6-464b-984f-432622dc5b84",
        "cursor": {
          "ref": "228f80ca-a0d7-4553-85e8-e333befdd56d",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "50b6a72f-4e36-4fb6-8502-046d8f3dab14"
        },
        "item": {
          "id": "f4e28ae9-90d6-464b-984f-432622dc5b84",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "25cb031d-ad37-4066-90c1-7ecba698029e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "c80627b2-388f-4663-ab21-e8f0f4a2cab3",
        "cursor": {
          "ref": "f3fd8ec0-798c-45d9-bc6c-5b039ebada06",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "39f51983-7dc4-4154-894c-9e31b627f597"
        },
        "item": {
          "id": "c80627b2-388f-4663-ab21-e8f0f4a2cab3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e95d68cf-81a2-45e1-96e5-b4270efccd95",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "468944d0-de65-4079-9fa3-4ac8c4b915d4",
        "cursor": {
          "ref": "97ecaa0e-16ca-4934-ab6b-d4aaf6027f12",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "84862aed-c890-4c39-aa4d-91e301326b46"
        },
        "item": {
          "id": "468944d0-de65-4079-9fa3-4ac8c4b915d4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0ee02480-cbd1-4caf-a1fe-4aacd08379ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "30b4e512-c5aa-44ad-96b1-5e8fa6c88e5a",
        "cursor": {
          "ref": "0f6a7215-9138-47e8-b885-b0661c1bd42d",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0bca1139-92ad-4080-943e-2e2c2ebd6f01"
        },
        "item": {
          "id": "30b4e512-c5aa-44ad-96b1-5e8fa6c88e5a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "384722e8-bbff-4b7f-9086-0ae0b54cab89",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "aa416c62-5f44-4c58-8bbf-167145679931",
        "cursor": {
          "ref": "bb2cbaa1-eca3-40bd-8d10-21714e45bae6",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1047bcb1-1d42-42ee-b94c-3cb70ec98e2d"
        },
        "item": {
          "id": "aa416c62-5f44-4c58-8bbf-167145679931",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "673bf15f-5dcc-4003-8913-7826989cde3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "574cc138-8321-4c56-881e-83245744aea9",
        "cursor": {
          "ref": "4d76d7a4-d430-4e07-b90e-cbebc10702c4",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "81cce763-3e0c-4e9e-b5fe-d35f6b2df652"
        },
        "item": {
          "id": "574cc138-8321-4c56-881e-83245744aea9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a5441b65-4b0b-4fc4-86ed-8ce149ec55a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "8e2a43f1-9f50-4e79-a506-99a43cf3e651",
        "cursor": {
          "ref": "95d902b2-7fd4-4660-8f93-d641b5e5578e",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "50ce43f1-5438-4641-8719-78a2e7a36b95"
        },
        "item": {
          "id": "8e2a43f1-9f50-4e79-a506-99a43cf3e651",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4553481a-5ad3-4e05-b0dc-06615e15d07c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "39632c0f-7106-4174-8989-b8293e172d1a",
        "cursor": {
          "ref": "668f70b0-3a37-401d-951b-467842211624",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cd7972cc-2922-4a42-a8fb-bcdf51931e09"
        },
        "item": {
          "id": "39632c0f-7106-4174-8989-b8293e172d1a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f142f3ea-ecff-4a7f-8857-663b5c05696b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "9704fde8-00a8-4e83-9ac9-dd5004fafda0",
        "cursor": {
          "ref": "72630f32-7628-41d5-a644-79601e2a7f85",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a8b8d9d5-f5da-472d-953b-81af4051aa31"
        },
        "item": {
          "id": "9704fde8-00a8-4e83-9ac9-dd5004fafda0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fb937a27-fb1e-44ac-baf7-88359f02c34c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "2d03af3e-22e0-4bf7-b3ed-e85a38a5f895",
        "cursor": {
          "ref": "b56294c3-71b4-4a01-9d59-1a4a33f51192",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f9f0c7cf-ac82-4896-97c3-5ae766003bde"
        },
        "item": {
          "id": "2d03af3e-22e0-4bf7-b3ed-e85a38a5f895",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0fb91311-b379-446a-b916-6a3708a0d5a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "57ce9c27-41f1-43e6-8487-6953b9b98e2e",
        "cursor": {
          "ref": "65038ccf-8996-4a03-b0b5-0828aff3a317",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "57220d19-dcb3-4d34-a766-4be9461d2ab3"
        },
        "item": {
          "id": "57ce9c27-41f1-43e6-8487-6953b9b98e2e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7223524c-e3a0-4fd1-8ccb-e8062c13047c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "49e75fec-4a8d-4d35-830f-e8117056ad88",
        "cursor": {
          "ref": "856336ea-85d4-410c-92d8-4276c058bc88",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d1ace76d-f4cf-47b4-a955-5a9c39645093"
        },
        "item": {
          "id": "49e75fec-4a8d-4d35-830f-e8117056ad88",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c0b755c4-ea30-4951-ba06-985931a81006",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "56df1985-eb46-4f48-90a1-7be623dce03f",
        "cursor": {
          "ref": "b2f6e227-8b34-4be4-8127-467a2024f50d",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3c683cf9-6429-4c17-9be3-da1a76adbc80"
        },
        "item": {
          "id": "56df1985-eb46-4f48-90a1-7be623dce03f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9071f059-71c5-4bb0-931c-2969ac04749b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "48eb18e3-be83-4720-9195-4b033958ab05",
        "cursor": {
          "ref": "41bb710e-d9dd-4e58-8484-da97a92dfaa5",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "af3a3a95-6e8e-492a-8e26-ab16f60c2da5"
        },
        "item": {
          "id": "48eb18e3-be83-4720-9195-4b033958ab05",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ac82da64-868a-4982-846c-cb47890988cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "f8a16ca5-a488-4089-9a08-5d1f3e7eb008",
        "cursor": {
          "ref": "35167afc-49cd-4b7a-839f-5447ea6f0cc6",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9bcda416-8529-4f84-bbef-be161f17bb28"
        },
        "item": {
          "id": "f8a16ca5-a488-4089-9a08-5d1f3e7eb008",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "42724de5-1ab8-4431-a3e3-32385ffc374d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "6f729980-e305-4520-a5a6-f6de84f930b4",
        "cursor": {
          "ref": "09a9fa3a-3181-4ee4-baa2-b037f00d1fbe",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5d270542-ed91-4f41-9a72-ecc766372215"
        },
        "item": {
          "id": "6f729980-e305-4520-a5a6-f6de84f930b4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "94171032-e72c-41b1-b614-da558eec4b36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "6f729980-e305-4520-a5a6-f6de84f930b4",
        "cursor": {
          "ref": "09a9fa3a-3181-4ee4-baa2-b037f00d1fbe",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5d270542-ed91-4f41-9a72-ecc766372215"
        },
        "item": {
          "id": "6f729980-e305-4520-a5a6-f6de84f930b4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "94171032-e72c-41b1-b614-da558eec4b36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "8b984a4e-1db9-48a7-bf6d-888666ec686c",
        "cursor": {
          "ref": "ef285fc6-66cd-4b00-a6b2-ad5b811ad7c6",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c8b39588-2955-49d4-b215-32ae36d3fe9c"
        },
        "item": {
          "id": "8b984a4e-1db9-48a7-bf6d-888666ec686c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "71742ab4-2d19-4db9-aa62-062cc8af5185",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "8b984a4e-1db9-48a7-bf6d-888666ec686c",
        "cursor": {
          "ref": "ef285fc6-66cd-4b00-a6b2-ad5b811ad7c6",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c8b39588-2955-49d4-b215-32ae36d3fe9c"
        },
        "item": {
          "id": "8b984a4e-1db9-48a7-bf6d-888666ec686c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "71742ab4-2d19-4db9-aa62-062cc8af5185",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "3121eacb-04da-43cd-8a6b-c271f3a11c28",
        "cursor": {
          "ref": "ba5e0200-5d47-4ab8-90da-6d4e1ff3ed7f",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b5a0e2e3-6b97-47e3-a78d-a1ed97bea2e5"
        },
        "item": {
          "id": "3121eacb-04da-43cd-8a6b-c271f3a11c28",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ea368e6a-795c-4616-8054-3c7ff6c31770",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "3121eacb-04da-43cd-8a6b-c271f3a11c28",
        "cursor": {
          "ref": "ba5e0200-5d47-4ab8-90da-6d4e1ff3ed7f",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b5a0e2e3-6b97-47e3-a78d-a1ed97bea2e5"
        },
        "item": {
          "id": "3121eacb-04da-43cd-8a6b-c271f3a11c28",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ea368e6a-795c-4616-8054-3c7ff6c31770",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "9dde563e-4184-4a40-b291-78f3eb7aca27",
        "cursor": {
          "ref": "ec648b4e-c4af-4ecf-9936-66edb8052b42",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a3cb1c76-115e-467c-82df-3121f74e8a7c"
        },
        "item": {
          "id": "9dde563e-4184-4a40-b291-78f3eb7aca27",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6aa91445-0df5-436b-aba7-f40b289123a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "9dde563e-4184-4a40-b291-78f3eb7aca27",
        "cursor": {
          "ref": "ec648b4e-c4af-4ecf-9936-66edb8052b42",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a3cb1c76-115e-467c-82df-3121f74e8a7c"
        },
        "item": {
          "id": "9dde563e-4184-4a40-b291-78f3eb7aca27",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6aa91445-0df5-436b-aba7-f40b289123a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "60d62014-574f-45e8-a9dd-5cc87f38e142",
        "cursor": {
          "ref": "1bf08218-376b-4a03-b8a1-1d6785a4aaea",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "04ffcdc2-acc5-4c66-b67a-c68abb9eb879"
        },
        "item": {
          "id": "60d62014-574f-45e8-a9dd-5cc87f38e142",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7375bdb6-a7c6-45fd-9195-9d4ccd075425",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "60d62014-574f-45e8-a9dd-5cc87f38e142",
        "cursor": {
          "ref": "1bf08218-376b-4a03-b8a1-1d6785a4aaea",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "04ffcdc2-acc5-4c66-b67a-c68abb9eb879"
        },
        "item": {
          "id": "60d62014-574f-45e8-a9dd-5cc87f38e142",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7375bdb6-a7c6-45fd-9195-9d4ccd075425",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "53cc61ea-973a-426b-bad8-563273b89ade",
        "cursor": {
          "ref": "4f81125e-d27b-4744-af33-ef5c0fd0a18b",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1c52acb6-fd0e-43bb-a199-d2ca9c393e3a"
        },
        "item": {
          "id": "53cc61ea-973a-426b-bad8-563273b89ade",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b92c3252-ec58-4399-a2e6-b27709221802",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "53cc61ea-973a-426b-bad8-563273b89ade",
        "cursor": {
          "ref": "4f81125e-d27b-4744-af33-ef5c0fd0a18b",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1c52acb6-fd0e-43bb-a199-d2ca9c393e3a"
        },
        "item": {
          "id": "53cc61ea-973a-426b-bad8-563273b89ade",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b92c3252-ec58-4399-a2e6-b27709221802",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "7b23381f-203c-4d12-b390-739bdf8d018d",
        "cursor": {
          "ref": "cc268749-edcf-473e-bc0a-d335d5cafbd1",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8724060c-fb7c-4051-8386-fa3dfbcfe409"
        },
        "item": {
          "id": "7b23381f-203c-4d12-b390-739bdf8d018d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dfa63713-ac85-4a78-896d-af0f7ee7a379",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "7b23381f-203c-4d12-b390-739bdf8d018d",
        "cursor": {
          "ref": "cc268749-edcf-473e-bc0a-d335d5cafbd1",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8724060c-fb7c-4051-8386-fa3dfbcfe409"
        },
        "item": {
          "id": "7b23381f-203c-4d12-b390-739bdf8d018d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dfa63713-ac85-4a78-896d-af0f7ee7a379",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9118980c-b537-453f-b8da-27794371d32e",
        "cursor": {
          "ref": "eaf2982f-9ce7-4d8d-b69d-8087d253a5fb",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d7458920-b07d-4bdd-b52f-1b0a18a9ad73"
        },
        "item": {
          "id": "9118980c-b537-453f-b8da-27794371d32e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b78e9d77-cc6b-47cf-9aa4-713ecff82c5d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9118980c-b537-453f-b8da-27794371d32e",
        "cursor": {
          "ref": "eaf2982f-9ce7-4d8d-b69d-8087d253a5fb",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d7458920-b07d-4bdd-b52f-1b0a18a9ad73"
        },
        "item": {
          "id": "9118980c-b537-453f-b8da-27794371d32e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b78e9d77-cc6b-47cf-9aa4-713ecff82c5d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7b3d0143-1d6a-4869-86d8-c5a300b56ed9",
        "cursor": {
          "ref": "f939535d-48ae-4d8e-bba5-750536f4fd27",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bbfd9cb2-b771-4610-a206-ab6d6ebd47fe"
        },
        "item": {
          "id": "7b3d0143-1d6a-4869-86d8-c5a300b56ed9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8113bdd1-32ce-453b-b8e0-faea579ab91c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7b3d0143-1d6a-4869-86d8-c5a300b56ed9",
        "cursor": {
          "ref": "f939535d-48ae-4d8e-bba5-750536f4fd27",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bbfd9cb2-b771-4610-a206-ab6d6ebd47fe"
        },
        "item": {
          "id": "7b3d0143-1d6a-4869-86d8-c5a300b56ed9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8113bdd1-32ce-453b-b8e0-faea579ab91c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "6db4e22c-576e-4d4d-b847-09dde61173ba",
        "cursor": {
          "ref": "6e0e8abc-43c6-42d3-9e19-34435efe2067",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "670798d5-13ad-4313-9d8b-26bddae29478"
        },
        "item": {
          "id": "6db4e22c-576e-4d4d-b847-09dde61173ba",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "81cd1326-e6e5-4c5b-951b-cbcb4a92b966",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "6db4e22c-576e-4d4d-b847-09dde61173ba",
        "cursor": {
          "ref": "6e0e8abc-43c6-42d3-9e19-34435efe2067",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "670798d5-13ad-4313-9d8b-26bddae29478"
        },
        "item": {
          "id": "6db4e22c-576e-4d4d-b847-09dde61173ba",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "81cd1326-e6e5-4c5b-951b-cbcb4a92b966",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "547d508c-e727-4c68-9555-dc27962c23ef",
        "cursor": {
          "ref": "2af106cb-4ee3-48f8-8d0f-7b9241577cb3",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8c8336e3-500c-40f2-b6a7-4f3f36c534f2"
        },
        "item": {
          "id": "547d508c-e727-4c68-9555-dc27962c23ef",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d9317a8b-039c-442f-a7d9-178b5501575c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "547d508c-e727-4c68-9555-dc27962c23ef",
        "cursor": {
          "ref": "2af106cb-4ee3-48f8-8d0f-7b9241577cb3",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8c8336e3-500c-40f2-b6a7-4f3f36c534f2"
        },
        "item": {
          "id": "547d508c-e727-4c68-9555-dc27962c23ef",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d9317a8b-039c-442f-a7d9-178b5501575c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "8349dcf7-9c3f-4ff2-9c48-2e83e2da4adc",
        "cursor": {
          "ref": "2348d172-13af-4800-bbcf-1556ab933809",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "eaf735d9-90b0-4a31-ab43-f61359ec85c0"
        },
        "item": {
          "id": "8349dcf7-9c3f-4ff2-9c48-2e83e2da4adc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f1a201b2-6637-408c-ac4e-fe0c0f986203",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "8349dcf7-9c3f-4ff2-9c48-2e83e2da4adc",
        "cursor": {
          "ref": "2348d172-13af-4800-bbcf-1556ab933809",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "eaf735d9-90b0-4a31-ab43-f61359ec85c0"
        },
        "item": {
          "id": "8349dcf7-9c3f-4ff2-9c48-2e83e2da4adc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f1a201b2-6637-408c-ac4e-fe0c0f986203",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2b3da968-c256-4776-abd3-4fcbeb3d30cc",
        "cursor": {
          "ref": "92339d9c-e210-45e1-9751-2a1580e1a561",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dfcde824-a3fd-40ae-b091-b1040384da83"
        },
        "item": {
          "id": "2b3da968-c256-4776-abd3-4fcbeb3d30cc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5189cdc4-adbb-435b-aca1-7e968e9b4d37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "2b3da968-c256-4776-abd3-4fcbeb3d30cc",
        "cursor": {
          "ref": "92339d9c-e210-45e1-9751-2a1580e1a561",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dfcde824-a3fd-40ae-b091-b1040384da83"
        },
        "item": {
          "id": "2b3da968-c256-4776-abd3-4fcbeb3d30cc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5189cdc4-adbb-435b-aca1-7e968e9b4d37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "5fa75bac-b13a-4a49-b088-1bac5dba7112",
        "cursor": {
          "ref": "7ab1bf60-6d84-4a5a-bf23-693a3ab5ae84",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2af03633-d286-4efc-9c61-e1efea3ed780"
        },
        "item": {
          "id": "5fa75bac-b13a-4a49-b088-1bac5dba7112",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "26eda33f-4037-44bb-989d-aad935653656",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "5fa75bac-b13a-4a49-b088-1bac5dba7112",
        "cursor": {
          "ref": "7ab1bf60-6d84-4a5a-bf23-693a3ab5ae84",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2af03633-d286-4efc-9c61-e1efea3ed780"
        },
        "item": {
          "id": "5fa75bac-b13a-4a49-b088-1bac5dba7112",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "26eda33f-4037-44bb-989d-aad935653656",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "88d7dbb1-f78d-44b0-af8d-4723accaa96c",
        "cursor": {
          "ref": "f7f41c52-2d67-43cd-86c3-0e671ccbcb8a",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "87473a84-0ab2-48c6-ab12-865540a82648"
        },
        "item": {
          "id": "88d7dbb1-f78d-44b0-af8d-4723accaa96c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "280476df-97c6-42c4-b8aa-c3eb0937e5fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "88d7dbb1-f78d-44b0-af8d-4723accaa96c",
        "cursor": {
          "ref": "f7f41c52-2d67-43cd-86c3-0e671ccbcb8a",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "87473a84-0ab2-48c6-ab12-865540a82648"
        },
        "item": {
          "id": "88d7dbb1-f78d-44b0-af8d-4723accaa96c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "280476df-97c6-42c4-b8aa-c3eb0937e5fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "946847a9-547d-44f0-b722-ef9ff06cb37d",
        "cursor": {
          "ref": "e171d825-05e0-483e-a292-836f4bdee279",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "85df7f5a-e06c-46a8-873a-aa1f2a7ec9ca"
        },
        "item": {
          "id": "946847a9-547d-44f0-b722-ef9ff06cb37d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7bf95820-8dfe-4319-a251-0809938a752f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "946847a9-547d-44f0-b722-ef9ff06cb37d",
        "cursor": {
          "ref": "e171d825-05e0-483e-a292-836f4bdee279",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "85df7f5a-e06c-46a8-873a-aa1f2a7ec9ca"
        },
        "item": {
          "id": "946847a9-547d-44f0-b722-ef9ff06cb37d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7bf95820-8dfe-4319-a251-0809938a752f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "87b5a8a5-c55f-4e53-9755-d7188f1fc4b6",
        "cursor": {
          "ref": "db0b94b4-76bf-4f63-8992-796ee5ace920",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "65fb8b21-c0dd-4b82-857f-4d35e4e0cd3e"
        },
        "item": {
          "id": "87b5a8a5-c55f-4e53-9755-d7188f1fc4b6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8c33d788-481d-476e-a6c4-7f153d4f6e08",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "87b5a8a5-c55f-4e53-9755-d7188f1fc4b6",
        "cursor": {
          "ref": "db0b94b4-76bf-4f63-8992-796ee5ace920",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "65fb8b21-c0dd-4b82-857f-4d35e4e0cd3e"
        },
        "item": {
          "id": "87b5a8a5-c55f-4e53-9755-d7188f1fc4b6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8c33d788-481d-476e-a6c4-7f153d4f6e08",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "abdc3dea-49f6-476d-8ef4-b7ea6b558b85",
        "cursor": {
          "ref": "cdf3feb7-ccbd-48a1-bcf1-fe310a38184a",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0e74f3b0-aec3-4f29-92e6-1308c3b7a326"
        },
        "item": {
          "id": "abdc3dea-49f6-476d-8ef4-b7ea6b558b85",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cd2ed11f-027f-4bb0-b36e-7001747ff6d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "abdc3dea-49f6-476d-8ef4-b7ea6b558b85",
        "cursor": {
          "ref": "cdf3feb7-ccbd-48a1-bcf1-fe310a38184a",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0e74f3b0-aec3-4f29-92e6-1308c3b7a326"
        },
        "item": {
          "id": "abdc3dea-49f6-476d-8ef4-b7ea6b558b85",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cd2ed11f-027f-4bb0-b36e-7001747ff6d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "ff84efd7-9629-4a77-98e4-e216f8def504",
        "cursor": {
          "ref": "845c7fd4-0565-406d-8149-ac0a47bafe30",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8e71497a-8837-4204-90de-3ca1ad161aae"
        },
        "item": {
          "id": "ff84efd7-9629-4a77-98e4-e216f8def504",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e58b63ad-f81f-432f-a96a-64446062f8fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "ff84efd7-9629-4a77-98e4-e216f8def504",
        "cursor": {
          "ref": "845c7fd4-0565-406d-8149-ac0a47bafe30",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8e71497a-8837-4204-90de-3ca1ad161aae"
        },
        "item": {
          "id": "ff84efd7-9629-4a77-98e4-e216f8def504",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e58b63ad-f81f-432f-a96a-64446062f8fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "f1848f90-f574-49d9-b71a-2a79171aacbd",
        "cursor": {
          "ref": "bee9e198-38c4-43f0-912d-1f671b3538f4",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5b98e09d-621d-4298-8a7e-b16fe7d87165"
        },
        "item": {
          "id": "f1848f90-f574-49d9-b71a-2a79171aacbd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "79fe3e7c-e9e0-4e8f-a680-d84a8f3b23c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f1848f90-f574-49d9-b71a-2a79171aacbd",
        "cursor": {
          "ref": "bee9e198-38c4-43f0-912d-1f671b3538f4",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5b98e09d-621d-4298-8a7e-b16fe7d87165"
        },
        "item": {
          "id": "f1848f90-f574-49d9-b71a-2a79171aacbd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "79fe3e7c-e9e0-4e8f-a680-d84a8f3b23c9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "660f76bf-9ba7-489a-a8fe-450806d427a1",
        "cursor": {
          "ref": "68d142b7-9947-4091-8d2b-f19727dede32",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "014f03f7-d413-4623-a433-82bd937baa96"
        },
        "item": {
          "id": "660f76bf-9ba7-489a-a8fe-450806d427a1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dbf88dca-ed2d-455c-8a88-943cf9af6e66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "660f76bf-9ba7-489a-a8fe-450806d427a1",
        "cursor": {
          "ref": "68d142b7-9947-4091-8d2b-f19727dede32",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "014f03f7-d413-4623-a433-82bd937baa96"
        },
        "item": {
          "id": "660f76bf-9ba7-489a-a8fe-450806d427a1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dbf88dca-ed2d-455c-8a88-943cf9af6e66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "e08c207d-ff9b-48ed-9fbe-4cf4439c344c",
        "cursor": {
          "ref": "ca0d951f-3ec2-47f8-b440-b6557100187a",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d874f33e-e0d0-4af0-bc8c-36e26d54e8cc"
        },
        "item": {
          "id": "e08c207d-ff9b-48ed-9fbe-4cf4439c344c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "52c716d7-959d-490e-9973-fd406fefa99e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "e08c207d-ff9b-48ed-9fbe-4cf4439c344c",
        "cursor": {
          "ref": "ca0d951f-3ec2-47f8-b440-b6557100187a",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d874f33e-e0d0-4af0-bc8c-36e26d54e8cc"
        },
        "item": {
          "id": "e08c207d-ff9b-48ed-9fbe-4cf4439c344c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "52c716d7-959d-490e-9973-fd406fefa99e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "37a3c204-1d44-4c69-979a-fc0467efe4a5",
        "cursor": {
          "ref": "cdd60f35-41de-4b4d-9eb4-1b318eff0968",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0b0d50b3-0068-497a-aa68-1dfa852f37c8"
        },
        "item": {
          "id": "37a3c204-1d44-4c69-979a-fc0467efe4a5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "85961cd2-4606-40dd-9008-986644d2d697",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "37a3c204-1d44-4c69-979a-fc0467efe4a5",
        "cursor": {
          "ref": "cdd60f35-41de-4b4d-9eb4-1b318eff0968",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0b0d50b3-0068-497a-aa68-1dfa852f37c8"
        },
        "item": {
          "id": "37a3c204-1d44-4c69-979a-fc0467efe4a5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "85961cd2-4606-40dd-9008-986644d2d697",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "4588b6d8-d488-44fc-ba47-61487434a601",
        "cursor": {
          "ref": "f9e62e09-fef8-4705-994f-51ec8ce5a12c",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a864fd94-50a2-48df-b488-22946ff736e4"
        },
        "item": {
          "id": "4588b6d8-d488-44fc-ba47-61487434a601",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9fe8e795-522e-4d7d-afcf-4cb62b1b632e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "4588b6d8-d488-44fc-ba47-61487434a601",
        "cursor": {
          "ref": "f9e62e09-fef8-4705-994f-51ec8ce5a12c",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a864fd94-50a2-48df-b488-22946ff736e4"
        },
        "item": {
          "id": "4588b6d8-d488-44fc-ba47-61487434a601",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9fe8e795-522e-4d7d-afcf-4cb62b1b632e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "390b00e2-95ce-465e-9dda-6141e335c18f",
        "cursor": {
          "ref": "4b43e795-14f8-469d-8021-f3ffb1171b5d",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "05185b9c-a10d-4ee8-bc19-2f935ce7080f"
        },
        "item": {
          "id": "390b00e2-95ce-465e-9dda-6141e335c18f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "785dfeb0-b162-49bf-821f-b2ea94fe6cc4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "390b00e2-95ce-465e-9dda-6141e335c18f",
        "cursor": {
          "ref": "4b43e795-14f8-469d-8021-f3ffb1171b5d",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "05185b9c-a10d-4ee8-bc19-2f935ce7080f"
        },
        "item": {
          "id": "390b00e2-95ce-465e-9dda-6141e335c18f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "785dfeb0-b162-49bf-821f-b2ea94fe6cc4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "38a3b8e0-44cb-416a-8378-40eded115457",
        "cursor": {
          "ref": "1fa1bdcd-cf22-4c22-a290-2961eb2eb4e0",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3c289dc8-6721-4eaf-9764-5b831dd92060"
        },
        "item": {
          "id": "38a3b8e0-44cb-416a-8378-40eded115457",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a46a32e5-1c59-4b96-93cf-1d38ce1900e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "38a3b8e0-44cb-416a-8378-40eded115457",
        "cursor": {
          "ref": "1fa1bdcd-cf22-4c22-a290-2961eb2eb4e0",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3c289dc8-6721-4eaf-9764-5b831dd92060"
        },
        "item": {
          "id": "38a3b8e0-44cb-416a-8378-40eded115457",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a46a32e5-1c59-4b96-93cf-1d38ce1900e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d69a4673-934d-4c1b-96cd-1c762bd419e9",
        "cursor": {
          "ref": "4d525136-a32d-4203-b2d0-c57fc3cc17d7",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "94c15126-4226-4fa0-b5d5-204751bf90b7"
        },
        "item": {
          "id": "d69a4673-934d-4c1b-96cd-1c762bd419e9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9e96eb7e-bc1f-4a69-a792-65a9102933fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d69a4673-934d-4c1b-96cd-1c762bd419e9",
        "cursor": {
          "ref": "4d525136-a32d-4203-b2d0-c57fc3cc17d7",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "94c15126-4226-4fa0-b5d5-204751bf90b7"
        },
        "item": {
          "id": "d69a4673-934d-4c1b-96cd-1c762bd419e9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9e96eb7e-bc1f-4a69-a792-65a9102933fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "fe5f5eda-ef55-4e20-8e61-e6a5d6ad5b7e",
        "cursor": {
          "ref": "a19a3361-a17c-403b-8ddc-c2b3c498fb2b",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "16ce1998-912c-4b71-9a41-50edf3364b72"
        },
        "item": {
          "id": "fe5f5eda-ef55-4e20-8e61-e6a5d6ad5b7e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4958252d-7e17-4873-9fa1-25e829dad3d6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "fe5f5eda-ef55-4e20-8e61-e6a5d6ad5b7e",
        "cursor": {
          "ref": "a19a3361-a17c-403b-8ddc-c2b3c498fb2b",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "16ce1998-912c-4b71-9a41-50edf3364b72"
        },
        "item": {
          "id": "fe5f5eda-ef55-4e20-8e61-e6a5d6ad5b7e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4958252d-7e17-4873-9fa1-25e829dad3d6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "c80c604f-f113-47e3-b732-4375342ffcbd",
        "cursor": {
          "ref": "0c7460fa-ad04-4b18-800e-81d2a2d141ad",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9a79fad6-2f86-46c5-bf7a-6e88eb43355d"
        },
        "item": {
          "id": "c80c604f-f113-47e3-b732-4375342ffcbd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bdb21524-a17f-4ddf-ac96-241920613e18",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c80c604f-f113-47e3-b732-4375342ffcbd",
        "cursor": {
          "ref": "0c7460fa-ad04-4b18-800e-81d2a2d141ad",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9a79fad6-2f86-46c5-bf7a-6e88eb43355d"
        },
        "item": {
          "id": "c80c604f-f113-47e3-b732-4375342ffcbd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bdb21524-a17f-4ddf-ac96-241920613e18",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "50a0a5ce-5011-4ffc-8497-d708ea9e6d77",
        "cursor": {
          "ref": "6af7100d-49ee-4dac-a781-7ae04c4a7f06",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1726a95d-525c-4aa7-8d14-74bbb0e3dd05"
        },
        "item": {
          "id": "50a0a5ce-5011-4ffc-8497-d708ea9e6d77",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cbded873-dee4-43c2-881e-0acec2167426",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "50a0a5ce-5011-4ffc-8497-d708ea9e6d77",
        "cursor": {
          "ref": "6af7100d-49ee-4dac-a781-7ae04c4a7f06",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1726a95d-525c-4aa7-8d14-74bbb0e3dd05"
        },
        "item": {
          "id": "50a0a5ce-5011-4ffc-8497-d708ea9e6d77",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cbded873-dee4-43c2-881e-0acec2167426",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "978eac3e-3521-4756-a99a-95de0fecfe83",
        "cursor": {
          "ref": "54f8e679-0544-443c-8e94-a878022d0ac7",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8ab01bd8-e625-4ad4-9d33-a171b9590932"
        },
        "item": {
          "id": "978eac3e-3521-4756-a99a-95de0fecfe83",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a87dac7c-0ead-4820-a5bb-7b318c42aac7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "978eac3e-3521-4756-a99a-95de0fecfe83",
        "cursor": {
          "ref": "54f8e679-0544-443c-8e94-a878022d0ac7",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8ab01bd8-e625-4ad4-9d33-a171b9590932"
        },
        "item": {
          "id": "978eac3e-3521-4756-a99a-95de0fecfe83",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a87dac7c-0ead-4820-a5bb-7b318c42aac7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "acaa33d0-250b-484f-b0f5-f9894137b788",
        "cursor": {
          "ref": "ca8d58d3-2254-4fdf-aca0-621ae844015a",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2ab5f6fa-c981-43b4-bd0e-a298964429c4"
        },
        "item": {
          "id": "acaa33d0-250b-484f-b0f5-f9894137b788",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3ee440aa-ddff-41fd-951f-7d7349bc6565",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "acaa33d0-250b-484f-b0f5-f9894137b788",
        "cursor": {
          "ref": "ca8d58d3-2254-4fdf-aca0-621ae844015a",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2ab5f6fa-c981-43b4-bd0e-a298964429c4"
        },
        "item": {
          "id": "acaa33d0-250b-484f-b0f5-f9894137b788",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3ee440aa-ddff-41fd-951f-7d7349bc6565",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "2715f997-2857-4bc0-afa8-673f935d5625",
        "cursor": {
          "ref": "5108a1c2-c40a-447f-8326-f6c3a88596b7",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "463550d3-30d3-4c1f-8e53-87f6af13f4b6"
        },
        "item": {
          "id": "2715f997-2857-4bc0-afa8-673f935d5625",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3dc03172-bce4-432d-82cd-93db1120cd13",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "2715f997-2857-4bc0-afa8-673f935d5625",
        "cursor": {
          "ref": "5108a1c2-c40a-447f-8326-f6c3a88596b7",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "463550d3-30d3-4c1f-8e53-87f6af13f4b6"
        },
        "item": {
          "id": "2715f997-2857-4bc0-afa8-673f935d5625",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3dc03172-bce4-432d-82cd-93db1120cd13",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9cd9bc98-080f-440b-8c00-b6c8e9000864",
        "cursor": {
          "ref": "8ee3a406-ffda-4144-a8e6-685179e211a4",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2a81d41d-1ff2-414f-b63d-92f1900f2c85"
        },
        "item": {
          "id": "9cd9bc98-080f-440b-8c00-b6c8e9000864",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b3aea40a-3443-4c18-8808-4dc5ce39a077",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "9cd9bc98-080f-440b-8c00-b6c8e9000864",
        "cursor": {
          "ref": "8ee3a406-ffda-4144-a8e6-685179e211a4",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2a81d41d-1ff2-414f-b63d-92f1900f2c85"
        },
        "item": {
          "id": "9cd9bc98-080f-440b-8c00-b6c8e9000864",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b3aea40a-3443-4c18-8808-4dc5ce39a077",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "cc71e32c-ed5b-4715-bed6-e0b0aa54584b",
        "cursor": {
          "ref": "c823af33-9627-4636-99de-f9726eeb44cb",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e2fc5e59-03fa-4cb5-8b07-1cd07e157758"
        },
        "item": {
          "id": "cc71e32c-ed5b-4715-bed6-e0b0aa54584b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8526ade9-92c0-4c2d-816f-86c130b8e823",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "cc71e32c-ed5b-4715-bed6-e0b0aa54584b",
        "cursor": {
          "ref": "c823af33-9627-4636-99de-f9726eeb44cb",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e2fc5e59-03fa-4cb5-8b07-1cd07e157758"
        },
        "item": {
          "id": "cc71e32c-ed5b-4715-bed6-e0b0aa54584b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8526ade9-92c0-4c2d-816f-86c130b8e823",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "32ae18fb-9ccb-47ac-a6f0-e01568926fd5",
        "cursor": {
          "ref": "8147667c-31c0-4eae-bcdc-bd47fdd04046",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bd9ebd35-986e-4999-a66f-e5d74f6405e2"
        },
        "item": {
          "id": "32ae18fb-9ccb-47ac-a6f0-e01568926fd5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fc23eb20-8abb-4026-be3a-4b57f67a9cf8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "32ae18fb-9ccb-47ac-a6f0-e01568926fd5",
        "cursor": {
          "ref": "8147667c-31c0-4eae-bcdc-bd47fdd04046",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bd9ebd35-986e-4999-a66f-e5d74f6405e2"
        },
        "item": {
          "id": "32ae18fb-9ccb-47ac-a6f0-e01568926fd5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fc23eb20-8abb-4026-be3a-4b57f67a9cf8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "6c10e5ca-bce9-4e31-86cc-6bae72289fdf",
        "cursor": {
          "ref": "368674ac-76ee-451a-bcad-d4905cbbd68d",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "54ce9ddb-7570-4405-b2e1-904a3b5438bf"
        },
        "item": {
          "id": "6c10e5ca-bce9-4e31-86cc-6bae72289fdf",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "16002aa5-d942-4182-bcbd-c05eb89b5ff3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "6c10e5ca-bce9-4e31-86cc-6bae72289fdf",
        "cursor": {
          "ref": "368674ac-76ee-451a-bcad-d4905cbbd68d",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "54ce9ddb-7570-4405-b2e1-904a3b5438bf"
        },
        "item": {
          "id": "6c10e5ca-bce9-4e31-86cc-6bae72289fdf",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "16002aa5-d942-4182-bcbd-c05eb89b5ff3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "194461d3-8356-47b3-8acd-505cc97b1ef3",
        "cursor": {
          "ref": "89eefd5e-405a-4551-bb81-17dc5de1ff50",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c941f87c-7130-4d43-b4bf-ffa67fab066f"
        },
        "item": {
          "id": "194461d3-8356-47b3-8acd-505cc97b1ef3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "102373b0-899f-40b2-95da-896796c94f9d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "194461d3-8356-47b3-8acd-505cc97b1ef3",
        "cursor": {
          "ref": "89eefd5e-405a-4551-bb81-17dc5de1ff50",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c941f87c-7130-4d43-b4bf-ffa67fab066f"
        },
        "item": {
          "id": "194461d3-8356-47b3-8acd-505cc97b1ef3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "102373b0-899f-40b2-95da-896796c94f9d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "21e97dc9-d285-4838-a174-4294c0126da8",
        "cursor": {
          "ref": "df8ffc95-610a-4294-8a25-99f3592337fa",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5f7b0fbd-4d5f-4888-a9c6-61177e9b1850"
        },
        "item": {
          "id": "21e97dc9-d285-4838-a174-4294c0126da8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e9c66bd5-58d8-41f4-bb63-132cf11a8b00",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "21e97dc9-d285-4838-a174-4294c0126da8",
        "cursor": {
          "ref": "df8ffc95-610a-4294-8a25-99f3592337fa",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5f7b0fbd-4d5f-4888-a9c6-61177e9b1850"
        },
        "item": {
          "id": "21e97dc9-d285-4838-a174-4294c0126da8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e9c66bd5-58d8-41f4-bb63-132cf11a8b00",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "7ea6722c-620a-4d26-afbf-a72226ae9e2a",
        "cursor": {
          "ref": "097bec92-eb98-4f1a-a3ff-6f032b358e36",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "22a68402-c0d8-410b-bb20-46094a67809d"
        },
        "item": {
          "id": "7ea6722c-620a-4d26-afbf-a72226ae9e2a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d4945732-563e-40ff-ac0b-4135045e0475",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "7ea6722c-620a-4d26-afbf-a72226ae9e2a",
        "cursor": {
          "ref": "097bec92-eb98-4f1a-a3ff-6f032b358e36",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "22a68402-c0d8-410b-bb20-46094a67809d"
        },
        "item": {
          "id": "7ea6722c-620a-4d26-afbf-a72226ae9e2a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d4945732-563e-40ff-ac0b-4135045e0475",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "89893c34-3f98-4566-a249-5d7dcee9b33c",
        "cursor": {
          "ref": "7589be01-ad04-464d-9001-d012ab43c5ef",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6953d36f-2683-4d3a-a280-caabf8550949"
        },
        "item": {
          "id": "89893c34-3f98-4566-a249-5d7dcee9b33c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ea936e96-b62d-4cd8-b4f5-05436cf9fabc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "89893c34-3f98-4566-a249-5d7dcee9b33c",
        "cursor": {
          "ref": "7589be01-ad04-464d-9001-d012ab43c5ef",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6953d36f-2683-4d3a-a280-caabf8550949"
        },
        "item": {
          "id": "89893c34-3f98-4566-a249-5d7dcee9b33c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ea936e96-b62d-4cd8-b4f5-05436cf9fabc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "217dfa69-8b90-4491-99c0-65a2d8709872",
        "cursor": {
          "ref": "1c3e55d2-7437-4871-a7ae-da1400dabc7f",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7de850c1-7f13-40d0-8245-d1e3fe676200"
        },
        "item": {
          "id": "217dfa69-8b90-4491-99c0-65a2d8709872",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b83df40d-b262-48a6-ae25-21108a52a643",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "217dfa69-8b90-4491-99c0-65a2d8709872",
        "cursor": {
          "ref": "1c3e55d2-7437-4871-a7ae-da1400dabc7f",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7de850c1-7f13-40d0-8245-d1e3fe676200"
        },
        "item": {
          "id": "217dfa69-8b90-4491-99c0-65a2d8709872",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b83df40d-b262-48a6-ae25-21108a52a643",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a8e8334a-521c-4c4a-9e6d-9ab28c1bb67b",
        "cursor": {
          "ref": "96222ca6-d633-4548-9ff4-62006551ddc5",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9df6844e-0931-4157-ab28-e0cbb1dd7bc9"
        },
        "item": {
          "id": "a8e8334a-521c-4c4a-9e6d-9ab28c1bb67b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3f4b30ef-6787-411f-816c-ea68bf966ca9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "a8e8334a-521c-4c4a-9e6d-9ab28c1bb67b",
        "cursor": {
          "ref": "96222ca6-d633-4548-9ff4-62006551ddc5",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9df6844e-0931-4157-ab28-e0cbb1dd7bc9"
        },
        "item": {
          "id": "a8e8334a-521c-4c4a-9e6d-9ab28c1bb67b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3f4b30ef-6787-411f-816c-ea68bf966ca9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "54262151-57cb-47fc-afc4-f2e5efbb218f",
        "cursor": {
          "ref": "0cae8fc3-f8a2-4ae1-93cd-a5ff7979302c",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "411ef67a-feae-4246-8b2d-a7929f12fd38"
        },
        "item": {
          "id": "54262151-57cb-47fc-afc4-f2e5efbb218f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "07f83a98-b097-4926-a0be-babad39e814d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "54262151-57cb-47fc-afc4-f2e5efbb218f",
        "cursor": {
          "ref": "0cae8fc3-f8a2-4ae1-93cd-a5ff7979302c",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "411ef67a-feae-4246-8b2d-a7929f12fd38"
        },
        "item": {
          "id": "54262151-57cb-47fc-afc4-f2e5efbb218f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "07f83a98-b097-4926-a0be-babad39e814d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "99f7f886-ea62-43f5-9191-a4c017dac218",
        "cursor": {
          "ref": "7c2caaf4-a28d-42e3-9b81-394dbb18a1ed",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "78147f9d-1c2c-41d6-ba12-87b611628803"
        },
        "item": {
          "id": "99f7f886-ea62-43f5-9191-a4c017dac218",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ed40ff18-50fb-4e55-9546-458b73210985",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "99f7f886-ea62-43f5-9191-a4c017dac218",
        "cursor": {
          "ref": "7c2caaf4-a28d-42e3-9b81-394dbb18a1ed",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "78147f9d-1c2c-41d6-ba12-87b611628803"
        },
        "item": {
          "id": "99f7f886-ea62-43f5-9191-a4c017dac218",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ed40ff18-50fb-4e55-9546-458b73210985",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "22e137b7-8b1c-4cd1-b291-51d728c1e9de",
        "cursor": {
          "ref": "76c6011c-dbf1-4181-9a0a-70763755bc07",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "16afbeae-c60b-49f8-8bdf-02852308b527"
        },
        "item": {
          "id": "22e137b7-8b1c-4cd1-b291-51d728c1e9de",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1bf65bd0-2991-4055-b8f9-c9756e7bd850",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "22e137b7-8b1c-4cd1-b291-51d728c1e9de",
        "cursor": {
          "ref": "76c6011c-dbf1-4181-9a0a-70763755bc07",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "16afbeae-c60b-49f8-8bdf-02852308b527"
        },
        "item": {
          "id": "22e137b7-8b1c-4cd1-b291-51d728c1e9de",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1bf65bd0-2991-4055-b8f9-c9756e7bd850",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "c3ea17c7-12e0-4f7f-8f7b-fd1260c7dd01",
        "cursor": {
          "ref": "702f637b-da63-46ce-9ee1-ede9b66dd06b",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d0395685-9461-4740-a8cd-c4f086f2d246"
        },
        "item": {
          "id": "c3ea17c7-12e0-4f7f-8f7b-fd1260c7dd01",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4a077e46-ea05-4c41-8e6e-c4bff0cc09de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "c3ea17c7-12e0-4f7f-8f7b-fd1260c7dd01",
        "cursor": {
          "ref": "702f637b-da63-46ce-9ee1-ede9b66dd06b",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d0395685-9461-4740-a8cd-c4f086f2d246"
        },
        "item": {
          "id": "c3ea17c7-12e0-4f7f-8f7b-fd1260c7dd01",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4a077e46-ea05-4c41-8e6e-c4bff0cc09de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "a6fd7eee-b746-4d26-a3ec-5175a8b1f0fe",
        "cursor": {
          "ref": "a0fbe360-ecd2-4aa4-849b-991eef693ca4",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3a3c2f77-96ed-4398-a9b3-05c25565b0a4"
        },
        "item": {
          "id": "a6fd7eee-b746-4d26-a3ec-5175a8b1f0fe",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bf3885d1-f456-473d-ba0e-e66e22799f19",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "a6fd7eee-b746-4d26-a3ec-5175a8b1f0fe",
        "cursor": {
          "ref": "a0fbe360-ecd2-4aa4-849b-991eef693ca4",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3a3c2f77-96ed-4398-a9b3-05c25565b0a4"
        },
        "item": {
          "id": "a6fd7eee-b746-4d26-a3ec-5175a8b1f0fe",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bf3885d1-f456-473d-ba0e-e66e22799f19",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "f62b3bd1-28cb-41a2-8457-ce099e0c073f",
        "cursor": {
          "ref": "f8855ea9-7b03-4557-904a-ebe5ee7492a1",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d19abe67-5d38-4b0a-815d-46e7e746e96d"
        },
        "item": {
          "id": "f62b3bd1-28cb-41a2-8457-ce099e0c073f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "87ea16f0-20ee-4586-ab9a-27c188ca4dc7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "f62b3bd1-28cb-41a2-8457-ce099e0c073f",
        "cursor": {
          "ref": "f8855ea9-7b03-4557-904a-ebe5ee7492a1",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d19abe67-5d38-4b0a-815d-46e7e746e96d"
        },
        "item": {
          "id": "f62b3bd1-28cb-41a2-8457-ce099e0c073f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "87ea16f0-20ee-4586-ab9a-27c188ca4dc7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "94eecf20-cc75-4a21-8cd8-50bc9b4144d7",
        "cursor": {
          "ref": "e811f70e-d77b-471b-97d6-854ac0c0ca20",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0d7bbb5f-ce3e-4000-96b2-734933beb658"
        },
        "item": {
          "id": "94eecf20-cc75-4a21-8cd8-50bc9b4144d7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1fe5c38a-edfa-4805-8508-3688f23b0823",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "94eecf20-cc75-4a21-8cd8-50bc9b4144d7",
        "cursor": {
          "ref": "e811f70e-d77b-471b-97d6-854ac0c0ca20",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0d7bbb5f-ce3e-4000-96b2-734933beb658"
        },
        "item": {
          "id": "94eecf20-cc75-4a21-8cd8-50bc9b4144d7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1fe5c38a-edfa-4805-8508-3688f23b0823",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "667e7581-fa0d-43ec-b955-602a0319ae6b",
        "cursor": {
          "ref": "dae2e95b-dbc4-408e-b01a-a5af25a1cae8",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2e329407-8399-44c5-aa76-2678d3b05764"
        },
        "item": {
          "id": "667e7581-fa0d-43ec-b955-602a0319ae6b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f4c381c2-23ff-466b-a4ab-3dd542402f74",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "667e7581-fa0d-43ec-b955-602a0319ae6b",
        "cursor": {
          "ref": "dae2e95b-dbc4-408e-b01a-a5af25a1cae8",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2e329407-8399-44c5-aa76-2678d3b05764"
        },
        "item": {
          "id": "667e7581-fa0d-43ec-b955-602a0319ae6b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f4c381c2-23ff-466b-a4ab-3dd542402f74",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "4dde274a-eb85-4d8a-8967-cef4455aa925",
        "cursor": {
          "ref": "77c610cf-7c84-4904-80b5-40ddcabd9eeb",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "180d2d08-1c8b-456d-bfa3-8043c2c09e9e"
        },
        "item": {
          "id": "4dde274a-eb85-4d8a-8967-cef4455aa925",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "882a9feb-c555-4382-93aa-ce5fc6a77b7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "4dde274a-eb85-4d8a-8967-cef4455aa925",
        "cursor": {
          "ref": "77c610cf-7c84-4904-80b5-40ddcabd9eeb",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "180d2d08-1c8b-456d-bfa3-8043c2c09e9e"
        },
        "item": {
          "id": "4dde274a-eb85-4d8a-8967-cef4455aa925",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "882a9feb-c555-4382-93aa-ce5fc6a77b7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "488a3da6-60a5-4f16-80eb-106d98ef1b2f",
        "cursor": {
          "ref": "2f985fee-d3d0-45ab-a550-4ad63f73df22",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2da20252-3369-4615-800e-7baa85b08186"
        },
        "item": {
          "id": "488a3da6-60a5-4f16-80eb-106d98ef1b2f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0f1df3b8-3557-4ca8-9202-7d43fb29d5fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "488a3da6-60a5-4f16-80eb-106d98ef1b2f",
        "cursor": {
          "ref": "2f985fee-d3d0-45ab-a550-4ad63f73df22",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2da20252-3369-4615-800e-7baa85b08186"
        },
        "item": {
          "id": "488a3da6-60a5-4f16-80eb-106d98ef1b2f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0f1df3b8-3557-4ca8-9202-7d43fb29d5fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "b2f7f680-bc87-476b-a5cf-aa136a51807b",
        "cursor": {
          "ref": "5caa4b74-041e-4822-b65f-8df78b5f4d8b",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "51f297a8-7335-4f09-8667-8ed426008dd8"
        },
        "item": {
          "id": "b2f7f680-bc87-476b-a5cf-aa136a51807b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a03d9803-26d0-4c8e-8d3b-29c98d11843e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "b2f7f680-bc87-476b-a5cf-aa136a51807b",
        "cursor": {
          "ref": "5caa4b74-041e-4822-b65f-8df78b5f4d8b",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "51f297a8-7335-4f09-8667-8ed426008dd8"
        },
        "item": {
          "id": "b2f7f680-bc87-476b-a5cf-aa136a51807b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a03d9803-26d0-4c8e-8d3b-29c98d11843e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "927e6375-2404-4baf-bc2a-d92eee58de57",
        "cursor": {
          "ref": "44172aee-22f1-436a-be0e-bc9b6d16eda2",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1c9056af-e03b-44fa-96c6-ccbacedcef28"
        },
        "item": {
          "id": "927e6375-2404-4baf-bc2a-d92eee58de57",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bf6a4b6b-1ac6-4153-9707-910912f5b24d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "927e6375-2404-4baf-bc2a-d92eee58de57",
        "cursor": {
          "ref": "44172aee-22f1-436a-be0e-bc9b6d16eda2",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1c9056af-e03b-44fa-96c6-ccbacedcef28"
        },
        "item": {
          "id": "927e6375-2404-4baf-bc2a-d92eee58de57",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bf6a4b6b-1ac6-4153-9707-910912f5b24d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "b1fa32f3-14e5-493b-b1bf-d1252c28193d",
        "cursor": {
          "ref": "90ebd3d8-2dfe-4adb-8bf0-b401bb0a372f",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c8468cc7-7454-444c-b240-bcebd1aff1b2"
        },
        "item": {
          "id": "b1fa32f3-14e5-493b-b1bf-d1252c28193d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bb75f319-62db-4e64-a061-b7f6db28457c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "b1fa32f3-14e5-493b-b1bf-d1252c28193d",
        "cursor": {
          "ref": "90ebd3d8-2dfe-4adb-8bf0-b401bb0a372f",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c8468cc7-7454-444c-b240-bcebd1aff1b2"
        },
        "item": {
          "id": "b1fa32f3-14e5-493b-b1bf-d1252c28193d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bb75f319-62db-4e64-a061-b7f6db28457c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "284f57db-6bf0-40b3-978f-d0dc07508263",
        "cursor": {
          "ref": "dfa6c0d5-cd04-4055-b0f7-a9d88026187a",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d912a3c9-6cc5-4e9a-b4ce-a2aba0f0a426"
        },
        "item": {
          "id": "284f57db-6bf0-40b3-978f-d0dc07508263",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4501af4f-6c18-4642-ae9e-a3d5be4ea95e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "284f57db-6bf0-40b3-978f-d0dc07508263",
        "cursor": {
          "ref": "dfa6c0d5-cd04-4055-b0f7-a9d88026187a",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d912a3c9-6cc5-4e9a-b4ce-a2aba0f0a426"
        },
        "item": {
          "id": "284f57db-6bf0-40b3-978f-d0dc07508263",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4501af4f-6c18-4642-ae9e-a3d5be4ea95e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "a35b0d24-e4e2-4a90-8227-410d1b3c35df",
        "cursor": {
          "ref": "32c0587b-9b42-4a4b-954b-774fcc0acd07",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "55e8ada0-c889-4789-a070-8e5e413b7a2c"
        },
        "item": {
          "id": "a35b0d24-e4e2-4a90-8227-410d1b3c35df",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c74035af-1338-499d-95a3-e1948de1bd93",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "a35b0d24-e4e2-4a90-8227-410d1b3c35df",
        "cursor": {
          "ref": "32c0587b-9b42-4a4b-954b-774fcc0acd07",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "55e8ada0-c889-4789-a070-8e5e413b7a2c"
        },
        "item": {
          "id": "a35b0d24-e4e2-4a90-8227-410d1b3c35df",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c74035af-1338-499d-95a3-e1948de1bd93",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "c2d6b7d8-2e1b-410e-b13b-ac5568c8c917",
        "cursor": {
          "ref": "51e98a5f-e462-4da8-89d8-97e916b0b50f",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "127a965f-eb1a-4051-9438-a26ef8c5ca53"
        },
        "item": {
          "id": "c2d6b7d8-2e1b-410e-b13b-ac5568c8c917",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e79f0768-cf5d-4666-8d25-212718aa39ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "c2d6b7d8-2e1b-410e-b13b-ac5568c8c917",
        "cursor": {
          "ref": "51e98a5f-e462-4da8-89d8-97e916b0b50f",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "127a965f-eb1a-4051-9438-a26ef8c5ca53"
        },
        "item": {
          "id": "c2d6b7d8-2e1b-410e-b13b-ac5568c8c917",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e79f0768-cf5d-4666-8d25-212718aa39ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "00641d18-7fae-4e2c-902c-6f7cf6900c61",
        "cursor": {
          "ref": "cc2042e1-88ba-4deb-b6a6-815e2507993b",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "65c1789c-0e16-480f-a8ce-f8b87864a715"
        },
        "item": {
          "id": "00641d18-7fae-4e2c-902c-6f7cf6900c61",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4c60f813-be0a-43a8-9e8c-9f1e9a47edbb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "00641d18-7fae-4e2c-902c-6f7cf6900c61",
        "cursor": {
          "ref": "cc2042e1-88ba-4deb-b6a6-815e2507993b",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "65c1789c-0e16-480f-a8ce-f8b87864a715"
        },
        "item": {
          "id": "00641d18-7fae-4e2c-902c-6f7cf6900c61",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4c60f813-be0a-43a8-9e8c-9f1e9a47edbb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "ac3f2954-c827-451b-ac38-22fc19180c4d",
        "cursor": {
          "ref": "04ea998c-cda7-46a2-a914-04b37d2bd1bf",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cab407a8-b264-4ec6-8835-66635f77e8a7"
        },
        "item": {
          "id": "ac3f2954-c827-451b-ac38-22fc19180c4d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "786ad1e5-5580-4f0f-bdb2-445521ce3677",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "ac3f2954-c827-451b-ac38-22fc19180c4d",
        "cursor": {
          "ref": "04ea998c-cda7-46a2-a914-04b37d2bd1bf",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cab407a8-b264-4ec6-8835-66635f77e8a7"
        },
        "item": {
          "id": "ac3f2954-c827-451b-ac38-22fc19180c4d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "786ad1e5-5580-4f0f-bdb2-445521ce3677",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "76716b0d-372d-4ab4-83bd-f9ca9bb883aa",
        "cursor": {
          "ref": "2e7049fd-cf82-4620-8b2f-3c8a8006dded",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "192edab6-9c3b-4b5f-b1e4-4676b80dca75"
        },
        "item": {
          "id": "76716b0d-372d-4ab4-83bd-f9ca9bb883aa",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3309c374-cdd2-4141-b5f2-7e3a4ee9b5ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "76716b0d-372d-4ab4-83bd-f9ca9bb883aa",
        "cursor": {
          "ref": "2e7049fd-cf82-4620-8b2f-3c8a8006dded",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "192edab6-9c3b-4b5f-b1e4-4676b80dca75"
        },
        "item": {
          "id": "76716b0d-372d-4ab4-83bd-f9ca9bb883aa",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3309c374-cdd2-4141-b5f2-7e3a4ee9b5ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "bbb05f1e-a370-4317-8828-322c792da6c6",
        "cursor": {
          "ref": "63ea71c1-1f56-474d-a40c-177f15c9eef1",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c6730d14-62a6-4844-b311-4060d5b1bf45"
        },
        "item": {
          "id": "bbb05f1e-a370-4317-8828-322c792da6c6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f61ba3c7-39b4-4907-b777-cbc90cc250f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "bbb05f1e-a370-4317-8828-322c792da6c6",
        "cursor": {
          "ref": "63ea71c1-1f56-474d-a40c-177f15c9eef1",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c6730d14-62a6-4844-b311-4060d5b1bf45"
        },
        "item": {
          "id": "bbb05f1e-a370-4317-8828-322c792da6c6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f61ba3c7-39b4-4907-b777-cbc90cc250f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "a9f3d3b5-001d-4fde-8217-cd3b75264405",
        "cursor": {
          "ref": "e7cfb890-2e74-4603-96aa-03bb342928f1",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c3105143-4557-4c6f-8f81-4728e9ae6b9e"
        },
        "item": {
          "id": "a9f3d3b5-001d-4fde-8217-cd3b75264405",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fab60815-af9c-4f52-8b23-6a4289dce9b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "a9f3d3b5-001d-4fde-8217-cd3b75264405",
        "cursor": {
          "ref": "e7cfb890-2e74-4603-96aa-03bb342928f1",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c3105143-4557-4c6f-8f81-4728e9ae6b9e"
        },
        "item": {
          "id": "a9f3d3b5-001d-4fde-8217-cd3b75264405",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fab60815-af9c-4f52-8b23-6a4289dce9b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "68e8ddaf-0535-4fe1-9f7c-e520bf4c91fe",
        "cursor": {
          "ref": "a18ed1ba-899b-45ca-8ff9-0fb1c05e2a27",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "31960d98-96ae-4c0f-8fd8-1d5f01a1f3ac"
        },
        "item": {
          "id": "68e8ddaf-0535-4fe1-9f7c-e520bf4c91fe",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "488be909-db54-44e6-9f00-60ab62c6c018",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "68e8ddaf-0535-4fe1-9f7c-e520bf4c91fe",
        "cursor": {
          "ref": "a18ed1ba-899b-45ca-8ff9-0fb1c05e2a27",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "31960d98-96ae-4c0f-8fd8-1d5f01a1f3ac"
        },
        "item": {
          "id": "68e8ddaf-0535-4fe1-9f7c-e520bf4c91fe",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "488be909-db54-44e6-9f00-60ab62c6c018",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "4add380d-19ed-494c-a186-7406b951284e",
        "cursor": {
          "ref": "5b87e977-3fa6-48a4-9e94-0b4a591e7433",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "aaae8024-36a6-4b65-9524-8b5bf6027964"
        },
        "item": {
          "id": "4add380d-19ed-494c-a186-7406b951284e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d2da8552-9f8b-440e-b44a-bffa6f7ad83d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "4add380d-19ed-494c-a186-7406b951284e",
        "cursor": {
          "ref": "5b87e977-3fa6-48a4-9e94-0b4a591e7433",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "aaae8024-36a6-4b65-9524-8b5bf6027964"
        },
        "item": {
          "id": "4add380d-19ed-494c-a186-7406b951284e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d2da8552-9f8b-440e-b44a-bffa6f7ad83d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "0a511c57-e6ef-4736-85cc-cb075dfaa61a",
        "cursor": {
          "ref": "b510cc5a-3e2b-4f67-bdcc-5c0164883c52",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f018624b-4052-4710-98a6-b509d51270c8"
        },
        "item": {
          "id": "0a511c57-e6ef-4736-85cc-cb075dfaa61a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0b5bebc5-edc4-4efb-9365-9cc86b017853",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "0a511c57-e6ef-4736-85cc-cb075dfaa61a",
        "cursor": {
          "ref": "b510cc5a-3e2b-4f67-bdcc-5c0164883c52",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f018624b-4052-4710-98a6-b509d51270c8"
        },
        "item": {
          "id": "0a511c57-e6ef-4736-85cc-cb075dfaa61a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0b5bebc5-edc4-4efb-9365-9cc86b017853",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "9c4460b2-20fa-4002-9e4b-fb7a9b51da0f",
        "cursor": {
          "ref": "9a0c59f2-201c-46ad-b32d-5724db9e90c9",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d7ba979a-f007-4837-b415-32e0070f36df"
        },
        "item": {
          "id": "9c4460b2-20fa-4002-9e4b-fb7a9b51da0f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "880b2865-ce87-44b5-b18a-78d0a271ce4e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "9c4460b2-20fa-4002-9e4b-fb7a9b51da0f",
        "cursor": {
          "ref": "9a0c59f2-201c-46ad-b32d-5724db9e90c9",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d7ba979a-f007-4837-b415-32e0070f36df"
        },
        "item": {
          "id": "9c4460b2-20fa-4002-9e4b-fb7a9b51da0f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "880b2865-ce87-44b5-b18a-78d0a271ce4e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "21def667-708f-4ece-8247-c6a88ff8116d",
        "cursor": {
          "ref": "26f3899a-bc8e-4741-9170-03ee76729ee1",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1c250551-84da-4cff-9ebd-26c7f3baabcb"
        },
        "item": {
          "id": "21def667-708f-4ece-8247-c6a88ff8116d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "20414bca-865e-4a49-ad1f-9f27b0ec6c51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "21def667-708f-4ece-8247-c6a88ff8116d",
        "cursor": {
          "ref": "26f3899a-bc8e-4741-9170-03ee76729ee1",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1c250551-84da-4cff-9ebd-26c7f3baabcb"
        },
        "item": {
          "id": "21def667-708f-4ece-8247-c6a88ff8116d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "20414bca-865e-4a49-ad1f-9f27b0ec6c51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "d3021910-003e-4924-a580-8c12ff55d862",
        "cursor": {
          "ref": "71a9ea26-ba77-4e60-9a43-0185650da6c8",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6f28981e-b5af-447d-bcca-9fb6d181d711"
        },
        "item": {
          "id": "d3021910-003e-4924-a580-8c12ff55d862",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7c99d1c4-690f-4d64-975b-9e8caa49a0d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "d3021910-003e-4924-a580-8c12ff55d862",
        "cursor": {
          "ref": "71a9ea26-ba77-4e60-9a43-0185650da6c8",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6f28981e-b5af-447d-bcca-9fb6d181d711"
        },
        "item": {
          "id": "d3021910-003e-4924-a580-8c12ff55d862",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7c99d1c4-690f-4d64-975b-9e8caa49a0d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "8237fdc5-c3da-407e-b235-87aa4a9e51d4",
        "cursor": {
          "ref": "31d56b44-4f7d-4e1a-b967-c4d6c8386fad",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7a1dfc6c-5256-4956-a1a5-d8114507c3fd"
        },
        "item": {
          "id": "8237fdc5-c3da-407e-b235-87aa4a9e51d4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b0efd133-cfed-4c82-a50e-82fd76e79111",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "8237fdc5-c3da-407e-b235-87aa4a9e51d4",
        "cursor": {
          "ref": "31d56b44-4f7d-4e1a-b967-c4d6c8386fad",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7a1dfc6c-5256-4956-a1a5-d8114507c3fd"
        },
        "item": {
          "id": "8237fdc5-c3da-407e-b235-87aa4a9e51d4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b0efd133-cfed-4c82-a50e-82fd76e79111",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "c5357ce5-5d84-4b6f-837d-0d5e131c2f85",
        "cursor": {
          "ref": "cfe01e77-ab05-4f3f-af47-84e6106c2dec",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "43ec231d-f09a-4894-a282-dedee8777652"
        },
        "item": {
          "id": "c5357ce5-5d84-4b6f-837d-0d5e131c2f85",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0c733199-45fe-4182-a8e8-ea1924dc57f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c5357ce5-5d84-4b6f-837d-0d5e131c2f85",
        "cursor": {
          "ref": "cfe01e77-ab05-4f3f-af47-84e6106c2dec",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "43ec231d-f09a-4894-a282-dedee8777652"
        },
        "item": {
          "id": "c5357ce5-5d84-4b6f-837d-0d5e131c2f85",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0c733199-45fe-4182-a8e8-ea1924dc57f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "ffcdbb7b-1258-45d8-8d97-6bf44ae9c2cf",
        "cursor": {
          "ref": "90e0d68c-cd0a-40a7-a75d-0299375520ac",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0fd03ff4-c573-4e1f-8989-3c021cdc880e"
        },
        "item": {
          "id": "ffcdbb7b-1258-45d8-8d97-6bf44ae9c2cf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "36e8d794-cd39-48df-b23e-555234386cbc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "ffcdbb7b-1258-45d8-8d97-6bf44ae9c2cf",
        "cursor": {
          "ref": "90e0d68c-cd0a-40a7-a75d-0299375520ac",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0fd03ff4-c573-4e1f-8989-3c021cdc880e"
        },
        "item": {
          "id": "ffcdbb7b-1258-45d8-8d97-6bf44ae9c2cf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "36e8d794-cd39-48df-b23e-555234386cbc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "9d58b863-35b6-4455-a42f-059bd413e89f",
        "cursor": {
          "ref": "29a61ef6-0640-48e1-90f6-78536cc9273c",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b5dacfb6-48b6-4f14-adac-3bffd57f659a"
        },
        "item": {
          "id": "9d58b863-35b6-4455-a42f-059bd413e89f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fd365cca-0dc1-4ebd-9205-58a2367f489e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "9d58b863-35b6-4455-a42f-059bd413e89f",
        "cursor": {
          "ref": "29a61ef6-0640-48e1-90f6-78536cc9273c",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b5dacfb6-48b6-4f14-adac-3bffd57f659a"
        },
        "item": {
          "id": "9d58b863-35b6-4455-a42f-059bd413e89f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fd365cca-0dc1-4ebd-9205-58a2367f489e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "72690654-7a0f-4982-8e17-133c1f7e47f5",
        "cursor": {
          "ref": "c98728a2-8e85-4b62-a8ac-d6e3c78ea563",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "566eb46e-c32e-4d44-9c37-70b6b125b306"
        },
        "item": {
          "id": "72690654-7a0f-4982-8e17-133c1f7e47f5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "73dc6f75-9b1f-4517-ac17-1b351620ab77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "72690654-7a0f-4982-8e17-133c1f7e47f5",
        "cursor": {
          "ref": "c98728a2-8e85-4b62-a8ac-d6e3c78ea563",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "566eb46e-c32e-4d44-9c37-70b6b125b306"
        },
        "item": {
          "id": "72690654-7a0f-4982-8e17-133c1f7e47f5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "73dc6f75-9b1f-4517-ac17-1b351620ab77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b752b3ed-922d-4e12-9dab-3b98f3d3b1d0",
        "cursor": {
          "ref": "c0722d71-fe33-43c4-84dd-a21637b81393",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "51519b87-3823-4ad0-90ec-61df0bed5657"
        },
        "item": {
          "id": "b752b3ed-922d-4e12-9dab-3b98f3d3b1d0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b7023d2c-9ba5-4902-9667-8fdba4579f21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "b752b3ed-922d-4e12-9dab-3b98f3d3b1d0",
        "cursor": {
          "ref": "c0722d71-fe33-43c4-84dd-a21637b81393",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "51519b87-3823-4ad0-90ec-61df0bed5657"
        },
        "item": {
          "id": "b752b3ed-922d-4e12-9dab-3b98f3d3b1d0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b7023d2c-9ba5-4902-9667-8fdba4579f21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "651f4d81-1eb7-4f39-87cd-be16a9bf2176",
        "cursor": {
          "ref": "dd60b02f-984c-4d11-84f0-00e9016a3806",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7ef9fdbe-14aa-4904-8f30-f19e43a7b6ae"
        },
        "item": {
          "id": "651f4d81-1eb7-4f39-87cd-be16a9bf2176",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "58322e3c-f4c5-4a3d-a0a0-fe0325033e11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "651f4d81-1eb7-4f39-87cd-be16a9bf2176",
        "cursor": {
          "ref": "dd60b02f-984c-4d11-84f0-00e9016a3806",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7ef9fdbe-14aa-4904-8f30-f19e43a7b6ae"
        },
        "item": {
          "id": "651f4d81-1eb7-4f39-87cd-be16a9bf2176",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "58322e3c-f4c5-4a3d-a0a0-fe0325033e11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "050c7a19-bab8-4c55-91a7-cc2ee508b373",
        "cursor": {
          "ref": "2fb29052-5892-4fa7-9d21-f6319dffa09b",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a166ad33-d914-414d-a3f2-d4acd8a533e9"
        },
        "item": {
          "id": "050c7a19-bab8-4c55-91a7-cc2ee508b373",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "192822f2-5518-4af6-9747-211cbd6d6d52",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "050c7a19-bab8-4c55-91a7-cc2ee508b373",
        "cursor": {
          "ref": "2fb29052-5892-4fa7-9d21-f6319dffa09b",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a166ad33-d914-414d-a3f2-d4acd8a533e9"
        },
        "item": {
          "id": "050c7a19-bab8-4c55-91a7-cc2ee508b373",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "192822f2-5518-4af6-9747-211cbd6d6d52",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "21d8fb78-45a0-45d7-a9a8-d9d2e4b6fd80",
        "cursor": {
          "ref": "fb560679-144f-46f7-b429-d2ce0cdb7f7b",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2d715776-bef5-49ba-93aa-509b9f0b7ca0"
        },
        "item": {
          "id": "21d8fb78-45a0-45d7-a9a8-d9d2e4b6fd80",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a3742a46-5268-4760-8421-f3015005c6d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "21d8fb78-45a0-45d7-a9a8-d9d2e4b6fd80",
        "cursor": {
          "ref": "fb560679-144f-46f7-b429-d2ce0cdb7f7b",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2d715776-bef5-49ba-93aa-509b9f0b7ca0"
        },
        "item": {
          "id": "21d8fb78-45a0-45d7-a9a8-d9d2e4b6fd80",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a3742a46-5268-4760-8421-f3015005c6d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "dd43c534-4717-490d-8a7d-708ab770a7fb",
        "cursor": {
          "ref": "cb355e03-40ca-443a-88a4-177cb4436fe3",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "48da7589-c6a1-482b-a4bf-006ca48ab388"
        },
        "item": {
          "id": "dd43c534-4717-490d-8a7d-708ab770a7fb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a911ec55-4db7-45e5-939e-683f2134bbd1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "dd43c534-4717-490d-8a7d-708ab770a7fb",
        "cursor": {
          "ref": "cb355e03-40ca-443a-88a4-177cb4436fe3",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "48da7589-c6a1-482b-a4bf-006ca48ab388"
        },
        "item": {
          "id": "dd43c534-4717-490d-8a7d-708ab770a7fb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a911ec55-4db7-45e5-939e-683f2134bbd1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "fcda4bfb-6343-4228-abb5-08774a5e46be",
        "cursor": {
          "ref": "48db83f0-45b6-4906-afaf-32b82a2f6c83",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a2e515c3-5626-4a45-a8dd-78b71173eef2"
        },
        "item": {
          "id": "fcda4bfb-6343-4228-abb5-08774a5e46be",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b8c34543-c9b9-49af-b5ff-659ea96dd789",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "fcda4bfb-6343-4228-abb5-08774a5e46be",
        "cursor": {
          "ref": "48db83f0-45b6-4906-afaf-32b82a2f6c83",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a2e515c3-5626-4a45-a8dd-78b71173eef2"
        },
        "item": {
          "id": "fcda4bfb-6343-4228-abb5-08774a5e46be",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b8c34543-c9b9-49af-b5ff-659ea96dd789",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "0e0867bd-1f62-45c7-adc6-418ac85eaccb",
        "cursor": {
          "ref": "fb2f4528-4a31-4995-84e9-b52bf7353743",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e23a7679-14c1-4c67-9cfd-481fd10aa5c5"
        },
        "item": {
          "id": "0e0867bd-1f62-45c7-adc6-418ac85eaccb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "576cd0c7-b693-4fd8-83b3-426af90544fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "0e0867bd-1f62-45c7-adc6-418ac85eaccb",
        "cursor": {
          "ref": "fb2f4528-4a31-4995-84e9-b52bf7353743",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e23a7679-14c1-4c67-9cfd-481fd10aa5c5"
        },
        "item": {
          "id": "0e0867bd-1f62-45c7-adc6-418ac85eaccb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "576cd0c7-b693-4fd8-83b3-426af90544fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "d75229c0-db76-4ff4-ae64-5972d5037545",
        "cursor": {
          "ref": "6890dfda-65e7-4370-a14e-a6f29ea09168",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "04fdf31a-4e77-4aa0-a8e0-72f9e54029be"
        },
        "item": {
          "id": "d75229c0-db76-4ff4-ae64-5972d5037545",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "87ccbcb1-b345-4259-b16c-8a9d21bbb766",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "d75229c0-db76-4ff4-ae64-5972d5037545",
        "cursor": {
          "ref": "6890dfda-65e7-4370-a14e-a6f29ea09168",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "04fdf31a-4e77-4aa0-a8e0-72f9e54029be"
        },
        "item": {
          "id": "d75229c0-db76-4ff4-ae64-5972d5037545",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "87ccbcb1-b345-4259-b16c-8a9d21bbb766",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "56dcb52c-2df8-407c-8b2c-dcef10b72f3b",
        "cursor": {
          "ref": "dd355b43-8fae-4ceb-b6b9-c4e665ce5f83",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c2432f2a-12ab-4cdc-9c70-da25cd15884d"
        },
        "item": {
          "id": "56dcb52c-2df8-407c-8b2c-dcef10b72f3b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2a47743a-5eeb-46db-a490-a95be22febc0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "56dcb52c-2df8-407c-8b2c-dcef10b72f3b",
        "cursor": {
          "ref": "dd355b43-8fae-4ceb-b6b9-c4e665ce5f83",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c2432f2a-12ab-4cdc-9c70-da25cd15884d"
        },
        "item": {
          "id": "56dcb52c-2df8-407c-8b2c-dcef10b72f3b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2a47743a-5eeb-46db-a490-a95be22febc0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "16ac9e36-e081-4046-9b2b-833721cd90b5",
        "cursor": {
          "ref": "2e9739ea-3bc8-41e6-b664-548ae1d1d73c",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "46a5fa01-5381-4944-b05e-5de17540e32e"
        },
        "item": {
          "id": "16ac9e36-e081-4046-9b2b-833721cd90b5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a74745e0-255d-4c26-8076-f95c1a46b9a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "16ac9e36-e081-4046-9b2b-833721cd90b5",
        "cursor": {
          "ref": "2e9739ea-3bc8-41e6-b664-548ae1d1d73c",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "46a5fa01-5381-4944-b05e-5de17540e32e"
        },
        "item": {
          "id": "16ac9e36-e081-4046-9b2b-833721cd90b5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a74745e0-255d-4c26-8076-f95c1a46b9a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "c76aff58-97e1-4aa9-a07e-20ad6b457903",
        "cursor": {
          "ref": "9e143ed5-e487-45e2-8999-c12bccef846f",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "043885a1-6c3c-44cd-9150-4f23ec5671b4"
        },
        "item": {
          "id": "c76aff58-97e1-4aa9-a07e-20ad6b457903",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1c1d090f-5aa6-4b5c-ad1d-2b94ec066adc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "c76aff58-97e1-4aa9-a07e-20ad6b457903",
        "cursor": {
          "ref": "9e143ed5-e487-45e2-8999-c12bccef846f",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "043885a1-6c3c-44cd-9150-4f23ec5671b4"
        },
        "item": {
          "id": "c76aff58-97e1-4aa9-a07e-20ad6b457903",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1c1d090f-5aa6-4b5c-ad1d-2b94ec066adc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "e1ba56bf-6cf8-4021-8e62-085306945fcc",
        "cursor": {
          "ref": "b3d583fd-632f-474a-a626-4ba2739238ac",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ece0a2bf-384d-402f-908d-f7f6dd4d2c4a"
        },
        "item": {
          "id": "e1ba56bf-6cf8-4021-8e62-085306945fcc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "96943acf-23fc-46a3-b68a-375da1328d88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "e1ba56bf-6cf8-4021-8e62-085306945fcc",
        "cursor": {
          "ref": "b3d583fd-632f-474a-a626-4ba2739238ac",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ece0a2bf-384d-402f-908d-f7f6dd4d2c4a"
        },
        "item": {
          "id": "e1ba56bf-6cf8-4021-8e62-085306945fcc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "96943acf-23fc-46a3-b68a-375da1328d88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "5f9e2216-042b-43cf-8803-c19b2b0a6568",
        "cursor": {
          "ref": "ea95fdf1-1318-4349-850d-8b7230dd6d1e",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b16b3847-256f-4ca6-96ec-e1305bf71bf5"
        },
        "item": {
          "id": "5f9e2216-042b-43cf-8803-c19b2b0a6568",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0d9eae3e-2a8e-4942-ad3f-62de5583a577",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "5f9e2216-042b-43cf-8803-c19b2b0a6568",
        "cursor": {
          "ref": "ea95fdf1-1318-4349-850d-8b7230dd6d1e",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b16b3847-256f-4ca6-96ec-e1305bf71bf5"
        },
        "item": {
          "id": "5f9e2216-042b-43cf-8803-c19b2b0a6568",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0d9eae3e-2a8e-4942-ad3f-62de5583a577",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "6228edd9-a2d4-41bd-9fb0-23d7cedd0127",
        "cursor": {
          "ref": "3dc3f140-9607-4994-b9ff-070f62cff938",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ae24df26-9606-4df9-9a49-8384ab0972f2"
        },
        "item": {
          "id": "6228edd9-a2d4-41bd-9fb0-23d7cedd0127",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e82cb705-c70f-43fb-82ae-c5e6d0c801d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "6228edd9-a2d4-41bd-9fb0-23d7cedd0127",
        "cursor": {
          "ref": "3dc3f140-9607-4994-b9ff-070f62cff938",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ae24df26-9606-4df9-9a49-8384ab0972f2"
        },
        "item": {
          "id": "6228edd9-a2d4-41bd-9fb0-23d7cedd0127",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e82cb705-c70f-43fb-82ae-c5e6d0c801d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "25fb86bf-52e4-4ed9-b97d-97b16ddf4034",
        "cursor": {
          "ref": "ea88c06d-131b-4592-86fd-2a67c82c95b2",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "637d2fe8-aa3a-47e0-8c85-84f9bc79fc68"
        },
        "item": {
          "id": "25fb86bf-52e4-4ed9-b97d-97b16ddf4034",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9a5ee854-e61f-440f-acec-ff36dc2056b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "25fb86bf-52e4-4ed9-b97d-97b16ddf4034",
        "cursor": {
          "ref": "ea88c06d-131b-4592-86fd-2a67c82c95b2",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "637d2fe8-aa3a-47e0-8c85-84f9bc79fc68"
        },
        "item": {
          "id": "25fb86bf-52e4-4ed9-b97d-97b16ddf4034",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9a5ee854-e61f-440f-acec-ff36dc2056b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "12522257-e3b6-4544-80cd-b84ef0abab98",
        "cursor": {
          "ref": "29d95112-213d-43f0-82c8-c0e47a36e8bf",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7e3db556-a6ee-45dd-b2c9-29a5e7cb9c6b"
        },
        "item": {
          "id": "12522257-e3b6-4544-80cd-b84ef0abab98",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ec3b64bb-8fd9-439a-8d8c-92629546cddb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "12522257-e3b6-4544-80cd-b84ef0abab98",
        "cursor": {
          "ref": "29d95112-213d-43f0-82c8-c0e47a36e8bf",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7e3db556-a6ee-45dd-b2c9-29a5e7cb9c6b"
        },
        "item": {
          "id": "12522257-e3b6-4544-80cd-b84ef0abab98",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ec3b64bb-8fd9-439a-8d8c-92629546cddb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "c31f801c-3867-421a-8ea7-fe141737649c",
        "cursor": {
          "ref": "6f549816-dc80-4929-8fec-a8d4bee4138e",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b5386d69-fa1f-47d2-9412-76591e9476f4"
        },
        "item": {
          "id": "c31f801c-3867-421a-8ea7-fe141737649c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "75464d6b-b557-4bfe-94e1-c3a93963f213",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "c31f801c-3867-421a-8ea7-fe141737649c",
        "cursor": {
          "ref": "6f549816-dc80-4929-8fec-a8d4bee4138e",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b5386d69-fa1f-47d2-9412-76591e9476f4"
        },
        "item": {
          "id": "c31f801c-3867-421a-8ea7-fe141737649c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "75464d6b-b557-4bfe-94e1-c3a93963f213",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "03b46ce1-1bfb-4017-b649-cd6e80e2d2aa",
        "cursor": {
          "ref": "aec2d20d-9b40-47fc-8478-319e244e02e5",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "40246ccc-3a2f-4c37-b89f-600290060ab3"
        },
        "item": {
          "id": "03b46ce1-1bfb-4017-b649-cd6e80e2d2aa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fe7eb020-7acc-4169-999f-94eac5f34ffe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "03b46ce1-1bfb-4017-b649-cd6e80e2d2aa",
        "cursor": {
          "ref": "aec2d20d-9b40-47fc-8478-319e244e02e5",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "40246ccc-3a2f-4c37-b89f-600290060ab3"
        },
        "item": {
          "id": "03b46ce1-1bfb-4017-b649-cd6e80e2d2aa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fe7eb020-7acc-4169-999f-94eac5f34ffe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "4545aa6e-d88f-4e5f-9fe7-cf33a2321c95",
        "cursor": {
          "ref": "033d713c-9fe1-4245-985d-231640ead788",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b6a2eae7-dd89-4598-b092-043560278ad2"
        },
        "item": {
          "id": "4545aa6e-d88f-4e5f-9fe7-cf33a2321c95",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c111f7af-3beb-445e-860e-2a44e9532b1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "4545aa6e-d88f-4e5f-9fe7-cf33a2321c95",
        "cursor": {
          "ref": "033d713c-9fe1-4245-985d-231640ead788",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b6a2eae7-dd89-4598-b092-043560278ad2"
        },
        "item": {
          "id": "4545aa6e-d88f-4e5f-9fe7-cf33a2321c95",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c111f7af-3beb-445e-860e-2a44e9532b1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "1f0a9332-c6b7-4e08-b7ab-e6090f0722f5",
        "cursor": {
          "ref": "6ee7e987-bc54-4889-9b71-b2cb72af74fe",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5c64fc5e-3f48-4b7c-919e-480e40e35cdd"
        },
        "item": {
          "id": "1f0a9332-c6b7-4e08-b7ab-e6090f0722f5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "29501645-f379-4be6-b619-726bd933fe92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "1f0a9332-c6b7-4e08-b7ab-e6090f0722f5",
        "cursor": {
          "ref": "6ee7e987-bc54-4889-9b71-b2cb72af74fe",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5c64fc5e-3f48-4b7c-919e-480e40e35cdd"
        },
        "item": {
          "id": "1f0a9332-c6b7-4e08-b7ab-e6090f0722f5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "29501645-f379-4be6-b619-726bd933fe92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "6b2ccf3c-7ace-4b66-a050-2e300983f221",
        "cursor": {
          "ref": "6c261092-4e50-4bb0-bdbb-cb8bf5efb1e2",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "18bb9b02-e949-46a9-a399-396280548097"
        },
        "item": {
          "id": "6b2ccf3c-7ace-4b66-a050-2e300983f221",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "172f1d7e-10de-4a5d-a64f-2bd67d66566d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6b2ccf3c-7ace-4b66-a050-2e300983f221",
        "cursor": {
          "ref": "6c261092-4e50-4bb0-bdbb-cb8bf5efb1e2",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "18bb9b02-e949-46a9-a399-396280548097"
        },
        "item": {
          "id": "6b2ccf3c-7ace-4b66-a050-2e300983f221",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "172f1d7e-10de-4a5d-a64f-2bd67d66566d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "ab5854ae-c26a-4427-b300-0ffe5522e5f4",
        "cursor": {
          "ref": "2c62bfd0-09af-43b2-8951-cc9fae402ccf",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b8b63b04-5498-4c4e-82e2-c164a1a358ae"
        },
        "item": {
          "id": "ab5854ae-c26a-4427-b300-0ffe5522e5f4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fafe04bf-d6bc-4af2-a5c0-6b1d681d4ee3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ab5854ae-c26a-4427-b300-0ffe5522e5f4",
        "cursor": {
          "ref": "2c62bfd0-09af-43b2-8951-cc9fae402ccf",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b8b63b04-5498-4c4e-82e2-c164a1a358ae"
        },
        "item": {
          "id": "ab5854ae-c26a-4427-b300-0ffe5522e5f4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fafe04bf-d6bc-4af2-a5c0-6b1d681d4ee3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "d75a76a3-9f90-4c5f-ad54-3476553a0d7a",
        "cursor": {
          "ref": "cd2a031d-27b0-4758-8c8f-f39c4e47f438",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1c1861ed-9e78-4def-865b-458a49de2696"
        },
        "item": {
          "id": "d75a76a3-9f90-4c5f-ad54-3476553a0d7a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c3b2713d-61ac-41ee-b1ca-26661d3fc8b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "d75a76a3-9f90-4c5f-ad54-3476553a0d7a",
        "cursor": {
          "ref": "cd2a031d-27b0-4758-8c8f-f39c4e47f438",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1c1861ed-9e78-4def-865b-458a49de2696"
        },
        "item": {
          "id": "d75a76a3-9f90-4c5f-ad54-3476553a0d7a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c3b2713d-61ac-41ee-b1ca-26661d3fc8b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "48ca12af-cf12-493a-9932-e1fecdc2fe5f",
        "cursor": {
          "ref": "38d6bea8-3b50-432e-ad66-5b95c622cd95",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0182d0db-97b4-4948-af25-0a2d48927d57"
        },
        "item": {
          "id": "48ca12af-cf12-493a-9932-e1fecdc2fe5f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7c4a6613-25f9-4dfc-b03d-49fff116ec06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "48ca12af-cf12-493a-9932-e1fecdc2fe5f",
        "cursor": {
          "ref": "38d6bea8-3b50-432e-ad66-5b95c622cd95",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0182d0db-97b4-4948-af25-0a2d48927d57"
        },
        "item": {
          "id": "48ca12af-cf12-493a-9932-e1fecdc2fe5f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7c4a6613-25f9-4dfc-b03d-49fff116ec06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "9e46c654-8cee-48be-89a4-831dedc0f22f",
        "cursor": {
          "ref": "52ba9e5f-3932-4268-b83e-e4ac809df4c4",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dd6d27b2-0e33-4df6-af9c-071e04ebed38"
        },
        "item": {
          "id": "9e46c654-8cee-48be-89a4-831dedc0f22f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a289eb83-d071-4c20-910b-fd4a6599f923",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "9e46c654-8cee-48be-89a4-831dedc0f22f",
        "cursor": {
          "ref": "52ba9e5f-3932-4268-b83e-e4ac809df4c4",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dd6d27b2-0e33-4df6-af9c-071e04ebed38"
        },
        "item": {
          "id": "9e46c654-8cee-48be-89a4-831dedc0f22f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a289eb83-d071-4c20-910b-fd4a6599f923",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "dac8d0ed-dbf6-4d20-a690-4d253da2c7f1",
        "cursor": {
          "ref": "6fcd9337-00ed-4512-bffd-dc115680d2c6",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a8304326-bb5a-44a4-af22-76f70457dad8"
        },
        "item": {
          "id": "dac8d0ed-dbf6-4d20-a690-4d253da2c7f1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "94629a2d-b67c-4e5b-a288-2b3817298a75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "dac8d0ed-dbf6-4d20-a690-4d253da2c7f1",
        "cursor": {
          "ref": "6fcd9337-00ed-4512-bffd-dc115680d2c6",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a8304326-bb5a-44a4-af22-76f70457dad8"
        },
        "item": {
          "id": "dac8d0ed-dbf6-4d20-a690-4d253da2c7f1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "94629a2d-b67c-4e5b-a288-2b3817298a75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "aaaaa59b-64fc-4c7c-8f24-006eb96aa6ab",
        "cursor": {
          "ref": "920236c7-4f94-4aca-819b-47c63680927b",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "201bb092-6b8e-4673-a7bc-89626aec1914"
        },
        "item": {
          "id": "aaaaa59b-64fc-4c7c-8f24-006eb96aa6ab",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "dcf25075-ddcf-4eeb-86f4-12a2a40046b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "aaaaa59b-64fc-4c7c-8f24-006eb96aa6ab",
        "cursor": {
          "ref": "920236c7-4f94-4aca-819b-47c63680927b",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "201bb092-6b8e-4673-a7bc-89626aec1914"
        },
        "item": {
          "id": "aaaaa59b-64fc-4c7c-8f24-006eb96aa6ab",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "dcf25075-ddcf-4eeb-86f4-12a2a40046b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "b6ce8d18-ff55-4097-a654-68727531f040",
        "cursor": {
          "ref": "b68ba941-2fff-4c28-9d66-6b176fe16694",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5c5060c4-e1c1-4629-b542-551e5148b434"
        },
        "item": {
          "id": "b6ce8d18-ff55-4097-a654-68727531f040",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "28f7cbce-3043-4a71-b703-60c3dac95720",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "b6ce8d18-ff55-4097-a654-68727531f040",
        "cursor": {
          "ref": "b68ba941-2fff-4c28-9d66-6b176fe16694",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5c5060c4-e1c1-4629-b542-551e5148b434"
        },
        "item": {
          "id": "b6ce8d18-ff55-4097-a654-68727531f040",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "28f7cbce-3043-4a71-b703-60c3dac95720",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "40d3ce96-3eb8-4642-8f55-ded8ec41bc69",
        "cursor": {
          "ref": "7a9f690e-6896-48bb-bf5b-baee37df8005",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a99a7252-0b37-4f45-90b9-6bdf01779c53"
        },
        "item": {
          "id": "40d3ce96-3eb8-4642-8f55-ded8ec41bc69",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "33fabee3-72fb-42b0-80ab-2844aa4cca22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "40d3ce96-3eb8-4642-8f55-ded8ec41bc69",
        "cursor": {
          "ref": "7a9f690e-6896-48bb-bf5b-baee37df8005",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a99a7252-0b37-4f45-90b9-6bdf01779c53"
        },
        "item": {
          "id": "40d3ce96-3eb8-4642-8f55-ded8ec41bc69",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "33fabee3-72fb-42b0-80ab-2844aa4cca22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "3f770759-fd69-4bc5-844d-6e86247c2ceb",
        "cursor": {
          "ref": "17c8d29e-e6dc-488e-926c-0efe1a672646",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "891dbe3d-8e6b-46cf-ab1a-47d24cecfb2e"
        },
        "item": {
          "id": "3f770759-fd69-4bc5-844d-6e86247c2ceb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e6f1da80-1bc8-441b-84c0-adc92a8e4dcb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "3f770759-fd69-4bc5-844d-6e86247c2ceb",
        "cursor": {
          "ref": "17c8d29e-e6dc-488e-926c-0efe1a672646",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "891dbe3d-8e6b-46cf-ab1a-47d24cecfb2e"
        },
        "item": {
          "id": "3f770759-fd69-4bc5-844d-6e86247c2ceb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e6f1da80-1bc8-441b-84c0-adc92a8e4dcb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "64081ff1-14ee-4483-a9fe-6334b17dd786",
        "cursor": {
          "ref": "2f4a5cc0-3f38-4a07-bb73-802ee4414426",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "45ae1d89-ece0-4dc1-9548-a41f2d7f2730"
        },
        "item": {
          "id": "64081ff1-14ee-4483-a9fe-6334b17dd786",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "39fa7afc-ef3f-49cd-bb84-67f97eec29e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "64081ff1-14ee-4483-a9fe-6334b17dd786",
        "cursor": {
          "ref": "2f4a5cc0-3f38-4a07-bb73-802ee4414426",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "45ae1d89-ece0-4dc1-9548-a41f2d7f2730"
        },
        "item": {
          "id": "64081ff1-14ee-4483-a9fe-6334b17dd786",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "39fa7afc-ef3f-49cd-bb84-67f97eec29e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "e0739695-9583-40e2-ba39-29bde993f6f2",
        "cursor": {
          "ref": "0077cfb5-3038-4626-a6ba-b64e6f2bf0b7",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "beaa0911-769e-490b-ad49-adfb9553f5ce"
        },
        "item": {
          "id": "e0739695-9583-40e2-ba39-29bde993f6f2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9b3b6c46-f645-4266-a044-d879bb46880f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e0739695-9583-40e2-ba39-29bde993f6f2",
        "cursor": {
          "ref": "0077cfb5-3038-4626-a6ba-b64e6f2bf0b7",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "beaa0911-769e-490b-ad49-adfb9553f5ce"
        },
        "item": {
          "id": "e0739695-9583-40e2-ba39-29bde993f6f2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9b3b6c46-f645-4266-a044-d879bb46880f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ff48bcc5-fee0-4cf9-8143-43ec76a3ee92",
        "cursor": {
          "ref": "59814fc3-dcd3-481e-a4e3-7db6c60a5ed7",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "53e3a30d-2e42-4d05-9a5d-3d582dbe16a8"
        },
        "item": {
          "id": "ff48bcc5-fee0-4cf9-8143-43ec76a3ee92",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "04276fb3-5caa-46d0-b48e-a5fe32ada2ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "ff48bcc5-fee0-4cf9-8143-43ec76a3ee92",
        "cursor": {
          "ref": "59814fc3-dcd3-481e-a4e3-7db6c60a5ed7",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "53e3a30d-2e42-4d05-9a5d-3d582dbe16a8"
        },
        "item": {
          "id": "ff48bcc5-fee0-4cf9-8143-43ec76a3ee92",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "04276fb3-5caa-46d0-b48e-a5fe32ada2ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "965b4373-1259-4987-a15d-4f6aca29a958",
        "cursor": {
          "ref": "5f001aa1-52cb-47c4-aba4-b6d38b55ccb6",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b0b543d4-58f2-40d5-8d67-5e3efb74d5cd"
        },
        "item": {
          "id": "965b4373-1259-4987-a15d-4f6aca29a958",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8d3c4e9f-2aed-40b5-811f-74a36c3cd238",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "965b4373-1259-4987-a15d-4f6aca29a958",
        "cursor": {
          "ref": "5f001aa1-52cb-47c4-aba4-b6d38b55ccb6",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b0b543d4-58f2-40d5-8d67-5e3efb74d5cd"
        },
        "item": {
          "id": "965b4373-1259-4987-a15d-4f6aca29a958",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8d3c4e9f-2aed-40b5-811f-74a36c3cd238",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a993aafd-5970-458d-a2e9-93182e6792e1",
        "cursor": {
          "ref": "9aaff523-9028-4137-91bc-7a69eb6c69f1",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3aa56efe-2e09-4683-bd29-0777fb223fcd"
        },
        "item": {
          "id": "a993aafd-5970-458d-a2e9-93182e6792e1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8b184f84-871c-4973-8d07-1256cac47eaf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a993aafd-5970-458d-a2e9-93182e6792e1",
        "cursor": {
          "ref": "9aaff523-9028-4137-91bc-7a69eb6c69f1",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3aa56efe-2e09-4683-bd29-0777fb223fcd"
        },
        "item": {
          "id": "a993aafd-5970-458d-a2e9-93182e6792e1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8b184f84-871c-4973-8d07-1256cac47eaf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "feea3a4e-3c1e-4b66-af7f-208febb853e6",
        "cursor": {
          "ref": "0c89e78b-ff57-47ff-838a-60703e611b9e",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7ef13763-8a9e-459b-bf8a-69406e0bcc87"
        },
        "item": {
          "id": "feea3a4e-3c1e-4b66-af7f-208febb853e6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "529187f9-f7a9-4313-92a8-ca83dfc3fce1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "feea3a4e-3c1e-4b66-af7f-208febb853e6",
        "cursor": {
          "ref": "0c89e78b-ff57-47ff-838a-60703e611b9e",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7ef13763-8a9e-459b-bf8a-69406e0bcc87"
        },
        "item": {
          "id": "feea3a4e-3c1e-4b66-af7f-208febb853e6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "529187f9-f7a9-4313-92a8-ca83dfc3fce1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "be22b6d8-9306-4dac-b2ad-0bcf6e8f8844",
        "cursor": {
          "ref": "4589f1ce-ae2a-467e-9502-3e3aeb75917e",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "640bbd5d-7453-4cc4-9b88-d87e195adccb"
        },
        "item": {
          "id": "be22b6d8-9306-4dac-b2ad-0bcf6e8f8844",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "af610229-f9e9-431c-84e4-63235d9b3d2e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "be22b6d8-9306-4dac-b2ad-0bcf6e8f8844",
        "cursor": {
          "ref": "4589f1ce-ae2a-467e-9502-3e3aeb75917e",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "640bbd5d-7453-4cc4-9b88-d87e195adccb"
        },
        "item": {
          "id": "be22b6d8-9306-4dac-b2ad-0bcf6e8f8844",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "af610229-f9e9-431c-84e4-63235d9b3d2e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "376f0b7e-7afb-4edf-a96c-3912d48b9ca4",
        "cursor": {
          "ref": "2da4454f-ab1d-45dd-9c53-962b89f086b8",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "418219f9-005a-48bc-84b5-0e777d880490"
        },
        "item": {
          "id": "376f0b7e-7afb-4edf-a96c-3912d48b9ca4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fd4b031e-0bb8-4ae1-90c9-b9a776cb18fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "376f0b7e-7afb-4edf-a96c-3912d48b9ca4",
        "cursor": {
          "ref": "2da4454f-ab1d-45dd-9c53-962b89f086b8",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "418219f9-005a-48bc-84b5-0e777d880490"
        },
        "item": {
          "id": "376f0b7e-7afb-4edf-a96c-3912d48b9ca4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fd4b031e-0bb8-4ae1-90c9-b9a776cb18fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "48c25ebc-2c32-4ff0-97d4-161402f6158d",
        "cursor": {
          "ref": "c29fd098-0204-4474-adc5-e896793ab1ec",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a1788fa7-4efb-4f80-a613-af0482fd7dd1"
        },
        "item": {
          "id": "48c25ebc-2c32-4ff0-97d4-161402f6158d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7e430f7e-445c-46d5-9520-2fcb056cf277",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "48c25ebc-2c32-4ff0-97d4-161402f6158d",
        "cursor": {
          "ref": "c29fd098-0204-4474-adc5-e896793ab1ec",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a1788fa7-4efb-4f80-a613-af0482fd7dd1"
        },
        "item": {
          "id": "48c25ebc-2c32-4ff0-97d4-161402f6158d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7e430f7e-445c-46d5-9520-2fcb056cf277",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ac0999dd-19ce-4335-842d-5e22acab2cca",
        "cursor": {
          "ref": "4d6faa30-2447-476e-81a2-8872a6634c7d",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f8831a01-ae88-469a-810d-e23dba2a0eaf"
        },
        "item": {
          "id": "ac0999dd-19ce-4335-842d-5e22acab2cca",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3b8ca23d-2535-4cf6-b91d-890ca27b9a77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "ac0999dd-19ce-4335-842d-5e22acab2cca",
        "cursor": {
          "ref": "4d6faa30-2447-476e-81a2-8872a6634c7d",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f8831a01-ae88-469a-810d-e23dba2a0eaf"
        },
        "item": {
          "id": "ac0999dd-19ce-4335-842d-5e22acab2cca",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3b8ca23d-2535-4cf6-b91d-890ca27b9a77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "fd49de73-3ec9-458b-aa80-985577b4f11e",
        "cursor": {
          "ref": "625118cc-e8c3-4bae-a682-9824de3c6c2e",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fbbcb26c-2c89-4f54-9834-abb2ca16e9b9"
        },
        "item": {
          "id": "fd49de73-3ec9-458b-aa80-985577b4f11e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4cb9bf57-96fe-459a-9881-f91abe8104af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "fd49de73-3ec9-458b-aa80-985577b4f11e",
        "cursor": {
          "ref": "625118cc-e8c3-4bae-a682-9824de3c6c2e",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fbbcb26c-2c89-4f54-9834-abb2ca16e9b9"
        },
        "item": {
          "id": "fd49de73-3ec9-458b-aa80-985577b4f11e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4cb9bf57-96fe-459a-9881-f91abe8104af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "d4e33002-6492-4a05-8e20-d4bc2001a247",
        "cursor": {
          "ref": "48707aba-98fb-40b3-a47f-aeddb3730871",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "60d9ce9e-170e-4b50-b964-57ae39d470ce"
        },
        "item": {
          "id": "d4e33002-6492-4a05-8e20-d4bc2001a247",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "afd42350-16f3-4e23-b9ce-5d4f622d511e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "d4e33002-6492-4a05-8e20-d4bc2001a247",
        "cursor": {
          "ref": "48707aba-98fb-40b3-a47f-aeddb3730871",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "60d9ce9e-170e-4b50-b964-57ae39d470ce"
        },
        "item": {
          "id": "d4e33002-6492-4a05-8e20-d4bc2001a247",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "afd42350-16f3-4e23-b9ce-5d4f622d511e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "612bd5f8-061b-4833-80f0-08a44084e84c",
        "cursor": {
          "ref": "3aa5e5da-9cc2-4dc5-b1e4-c5d3af2208a3",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3a9391f1-c0aa-486f-a774-cbaa217e3ada"
        },
        "item": {
          "id": "612bd5f8-061b-4833-80f0-08a44084e84c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e28f3bd7-0066-4d98-a0d3-dcc7d1406ecc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "612bd5f8-061b-4833-80f0-08a44084e84c",
        "cursor": {
          "ref": "3aa5e5da-9cc2-4dc5-b1e4-c5d3af2208a3",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3a9391f1-c0aa-486f-a774-cbaa217e3ada"
        },
        "item": {
          "id": "612bd5f8-061b-4833-80f0-08a44084e84c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e28f3bd7-0066-4d98-a0d3-dcc7d1406ecc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "1d021eb9-fc71-4265-8313-75d2a5e4bc6a",
        "cursor": {
          "ref": "ce6f175f-2ca3-4ef2-b1a8-0c8093f249b1",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6f133954-680a-4398-9233-0572f58758e1"
        },
        "item": {
          "id": "1d021eb9-fc71-4265-8313-75d2a5e4bc6a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c2888649-1230-4b1e-94fe-12cdfbd36844",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "1d021eb9-fc71-4265-8313-75d2a5e4bc6a",
        "cursor": {
          "ref": "ce6f175f-2ca3-4ef2-b1a8-0c8093f249b1",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6f133954-680a-4398-9233-0572f58758e1"
        },
        "item": {
          "id": "1d021eb9-fc71-4265-8313-75d2a5e4bc6a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c2888649-1230-4b1e-94fe-12cdfbd36844",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "8c3277f2-9115-43b5-b1af-8aed78b08872",
        "cursor": {
          "ref": "688d7d30-692f-4e9a-abef-8af395648405",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bdaa85b5-7a55-467d-91f4-cc26aa517438"
        },
        "item": {
          "id": "8c3277f2-9115-43b5-b1af-8aed78b08872",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "aa5ff943-342c-4901-9dfb-cb3351696748",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "8c3277f2-9115-43b5-b1af-8aed78b08872",
        "cursor": {
          "ref": "688d7d30-692f-4e9a-abef-8af395648405",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bdaa85b5-7a55-467d-91f4-cc26aa517438"
        },
        "item": {
          "id": "8c3277f2-9115-43b5-b1af-8aed78b08872",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "aa5ff943-342c-4901-9dfb-cb3351696748",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "0e28a16a-20bd-4f8d-afcd-22b19f053b91",
        "cursor": {
          "ref": "092fe537-72d2-4581-8b87-c8d10dabd766",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2f63ed57-cce5-47b7-81f2-0402b35106a3"
        },
        "item": {
          "id": "0e28a16a-20bd-4f8d-afcd-22b19f053b91",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0a081385-aa86-4d8c-9ecf-6c6638b6fb5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "0e28a16a-20bd-4f8d-afcd-22b19f053b91",
        "cursor": {
          "ref": "092fe537-72d2-4581-8b87-c8d10dabd766",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2f63ed57-cce5-47b7-81f2-0402b35106a3"
        },
        "item": {
          "id": "0e28a16a-20bd-4f8d-afcd-22b19f053b91",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0a081385-aa86-4d8c-9ecf-6c6638b6fb5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "e6c271c7-9232-4fc3-afad-172b3385ec1d",
        "cursor": {
          "ref": "038a7c39-85d6-4b0a-a420-1fda58599cc3",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cb3c3c34-71ca-4e7e-a2d1-4860f17e6671"
        },
        "item": {
          "id": "e6c271c7-9232-4fc3-afad-172b3385ec1d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7944297b-d700-40a1-a34e-b9c32dea45cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "e6c271c7-9232-4fc3-afad-172b3385ec1d",
        "cursor": {
          "ref": "038a7c39-85d6-4b0a-a420-1fda58599cc3",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cb3c3c34-71ca-4e7e-a2d1-4860f17e6671"
        },
        "item": {
          "id": "e6c271c7-9232-4fc3-afad-172b3385ec1d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7944297b-d700-40a1-a34e-b9c32dea45cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "96683c30-3d83-4be1-a824-aa65c6a8bdaf",
        "cursor": {
          "ref": "93fb4978-8dfd-4301-a5a3-3f771b774ff3",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4f3cedb7-856b-4cd6-be74-9b1fc0d2f1e8"
        },
        "item": {
          "id": "96683c30-3d83-4be1-a824-aa65c6a8bdaf",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a21e2dc3-04ba-41af-a66f-d203cce63535",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "96683c30-3d83-4be1-a824-aa65c6a8bdaf",
        "cursor": {
          "ref": "93fb4978-8dfd-4301-a5a3-3f771b774ff3",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4f3cedb7-856b-4cd6-be74-9b1fc0d2f1e8"
        },
        "item": {
          "id": "96683c30-3d83-4be1-a824-aa65c6a8bdaf",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a21e2dc3-04ba-41af-a66f-d203cce63535",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "bad10d44-8d08-4e19-a38e-8133fdefc22c",
        "cursor": {
          "ref": "f52df408-4338-40a7-8aec-5acde27deb68",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "655d2798-32ac-4b61-b1c0-cdbcdec5adc8"
        },
        "item": {
          "id": "bad10d44-8d08-4e19-a38e-8133fdefc22c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0667e444-c07e-4e4d-bd2f-c2d24a7f45a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "bad10d44-8d08-4e19-a38e-8133fdefc22c",
        "cursor": {
          "ref": "f52df408-4338-40a7-8aec-5acde27deb68",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "655d2798-32ac-4b61-b1c0-cdbcdec5adc8"
        },
        "item": {
          "id": "bad10d44-8d08-4e19-a38e-8133fdefc22c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0667e444-c07e-4e4d-bd2f-c2d24a7f45a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "3101f647-6c97-4f62-96a3-21548ae2a959",
        "cursor": {
          "ref": "2617593f-5c40-4d1d-b20e-56f84ed8cf46",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f00ea2e4-b0f7-4fd8-8b0a-ccec6bfd5e5a"
        },
        "item": {
          "id": "3101f647-6c97-4f62-96a3-21548ae2a959",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f5d24f49-134f-48a4-ac67-86dc26f905e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "3101f647-6c97-4f62-96a3-21548ae2a959",
        "cursor": {
          "ref": "2617593f-5c40-4d1d-b20e-56f84ed8cf46",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f00ea2e4-b0f7-4fd8-8b0a-ccec6bfd5e5a"
        },
        "item": {
          "id": "3101f647-6c97-4f62-96a3-21548ae2a959",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f5d24f49-134f-48a4-ac67-86dc26f905e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "0e35c194-f5f5-457e-aadf-f493e60930ff",
        "cursor": {
          "ref": "0ce62da1-a8ff-4efe-b19b-b1e147bc925a",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "efc1dc48-b80d-4c90-8831-4d1c261ade37"
        },
        "item": {
          "id": "0e35c194-f5f5-457e-aadf-f493e60930ff",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0a3e961b-ade8-476b-972e-e4991c9f8d14",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "0e35c194-f5f5-457e-aadf-f493e60930ff",
        "cursor": {
          "ref": "0ce62da1-a8ff-4efe-b19b-b1e147bc925a",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "efc1dc48-b80d-4c90-8831-4d1c261ade37"
        },
        "item": {
          "id": "0e35c194-f5f5-457e-aadf-f493e60930ff",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0a3e961b-ade8-476b-972e-e4991c9f8d14",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "7922cad5-5a46-475f-ade3-4a37cfb3ac39",
        "cursor": {
          "ref": "4f96ad6a-f5e7-4e22-b6d5-15e727f09229",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f1f124df-e5d8-40aa-8b37-77c8eecdd121"
        },
        "item": {
          "id": "7922cad5-5a46-475f-ade3-4a37cfb3ac39",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d6a7207b-b4d4-4a6e-9ec5-efa16ecb159f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "7922cad5-5a46-475f-ade3-4a37cfb3ac39",
        "cursor": {
          "ref": "4f96ad6a-f5e7-4e22-b6d5-15e727f09229",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f1f124df-e5d8-40aa-8b37-77c8eecdd121"
        },
        "item": {
          "id": "7922cad5-5a46-475f-ade3-4a37cfb3ac39",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d6a7207b-b4d4-4a6e-9ec5-efa16ecb159f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "23183294-ddbf-42d4-9782-1cc83eafce00",
        "cursor": {
          "ref": "953b7f38-4d95-4fe4-b04c-20d1fb7f5c41",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d2bc74d9-c2cb-4fb5-a824-b78eb9646cde"
        },
        "item": {
          "id": "23183294-ddbf-42d4-9782-1cc83eafce00",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0a32ab48-f540-4ba1-9dce-e3c8334b3eb9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "23183294-ddbf-42d4-9782-1cc83eafce00",
        "cursor": {
          "ref": "953b7f38-4d95-4fe4-b04c-20d1fb7f5c41",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d2bc74d9-c2cb-4fb5-a824-b78eb9646cde"
        },
        "item": {
          "id": "23183294-ddbf-42d4-9782-1cc83eafce00",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0a32ab48-f540-4ba1-9dce-e3c8334b3eb9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ff32f07b-1312-40d4-9fb4-787b983a316b",
        "cursor": {
          "ref": "9106171d-a96f-463c-b364-7f7579e8d1cb",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "42274451-c7f6-4fb6-ad27-4ecf5e431705"
        },
        "item": {
          "id": "ff32f07b-1312-40d4-9fb4-787b983a316b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c4805513-e755-4f8a-a64c-0927847241c4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ff32f07b-1312-40d4-9fb4-787b983a316b",
        "cursor": {
          "ref": "9106171d-a96f-463c-b364-7f7579e8d1cb",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "42274451-c7f6-4fb6-ad27-4ecf5e431705"
        },
        "item": {
          "id": "ff32f07b-1312-40d4-9fb4-787b983a316b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c4805513-e755-4f8a-a64c-0927847241c4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4089674e-6acb-4e75-a26f-fa99b05db00f",
        "cursor": {
          "ref": "cacbb61b-a8be-433c-835a-d5c3e4888598",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9f9eaff6-cad5-4da0-830c-8b781f412083"
        },
        "item": {
          "id": "4089674e-6acb-4e75-a26f-fa99b05db00f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1dbd3e6c-3a9c-4af9-b7b6-d0c4a415e236",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4089674e-6acb-4e75-a26f-fa99b05db00f",
        "cursor": {
          "ref": "cacbb61b-a8be-433c-835a-d5c3e4888598",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9f9eaff6-cad5-4da0-830c-8b781f412083"
        },
        "item": {
          "id": "4089674e-6acb-4e75-a26f-fa99b05db00f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1dbd3e6c-3a9c-4af9-b7b6-d0c4a415e236",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "6fa0996c-62d5-4f13-b786-dfb2f6985ec6",
        "cursor": {
          "ref": "4c74cf2e-78f6-4c3c-bb65-6de0a2ddea11",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "80bb186e-893b-4b37-a3ee-e8afeef331f7"
        },
        "item": {
          "id": "6fa0996c-62d5-4f13-b786-dfb2f6985ec6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "50a0fbac-b9f7-4de9-8555-4ebaf9b87a39",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6fa0996c-62d5-4f13-b786-dfb2f6985ec6",
        "cursor": {
          "ref": "4c74cf2e-78f6-4c3c-bb65-6de0a2ddea11",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "80bb186e-893b-4b37-a3ee-e8afeef331f7"
        },
        "item": {
          "id": "6fa0996c-62d5-4f13-b786-dfb2f6985ec6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "50a0fbac-b9f7-4de9-8555-4ebaf9b87a39",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c963ab76-8f6e-4a1d-93bf-234639a2ffb1",
        "cursor": {
          "ref": "97670f85-7c67-4130-8e04-44943920508a",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8283957b-f970-492d-b6fb-9f433da31a97"
        },
        "item": {
          "id": "c963ab76-8f6e-4a1d-93bf-234639a2ffb1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "032be834-31f2-4fdd-ba48-f6a72cd6e303",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c963ab76-8f6e-4a1d-93bf-234639a2ffb1",
        "cursor": {
          "ref": "97670f85-7c67-4130-8e04-44943920508a",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8283957b-f970-492d-b6fb-9f433da31a97"
        },
        "item": {
          "id": "c963ab76-8f6e-4a1d-93bf-234639a2ffb1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "032be834-31f2-4fdd-ba48-f6a72cd6e303",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d3145a2b-41a6-49e7-8738-51a8d7e46836",
        "cursor": {
          "ref": "ce118fc8-f240-43fa-b499-ce39bd745b38",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ca694593-d8ff-4b0b-9486-9569c6e4e199"
        },
        "item": {
          "id": "d3145a2b-41a6-49e7-8738-51a8d7e46836",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e037b295-b5bc-4f39-bd9b-269a70762be7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "d3145a2b-41a6-49e7-8738-51a8d7e46836",
        "cursor": {
          "ref": "ce118fc8-f240-43fa-b499-ce39bd745b38",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ca694593-d8ff-4b0b-9486-9569c6e4e199"
        },
        "item": {
          "id": "d3145a2b-41a6-49e7-8738-51a8d7e46836",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e037b295-b5bc-4f39-bd9b-269a70762be7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "d9d2d511-592a-45df-822f-9f010c722141",
        "cursor": {
          "ref": "0117993f-71b9-4db7-b491-69ec824adab3",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c9a51697-24fb-4343-9372-f7657f357f8f"
        },
        "item": {
          "id": "d9d2d511-592a-45df-822f-9f010c722141",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5176781d-e5af-4b28-ac24-a4dca3339e67",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "d9d2d511-592a-45df-822f-9f010c722141",
        "cursor": {
          "ref": "0117993f-71b9-4db7-b491-69ec824adab3",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c9a51697-24fb-4343-9372-f7657f357f8f"
        },
        "item": {
          "id": "d9d2d511-592a-45df-822f-9f010c722141",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5176781d-e5af-4b28-ac24-a4dca3339e67",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 38,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "fd24645d-0004-4146-bb38-02093472571e",
        "cursor": {
          "ref": "1034d7a9-d2b4-4f5d-b575-2c78fad251d1",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a0653de9-a5b7-4148-abd9-4feb39091a3a"
        },
        "item": {
          "id": "fd24645d-0004-4146-bb38-02093472571e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f1e594db-f8c8-4bfe-b5c0-9f428013448e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "fd24645d-0004-4146-bb38-02093472571e",
        "cursor": {
          "ref": "1034d7a9-d2b4-4f5d-b575-2c78fad251d1",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a0653de9-a5b7-4148-abd9-4feb39091a3a"
        },
        "item": {
          "id": "fd24645d-0004-4146-bb38-02093472571e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f1e594db-f8c8-4bfe-b5c0-9f428013448e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "1553d3f8-16df-489b-9805-5f1e0fb8bfeb",
        "cursor": {
          "ref": "a1a4f0d0-52e4-4fa5-894a-51794801061f",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ffc1f2ba-07a6-46a6-9a75-e2403cb7994a"
        },
        "item": {
          "id": "1553d3f8-16df-489b-9805-5f1e0fb8bfeb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "846a82ae-a8b5-4a25-a29f-aaadb3d230bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "1553d3f8-16df-489b-9805-5f1e0fb8bfeb",
        "cursor": {
          "ref": "a1a4f0d0-52e4-4fa5-894a-51794801061f",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ffc1f2ba-07a6-46a6-9a75-e2403cb7994a"
        },
        "item": {
          "id": "1553d3f8-16df-489b-9805-5f1e0fb8bfeb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "846a82ae-a8b5-4a25-a29f-aaadb3d230bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 37,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "e5e1cf67-18f4-410d-9b3f-f853c41a5fed",
        "cursor": {
          "ref": "fc2e4c61-8b61-4305-8b95-7eabc1d37e8f",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5d403199-2608-48bc-b372-18169e31fe82"
        },
        "item": {
          "id": "e5e1cf67-18f4-410d-9b3f-f853c41a5fed",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ac35593e-e8da-4574-815d-5ee12b36eb88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "e5e1cf67-18f4-410d-9b3f-f853c41a5fed",
        "cursor": {
          "ref": "fc2e4c61-8b61-4305-8b95-7eabc1d37e8f",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5d403199-2608-48bc-b372-18169e31fe82"
        },
        "item": {
          "id": "e5e1cf67-18f4-410d-9b3f-f853c41a5fed",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ac35593e-e8da-4574-815d-5ee12b36eb88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "9fabbada-fdb3-41fb-b71c-ff6a948edb62",
        "cursor": {
          "ref": "c7457393-5d46-4ae9-91eb-e80ce8c47dc4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d10d6f3b-28a6-4a02-b184-1cb65ad902e9"
        },
        "item": {
          "id": "9fabbada-fdb3-41fb-b71c-ff6a948edb62",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9fabbada-fdb3-41fb-b71c-ff6a948edb62",
        "cursor": {
          "ref": "c7457393-5d46-4ae9-91eb-e80ce8c47dc4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d10d6f3b-28a6-4a02-b184-1cb65ad902e9"
        },
        "item": {
          "id": "9fabbada-fdb3-41fb-b71c-ff6a948edb62",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9fabbada-fdb3-41fb-b71c-ff6a948edb62",
        "cursor": {
          "ref": "c7457393-5d46-4ae9-91eb-e80ce8c47dc4",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d10d6f3b-28a6-4a02-b184-1cb65ad902e9"
        },
        "item": {
          "id": "9fabbada-fdb3-41fb-b71c-ff6a948edb62",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "3c5ea852-8d09-485f-83eb-3d3d6d3c7330",
        "cursor": {
          "ref": "a40f973c-95a7-4daf-b3bf-a6ed44246e28",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d9778ed3-77a9-45f1-bfa0-31b5c41910fb"
        },
        "item": {
          "id": "3c5ea852-8d09-485f-83eb-3d3d6d3c7330",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3c5ea852-8d09-485f-83eb-3d3d6d3c7330",
        "cursor": {
          "ref": "a40f973c-95a7-4daf-b3bf-a6ed44246e28",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d9778ed3-77a9-45f1-bfa0-31b5c41910fb"
        },
        "item": {
          "id": "3c5ea852-8d09-485f-83eb-3d3d6d3c7330",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3c5ea852-8d09-485f-83eb-3d3d6d3c7330",
        "cursor": {
          "ref": "a40f973c-95a7-4daf-b3bf-a6ed44246e28",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d9778ed3-77a9-45f1-bfa0-31b5c41910fb"
        },
        "item": {
          "id": "3c5ea852-8d09-485f-83eb-3d3d6d3c7330",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "78ca0c6c-83b2-4be4-b1ba-f721cc13788c",
        "cursor": {
          "ref": "156190ba-5446-4d6e-af39-5bdedbfe7cae",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "41bf7f3f-f672-4f4e-9271-c85c07cb8f47"
        },
        "item": {
          "id": "78ca0c6c-83b2-4be4-b1ba-f721cc13788c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "78ca0c6c-83b2-4be4-b1ba-f721cc13788c",
        "cursor": {
          "ref": "156190ba-5446-4d6e-af39-5bdedbfe7cae",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "41bf7f3f-f672-4f4e-9271-c85c07cb8f47"
        },
        "item": {
          "id": "78ca0c6c-83b2-4be4-b1ba-f721cc13788c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "78ca0c6c-83b2-4be4-b1ba-f721cc13788c",
        "cursor": {
          "ref": "156190ba-5446-4d6e-af39-5bdedbfe7cae",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "41bf7f3f-f672-4f4e-9271-c85c07cb8f47"
        },
        "item": {
          "id": "78ca0c6c-83b2-4be4-b1ba-f721cc13788c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1de0c1ac-ed3b-448e-a550-24d01f880092",
        "cursor": {
          "ref": "d49859b7-13fb-414d-930a-4a026e01a2c2",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9034fc19-ee04-49a8-8cd9-e00ba39003e3"
        },
        "item": {
          "id": "1de0c1ac-ed3b-448e-a550-24d01f880092",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "1de0c1ac-ed3b-448e-a550-24d01f880092",
        "cursor": {
          "ref": "d49859b7-13fb-414d-930a-4a026e01a2c2",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9034fc19-ee04-49a8-8cd9-e00ba39003e3"
        },
        "item": {
          "id": "1de0c1ac-ed3b-448e-a550-24d01f880092",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "1de0c1ac-ed3b-448e-a550-24d01f880092",
        "cursor": {
          "ref": "d49859b7-13fb-414d-930a-4a026e01a2c2",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9034fc19-ee04-49a8-8cd9-e00ba39003e3"
        },
        "item": {
          "id": "1de0c1ac-ed3b-448e-a550-24d01f880092",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "fa1480b4-22e7-456f-85de-7a9e8c5d492c",
        "cursor": {
          "ref": "0e28046f-fce6-4ecc-b868-be4604a7e078",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0365721f-d443-4932-a385-b131236be71e"
        },
        "item": {
          "id": "fa1480b4-22e7-456f-85de-7a9e8c5d492c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "fa1480b4-22e7-456f-85de-7a9e8c5d492c",
        "cursor": {
          "ref": "0e28046f-fce6-4ecc-b868-be4604a7e078",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0365721f-d443-4932-a385-b131236be71e"
        },
        "item": {
          "id": "fa1480b4-22e7-456f-85de-7a9e8c5d492c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "fa1480b4-22e7-456f-85de-7a9e8c5d492c",
        "cursor": {
          "ref": "0e28046f-fce6-4ecc-b868-be4604a7e078",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0365721f-d443-4932-a385-b131236be71e"
        },
        "item": {
          "id": "fa1480b4-22e7-456f-85de-7a9e8c5d492c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "28932fab-27bb-453a-81b6-48e2ee02d655",
        "cursor": {
          "ref": "8c6ba539-6a69-4508-acf4-dedf59dcb5d4",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d584c594-d83f-452a-82b6-5df932bf9c71"
        },
        "item": {
          "id": "28932fab-27bb-453a-81b6-48e2ee02d655",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "28932fab-27bb-453a-81b6-48e2ee02d655",
        "cursor": {
          "ref": "8c6ba539-6a69-4508-acf4-dedf59dcb5d4",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d584c594-d83f-452a-82b6-5df932bf9c71"
        },
        "item": {
          "id": "28932fab-27bb-453a-81b6-48e2ee02d655",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "28932fab-27bb-453a-81b6-48e2ee02d655",
        "cursor": {
          "ref": "8c6ba539-6a69-4508-acf4-dedf59dcb5d4",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d584c594-d83f-452a-82b6-5df932bf9c71"
        },
        "item": {
          "id": "28932fab-27bb-453a-81b6-48e2ee02d655",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}