{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "22f90bc3-a7bf-4096-bd8e-f1ddc831aad1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "12815b75-d428-4546-8bba-6b2e53fb8485",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cfef2da1-c4b3-4aee-b015-8dce90563175",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0e8a6181-d303-4f76-99b2-0037f71bf384"
                }
              }
            ]
          },
          {
            "id": "cf784d77-5b21-4547-a4f7-66b7ea848066",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4e6a90aa-f7c3-404d-b590-41f17157c691",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a42914bd-5ce3-4af8-8c5a-c722083c9c15"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2b934d39-25ea-4742-adf6-e68bd29ae6cc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "560e95c5-bc6c-4175-bf1e-d215b2533fbc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "767597c6-ee03-4d5b-9d23-9ffa998c8631",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb057547-7cd3-4271-87fd-7077a16216c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "024f838f-054e-483a-ad26-86ceaa02f8f0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7d154b2b-a3ef-424e-af4e-a5b9f776e36f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c72229a-ebc3-4807-bf23-64f2edb236b2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "431c441e-de07-43a0-84c8-8eaefc322e45",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e95fc9d-4e77-4fe2-8b85-24975581591b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c3e3e2f1-a84c-465e-bc55-dc4b4758bbfa",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "143c5c3a-8731-426f-be7c-6e5b7e23a8ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c51f8975-2861-47e9-ab7e-e5e4c302bc73",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92378e6e-dc0b-47a0-a8d0-44b13dfbe599"
            }
          }
        ]
      },
      {
        "id": "b8d8605f-f5a3-4954-897d-0b5684642a86",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6aea68b1-87ef-43b3-814e-a23cdc8563f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3a4c4eb-183d-451b-820a-e80fb9d3d72b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2c952551-35e6-469b-b475-b85035d507bc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa465e4-e8e5-4f08-8d9b-072478ad253b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8eabcaf-3ecd-461b-a6d2-86d36fc910e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a20250-f15d-4a8c-924c-aa5bc7b8fc5f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69127be1-0d66-4aee-b2de-16b7e3f7737d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f9db9d5-f462-4396-b0f2-00bce88b54d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b717441-4d11-43f1-b6e0-b167a2e1e6ad",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec7011f-c3eb-40ac-9768-4298022cba2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb52035a-1d19-419c-92c8-9790ccff7629"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b2bc6ef6-6b3b-48b2-8bac-bf94eb024e22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2b67683e-50c0-4734-9080-395e0d643a05",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e7d5d7-ad3e-4a53-891c-3353b12b79a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16b6088d-3f51-43ff-8fe2-8a4616d746bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc7b51c-0d94-4b86-b03a-06ab44bda988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdce9230-175a-4f6a-a6f7-0659311d326f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5d9ab0-02fb-4c10-a380-66f78d999323",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f47f1a1-c8c0-4748-8454-a468f946ad42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72ffebdf-492d-4661-8b12-440aa9c35f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2ca10e-b0cd-46ac-a796-81c000f0a49e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d76b7c4f-9fb8-4cf5-86d7-1668c8c6e661"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4bdad0f9-1750-4452-a501-763393435e0c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e092b73-8214-4ead-b233-1f37599e3cd9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0534a952-1b57-4a6f-bb97-cf25f5509e01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c2bce0f1-4afc-4322-addf-d9a1a9c542ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e74c54b8-3d44-4d89-bd0c-cb6b40a4c0c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "1479ad10-02bd-4448-b6fa-7199b51a00a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2af980a-7d19-47da-9e4b-885e9b8778e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a4183008-72af-4588-b031-54079057d88e"
            }
          }
        ]
      },
      {
        "id": "d7256a79-0aef-44e0-8ee2-aef6d4a6ddbe",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "95ba4fad-35d6-4482-9169-368abcb43516",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19baa835-2b52-4ec2-9640-13e147600404",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "42d25f2b-182d-42cc-b7c1-21bd21c672c7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058c9bf4-624e-4006-9343-99552a7f6258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7ca4d0-b718-41f9-be5a-591cc8d3b99e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29dd79f0-d995-4281-8a8e-e90173cfe2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89236345-92f5-4940-a4f0-97a54ddcf3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc5fa0a-2a53-4800-a70a-b6abca35cc2d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c205c928-b258-4565-9e36-5bde21c5c43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ded1456-2994-4563-83d8-62e1146068df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72dcfe08-6570-4c70-be48-32d98008f8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fd2f523-7008-4530-80bf-8278596f4103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc72853e-b5a9-42b6-bb5f-6ba0f9b84c0a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243b1920-4056-42fc-b54e-436a656eb96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1ac52e-8dfd-4584-9b1f-d973732f0c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74623f4d-a663-472b-a034-e380e4bd0b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2eda571a-0e1f-4ca4-a4cb-eb5bc858bd6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018bb3be-15f1-4182-bc3a-01d9771111b6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53411c7-8251-43ba-a397-e0e4e748b840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b472051f-4935-4d3c-ac46-68da5d54c6a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4133f7d1-3b45-4a8c-a5d6-48f4eb6c4270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d721297c-54a3-46cc-8466-890e48428b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55464830-0a58-4adb-8724-1fd76dec6aae",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92437a3c-b4de-4e93-9ee0-b63658973fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b1effeb-a349-417a-b7d1-9ddfad0f55a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ba6679-48a3-4c9c-99c2-c371f0a52f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94ecc0e6-74c5-4cf7-b791-2994bb491ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d626573-413e-44f3-b21a-807b8df1074b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5e5eac-12bc-478d-bee1-c3b661aeb6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960cffd0-f449-4c5a-945e-89bef60eb5e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f416415-053d-406b-a083-69f90a2b1c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4f341e4-e8f4-435d-8b03-19c46ff96143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3863638-8d7c-4886-bc3c-316487d806f0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c67ba1-aa08-4aec-9439-6336c6174f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b2a0d0-0c54-483c-b1e9-62edc5744263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa2e18d-89d5-49c3-a427-461f0b58f981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64a33e05-652c-49c1-91e9-ff3f9d5fc115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7facf28-9f75-4ad6-b666-a3f2a5148a76",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32feb59f-a6f4-4378-9da0-275f0a2e1c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8641f672-c42d-4a66-9d87-83b2da964e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9f8cf9-c559-411e-8874-c806ad361b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a846c356-35da-439b-8d5a-0ce8d25dc886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0402cf-ddc5-4a76-bc2f-167c8ee23987",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6261264e-d6b7-4d87-9a49-805e535f07ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5627da02-ab7a-4afd-a9d3-9a61c505f996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8b0cbe-5ff6-4b57-9e52-678ed04ecb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82e8d7ee-f565-40d0-ab5c-4ee69a17bcf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e11b54-f3d4-4a5f-8da6-9ec190afd04a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bc3e1e-58fe-4b2b-a589-4f7a05611459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18449608-c581-428d-8aaa-c1887c18f574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd560620-4186-4a2e-badd-ecd2f5088d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71ecb4bf-1711-44d6-8673-1bc058ee176e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceec66db-2a78-49a9-b21a-bc20a48f611a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8925e423-e619-423e-83e9-5b8b774da98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94554d8d-ccc0-4f84-b0a1-71d32c3226fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ceeb475-e96b-4110-8170-cd4468466ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d57f9c4-20e7-4ee8-b7c7-486a8e0d60e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a73a69d-bdbf-414c-aca3-80194b45d9eb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4003c5eb-5d9c-404c-bf44-f737c52fce78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cdfa4e0-eec5-4b4d-84c4-989e8c7fcf4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d39439-e4a3-4e0f-81da-2a89b702a498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a44c107c-a1a3-4e2b-980e-203610ecc0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a15d36-993d-4d50-9d68-f14e6f63d559",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d4c23f-4d47-4885-a96b-b60699d37e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41c2ba9-20d3-4425-a67e-81ff51d0a468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1284e9b-b0ee-411b-adb0-aca350aef2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d8da3ee-e18e-4745-b961-901902352efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec170bfb-c18a-47a5-a43e-b68e7265f5cf",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a49ee6-82c2-4d53-961a-5dc8803ded1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74f9b07-f212-4195-8c9a-f2a091256885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab0f36f-624b-4f2c-84b7-92171b36d33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5429bdca-2aef-46f4-92f2-5519d34a1c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89d3446-5d31-4478-a0cb-97d6b3df80b3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73648ebb-98c2-4754-acbd-e2a6bda8defa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4dc71a6-869a-4e8f-b7dc-ac1f1f87052c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784acbe8-03eb-4059-be9e-b0e75c6021ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd9945b4-b936-42f8-bfe9-a03906b063c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978ba841-9b0d-47dd-bc37-b860d8c9d762",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa17e092-5e82-487e-9b2f-d80fd4877632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d04da9-a0ea-41cd-8802-8e458a4b2ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9357bffa-5532-4d56-98e5-cf310ff4d459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9fdb0cd-3f61-444b-9224-e3e9b504e676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acb71d1-5c0b-4b5f-84f9-435a9ec9b882",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cb349d-889a-4959-959e-6a7eb44e4ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b427dd-423d-46cc-b23d-346addcf343c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6989eed9-bb66-486d-bbf1-9d354d695e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7361055-f131-4c6b-9198-4a4746f0fac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683142f4-946b-4c58-a068-3bb5bbd3fc59",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad1fce9-7267-4dc4-aeb1-ba795b39509f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8b1dd9-e912-4822-96ca-393a1a943362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484dea2a-5911-415d-af47-caa9eb960ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "48d9837a-9952-4490-8634-ccce1827d274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13cab697-5882-4e5d-97de-e49d1660657e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eef2c87-a297-4174-99ed-c1150e4ffdaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741c9215-2319-4b85-b5e1-2d8b0e319d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f981f17c-d7fa-4cb2-a58f-5f81718e8a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf6cd78-081d-4de3-b0d8-4fc83dea0798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a8239d-4273-4821-8472-0506ff5a73f6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9deb6733-154d-44cc-8e6a-fb4e0c6d1653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5793792-e35c-40c0-a29f-06c4b8a21ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2cabb1-a92d-4bfb-aea8-3e0a9aa6b6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9a8b48-3c76-4e0e-a33a-0c2794770bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f5325f-c566-438d-8000-cc0d26c57f09",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220eacf5-a8a2-41fd-858b-870d091df3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eae23f1f-f782-401a-8249-7f42737fd9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7308a8b0-3c2b-4a09-8230-61718aa908c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db6f6fec-8797-4c4d-87fb-dc0c90c6bf75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b64d08-767b-4552-82b3-9e18aaee33f0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f8e554-49c6-422d-8deb-43eda734a20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1518adb2-0fdd-4daf-883f-804385812e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61ca05c-1eb9-461a-8a2a-24584665fa8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a449ada8-8773-419c-9247-abe5eee10200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3422e5f-0ef2-447b-8a6c-6c89c2e71335",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d57821-8e2e-453f-8ae4-e585aad048e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da2474ce-aec1-4797-a4a7-a3f6536259a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc85517b-7936-4798-b963-ca80f1d87119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9076b72f-1a82-4abe-b38c-1bab1c09a8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69a2d41-908c-40b3-a8ab-82f85ce80db2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46b0690-296a-49b2-814e-2bf3b4b7f048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e27fbf-6bc8-4e2e-9c3f-a482acc34c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfdf8240-7d0d-4f6a-93b4-36f7a7dc7376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb25ace-15e0-407a-972d-050e4beacb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f93772-2df6-4a60-924b-d32d059ec0c7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95675eff-9096-4909-b5ce-b47312c4f202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25bd6908-6954-43a5-a419-b05232a7c754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff66a1e-c9b8-4876-a25d-94099a42aa63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a09865c0-0565-4b72-85f5-5fc4fdb751c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518f2846-8589-45ae-bd9d-9edfdf09544f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899295b5-c6e0-48f9-84b1-8646706c3fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf84ac77-cbbd-49b9-89e3-f0d765a1b59f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc464ab3-b751-48d7-a527-59433b7f1a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2efd3cc5-6b38-4f97-8610-9499b537270e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dc2cc2-c0bc-4705-9d25-a5160d8bb079",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c389ad73-cd63-45fd-95db-d813d24f8d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09a2e33-37ea-4ae4-8815-c77e0c2b42bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a881aa0-526d-4840-b453-f0c8364cd32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd6d22b-0ee4-4796-942e-7d8e339fe48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d35d8d-2918-4bb7-9925-eb0b3422e5fa",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57ed358-f7b3-416c-950f-d42750ae31bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e70bec0-fcb4-483f-94fe-5f0f8af69464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cae0aae-7a4c-407b-abe5-07b84e4cb0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5a7c35-217a-4016-99db-a70f3e1ec35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60738d51-6e52-4886-af18-1664ce4ffcda",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d91889-4125-453c-b1d3-ad78ed126066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121eaf4f-4c8f-4edf-b02b-3689fb5bf3e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cda2bd6-3426-466b-a426-d0f9930f81d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63450d3f-52b0-478b-8254-0d20c102665a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a115316-bb81-4f76-acd2-63f7a389ca6c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc21b57-a3a3-4583-96b3-b7238c2f80f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ea1820-2842-49b2-be58-2cc373703b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3024c6-f59f-4ef1-9166-cdd83d69948b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe09b7ef-12f1-4ff9-9892-8008a5f5175c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46e6a68-e892-4267-8c8e-bff92c080c9f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e579eebb-f197-4764-9800-0c3936faaea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1b8fa62-3e28-4cca-981c-60b81d2214c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fd1880-a6cd-4318-872d-51205df2b5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37394baf-cd3e-404d-9f12-efdbf7158685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7340b887-609e-4668-b524-af5d2f66facd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab6b91b-f3e1-4636-a5be-df5d248f48e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e05a7c78-09d5-4e94-a463-ff1f1640e7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d805aaf-2410-43b2-b003-30b3a789565c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f8240ce-a689-45b1-8b90-b838b3641fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed932f6f-1a76-4a10-b2df-67cc11def487",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85018fa3-f521-4382-94fa-da598d95a6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872b73e3-a287-462f-8a37-56ca084a93e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830a5a0c-3c5b-47ed-832f-999dbbdc4414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30a9d3ea-bdc1-4d68-a73f-b72437f39a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251f9336-6109-4298-bd37-9575b4befe4e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7dea81d-c42e-4c24-92e4-e7ede7980ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c05e70f9-3bc8-4f29-9ca6-e66b0072fb10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a8c120-9708-48c3-970e-e80115b4779f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75efa1e1-be1d-480b-8504-4bd77fc439c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcfc659c-754b-4fab-bd21-3e5a5fa40dc7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1514a966-b4b9-47e3-bc45-90ac071d48c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50db6538-8679-4f15-8280-b6cf0fd4912c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436e5325-f627-4ba0-9155-c58d10a9187e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "550c18c1-4546-4d6b-9e69-a837e2f73578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843c615d-1833-4e7c-a714-9a7f63f18d88",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5baf6549-b973-4c4d-8728-c8cd39c3ef90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9033815a-f50b-4ce7-98cc-2a91b311568e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a716a0e-0595-48de-8872-5e0d93c27316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4adf8c66-1f00-48c7-9afe-53296abed44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b858f8d-3b6a-4485-bf25-15692d99e5a5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d238fb1-96b8-47d7-9dec-8c195037283f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207631ba-4932-49c3-8a7e-74d6a16ec612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba45695a-107c-418f-b1ab-6c05efe4b57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01857d88-35f7-4dcc-9ded-5d3c040f0524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a198e1-17bc-4c2a-b18d-8c33746a0090",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1e8d68-a5c3-4a57-9dbf-9418f4fd9696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de4362c4-2987-4d39-b12d-6f9186781577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f695f01-6b53-404e-a9e8-903a5148ab13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "051165a9-b9c7-4d93-8cd2-414727517a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c597f5-80f7-4aaf-b075-0f98ff249cb0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "209f1901-f982-4e65-a0f1-c769f25d4a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55623ab4-5550-4543-9cc5-bea8c552d63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b140af-2b38-4428-ad49-c5aeb7c04122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7405d90a-be82-4711-9fe9-82c4d534e217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b943adc5-5685-4d96-b487-7a7ed3ca126f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab86c270-106d-46f0-b679-aea2a5a87402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1936b772-66db-4d55-9214-b7b4fb84dbfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d892d0f-2c35-4365-8e1c-eeaeacdf111a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "98cc7a7b-0b3c-4abe-ad47-4ea6c3a050e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694a8f28-1a52-4827-9419-e818c50f8168",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc274d7-7a87-4efe-9189-8be25e08b53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4cd227-02f4-4ec2-a013-b83add3ace56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35ac570-fbb8-4bb4-b4b3-e87f0e4ca579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a699571-17d9-429f-9b69-71ee4c5678ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe4598a-2ea7-4332-9a4b-629e8a37fda3",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33b0ba4-1763-4926-8ac0-f273d91f7777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a84235b-11c4-43dd-b246-f46ac9981ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddce2aff-4c59-4409-a79a-4d191d0f49d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bec2e93d-af31-4a5d-929b-212ad7143865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4356cc45-1d09-47fd-afc8-4defb96c5f57",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89ab1fb-2b86-4c8d-8fdf-675f7222da76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402a19bd-f543-41d1-896c-af53970a80bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00544def-b428-4f04-863f-231db3aa518a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4584c096-3350-40ed-a812-58fca12f201f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bfb6de-dbfc-4cc8-b29c-f74d2b29fc79",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb711de-6fa4-44d4-9f21-4e8b5c2bae69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c57376-17b7-46d3-98f5-e943f4f02fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45040141-1ce2-4752-abfe-b8db0d15e755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb1a2c68-470e-4a78-bc69-9b1c655843c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848648ce-4804-42fa-bf57-89de055aad92",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cf3bc9-63eb-4be5-8acf-70397beb1763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b1c1cdc-7862-4d20-a46b-073e7e71805e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3fe3723-afac-48db-a16b-757a23305663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac3378a-cf5d-4c84-b34b-f887a6d5743c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ce471d-c6c6-4876-8ae6-4e05e1d44899",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfee091-56c8-49f7-a18e-00743f92ad7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d29658b-ab99-488d-ab73-f7275e41e40d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64e4ec5-54bc-43e3-979d-3420fa9aeed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce471565-4684-4bc3-9b8e-bfc6a7a356b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c97999-7ae4-4ab5-af21-f5cd2f432f27",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03ae41b-1478-40b6-8f0a-fb91413af4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e61b3fa-00e3-443b-a880-2629101c9280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1441852-c8ed-4b89-8f9b-3bea5ce1fb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88ba1130-3a73-4192-a04e-b44908b3a86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c088e02-b403-41f6-b364-e6a70ae1e81c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1326b0a4-2080-47dd-9ef4-7549bcc61745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5acd3b5-9de6-4258-9046-bfb8724cff95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de25e5b6-b038-459f-ba86-2bc53d1b8a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9042850c-8543-4c19-b7b5-b881d4de2822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c562e81-0053-4d16-a43b-8c89f3af6e6f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ea1874-8621-469f-9dcd-6a3e34b633c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1cfa9b-29c8-4352-ad53-a103324e4b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de74e8fd-a8ba-4086-81a2-e509fd1a642c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5914904-6521-4859-aef0-ca40e64238da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccc9df4-1a64-4cc3-8f17-1bded30b3ae4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d10a9f-b7fa-40d5-857a-9408c0d82767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8418dcb-3e5e-48ff-9df6-b5f1fc443d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef69511-7f38-433f-aac2-d418d323435c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02182702-b918-4f23-a66b-c3f3089b425a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb09e866-d755-4166-bf4c-46e8f77fe36b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83bc666-f368-4945-b980-fd39d2032b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a5c64b-95d9-43ce-9d6d-1a55578c3d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34f24e8-a45e-4b73-b308-d3265118f54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9c782b-dc41-4311-ac93-93a8ea503499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8bd792-f4eb-4d16-9663-1a2c1f129e83",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c6f916-ac4d-43d9-b97f-b7fddf24b5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385a8476-22a2-4375-b95c-9c1f4da5a022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8a5dfe-b4d2-45f6-8fec-8d4ff69d843a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a49e2c-0c6c-44ac-bf66-c5a72b896bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a441ea-9aa8-46c2-b23d-ef2ab8458242",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1162c1c3-1239-4486-903c-d244302ebcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e220170a-df18-4e2a-b5a6-ef29cbb30cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6e40b4-94d6-4b60-98c1-c34141e922a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "884f00f3-0398-4493-bec0-bae2f4dad83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddb6f91-6c3d-4979-973f-3b49a1ecdadf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062810a3-209d-4cb3-9573-bb1aeeaf47c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2ae6e4-0bb7-47c1-af1a-574a939ad3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01038a55-a15c-4965-b27c-c4968572ec2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "849d854d-8282-4de5-afaf-2d3c54bc5c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf934ae-ba81-437d-aaff-c360ce8d5f67",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5de369-8d05-43f9-adfb-1c63d4ac6a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31fecc9d-a855-44a4-b139-cb6d55ba7964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eaa4399-7e66-4833-86a2-345fc34685c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "72c69570-3e80-494e-bdee-7609eea0caa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9061e6-e73a-4853-ae4c-00329bc85a28",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523881bc-ff19-4ddd-8e24-b8e7288cee51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815b9ec4-0e80-48d4-be16-b26ae1ec9146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684ffafb-df41-4323-b0cb-8227a22c0905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe61cef-1dbb-40a2-a177-c55d8bb79ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3cc528b-5631-4d2c-a30b-a900fd1e0acd",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b38bf75-5a58-47a4-88b9-a66a8ceedf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7056e3eb-ca3b-4ade-b3ce-d69529e97c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f890179-3882-441d-8ee2-42acf41496d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06f1f2ce-0311-4b7e-bcf0-028452304937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bd66cc-5716-4bf9-b88e-a5f027abce07",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b98a1b-52a1-4b02-8a81-eec8f592868e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56de9fb9-cb89-4786-84d1-b75fe584969f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b719d05-a46e-4613-b795-a03f7ee53d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "87e2e691-9bae-4811-bf8c-a6f5ac7003ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb681bb0-4493-4aec-9cd6-dc289b58b375",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7834e2b8-a93f-4b76-b258-264f71b3f857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0210b3e3-73ae-4d71-84f5-685c8583e1c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91323ce6-fa95-4feb-a494-505026758b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "71315d5e-1a41-4b65-b992-a68a63e5d4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f7840b-ae0b-40a6-9b08-9cf9e0490ef0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e19d30-99db-48ea-8b55-677579012ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "265ad76d-e389-41d3-8286-ae691e695722"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4cab5f-73dc-4313-8ef0-470ee227c015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "87c2f8a4-7e63-4f65-96db-18578f9158d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640e3be5-e60d-4e93-a137-33a9dee9ab1b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4e2aef-295d-4274-b686-0628aba38873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d803def1-87f2-4fb5-bc40-ca37daf08a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c119b7-89e0-4486-9072-09e3c80da8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5df1928-56e8-461c-a19c-568bb7518db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7a5052-cee6-4e3a-9739-2e4475d32b63",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05760d4a-180e-4bea-8bf6-04ab0372f62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf412eba-9e85-47d4-abc8-f2e051f95b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3bf0ff-b27e-467a-acfb-fc367cd654bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f7a8bb0-dae3-46e2-b249-5d596a7192a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d752847-a8b4-4514-a293-8b2d8717bea7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb763d6f-d7f2-4e88-bc21-fd4069d97918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0841f84f-c6c9-4c19-9956-b6c0e57400c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cdcca8-8fbb-4508-bfef-27eaa7bef06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bc098f-ebfd-4bc0-9037-3f5160f2b754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4e5af6-0366-479d-afeb-76e34ab4529e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ead3787-1a0d-465d-9ed2-eea1e1846736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1027dc0d-41f6-4535-8227-b28f73e6297b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168df484-cec2-4223-bc6e-9e00c4181440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4ec80b-612d-4fac-a8b1-9fd296345e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02e0e09-9cac-4c08-907d-2d11eb1ee2c3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdcdad0-5403-4b11-b481-85f756b185a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3433afd6-6fd3-4d96-ae63-9afe6dee8f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33eff10-c33a-458e-a0dd-4a2cb3009ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56a1fee4-f30b-4cfa-a908-bb0f5b4b02e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046cee1d-b316-4ae6-940a-752f796ad61c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdea29df-de4b-4804-9ddc-af48b261c625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdcb674d-9117-4515-97d1-4d02f8937957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3793fde9-2c34-4130-8984-dd303119c3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb188db1-d6c5-4d47-b46f-4e2fc31d395d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be71ecb-7e39-4a93-85f4-1ed65781901d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7c8d45-4e80-4872-b46e-92dc61cb8a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b2216b-9668-40f6-8613-c4c9bced9da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77740ca9-d6b4-4f9f-93aa-1750ef41accc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8dd1dfbc-4e9f-4e89-9d52-7368b3939ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9250bdd8-ef6a-4bc5-8d3d-4312e827e5c2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b44c93-4bf7-451e-bf84-5d3ab87f003e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44aaf540-4a4a-4090-b6b6-67ef0acff85a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a89824a-3976-44fd-8e02-f25b3fd44024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e807fba1-e368-4432-9464-f0d073750d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc2fde6-aee7-4412-bdbb-ecd12a49f047",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612fa474-a716-45e6-86b4-924ff53ee193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84192bf9-7d21-4705-af50-61ba790d066d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb250780-eb44-4a89-80d8-b1929734919e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2da5ef55-47b5-4d29-a5de-e35f01a36b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e071714e-972b-40fa-a04b-439989bdc1d8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3945c614-513a-49e9-90a9-6a48cefe0c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8052f907-8714-4fd8-8355-b0f248beb8de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71f44b2-5751-4659-9f0a-4ba7d999920c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "889b3589-c28f-4078-993d-3abde04a0a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7bada5-810a-47ec-95a6-68a76eed3909",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c2ab3e-03cb-403e-9d74-3fb5924741d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc80b47-fe3e-46b5-ad34-a4de0bd2625c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7e0ee7-2e52-45be-a818-b3469411a5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73a78def-d411-4d38-8884-8abfe9f5a0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717d766d-fcda-4521-b45f-31289fa0f816",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f703f2-8cd3-4aa8-99cc-a38c70eb71cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75f4929-189d-4b7c-be19-4ea20f115cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0436df32-5f50-4abf-83f2-b6b336ef3269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "732ebe51-f9ae-4292-9d29-e0ba3365bc11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a858d588-1bd5-4d7a-8f3c-4c122c74acff",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b96d49-aed5-43f1-ba49-85e88a2da64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f83d0e-76ac-4975-ac8c-eeadaea25f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd3f976-e815-4f90-a95c-adb777a3be43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c66c2a73-13cc-4deb-aa67-0fba294d143c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23aa1d1-7358-4460-9251-0f21c3aa6b9d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ccb9e0-ba5d-4918-99fe-1813c0fd402c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75631023-9003-467a-b34a-a3b08b257b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511cd3a2-ad14-47fa-afcd-e86b3475cedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d7235e5e-cecf-4772-a61c-05144d49204f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c595264e-cb8b-4be5-bf23-1112798bd8b9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26ba4b2-2709-4ad2-b5a1-38ed9af4c236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c74c4bbe-9624-4b5c-95a6-e452029b712b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc0bf47-9ca4-468a-9526-dfa5227de81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aebfc220-c95a-4d39-b91d-cb7fa0212acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59dede18-6d1c-4375-a0a6-2700ed7b56a8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2d8578-dad4-4758-8e7d-dbd9c8685693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "123960b0-9299-45d5-b583-c9d9dbde0b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18946fe-02b6-47dc-8675-43989974ff3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56434c31-0a83-4192-a336-ae703f6b6304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0732fad0-5eb4-4b9a-a5c4-001195e879d8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7870e0-2c6a-49b8-b605-6d7a44a00461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077373e3-0130-470b-aa73-f448e291ec16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee98e72-160c-450b-b3b2-7af05262caba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "540ff886-ed06-4d2f-a4ee-fd654ac7afcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bc648b-7796-478d-80c8-85f813b4ad3d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d594d8-e11d-4e38-a655-89af17c93402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5142ea-5d77-4151-85c2-3e58294dadfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a6fb29-0780-4bfa-b1b4-923bf0d5bfb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "279e19c3-b4f2-4b7c-9855-c99beb4e3f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d3e462-280d-44fa-a71c-b1bd6f51fd76",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd945f07-23e3-45f5-83f0-4d4d825802c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3220e0ba-9eae-4331-b7d6-1082d5013fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38aabeab-c173-4b73-bf28-f78dfbccf606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "666bd3f0-2554-4961-b9d1-369701cb40a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea89117-ad0e-41f9-b5f1-33484b67aaaf",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d81ceb-37e0-4f84-8fb3-d091d9faa0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42038dbf-002e-4d02-a8d6-a4c7e66ab4e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac923f84-97b1-4a03-a56f-0d267d28c09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59cfe0e6-790c-4dfe-af87-0ce289846b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decad837-df54-4df4-8a05-d633a03438f4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5890e9cb-1014-4054-ba0b-214a75919d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1deef06-dbd8-4c1a-a8ae-9a30fa54b265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4d7821-1bbb-4e66-938d-e8541a9e33a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c493d487-93c0-43fe-b65f-ff253cf0239e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76611612-cfb5-476a-96c6-32128ea8b56d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff635f3f-7893-4d7a-b7fb-2f145647e78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf21866-6e7d-4f96-9fe0-f0c2e0777b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739e99b1-a7eb-4ee6-b6a4-33c97570fee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03b02748-b5cf-4832-9736-acc239293881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53acdd05-2d77-43a4-bba9-be33d67f27b3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9a6353-8e8b-4f9c-bc6e-1dffb20ed116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769bc494-6baf-4f77-bc64-4fa0a0ab0877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc243cab-11da-465d-986d-6f1815bb8083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0216694-c789-4dce-864a-f364e9c00093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2c5627-b9ee-4473-ba86-3a96b9de6805",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd94af9-9948-4428-9e49-9f46579d034f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7f5219-b8f0-45d7-bbd7-82362c70fe2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4012cc-3289-47b7-9a4b-1f5bb88d4627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "129071ae-0235-4bf4-a3b4-10f18d7aaf41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fa2c3a-5309-44a1-b2b6-a4d397322e66",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046ce241-f55e-412e-8b6c-0b12f5fb94ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e793ef-897f-4551-b6f3-3700a7cd7b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0d40df-7adb-4935-8e39-939010555d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a489b7ed-3e9b-48c7-8062-34c12805397a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9751acc-b9ae-4a24-acfc-bd3a2b9ebd2b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342f6e19-a294-4384-9675-3b22dc81d7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785c92ea-9b53-432a-9250-5a5769d66d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ae850e-afc5-4c0b-979e-fe4b8023845f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe25757-b243-4965-b163-f116ba895801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9b584b-8113-4bcf-96eb-f25b9abbcb09",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c6235f-dffa-4f27-94c5-8cc975d8c703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4efbb0e9-41df-43d8-8748-7a82998761d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c365741-7e7d-4f0b-a36e-ccdb09ddb00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcd907db-d3ab-4221-bd18-126f3b9d380a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407ff89b-33cd-4444-9040-81ac794513e5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13f7b25-af9d-4dde-9ded-17afb77479de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3640fc38-c47d-4866-b026-715a37eda7d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ed366a-088e-4b24-b129-aa72b424d760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "db0d488a-bf72-40b5-a9b2-72efdc90dc9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9840d160-d5ab-431e-86e8-f13fee7b96d9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c05705c-c370-47e0-8104-c53fb1df3c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c407859b-cbe8-4449-ac28-04ca499a2543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0d7185-fe33-4d33-9422-b244834f7057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8862ab5f-2e56-4d33-a71e-2e4005d917b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ee8d1f-a858-449d-86c8-ba4e08ab7c95",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ae30db-314c-4d4e-bf62-736d08fee2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8029e33-a915-45e9-9fb8-f660bdc3c5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63928f21-8fbd-4df4-9d86-56c8fbc2debc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "11c9bcd7-a179-4ada-bb85-51772db0e2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52dba7c0-ddcd-4310-a7c4-5dcffcc052ef",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04670bcf-8449-4cdc-ba7f-b19fbb834c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d3cfd5-b015-463c-85f4-ff943c632226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4f874a-3a71-4372-86f3-4faf907fe696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a6ce01d-976b-4663-9def-562952b18d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8d4aad-2b36-4185-b94b-4e8eaad02b99",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88552dae-9e29-42f6-a523-76be11fe208d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "754c89d8-84e7-4634-976d-53c800da6fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae60f64-bafb-4678-bca1-d05ddcffcab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dde43fd-f17a-4b3c-bf16-eaaec90dcf9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fc550bed-ae56-4db1-a38f-0cfacadecdb9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d2e4a79-6f6c-47e8-b30a-118513500da1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2016f620-f288-4b29-8d12-2dd62e2d782b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05a171ec-daf1-4978-91bb-a2e68b2dd25e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9c1e98-37fe-413a-b68d-4747f4787581",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "27ca035f-5a1d-48ff-983e-55d1b945fc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cddbf48-f9c9-4ed4-bfc3-40a304aee1e0",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965a27be-e835-41cb-95d5-0206afe06c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7af31b77-245a-4e42-ae89-f58d32b46860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea08bc2-f211-465c-8018-3b0b53dfd986",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "fb4069c0-58d1-43f8-a43d-842134979667"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbabc8de-2f33-41a9-a1a8-8ecafc7b7109",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3bfa528-89c9-4704-918f-06584f591a15"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c25e40b7-ea2a-45e6-8ccf-35d7092e19b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5bd1c8f-62f9-442c-8391-4a807d80aae9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c49e1e68-7f97-47f2-804f-80befa14956e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dfa0d940-9c88-4e5d-8c13-543c52d1728f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6dcf44e9-e266-4319-9429-4eda8f872103",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4d399581-5192-4b63-96f1-5d4bf8881a45"
                }
              }
            ]
          },
          {
            "id": "d392c2d7-6466-4561-af5e-a94165d4f47d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d78c2e86-4637-48a9-b3cc-15aa1748a7fb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd44cc0a-9f60-4570-b69e-d093bd62111d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7433f866-cac7-4cc1-824f-823532d9b16a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9d464b0-59b3-46d3-9013-c1d4733c658e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2b788c5c-592f-4402-85ff-e97a413630f7"
                    }
                  }
                ]
              },
              {
                "id": "b424f377-ec20-4370-a87c-91b1daac1367",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "763cafd9-cab0-4a70-9369-b564c99f78c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "44263b2f-6173-44e4-b211-7adff94f703e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b53a2e20-d291-4190-8937-615cb47160a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "66206235-6317-477f-bc45-2ff2dd8e35b5"
                    }
                  }
                ]
              },
              {
                "id": "076d1980-13d3-40f2-8c8d-1950f2e304e0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67363d4c-50fe-42ea-bb03-c09e99deecf2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7250dae9-5055-4e67-a502-fd2553c1a9aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa6a6bac-5588-4a50-94ec-8faf9acf4684",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "03615926-d2b7-4f24-b42d-3cc998c377c8"
                    }
                  }
                ]
              },
              {
                "id": "3ee12d0e-8368-478b-a18a-e3c72d6c5b00",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54680c26-a1a4-41c5-8908-e52c77ad914f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c7145d8-66ef-4f5d-870a-0f84c5dd8763"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c39050e-d072-4662-8492-35b811f127fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d43dc4cd-b266-475c-9bc8-83c4c634ddf0"
                    }
                  }
                ]
              },
              {
                "id": "a606917c-caa2-4a59-9cf8-4d578a321321",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ba2e33e-e46e-4869-8fdb-c0d4e857325f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5e3aff31-2b1c-4fcc-9575-21227b07689d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30092c6d-d011-4f0a-ae07-d66bf1e9c098",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5e097874-bf7c-46bb-af1d-d501b9375e0c"
                    }
                  }
                ]
              },
              {
                "id": "41d7af80-8d2d-4f1e-9cef-8a472c308e15",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7a80fb0-dce6-4da4-8a6a-6e2ecbf349e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02725713-db32-479f-ab50-c78ff083fe3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a78670c9-c598-4723-b45e-3509a5500f98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "849bc963-4b7b-4dfe-ad02-fc59b8e3f161"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a5b7a7e-f9a7-473d-8871-fac53a8f1384",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9caf121e-bb89-46c3-97b7-1234f2dca88f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9ef772cd-aa05-4615-a0fa-e75ed4625d94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "085a1608-a131-45dd-8435-d4af5fccbb41"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "087c7960-180e-47b9-b450-339f381c16ca",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "098be759-bd76-4c36-9283-dcbd7caf174b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6efa5d6a-7ad2-478c-90e7-7aa2aa1394e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa4854f9-7a83-42e4-b105-2673125fe572"
            }
          }
        ]
      },
      {
        "id": "fba69814-6067-458e-b0a1-66efc2459615",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1b259003-3491-475a-9f24-d7b744982715",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3d481408-ef2b-4a98-9e2c-f2676c9ec4ad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f83dfc28-f12d-40b7-b954-6b9f2d766775",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d12e16-c3b8-4ce6-960a-05ba0482f1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8b8e5b-da10-4204-88e6-bbec949b8eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b95c1f9-382b-42c7-bd1e-766e80e00f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee31e25e-ece4-4ff1-b548-331ccd3e68e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8557be7-da8a-4901-abd4-29e44f9f1ba8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e6e8d2-f522-4384-b30c-f0030dfea264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b432f4-82ce-432c-aeb9-9d1cf190e63d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d791766e-d7f6-4a1e-a233-3272e7854c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d46e4605-4102-4cac-9159-435d119ea761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fbcc40-2454-4952-a730-db20fce8b6c9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "155288cb-a9c7-484a-ac67-0fcfae9f393b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a13b9a-8bda-4a6d-b337-e4c1480795cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc966d3-dcb3-4a43-9c39-696d879b2961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c8613a1-d865-4f01-a3b8-8c4372d3ae35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46e02f4-4097-4b2d-99c0-f45c46261fc7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5a7109-abac-4dd5-94ae-7c22f9ae6eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec35e31-dab5-4168-ab2d-a2f1b86a9ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a365004-2486-4c03-9240-97b5ebd276ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ea8a401-7226-4348-8c7e-20d1cbb0415e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58cf2a0-6000-4173-aeb6-f15945f55468",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196b1c67-37ed-4f06-9203-0b3ae5c52527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0138342-d0d6-429d-8c29-f346525b05b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5012f312-0aba-4f28-bc4f-49e443373c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fca65ae1-69bd-4276-8e0c-2bde2f546546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2437889-19e9-4070-9763-01d63b640132",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5c7857-1a55-4feb-90f4-6f195d6aece9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bbbcb15-cd82-47a4-8a61-c87dea080dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e07969f-00c4-4dfd-b28f-c3ecddad375a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf8e7ee-f7f3-4af7-8fd9-10f680998442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4494e68-fd46-4a3a-b2df-98544316a76b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ce35a2-3648-452d-9c78-2e4c3fbb9afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e2dae1-2ac6-4a66-b8db-942745e992e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2709aee7-2c3a-4791-8be3-250604971299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b14d5f9f-031b-46cd-9080-9eb7e758bf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f64937-e103-40e1-abb4-ca87d193043e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3995c6fa-77f1-4dd5-b1c1-c9fa008f792c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51b9890-5fb1-41a5-9b29-cb972ebf9323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a404da5-a5b2-4b61-94a1-649195973f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa779f5-0adc-4411-9044-2f48089ba452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e044af55-180a-413f-a683-ce5bcc377b34",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e32291-1126-4329-bc07-ff6d8e703ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5acf19-3540-4d7e-8ef5-1bfd1042afcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361c5e0f-778a-4f8f-bcb0-2228ebc49f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2bfcb58-133a-4487-a782-a065686318f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5356a418-0ff8-4a6c-b401-cf53766bf680",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3519797e-ea78-4960-ad32-8be91316e038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2da9dbc8-7acf-47e3-b9a7-59a635e8c835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b9eb10-3d5f-4640-ad63-4518728d5e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f09c14dd-cead-4f7e-800a-bf50069fa2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "322b9d65-0a87-434c-8ba2-663953c641f9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dbb1a2-534d-4a46-8620-b222407d5402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3631be0-8c1b-4887-94af-e70a119a7704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf50201-f0ca-446c-96ac-1cf02b0083be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c06a08fb-0ace-4319-b22a-9fa185f993b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934c04c2-2e93-4956-9c0e-37531f9d1010",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48af53f9-c4f9-4425-ac59-560a0f107ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3d9c8a-87c1-44be-81e8-3a42d39c44f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccf80de-4dbe-487e-8eec-8f6ec7b0018d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "434ee7d3-3f6d-48dc-84aa-5446c90ca40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67979601-6023-4339-ab8c-86849cc0b961",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e2adae-cda7-443f-9cdc-ee9152d2e1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de06d0c0-982a-4962-9e13-22434aad6acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00b4127-10c7-4506-9cb8-0cd425c0438e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "863988de-2762-4c9f-9601-9d5c9bab63a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2099e997-098b-49aa-bedf-2e173393dd83",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e8bd79-03b4-4a23-a286-fbb12e61388f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d451456-899a-45bc-8122-70f22b5001ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769f4a9b-75d8-4c35-860f-919d37dce338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "82f6365c-7456-4806-a30f-943746aabefe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5fb991-192e-46eb-afb3-7deb488a75de",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166c0f4e-bca8-4d9f-816b-d8c5e5fce46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e92223-052c-4926-b64f-d8d7105310e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20bbaf6-25ea-441a-b5d3-c5165ac1fa0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d2b09de-bd6c-4f03-9732-6720cadcb0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae41b83-2204-472c-9c85-0abd7479ad0e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e97613-cb5a-4541-b705-f3535a2ab2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f280225-7a3e-4fbe-bfa3-bee1c911777b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419d71e8-f730-4c5f-a7f2-85c96ad7ce1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ef1d8b0-32b6-4258-b6e6-2b5d9ebc0321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99933ff7-bf4c-4090-a0ab-cd1a06fdb870",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173d4a9d-3cc7-45e2-9608-cf71d6ae3ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f91578-e982-457c-8150-8c6bd2b35f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3caec7cd-cedc-4619-a5fd-b98028421452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "91c1e4a2-088c-45dc-9c07-49457cdf371d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7966eda6-0859-422f-9201-482b75d5cdc1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d4c362-d2f9-43d7-b9eb-ee2d9589bd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d21b14-6872-47ad-9362-7d7590681303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60a52a2-2518-4178-b283-edc334ae7aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "56f08fb9-f873-4a6f-ab46-c459e69fd919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45284340-ff97-447a-a36f-6248ef634cf5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82086d93-f50c-4fd7-b5e7-bb4730f3cdb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2d7556-c249-4ad6-a6f7-53c7fce27547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fdb0d0-e122-4194-81c3-9bed8eab5e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "619e7ff0-3216-4236-92c2-31345ad2cf18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af33f403-f8e4-47c0-bdc7-e0480625f6d5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a2f4ee-c675-4245-892a-745a96b300e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e281d3e-893e-42b8-a932-225dcdeafe1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0a5f0a-4e3f-4a03-a6f9-b4aa21f9d4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5380465b-50fe-4d55-8093-eb758962e504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bafa231-8752-4563-b3e3-cd659c0af96e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b495349b-7560-41d8-bca3-d2d2ae539174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f61b99d-844e-431b-ba71-092c601a75c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f2e235-a7e1-404d-9b0c-91c18f5f3d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdea6102-7817-44d4-b77e-f62171d7bda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a045f4-785b-435e-ad3f-96bc9ef21083",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa8bd6b-71a8-43e1-ab02-fab2ecd37ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a80907-ea3a-4de5-833b-3420ed25a4ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b202fb38-da0c-4442-a752-d2f452593351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc20f7c-bc54-4376-9e11-9f0515f9e9f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588dad7f-e966-4bcc-9a8a-8166beb2e461",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0fc2f0-1d6a-400c-a9ab-a93df0af77bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e6edc1-b201-4d9c-a649-a2b2b5fdb724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf69dcc7-ee5f-4005-9029-15f651387fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e6a3115-3b4d-4976-89e5-84e15fe7f2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16bc7b2a-549e-4778-9be4-deec7bf1d7c7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7133fa67-3acb-4e7e-a55c-ff796488f396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9213f1ea-b9ee-4a6c-8b8a-e7b925f766db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ba262e-bd0f-4c02-92a8-92ba72a9e7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e83c8d1f-f27f-46cb-82c1-dedb2ddb140c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c620e3-967f-438b-af4c-eff8773b29a7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48680899-c36b-474c-a428-4987da73bace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db4ac9d-4192-4f1d-b005-798566c04d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4912bfac-956b-4485-825d-72e767a80c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0787e9b3-23c1-4a63-866c-ac3e317e69ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb4a76e-9c75-42c1-bb5f-4d8579295bed",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58f0e0d-cf1b-491e-b70e-9d6e63af5023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7b9a4b-4952-4369-9f23-a17c9c437da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2367e9-4655-4e51-817c-99cbb73468a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6353317-c4cf-4cd6-8b3d-c7dcc649dddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc2685c-8b2f-4074-900c-85e5dd09db70",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5545758-5c4a-4eeb-aa26-89c7ec0f3f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4999c7a-d86e-4bcc-a089-0c40991e3996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a491c0fd-c162-41be-b3c4-2138955ab401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07525ba9-e951-4923-aaa2-038a9877e131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e407a5a8-82a6-4e03-a780-96f0191a9c92",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b61981f-a581-4b18-81b3-140540b5f16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c536b2-0dcb-42db-89e7-ecbc80efb9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bc8032-8d55-4767-b7fe-93c9466f4930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba9eb7b-0bbd-42c8-914b-233673369205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5059dc79-4249-42a3-9dce-d33aecdcae99",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad77404c-46f6-422a-a8b1-199f6cd3fe4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ce2eb0-0a7b-4734-8d19-b9bb4c08aa1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4701d296-ce00-4c7c-96d4-8000fa7a2cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c949b65-b60a-4c7f-b939-2420d0579698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4350d7b-4819-4f57-a5d1-c08453bc4cb8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cf98f6-41d6-4a2c-a712-075fb56886cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e651dbe5-2178-4c8e-b29c-44fd2e0f3bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9155dd42-1559-4595-983d-22a61d8a1c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75abf957-3b44-4978-9d13-814172c2c580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e09b38-26f8-4fa9-9262-8a2a162e4a24",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16bf6fc6-446f-4851-94e8-c4afe0177874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10c655c-81a7-4855-a5b0-52e690472271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fdf8f9-f082-4072-b2eb-980d8bb363e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0a09ac-afbb-4c4f-a88f-56028c3e4e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfcced0-fba9-4ea7-8f8f-8ab199ee2492",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a508c133-dff1-477f-8492-ed53c389a784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb2741aa-4c3b-4992-8c3e-69b7469430b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d83511-d322-4472-9b81-78f72edf58c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f82ddfa-8ace-4419-99b3-29d43c554d70"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4ee8673f-7c2c-40ac-bd11-396dc04dcb4e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a9f9e98-6d1a-43be-9c4b-4fea12e11228",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2e339c-f151-4254-89bb-017c06024e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83799fd4-d640-4f35-9920-9ba84f1d4e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "510313e4-252e-4024-8a2a-202913327d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b239d694-eee2-4d1e-be3b-15ddee19adab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb90ef1-77fe-4301-96ba-084512e08f8d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bba132b-2ef3-4db3-8e40-e47c66945dfa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7138ea46-9d15-44e5-8744-24b054c92bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b266d4-2af7-4811-858e-2b702df85a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d49a0666-fb2b-4790-ba3c-096afe5745ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0391b5cb-2be6-42c2-a69e-138a554f5d49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e71b736-500a-4ac0-8ace-2cfaf793bd2e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8a0e995-98d0-4935-9adc-2a782ca3d5e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e64bb24c-f434-4b7f-958a-611080242093"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19d484c5-a0f3-4d87-82f6-81664e35ec6e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3e8e962c-0053-49a9-89b6-f5e7598e4b4c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a71710ff-bd9e-4522-b5d5-05cb7248a986",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "773ee43d-4c33-4959-be94-34cfbfc58291"
            }
          }
        ]
      },
      {
        "id": "6f305b20-63e3-410a-88aa-81a22b590328",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "042da77e-71f3-4360-b509-3ff61db8de3c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70cf8305-1a9e-4dfc-adf8-928463cb153f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5597fe84-2c3f-4688-a0dd-33adf91c63ec",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad0c42b-1db1-4a77-ac7b-0ad673ce7a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c5bd5e6-6522-4a88-be54-ddde4e856dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9102843e-00fc-497f-9699-a65b43f4a514",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb946c1-196d-444f-acdf-70b2cd5e9c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a85d5b-6203-4b08-b02e-98f36adc2dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43575c4c-71ea-4088-822b-e17dde2795fd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fa79db-5583-4ca4-bbc0-665a974a200d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196d37ec-8a17-45d2-908a-bf38d7de179c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9b19a3-353f-4747-acd7-70cc680b08f4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72af05bd-a1c6-4642-be60-d8c71d0e243c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0283d2f-8dca-4f86-a3f6-5a54dd8b369e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ce12ca-2926-484c-8033-cfafe8f003ae",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2d722e-4720-4ff8-90e1-cbf663c068e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d051c042-66e0-4995-8034-0796871fb21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11d33a6-1c0f-48cf-a3d3-8316ecf90e75",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f54894-74dd-4e42-9bf4-fa30d723564f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c298cf25-316b-4103-8e58-a28690733fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478e7f50-9cd7-46d6-8e79-daef908e658f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c47651-5ad2-492a-a582-25df7aa49db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b5bd58-cbf8-4dac-aca3-e59e2a4c0fa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa67c4e0-01fb-40f7-8502-6a6b76e699de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca176fb1-8dcd-491c-9cac-ba88c694dd88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b400c1-0915-47a8-8bbe-672e1cf7fef7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600b5815-2c11-47b1-8b6e-e24bbb47b0e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59eddffd-ce99-4ba8-be52-59d3a3ca365f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ef687f-554b-42e3-81d0-d9bbee2637ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a201094-2e19-4797-a251-46f28dafb47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daef2ded-b110-465c-8f18-cc1a5b0dc499",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3b253a-a168-4ac0-ae1f-128f958bc9bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a19bda11-b069-4611-ae4c-ab69cbf8c0d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e0089f-2252-4c4c-af53-0cdec354ed43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44292950-be30-40fa-a057-23260ddb79d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decee9a1-dd5c-4f1b-ab72-847c660390f4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676bca13-8d6f-4f10-8934-cc90c151c1ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4418c76e-b30b-4bb6-80f5-582d2a17abd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ffe7a0-f631-4418-9dad-a37a94a2fa28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389c4cbe-168f-4666-a328-2b5a154a9ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae5c49a-9a52-41f6-a2ff-fdc5ec02bf87",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78417307-2ead-43c4-8a0a-57cb3ad4bc2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "976966c6-e42c-4c89-86ac-1df4aa22955b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f018830-91e9-4d8a-b4fe-08a57aa62385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2dcc277-cec3-4361-b36f-db3602f8efdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19177de6-7c50-492a-9a2e-91db73d29f31",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6008241e-2389-4889-be89-16a85530bb3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c3f42c-857f-4e0c-81ff-ff648c836442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e622b6f5-0b0f-4c15-aa87-5a677104d7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d40db53-42d9-41a9-972a-4c55cb9220d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c90dbf8-236d-4a67-a287-51bde0a55cbe",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54275f13-0d9d-4a7c-880e-1a69f258fba4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c45ff667-5f4a-41d1-9306-cf328c468bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc14f33-8114-4312-af8a-e60bac8417e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4415aa-9619-471b-95ed-1f51cd8b7a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee0cd98-7ab2-4f10-aee4-dd626d1af632",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a4d4e2-53f6-4b9b-901b-a2b342a54e30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9326f29-91ea-462c-93ef-6550f5efb93d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555cea0e-a56c-430a-a610-b3f146eb4201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2c047a-3de5-44c6-bf05-6e60731a0869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42538fba-2838-44fb-a6c7-fedf3dd2f1d8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783281ba-ce3a-436b-aec5-187c046bd42d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5db9470f-68d0-46c2-bd85-44a33dc1fb74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956fe8dc-3475-4112-8daa-e3df29f6f668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e285bf0b-6181-4a54-8fce-77dee9f7e083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba7d69c-6202-4864-839a-c6e8bd49079e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6f8b6c-78c2-446d-8de3-bbb773f7ca3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6de6f69-671a-4f6b-9226-71be9585a064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3977d7ea-9ca7-4159-955a-0771b353d374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d2a1a2-818e-484e-b97d-6bb4a6271395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25bf0d8-5262-4305-938d-bed9e8934173",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af3e79f-04d8-4610-a686-197c6db67e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1eb04d7-040b-4d4e-85d7-054c7efee339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b755ebb-9c23-44b9-9f1c-f8b4bed6e5d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b6316af-1cb1-42e2-b1ce-b1ad6b8f1954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62aee6f6-7c47-4a98-9d2f-61f5ad8121c7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7e0287-82e4-4d81-b280-1e5584cd0328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e32fd40-d276-41dd-81b7-733b691923d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26b2d60-3bde-43a2-a3ce-b9d96cdf27ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22c32a52-c50a-4796-afd9-989a0e43a3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1aff981-e9c1-44e9-800d-33d66d74db4d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e85bd12-c758-43b8-a8e5-7d637fa7a336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a13e849-9c30-494a-ab62-318cf48f45bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da76d48-8c68-47b2-a48e-0edd4df2064e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d8eec0d-6f68-4883-9e36-2592c9eee674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09fe8312-61e4-4e4c-b57d-f11281725538",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e0f5db-41a1-4a38-b39f-c9f2a5050b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5747f61f-cb8c-4a05-8c02-cf774f5cfffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cd63a6-e92b-4bb8-ba84-97290503e43d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a40cc3-184d-4ec6-8369-96624dc4a492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64352efc-c2a4-42dd-8ee9-9ecdd7c38045",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d05849-7681-4f67-a28d-c3d5688c1434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8c0c1d-1f73-41b1-af63-e1f8d0c7be74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eddbcb1-7f47-4335-9608-a483f832890a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc3667b-1c55-4ecd-9787-8266a3a32986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d91ba5f-fd44-4ac5-8261-e70635d40865",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40430af-1166-4969-9d09-85dfe52df1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770e44cb-899c-41f3-a19c-6975322c5ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c337b974-2e1c-485c-8897-9544f2616f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618ad8d1-ca1d-481f-b0d1-17428849517c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b692981-9ad0-4ddc-bd8a-ca04550137db",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d74b35c-d8f3-4cb4-8112-fb09d3ea2698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4923f1-279e-4519-ac2d-a4107713ec8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8565e46c-aed2-4136-bfee-2055e532b4e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076e49d1-cead-45ad-80cc-cc0fe0039d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1f3f0f-8b7d-4588-8206-dbc465bebae3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5510abfb-3d52-43de-8df9-b0626f427643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c323d41-ad63-4a68-9862-d2d8c8bf87e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cbda9e-0652-4ba7-8ae1-5b4ded5c9b4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f306fbeb-e6f8-403a-b46e-8e42f5d15fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17af0eaa-1681-4f78-b807-c71cf94bfa2d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dff49f6-24c3-4414-be2e-f508d3dad830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "195036f1-d6bb-4be5-ba55-e4e06bbacbfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e067ad79-79e6-493d-8437-f5c2ab047ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4427c27-7f64-4b1e-a5e7-fb1b66d1bd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437d9874-1578-4c5e-b445-728e1504a436",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85dca82e-1cf3-4426-b6c9-9f7a074bdded",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b174903d-a84a-4721-9c55-16554fa6b42f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f03ffc3-7310-483d-b05c-5b0023e55e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a7cdb5-0874-4aef-945a-8608027e3827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b539c5-9e9e-49bc-8691-a8f0d9601c51",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf256be-2e9b-462a-a13f-17aebead5b8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "767816c9-e660-4356-880b-bc65c73b882a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa7a806-a56e-406f-875d-39777849af21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5dec69-1389-4e60-bd28-4c54c6d3dd05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff38110-1cca-4c97-b4eb-0f886bc9b201",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cba7b8e-4ad5-42a7-9aad-0ea739f04c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d854b2-5a11-4c12-be27-840f6c2fb7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "441df418-2f45-4e9c-a320-e74004d3a421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ce882d-77c5-478f-88a8-9a974a916499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4cadb8-75ff-4228-a54b-2c7b634c6cb3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93fe00ac-ef87-4606-8e68-1f15c936756f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25f22b8d-1f0f-47b9-8773-b8a365930f29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa47c61-1b51-4448-9488-921aabed5462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909d5159-610a-483b-8b38-035f2f960979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e13c64-e9a8-448b-9ef9-0a8c52b421a4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672eae2a-85d9-4c7e-8653-695a22e94b6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c854a774-c25b-4c01-95a3-01e037dc7c31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b4c4f1-d471-4f2d-ac93-fe8bffcc4da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46658bb-15a9-4400-93de-7b49becac165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07b6307-ac28-4ce1-af20-6bd1a4bbd332",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec49bbe8-b23e-4555-8957-1c1cb5876372",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d047004-08c1-40e8-8ecf-3b0a8f7c4d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46792d0d-7d12-4691-b6fa-99344d327f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44c57b7-97ff-4815-a236-f7101643a6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57f6733-69e8-4d43-858f-d0c01e8e484e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83e1cee-271e-46eb-b2dc-164d2f38cff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43bfdd2f-a8e0-4721-bebb-efc173180803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de57503-e10b-46a4-8664-34bf7254fb9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e5c31b-ee28-4bb0-b5fb-d460b0e52026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46be8240-3c10-4be2-9e33-f716add6bba6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856462c9-2162-42f5-b717-eec3b4949d9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2767b973-9b1f-4797-8da9-9fa53a1aa10d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cec6c57-c77e-498d-ab47-b330ce8a47ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98be8a5a-423e-42b6-bc48-5d888999b53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e9095f-ef88-4323-a5ab-0735fe3e3fbe",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05e63b8-9a26-4383-ad45-437eaeec69f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "834792db-2118-4379-be83-381d1f4f7c79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7a7b29-b960-479b-88b2-768955389d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce657eda-3193-4c6c-aebb-d4022937a5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554a16ae-4aeb-46ac-9b07-b4baf8c84921",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e450ed7-5e0c-440f-85f3-0268df635dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580f9400-2b01-4c57-85fe-2c341f294dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852a72d2-c1f6-4e5f-96d8-8a3f50689eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1db76340-75a4-4af5-99d2-94f1ff2496df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0071a02b-c49d-493d-9171-ba9d816ac0d0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdf586d-e3b4-47a1-a1d4-89ccd120be19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed61a3de-94fc-4490-b9c3-70fceb936813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "839a1dae-df88-4956-924b-74587d6b698a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867ca70a-90cc-465f-8a32-88c431f390bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c59906-427a-455b-9f20-3c7a60c26d56",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c6a681-7dcc-4f7c-b574-d9d407b3a0fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8461b7fe-3d33-4408-b052-66fda844ca5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba94fbb-4fc0-4b9c-bdda-0958d881e6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb91ff50-df18-465f-a839-bd7d4d479194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c3999a-6599-45ea-93a1-3b2527a6719f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6118cc5-51da-4f23-b946-b794776f13c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4bc972-bf15-4825-90ab-6be13a627452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6283770a-6a44-40ca-9736-8ceb3de3558f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73fbf809-4cc0-4132-9c73-163c685b2ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea613c73-6ceb-4b38-8a3f-2c7b024da75e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a7290b-6d51-4c50-9d1c-03e0d418f2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3711f654-066c-4bca-a9d9-f33ac36a4c47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50b538b-58c5-4a1b-98f4-4bd96e7cb4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0f79f0-3bac-451b-962e-2933b1c11d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16519c16-18da-4716-8ece-e6a20d576b0e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24cb9a1c-6fad-4405-965f-27872afd129f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f33f2c6-6f2d-4aa5-81b3-d874b1ed83c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc00eb84-6246-48f2-8717-0eb57ddd961c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58dbc56b-f7da-466b-9abc-0c0c96a5f024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17b6b2d-03e2-48bb-b070-2335886a8623",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c34ec93-882c-49e3-b977-612fb4685524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fa54f58-6062-45da-b085-a92ddec09a67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae892c40-b757-4209-8ed7-746ca97ac2f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd2354d-f740-4eef-9cdb-c8908e2eaad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9280bb-de72-498d-9ff3-8d0dd954865d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f36586-6d68-4d3e-a3d2-9f235e195361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fef8e4-d182-43d0-ad5a-acb650760252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "192d32bd-003b-4af2-8604-62ff31ff4e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e812ad1f-ebde-4bc7-a980-73ebace0486a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3f8a80-a171-4279-8d9f-8dc191ccdab5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e51f95-438f-4284-9305-bad95d0ddb1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e5e74c-1011-450a-806d-7024431c5ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6849ce7-a912-4f15-bfa8-15309171baf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f22f1a2-9492-4b79-ab2a-b04482ad9072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e94388d-61bf-4e74-9180-a5af1222ad15",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b4af5d-91aa-4ec0-bfc8-98af3b49d48c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c6f9ab-00e2-40ca-afb2-0011c2a10ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a640c1bf-111c-4db4-a347-0494f738cfe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae310277-312f-4835-8d5a-d3393545dab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508c9d76-f394-4def-a047-24645e6f6174",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11d85e1-c8a7-4334-a499-353c1dcb8983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c2df9e-ad3c-4f16-b37f-79607e775eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf0d527-f7c9-4514-bf6c-8adfc859fca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc22b7a-cb74-4c77-b3e3-89dbfc76c666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e412d5fe-f3a0-4962-819d-ac4a7f74ed6e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece12c7f-0da7-4cd4-a531-f23e0699e5dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7cde67-37f6-4e90-8206-12e229322e7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88d92ce-0b63-41a4-90af-db6a8cb154d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f95e54-3646-4b89-9faf-1b3c0d99874c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3689ceb-0953-42e3-93f1-9835a6932972",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48462e3-beb4-4b00-b98b-4f61eb4fb6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d25c0c-cb75-439d-a2b4-3e6cb8acc47c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4fafce-0970-4b3b-bc56-5af89abe775e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8b2ae7-c1e4-41b7-892e-8867f1bcdb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9fee19-f0c6-453c-a2fd-a7bd9b768386",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d11720-ebcf-413b-aac6-3c82de926bc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3da771-3983-4fa7-9d0a-3ef6712bde49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4978af0e-0d3d-4347-9fc2-73c2a0e70e3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ad4025-7e7e-430b-862f-ef5a954f5fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6fd716-7d51-48f6-887b-544084466599",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466b91e2-60a3-4e7f-a37b-a7db5eb7b7b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a56302-38ec-437b-9ad7-e52fee1185bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d11f8f-2ac5-4156-b947-e2c7afe79669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21ed348d-fa82-4fb0-915f-2713442246d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69dca55d-5a83-482d-96d5-022e01cdfc84",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d28ce0-6905-443d-a4a8-8f14c966e5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d561470-18b3-4e5e-be65-65fe1bed880b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec3fec6-cd53-4682-b301-69c577a3e039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a58cb5c-46b0-48b8-930c-0d995cec34a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7dfa1ba-ffeb-4ff1-b582-3a587970e60c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c21a22-dc69-42ad-b52c-f6fd38dea2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f469f907-389d-42e6-9668-56872229d509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96653927-6e14-404f-bf99-0668490c0343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f397ffe6-e93c-4429-8c5d-a59896c067bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860161f4-b822-4cca-93d3-afb904db37b9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47f54e6-af40-41ac-9bdd-b91cdc77c190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d300283a-25cb-4d86-8f76-a66ac7b9c1c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d762d7-8c49-43cd-b3cd-d5ea1dfa8ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f4f2bf-9d2c-457c-aac0-965710610457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbcafa4-616e-4567-ae5e-25cc97d7c4a5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d098d8c7-da5c-4a8a-ab20-54110b8b67b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49cbc1c0-7bb4-4f24-b194-7e5120ddafd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6742d8e1-cf93-4c76-803f-960a292a4259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fea14b-045c-47f3-82f5-990a864d5a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013811df-7e93-4274-9156-be2437937e88",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a44934-9b17-4b25-a1ae-bf8517e3a222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "971bced0-6c20-4304-936c-c27b7b580aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9b27e3-ed4d-4d31-bd6d-39529c633804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17cd6ec5-20a1-4cb5-8d0d-e09b2914d606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cce568-0840-40d3-a91f-26e9bd3062d3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56eaed18-bed7-4288-a4f6-0ec1b9fe523a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69d7901-d7a7-4df0-8e5e-51b30a95a81d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e4a205-e996-4646-998a-a7313572a9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd71ba71-d855-4f0e-815b-e818542026ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e7ea70-6bd2-4d37-b04f-e553a0becc61",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27eb39f-9610-4b91-a9b6-27ec5b1886b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f54bd9d-cc37-4203-91bf-4229b0861992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "437ad896-af5c-486b-9d8f-8b9c6ba76213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43bb129-a993-4638-97a7-f0934ba83c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296bcb08-340b-403a-a247-4f03e306304c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c339d0-2976-436c-9031-36c55252cc90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5100831-c4f7-4214-bd15-47af8a693e63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca221c62-131a-4fb1-bfa9-747448a97aaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa81b82-4b45-4acc-8703-3ad959849dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f813b380-a629-4a0a-a3a1-143fc5a486dc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81368320-cb1e-43e0-ad3a-ec62bf5a963e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d86f7570-0e24-45da-9fd7-c30841ca95c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f9ff34-8e2d-4640-a3d1-730114122955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a9b243b-6624-4fab-a038-a2f5d0d9dc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6940f11d-8d34-4b08-a620-5108154e5683",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b63c753-d563-42e7-93be-b465ccbdd3b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0441060-5b2c-412b-81e2-ece2a818d03c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1767efff-5d4b-4cbf-8575-394446040614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d5db8c-5f14-41b7-825e-429d40a5f972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28289568-79a0-4d0f-b396-5629de870e4d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a956cad1-8336-4fb1-93db-602cae105156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5d2ab2-6450-4a35-afb6-7146bfc0df7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59703492-2fe5-4f09-9574-5d88b2cba4ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae6208a-de6c-42cd-9d56-ee8b8dac4556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8ba1df-e1a0-4d03-9875-0930424efe5c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66830e2d-a432-48ae-90c5-5edc404d81bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6e4bfe-d412-440c-bdef-d72d2894b01d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f69a30f-43b7-44df-b1a5-be9aadace721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f561a1a-64e3-45e6-b680-d84d58b7f81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af175e21-9190-4f2b-a9db-8e278ca6bc24",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3c9316-521d-4175-9372-ef57acae5199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0852ef6-969c-478d-af85-9f54ec1d6726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd8b36b-1597-4a77-a20a-5b66e40384e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "860380d8-f026-4dfe-a15b-0b6ba2173d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982b9524-1b89-4f08-9017-44e379ffbeb3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c34c90a-897f-44f4-991f-bd449088f4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff686231-6f60-42c7-9e4d-390626dc16e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53bffa0-f7aa-4172-84e3-6ce0542dacbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f8021c5-a63e-4da6-bc73-b8c33b366d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a026a1-837e-4404-b442-c93c896bf588",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4837086a-9a5e-433f-9621-9c8468cc7098",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fe54450-edec-4a3a-aae0-d5b43e61fabc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19181665-2a65-4d6f-877b-bfc2749bd19a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23d7da21-c6d7-4a2d-9b69-45d12bc7e1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c0ddcc-05b2-429a-bf56-7deb0a564b4e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51208953-2332-4862-9bbb-7d9617ec3b86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ddf30d8-3ef9-448f-b1ac-db91bdb19e31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de51225-6936-4b32-8c3c-96687902abc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ff4ccc-e26b-43e8-ae7e-9b2aecee6e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7542118-bbff-44a5-8a40-ee2ae8752c9f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f6fd4f-17b9-48fc-b207-d2217ed8cace",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "206f4f78-8bfb-4552-8ec9-4ac4dc482918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ad66cc-2fd3-428d-8e07-d5be5c33782a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0842b70b-f1dd-4dce-b59f-c08037286ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1437b659-4b79-4756-9816-1a0485384664",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e2c95f-87f7-47de-9b34-78fe9d4dcf71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c8b993c-d340-43c1-9a48-a7b92b2c443b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "232aca66-41a8-4cd6-9a73-adae7bcb3440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97fc4d85-2278-4064-a452-3b4e26109957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501d2d06-3fee-445e-b950-a6ac0f021e93",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e966aad-4894-413c-abfe-731c0ed71dc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d42b635-7d7d-462f-b9fa-504048813023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384b0710-8e1d-4ac6-b550-f1984c8feb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42494e39-68b8-4381-9c5c-e01c39e694da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6475b13d-a62f-4e39-96fd-11a707593e23",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472c5f49-5d8e-4162-ad94-289d95ea88ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "934ea932-fee1-4474-b013-74508036bea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc82377-280f-4691-a920-5ae8d812e23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75b685c-a04c-41f9-b8d9-6c3e8141134b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34cf54c-aea8-463c-9374-affdaa7731bd",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b96ab80-8415-42e1-bbe2-23a1e56f7d37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e4377b7-ea8e-41e3-a247-9542ba48ddb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9d1ca9-5f99-4623-87ef-cdccfe7acafd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a51ff17e-fa57-4e9f-967f-c64872c365c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d357ec-3c52-4edd-b458-8e7a8dc90471",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bf6c1c-2f28-409b-899d-8101026f9b94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8524f826-0cff-4366-aa47-0f35217ad0be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28003f9e-2765-4e9c-b2fa-a97d756c324e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f314e13f-fb7a-4790-8619-0bfc47ec8ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a15733f-f480-4a1b-9cf7-135708698d72",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353fb6f4-5d35-4530-94ed-0551f6e65957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "206a4cd7-440b-473e-be6d-0a7d45a4feb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1b42e0-9101-4b77-96cf-90c00adc2dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa3eee8-baf3-4dec-8b60-0b7fdade5fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae454ca-e646-445a-965f-686323eeaa43",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a598b0e0-f5d8-4904-84c3-d6c88a8f412e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0910034-4532-4e58-837b-4f73d3529598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87e18fc-334f-4a49-a3af-be6ecd10d527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1da5ab-bdd8-4db5-8d3a-d3421a78cb7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed052f05-2e9d-4643-b98f-47270a651ec2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e017c6-24e4-49da-8f9b-fcd2eda77245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c148317-fba2-4cb2-ac70-86f97070f078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3e7ee6-ef25-431e-bc17-57bfad55c3e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ecf433a-6faa-4e66-ab96-6ca4017c4eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349bbb94-0fd5-459f-8c4a-77ae320102fc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdec7cfe-70d1-4b27-bdcd-7747ea833a87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8176aeda-0388-4171-a2ac-722626c04e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fba178b-e880-48dc-aad3-97332dd4c968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1394f490-e921-445f-bad1-a8be94477a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7505f049-59e7-47ef-a912-3ecde588605f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1df2a1-df25-443e-8773-78fff895cf60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c66db64-891d-4d0e-abb6-1a3cbe717a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9753fefe-5c26-4746-a3c5-d4517e076008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603bcb6e-6b51-4e40-be7e-a5e442f9d7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33154bd-b57c-47c0-924f-06c0183ad19d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69327275-3de1-4d0c-b492-af90a9c0b58c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "531be8b9-c5c8-4611-97d3-fe7c14271941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871b07a5-475f-424e-b940-62a8fd538d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef97c65-3392-4c57-9690-434def99aee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4de1d6d-0003-4fcb-a5f4-15500f1fa17a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c31638e-7119-45e7-8e1c-4b2c51346a89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fc9ed14-9bbc-40e6-9b5c-71f49af06fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3b6ad1-4eed-4a03-879e-d352b1bd4c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5162a4ad-7300-4ff7-ba12-2771fc61bf65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d075c778-f668-4594-abb8-169fc7228d74",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5063937f-a469-4134-9ed5-9fd748502738",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea928ada-bca8-47d4-a676-59fd0f815733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1951c2e5-c488-46dc-950d-cbd188f0c4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef5d9be-abd5-46e9-a3f2-1f77900c899a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a940f49-9d54-4a18-8e7c-739c8e997f30",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715d0efb-3a65-47fc-b59c-b92582202e2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c4be8ab-e307-4b4d-b1dd-93984b6f89e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bb431f-8cc3-445b-b385-0046cd43112c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0284641-94e4-48f2-82f3-aa3fd0227906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d46e93-61e6-4f8c-b0bd-76a71558a6a5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7293380-ef3f-4650-82b1-055f2a3f491c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25dc6121-27f9-423d-9ef9-1ece5ed4afc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "551bc516-d4ed-46fd-8b56-e003df7f0c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7fc65a-3d47-46b1-b81f-560db0ddd401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35530a5-e097-4b8e-ac8b-21eeb5bf9ddd",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd8bab1-9eb7-4644-a663-2c2a6f7e9772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f38ff815-97ba-4de4-8df5-764861a9732d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee07f5a-fd89-45af-b661-d29d9d25ec23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f8275d-cd2a-496d-ab4e-5bbf9d21379b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e0c69b-d3ef-4c2d-b651-a8445aa3f068",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35db2450-c236-45ee-933e-91c1c91f37c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bb5ded4-f6f4-4ead-9a4e-4e3aac4c4d61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "316bfca7-6ba2-41a1-93a4-b31279d376f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dfc8447-76b8-4b96-8cb4-ada0221024a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eac9d2c-7746-4d4c-92ec-9f0773c52fb7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6873664a-d290-4219-9e90-8f25d2daa536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a39910fb-72de-4d3b-aa61-29f0c8bedc6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "164c1e3f-9327-4fb4-89b7-1ba33b787bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8029dd-1a90-463a-9cb2-db334aa419fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76430031-7673-4583-ade8-c6e77e0d4006",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197cc8e1-098c-4bf2-8773-2592de7ba38a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c0d31f8-8f6c-4b0e-a0fb-eba6f80f0dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c724f7-4c32-427a-bec2-9fb0f593097d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b898a7-ac24-4d9e-9b25-7049ea88eca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08654d52-9822-4449-b4cd-d8b8cc9f5723",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6359c83-52b6-426a-844d-3d754b0a2331",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "396879c0-5387-44af-b770-cda90a67f3ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0848e4-bd38-438e-a89b-758473f74209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ec95e6-3c07-4322-a377-7e9610c873ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e30744-fc13-4f5b-9d97-619da238c61e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba877e3a-c22d-48c7-9050-4c1972b45aaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cd2c9aa-7f43-4659-ad52-80b1332ef9e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c96333-f097-46da-8bef-990968d411ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e4dc8b-d594-4ac1-adff-be1ad4a6083b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f716f9f6-0841-40ae-bacd-0bef5d188b65",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9a8b40-2e1a-438d-b10c-e8297801c896",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51418b1b-6b62-4427-87e9-1e3b6da4518e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf9c8f7-cbdb-4d8f-92cd-14dc23c0781f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05238f95-1499-44e1-aea7-9265952f969c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992022fc-ad2b-4a88-80d3-e97332b0fe0b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271113ef-1c14-4cd2-9bf4-c47187e4b947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42bd4db0-f0d4-4fd3-afe2-52eef11aa57a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6886efb2-198b-47f8-b9e4-4d0a8b0ddeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adffead7-d0a4-45ab-b1d9-f8fdccc2c6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758d2b9b-2bc8-42f0-b43c-22f5be33b742",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9b05dd-67dc-4ccd-93d1-3df26fdd223a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10010bad-87cb-49bc-bc73-d63e63943198"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cb9b8c-4bd7-4034-afff-3bbd4ac258ef",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2513077c-ed46-431a-80ba-ca6ed88b769f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef7c82d-c0ff-4d9a-9d2b-1f89875f2f28",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05242fe7-4b0a-4123-ab90-bd12ac8b0287",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f1bc788-7c16-42d3-86c8-572a25d2aa02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63c38da-c6ef-4373-a03c-3ccb78a7d0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ee4309-f635-4aea-8102-6c4a514d6864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204c0d4e-33ce-4fc8-93c2-6a3009b712ef",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4497c05d-2da6-4c70-9d04-6923d0a43cd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a374da78-0e94-4a43-9a8b-796ec243192f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b3cc2b-8813-4c12-a42c-0969ea3ba69f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0217b5-35d5-4490-acb0-999c03c71c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d427ae-228c-4fa1-9dde-2c97c1b15a32",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7fee39-1253-4f08-955e-72d0a76bb1bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d0b4583-4db1-4eaf-97a8-ac839dc150f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47400dee-213a-47bd-8058-7c37107227d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370d1170-8a69-4625-a40a-0cc5c374cce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d126fd-2565-4671-a829-7b457690e80f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b807fca9-cbe2-44c4-bdb0-cf4d9cd350fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1ba9fdf-5743-4248-9be0-19a8c59331fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab0991b-0a19-4f9c-984a-bbadc640e5bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae45d607-5c9b-4a24-b6d1-77feb9d44a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b35ea4-3943-48d2-8ef3-5734fa94bd33",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59618df0-205c-45d4-a63f-c1b4964da75e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "420700df-27b8-418f-921b-02e318084dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c51b3fb-a321-445e-a83e-6d6c9ed3a930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4faec1-4299-4067-98fb-1041fadbf78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d3b7b9-f58c-437a-94b8-a44519d92061",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8cb034-3c68-4e64-b72e-aab7eac58698",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d5cc678-c5d8-4111-89f8-7d2baee71cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f68cbc-2101-4092-93cd-31cf41a444aa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed17d01a-a796-49bc-8376-710bfd6b7731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b69c78d-daea-4253-80ef-d9506e007348",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799736d6-717e-4e68-871b-f8d754284c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e7a4bf9-a835-4e8c-b79c-4232e0ee7730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe56be5-f32d-4e27-96d1-fc20543303be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "babbe56c-9152-48d6-876c-59d6a05144b5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f513c7c-9926-4e69-882e-c825ef53bee6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3cc51dc-9dfb-464d-a470-6e4ca199a86f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d92e7f12-8c17-491a-965f-7a630b9cafeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2207e4ae-d2e5-470b-81cc-5dde319902bb"
                    }
                  }
                ]
              },
              {
                "id": "d8d30efd-27ce-4faa-8665-1ebeee26f593",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20d4349e-dbba-40ff-8c7c-b70805af2e0d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d068a03-63da-434f-883b-e07244128269",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b7ccee50-2acf-43b1-8024-ca194f0fcb9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d974cc95-2df6-44f7-8b2f-c5cb53b16b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c0fea6a-5ba2-4ce6-b923-c29c24a38b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929635d7-3bd8-4bb1-8c1d-701cfbdf9901",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beec3cc9-73a7-4321-a172-571f082ce0de",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6e7b902b-4dff-419a-9bf7-e21b243e2b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73b01a1-3675-4b0f-847e-9f7f74cffdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ceccb9f-fe77-40c6-b115-ce685d38c908"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00481d71-9b34-41d7-92c9-2397c5e0b8b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd397323-958e-4497-b7ea-9fda264a938d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76fec085-2801-4366-8e2a-665f01b9c9d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4559459-46e6-4142-9184-d761dad8af6d"
                    }
                  }
                ]
              },
              {
                "id": "b46830d9-65f6-44fc-9240-aba0984e44f2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f4722ac6-c90b-4385-b193-589e76709b0e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec92c73d-3095-494f-9f6b-f1b2e3c398d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3bc039f0-ef20-4a44-af2e-cc23ac229f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9380d5fe-b4cd-412d-bc79-1c5a572b22c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb03ede0-ce22-40a3-8b9b-b89e3163ca4b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "07e7f544-b7e7-4c56-b0c5-c4bbdf715ee1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "80df4c13-20c7-4d41-b837-f62e75d6a3d7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "062f9603-b450-4711-96bf-fb81dd6bfcfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a44ce854-3bca-4c28-bb40-b65878ec7ab8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b4a095e-bf89-49c2-a03f-251cb21c816c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c5aa006-d656-4757-baef-10ee0996b8f8"
                    }
                  }
                ]
              },
              {
                "id": "f1f549b0-a397-4de3-b498-6b412f4a4bc2",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca53b638-7baa-45ba-b1e0-8f38878ded97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6851f7b6-8e59-4dd5-b662-e6249c2a2b60"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1148a2a-6d0a-49c3-b41f-03fd3a38f44c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70ea91ad-caf4-4c4b-80c9-4b05831a43c4"
                    }
                  }
                ]
              },
              {
                "id": "76d6bf75-1252-4bb6-a87d-1b0955845152",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a87e13e-d909-4ca2-ad5f-3994b85865c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8c42dcbe-3a46-4e2a-af73-49f63bd451c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41254abb-d1aa-4203-a33d-6edb6c467df0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7343cbc0-5fdc-4f44-a165-56584dec43d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5c3a9f6-05ca-4659-a3cf-6d8d3adda5f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d684efe4-f87f-4e07-84a8-2db6d62ab2d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f55e4e7-4f73-4cec-a394-c4157cf5a96f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3524d2c-e80d-4077-96cd-eb83cd556cc0"
            }
          }
        ]
      },
      {
        "id": "912419b4-c5fe-4d32-9956-618b2d3e49df",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0057992d-7077-43b0-80fa-8da3f029641f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27a8ac28-4770-4ee2-a8a9-f3896c30de91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb085f49-b674-4b27-b8c7-e8932a6cc98b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c790ad04-6f9f-4112-9765-ed1e7ce7ed7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3b421b03-7cde-4d5d-882c-31a994c280e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f33730-bc1b-439e-9769-a901a0e027b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27bfdc4e-bef2-4ba0-ac28-2cb983fc7e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f570355f-80f9-4f6a-b65e-6e89331df88b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca14702-7ea9-4123-934e-275791de51d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ff5fdd4c-d138-49be-990c-a7f79b7f98ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7e6625-1f5d-429a-a002-066c7921f608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fab1d2b0-1531-4453-95b2-6dd86b7c1502"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90bdca7a-375b-4cb3-9b07-9ac945b8631a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "971a6544-e7f3-4941-8818-4573ddf311e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9add81dc-a6e0-4d9a-b549-36538b38ee21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac006f66-a4e9-4125-9384-8d1e16b6b71a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "404c9715-a06f-43ed-a707-23fa547fafef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc4bee32-b534-4053-b798-765f28377439"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12eeecb1-c876-4211-ae77-af3529892a10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4d7d0e4-3691-44ec-8a7d-b50adaab5c6a"
            }
          }
        ]
      },
      {
        "id": "dfaaa8bf-5e84-4a52-a135-d1790eb30cb5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1b6118cc-ea35-4799-8761-6addfc2b1885",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abfe45de-a89d-4aef-8360-f645d0ef438d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e95fc455-5185-4aea-8a64-7d23a5b7f1c7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24488835-7477-4446-a614-3fad337bdad5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "89397f4e-0301-4d28-bff0-bdec62872682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab67e368-a9e6-4a07-a0de-5d8b70a90b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b3982d9-11d7-400f-9b62-da3588942df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae92bd1-5820-4dd0-9735-9307d5e3dd1e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf96ab5e-8312-4968-bf18-6980c4ca5156",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0659c873-50e2-4642-857b-5d78fb4646cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707051df-30a0-4d93-add5-50fec5ee7de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce703972-43e4-45fe-93ca-15669c088d21"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "697c1a13-78dc-42de-98c7-06bfc1a1d729",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "557c40cf-3329-485c-bd32-4e39a9a24473"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "07fda83f-c8fd-48bb-9428-3e920dfacbeb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b04cecc-7c3e-4f44-b8b6-0839c46189ff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e882acd1-2343-4218-b462-4dbd634011da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ec22317a-ccd9-4a2a-8b35-edc87bc85c8b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a2f464d-c808-4a2e-a4fd-4e0ed4956ee2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c1faf7f-324b-4c0a-9029-dc28723ad8ad"
            }
          }
        ]
      },
      {
        "id": "54e294a8-0c0a-4af3-a905-9f776e23341a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ab6c75a4-402b-4622-a0c7-d7026aea2fb5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81046a61-4e7e-46eb-86d1-f919b0415c70",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a537e442-c9fb-480a-a71b-d3b1057ea338",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e65cdbc-c9b8-43b4-97e6-3c2d2f5feb89",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "617e2fcf-db93-4507-8592-f1d6abbf3ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4462a775-36bf-4ef3-ac06-c2f76b11ad5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da7b991e-0378-4804-bab2-ebb0c49067fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cabf266-a12d-4418-be97-0eaa7ab386cf",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756a4776-5447-42c3-8bef-6684836692b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8fa5d735-d3a0-4c7a-81af-f88f00ee46f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef89e44-5cf2-4856-8e28-7b859b942eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "703c9ae0-d18a-498e-bb3a-e0b345cbb33f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e85b36e-4d57-4cfa-baa4-45a7afbac82d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36f5a698-ee5d-4d45-a756-3d34503dc527"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "88f08b13-72fe-4d5c-aec0-1c024f1901bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "791d8e54-5949-458a-ae43-eb00ab0cee57"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06cfb746-b39f-40e6-b107-7aef56e4a99e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "380f9f41-96b2-48dd-8d20-9bab96abc986"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4d8c090-a5e2-4218-8287-bcb2569f819a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42e8551c-ef3c-4bb4-a7b9-6bdeb89ba972"
            }
          }
        ]
      },
      {
        "id": "25cbb9bf-fb07-48b0-b9f8-23a9de364761",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66fc0a42-df0b-4201-a897-f21791165432",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d31559c-2738-42fe-8188-93779d869093",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c8394db8-e286-4e95-8961-695a48c7ab87",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "441395d4-d5ce-46bd-b670-c6de90223dc7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "664b20c3-c853-4584-a2d0-19f3cbb72de3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 102.84291187739464,
      "responseMin": 13,
      "responseMax": 973,
      "responseSd": 127.01981260648316,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669595910521,
      "completed": 1669595948189
    },
    "executions": [
      {
        "id": "12815b75-d428-4546-8bba-6b2e53fb8485",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "798d2ab8-358b-474e-8cb2-35f6c4f0dc54",
          "httpRequestId": "5177ce9b-ff8d-4a10-bbee-e8e372e3da27"
        },
        "item": {
          "id": "12815b75-d428-4546-8bba-6b2e53fb8485",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d1670baf-b894-4040-81cc-b9f54c70fc70",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 0
        }
      },
      {
        "id": "cf784d77-5b21-4547-a4f7-66b7ea848066",
        "cursor": {
          "ref": "0c037976-3f2d-480c-8789-33d1079d7274",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "591f98b1-9c98-43aa-9199-e69f290adaa4"
        },
        "item": {
          "id": "cf784d77-5b21-4547-a4f7-66b7ea848066",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8b1fb755-bfb4-4771-b5dd-d4ff0337a767",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "767597c6-ee03-4d5b-9d23-9ffa998c8631",
        "cursor": {
          "ref": "e3c516e6-b565-44a9-b7b4-b2fdefa8c67b",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "96238ed8-c39a-4053-8d88-cedaf2a4f168"
        },
        "item": {
          "id": "767597c6-ee03-4d5b-9d23-9ffa998c8631",
          "name": "did_json"
        },
        "response": {
          "id": "df51ee21-648d-49f4-afed-21f8af48c66d",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c952551-35e6-469b-b475-b85035d507bc",
        "cursor": {
          "ref": "a5bc6ff8-1b01-485c-ba7d-5ec6f79d1556",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b8e1acac-4f03-485d-9d49-e3a8f93662f6"
        },
        "item": {
          "id": "2c952551-35e6-469b-b475-b85035d507bc",
          "name": "did:invalid"
        },
        "response": {
          "id": "a9699a0d-8913-4b94-aa48-6818ec26eaef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c952551-35e6-469b-b475-b85035d507bc",
        "cursor": {
          "ref": "a5bc6ff8-1b01-485c-ba7d-5ec6f79d1556",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b8e1acac-4f03-485d-9d49-e3a8f93662f6"
        },
        "item": {
          "id": "2c952551-35e6-469b-b475-b85035d507bc",
          "name": "did:invalid"
        },
        "response": {
          "id": "a9699a0d-8913-4b94-aa48-6818ec26eaef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a20250-f15d-4a8c-924c-aa5bc7b8fc5f",
        "cursor": {
          "ref": "1b0f726e-fba7-470f-9758-0724f71aba8f",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "140f2a84-61ca-4ec1-95f4-99b67ad12c5a"
        },
        "item": {
          "id": "15a20250-f15d-4a8c-924c-aa5bc7b8fc5f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "09dd7f10-327d-4604-9e31-a8dad14ac51b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 163,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b717441-4d11-43f1-b6e0-b167a2e1e6ad",
        "cursor": {
          "ref": "0848d0f2-17db-4697-b227-e713b2814d9c",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c424d100-e076-47e1-a181-94f2844a4603"
        },
        "item": {
          "id": "3b717441-4d11-43f1-b6e0-b167a2e1e6ad",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d17e6151-c91e-4a1a-a12a-aec64a52e0f8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b67683e-50c0-4734-9080-395e0d643a05",
        "cursor": {
          "ref": "2a6b6f67-f21f-484c-a2d4-1ec62c80a379",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c3273f2c-a43d-4e7b-b2c3-260e3050aaca"
        },
        "item": {
          "id": "2b67683e-50c0-4734-9080-395e0d643a05",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0481d3b1-3370-4e46-99a9-7ff476ff7ce9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5d9ab0-02fb-4c10-a380-66f78d999323",
        "cursor": {
          "ref": "e18f3f5c-3bde-4642-af26-cdd0867a2f6e",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "266a89f3-5ae5-4eb6-ba19-e4f6848ee955"
        },
        "item": {
          "id": "9d5d9ab0-02fb-4c10-a380-66f78d999323",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "701e64f2-1123-4c4d-a008-5d15afe82399",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 59,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5d9ab0-02fb-4c10-a380-66f78d999323",
        "cursor": {
          "ref": "e18f3f5c-3bde-4642-af26-cdd0867a2f6e",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "266a89f3-5ae5-4eb6-ba19-e4f6848ee955"
        },
        "item": {
          "id": "9d5d9ab0-02fb-4c10-a380-66f78d999323",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "701e64f2-1123-4c4d-a008-5d15afe82399",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 59,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e092b73-8214-4ead-b233-1f37599e3cd9",
        "cursor": {
          "ref": "4769f8e2-54b4-4f09-ba02-e9630eabce01",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b5cb5626-0d9e-428e-97be-c2a132889e30"
        },
        "item": {
          "id": "0e092b73-8214-4ead-b233-1f37599e3cd9",
          "name": "identifiers"
        },
        "response": {
          "id": "200fb897-5dd8-4653-a697-96d0948cbbe6",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d25f2b-182d-42cc-b7c1-21bd21c672c7",
        "cursor": {
          "ref": "b3aaec08-c4c3-4abd-8974-26f1c41ab4a7",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4294f4f9-912d-49b7-a23f-9433ca1debd1"
        },
        "item": {
          "id": "42d25f2b-182d-42cc-b7c1-21bd21c672c7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "897fc13a-08f8-45df-b3fa-c686f5b9523f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d25f2b-182d-42cc-b7c1-21bd21c672c7",
        "cursor": {
          "ref": "b3aaec08-c4c3-4abd-8974-26f1c41ab4a7",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4294f4f9-912d-49b7-a23f-9433ca1debd1"
        },
        "item": {
          "id": "42d25f2b-182d-42cc-b7c1-21bd21c672c7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "897fc13a-08f8-45df-b3fa-c686f5b9523f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc5fa0a-2a53-4800-a70a-b6abca35cc2d",
        "cursor": {
          "ref": "b709c143-82c0-4a08-b90e-d47e63ddcd46",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "84eb01b5-71d4-41a0-8c7d-7d08091b6982"
        },
        "item": {
          "id": "8fc5fa0a-2a53-4800-a70a-b6abca35cc2d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "468a7104-e414-4367-832c-2d605e755ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc72853e-b5a9-42b6-bb5f-6ba0f9b84c0a",
        "cursor": {
          "ref": "52a9472c-0632-418e-9302-eb0fd5bd144e",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3658d118-e334-446a-a13d-bdf6c766db45"
        },
        "item": {
          "id": "fc72853e-b5a9-42b6-bb5f-6ba0f9b84c0a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5f8f9a4d-3de8-4546-b353-2b5132631414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018bb3be-15f1-4182-bc3a-01d9771111b6",
        "cursor": {
          "ref": "3d3c984b-f41c-481e-a853-a2a3dcf4a229",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "879a499a-2276-49d8-8a09-61ab40f7d8e3"
        },
        "item": {
          "id": "018bb3be-15f1-4182-bc3a-01d9771111b6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "12b514e7-9c2b-4482-8f40-cd252135241e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55464830-0a58-4adb-8724-1fd76dec6aae",
        "cursor": {
          "ref": "0ec8bfc0-4cf3-4a33-b92c-c0401868bae4",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "751a533b-d8ac-4934-80c3-27a85054c78f"
        },
        "item": {
          "id": "55464830-0a58-4adb-8724-1fd76dec6aae",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "19b2fb2c-f293-47d4-b37d-2cd76bb3c5e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d626573-413e-44f3-b21a-807b8df1074b",
        "cursor": {
          "ref": "1aa89baf-7e64-4684-89ca-d21a9b9ac7a1",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9929932f-4843-410e-9f7f-5c8bfbfe63e9"
        },
        "item": {
          "id": "3d626573-413e-44f3-b21a-807b8df1074b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b7a5a376-47c1-4128-842c-de43dcc8b2d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3863638-8d7c-4886-bc3c-316487d806f0",
        "cursor": {
          "ref": "1378ca87-40a7-454a-bb0b-e1bf11aab22c",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "72615a2e-7ff8-47d6-a6b9-f149ae4d86d8"
        },
        "item": {
          "id": "c3863638-8d7c-4886-bc3c-316487d806f0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "43705d2d-4d30-42ac-b0e3-ad2dee20fd57",
          "status": "Created",
          "code": 201,
          "responseTime": 671,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e7facf28-9f75-4ad6-b666-a3f2a5148a76",
        "cursor": {
          "ref": "80ebc655-266f-4786-85c5-2aabe26f208a",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "96d101e0-8147-4142-8d1b-bd825f3a272f"
        },
        "item": {
          "id": "e7facf28-9f75-4ad6-b666-a3f2a5148a76",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7759f0fa-c904-4105-a2fa-732b2f21c8e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0402cf-ddc5-4a76-bc2f-167c8ee23987",
        "cursor": {
          "ref": "3c7f534d-face-4364-a35e-fb8f821f81bf",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0ed852f9-eb29-48de-904c-cb0fa7d11c7d"
        },
        "item": {
          "id": "5a0402cf-ddc5-4a76-bc2f-167c8ee23987",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a68d44c0-f49b-4298-be2c-dad9ea9d6aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e11b54-f3d4-4a5f-8da6-9ec190afd04a",
        "cursor": {
          "ref": "af3227de-5d77-43fc-8afb-d1b437a427e9",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c5c7b774-4441-4813-a6bd-ef618b7773c7"
        },
        "item": {
          "id": "69e11b54-f3d4-4a5f-8da6-9ec190afd04a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a79c5724-f107-4c5a-b658-8966a3c4a6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceec66db-2a78-49a9-b21a-bc20a48f611a",
        "cursor": {
          "ref": "195cce5a-9a36-4c2d-9f36-c64c6ba69c53",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6ef429ed-5dce-4d90-8836-72cf2774de9b"
        },
        "item": {
          "id": "ceec66db-2a78-49a9-b21a-bc20a48f611a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a2956b94-7fe3-4477-abd2-b22ab10cdc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a73a69d-bdbf-414c-aca3-80194b45d9eb",
        "cursor": {
          "ref": "78b3dd09-f4fb-4813-a988-91dfc914c316",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0d1047b7-0be1-44cf-bb48-550d14e3b150"
        },
        "item": {
          "id": "2a73a69d-bdbf-414c-aca3-80194b45d9eb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a71c4b14-7167-4073-bc16-4e936a6aa36c",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "79a15d36-993d-4d50-9d68-f14e6f63d559",
        "cursor": {
          "ref": "ef496bc9-a7dd-426c-9de0-269fa9b3b8a5",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "01460621-296f-4e51-8067-e7bbc6295f5d"
        },
        "item": {
          "id": "79a15d36-993d-4d50-9d68-f14e6f63d559",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8426c6cd-37f7-4b3a-82e1-f21f808b1d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec170bfb-c18a-47a5-a43e-b68e7265f5cf",
        "cursor": {
          "ref": "b75de772-eaae-44dd-879d-f72edccfd724",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "32419dd4-62cf-418d-92ad-55fc51964d57"
        },
        "item": {
          "id": "ec170bfb-c18a-47a5-a43e-b68e7265f5cf",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1e803c06-963f-4d66-926e-839a8885d7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89d3446-5d31-4478-a0cb-97d6b3df80b3",
        "cursor": {
          "ref": "d526edae-b094-447f-8951-4dcadb913e8f",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a68b8b0b-adc2-4b58-98f0-2892b7d0f892"
        },
        "item": {
          "id": "f89d3446-5d31-4478-a0cb-97d6b3df80b3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4f215b68-231e-454e-a5f4-4624dd8ebf32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978ba841-9b0d-47dd-bc37-b860d8c9d762",
        "cursor": {
          "ref": "57bfb5a3-3da8-4ee9-84a8-d18a4dce4b05",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "35262b49-74c1-480e-8a0a-9e13c3536355"
        },
        "item": {
          "id": "978ba841-9b0d-47dd-bc37-b860d8c9d762",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "032c2a33-3743-49ac-91dd-8ddd8d282c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acb71d1-5c0b-4b5f-84f9-435a9ec9b882",
        "cursor": {
          "ref": "28496949-b6d6-4f96-83e3-93f581efa78e",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f3a8c5d5-cd30-461e-812b-1f24f9a03cbe"
        },
        "item": {
          "id": "8acb71d1-5c0b-4b5f-84f9-435a9ec9b882",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d6a8808d-27b2-44a9-8de2-5a6e288ae828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683142f4-946b-4c58-a068-3bb5bbd3fc59",
        "cursor": {
          "ref": "f81363d5-a543-4cec-a68b-d5e8bca81c0b",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "31232dbf-e546-412e-b5b1-24363ab1e8e3"
        },
        "item": {
          "id": "683142f4-946b-4c58-a068-3bb5bbd3fc59",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "36082568-569a-4362-b7ac-e6660957c98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13cab697-5882-4e5d-97de-e49d1660657e",
        "cursor": {
          "ref": "211f78d7-ebd6-475e-adfc-a1434623c380",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e741ed30-9f40-404f-83ca-45c20ce9cdb3"
        },
        "item": {
          "id": "13cab697-5882-4e5d-97de-e49d1660657e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "739bb358-4576-4ab4-98d1-b2ecf31df399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a8239d-4273-4821-8472-0506ff5a73f6",
        "cursor": {
          "ref": "448f8a74-12eb-43a8-b68d-d2ae2b41e5d0",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5b3d29ae-d6db-4dc3-8391-5b4c5ced1a3f"
        },
        "item": {
          "id": "e1a8239d-4273-4821-8472-0506ff5a73f6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fc479e58-58cd-46a8-abbc-12e29f4b6505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f5325f-c566-438d-8000-cc0d26c57f09",
        "cursor": {
          "ref": "1d8d1e02-5c79-4275-8586-e0d3859f8da5",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f770a506-2a3d-4fe6-91a9-42c886ba6e1d"
        },
        "item": {
          "id": "58f5325f-c566-438d-8000-cc0d26c57f09",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d3717360-30fa-48b9-a57b-e106add6e826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b64d08-767b-4552-82b3-9e18aaee33f0",
        "cursor": {
          "ref": "fb871354-5c1f-4aab-b35a-4acdb32a9032",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "902735c5-25b9-4022-b3e1-6627b1273ca2"
        },
        "item": {
          "id": "b6b64d08-767b-4552-82b3-9e18aaee33f0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c2359a03-6910-4259-91b8-dec751303548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3422e5f-0ef2-447b-8a6c-6c89c2e71335",
        "cursor": {
          "ref": "d229d4f3-51c3-4a64-baf1-ad58c3556601",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d65398eb-2004-4f84-97a5-ba8da04bbb1f"
        },
        "item": {
          "id": "b3422e5f-0ef2-447b-8a6c-6c89c2e71335",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f89f6ccb-eea1-4d47-8f9f-3afc831a64de",
          "status": "Created",
          "code": 201,
          "responseTime": 973,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f69a2d41-908c-40b3-a8ab-82f85ce80db2",
        "cursor": {
          "ref": "312d61be-e730-44a8-8960-c1b50fdd052f",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "14c8931f-9e6e-42b0-9976-7c50ec70fc5a"
        },
        "item": {
          "id": "f69a2d41-908c-40b3-a8ab-82f85ce80db2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "51c4e26a-d274-40f6-b601-d0b410d59bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f93772-2df6-4a60-924b-d32d059ec0c7",
        "cursor": {
          "ref": "9699da1a-18a7-4198-994f-34efd48f35df",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "10fbef00-ee07-4264-bb69-09288e27edea"
        },
        "item": {
          "id": "f6f93772-2df6-4a60-924b-d32d059ec0c7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "85524174-7917-4335-aeaa-9d443b2670b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518f2846-8589-45ae-bd9d-9edfdf09544f",
        "cursor": {
          "ref": "83214c80-404b-4a1d-8661-69a1b21d67bf",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "847991f3-4410-498c-a0bf-3f025fc06036"
        },
        "item": {
          "id": "518f2846-8589-45ae-bd9d-9edfdf09544f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d553537a-2b44-42e3-9edb-ae5b547bd6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38dc2cc2-c0bc-4705-9d25-a5160d8bb079",
        "cursor": {
          "ref": "43e03e8f-3908-4935-a276-4bbf74982072",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "06b38bf2-53eb-4a61-940a-40195391ef64"
        },
        "item": {
          "id": "38dc2cc2-c0bc-4705-9d25-a5160d8bb079",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f5f682b4-a21c-42c2-9755-58241ef8fa04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d35d8d-2918-4bb7-9925-eb0b3422e5fa",
        "cursor": {
          "ref": "7ecabbd2-8b18-4782-83dc-0cd066decc4b",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "48b14985-01d0-4b39-bf3b-6341fcf0ed8c"
        },
        "item": {
          "id": "32d35d8d-2918-4bb7-9925-eb0b3422e5fa",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b52ad92c-5538-4f44-84e7-2461e13f13bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60738d51-6e52-4886-af18-1664ce4ffcda",
        "cursor": {
          "ref": "613e5164-af28-4b5d-9e91-db60ff1c57aa",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "72d9a095-2879-45e2-8f1c-5253157d8605"
        },
        "item": {
          "id": "60738d51-6e52-4886-af18-1664ce4ffcda",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e960ca28-031b-4145-bcf0-de33b5522ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a115316-bb81-4f76-acd2-63f7a389ca6c",
        "cursor": {
          "ref": "9bbb49ac-d13b-4663-ad99-e53962374ac2",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "97531419-9b0d-49ae-af39-afd53d8d0f8c"
        },
        "item": {
          "id": "9a115316-bb81-4f76-acd2-63f7a389ca6c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "820d5581-374a-4ae7-bcc6-99ab534fb5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46e6a68-e892-4267-8c8e-bff92c080c9f",
        "cursor": {
          "ref": "a84ba87e-1d73-49e2-812e-3acf0c79050b",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7fbdd355-81a1-4ed4-8913-dfa51aa1dce8"
        },
        "item": {
          "id": "b46e6a68-e892-4267-8c8e-bff92c080c9f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d9ba51a3-7447-402d-b4cc-3e98ea0a2478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7340b887-609e-4668-b524-af5d2f66facd",
        "cursor": {
          "ref": "8df37c11-8c1d-4cb2-ac37-e5f35b3ded1b",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "04e51329-a3f8-468a-886f-4403475c34de"
        },
        "item": {
          "id": "7340b887-609e-4668-b524-af5d2f66facd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "28419659-13c2-4b57-8a4b-225a25be9513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed932f6f-1a76-4a10-b2df-67cc11def487",
        "cursor": {
          "ref": "6e3cc033-2994-4a4a-8a02-9c367d272bc3",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6bab474d-b240-4e66-8852-be65df1ebd21"
        },
        "item": {
          "id": "ed932f6f-1a76-4a10-b2df-67cc11def487",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7f610623-bed4-4c0f-8794-a85f5e2921c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251f9336-6109-4298-bd37-9575b4befe4e",
        "cursor": {
          "ref": "f8ac3aa7-f840-4aad-8ca8-dca87bcccbbd",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9d548e66-5f68-41ae-9b7a-e47f4d7f4f21"
        },
        "item": {
          "id": "251f9336-6109-4298-bd37-9575b4befe4e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f939e52e-f908-438a-b5f9-67a14b7789f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcfc659c-754b-4fab-bd21-3e5a5fa40dc7",
        "cursor": {
          "ref": "c22549a8-14fe-4144-bfff-4a3cf09ab0a1",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "52a7e1b1-161b-485b-8876-d03f35db96a5"
        },
        "item": {
          "id": "bcfc659c-754b-4fab-bd21-3e5a5fa40dc7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "742c3657-5fc9-4520-a746-b2ab77d87088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843c615d-1833-4e7c-a714-9a7f63f18d88",
        "cursor": {
          "ref": "66a3d105-67d2-4d7e-b1a5-019e4ca531b9",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "57aecacd-97a7-4d53-b716-db23442c8202"
        },
        "item": {
          "id": "843c615d-1833-4e7c-a714-9a7f63f18d88",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ab31bd63-947c-4a9a-b106-14c6cbdecb52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9b858f8d-3b6a-4485-bf25-15692d99e5a5",
        "cursor": {
          "ref": "e67e2fb2-9056-46ee-a8ad-9cbec868b280",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "245d15f0-c48a-4cf0-8d0c-5bc6d7d69172"
        },
        "item": {
          "id": "9b858f8d-3b6a-4485-bf25-15692d99e5a5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "42918ed8-73a3-4c8e-bd77-291c222d242c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a198e1-17bc-4c2a-b18d-8c33746a0090",
        "cursor": {
          "ref": "be35a43c-93c3-4a84-bc2e-2790af04ed19",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7f2e22f7-9d41-4e85-a65d-01235da69672"
        },
        "item": {
          "id": "96a198e1-17bc-4c2a-b18d-8c33746a0090",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "48196306-1f45-4cf8-b3a5-5c3308bf07bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c597f5-80f7-4aaf-b075-0f98ff249cb0",
        "cursor": {
          "ref": "9dcf0bec-e663-44e3-8063-453181d8faa9",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a1e7b73d-e7fc-421e-b0b4-8172cbe15e7b"
        },
        "item": {
          "id": "c7c597f5-80f7-4aaf-b075-0f98ff249cb0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "35b1f404-81bb-42e9-ba0b-e06be38864e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b943adc5-5685-4d96-b487-7a7ed3ca126f",
        "cursor": {
          "ref": "816d68c1-bfd2-4b75-80ca-8f7defe87344",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a87e2976-c1b3-45f0-946a-57067f30a7a6"
        },
        "item": {
          "id": "b943adc5-5685-4d96-b487-7a7ed3ca126f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2c56aec0-438b-4090-9e9b-5a1a6784c2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694a8f28-1a52-4827-9419-e818c50f8168",
        "cursor": {
          "ref": "d9d9818e-b08a-4937-895b-10d5f85fd83d",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4b3e0b8d-efe8-48ee-8ca3-3d21d51efa8d"
        },
        "item": {
          "id": "694a8f28-1a52-4827-9419-e818c50f8168",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "571c0104-f22f-484e-966f-b30972705b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe4598a-2ea7-4332-9a4b-629e8a37fda3",
        "cursor": {
          "ref": "6a5f7f48-768b-415c-b282-7b3dfcf6e4e0",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "152d9da4-c761-4334-8830-6a7fb0f4cc1d"
        },
        "item": {
          "id": "7fe4598a-2ea7-4332-9a4b-629e8a37fda3",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a76ba830-0e86-4d4e-95c0-4550e9e3f1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4356cc45-1d09-47fd-afc8-4defb96c5f57",
        "cursor": {
          "ref": "4665eb97-efa6-4279-aeab-c6325cf18b4c",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1a8a5aca-8f7e-418f-a96d-51acd52f7904"
        },
        "item": {
          "id": "4356cc45-1d09-47fd-afc8-4defb96c5f57",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a07f683e-a2e8-4650-b8e6-5e63974ae42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "77bfb6de-dbfc-4cc8-b29c-f74d2b29fc79",
        "cursor": {
          "ref": "8510f5a4-a428-4d6d-b97c-bff9b56836a0",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1c82b1c8-30d0-4360-9ee7-e211dd7b2e38"
        },
        "item": {
          "id": "77bfb6de-dbfc-4cc8-b29c-f74d2b29fc79",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c3fe0d8d-19ef-4625-bdfa-5cf2053bd965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848648ce-4804-42fa-bf57-89de055aad92",
        "cursor": {
          "ref": "9d38898d-68d7-40d4-902c-3d19785ed029",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e1e13716-3a75-4a4f-8a3c-f685a65c9bd2"
        },
        "item": {
          "id": "848648ce-4804-42fa-bf57-89de055aad92",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f18aca33-8ab2-4b18-b480-1e54a87b883c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ce471d-c6c6-4876-8ae6-4e05e1d44899",
        "cursor": {
          "ref": "5165869e-b1c3-4542-93f0-390186b5cff5",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6fdc40e5-6a1b-4383-96d0-e97a49a6e383"
        },
        "item": {
          "id": "a3ce471d-c6c6-4876-8ae6-4e05e1d44899",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "aaa86f56-1c32-40d7-b59c-cd58fc5b6b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c97999-7ae4-4ab5-af21-f5cd2f432f27",
        "cursor": {
          "ref": "65d6e9ef-02f2-4ff1-877e-743002fdda73",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1496a26d-1825-4fad-b081-670213e3f9f6"
        },
        "item": {
          "id": "a9c97999-7ae4-4ab5-af21-f5cd2f432f27",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1e969609-2878-48b1-9e7f-523570374866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c088e02-b403-41f6-b364-e6a70ae1e81c",
        "cursor": {
          "ref": "20132b1b-d46f-47a3-8cd4-1bc26d17762e",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "59a37b0b-1208-4b78-b038-4302a99c32a9"
        },
        "item": {
          "id": "2c088e02-b403-41f6-b364-e6a70ae1e81c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "76503e75-bfd7-4e01-9003-ff56b020763e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c562e81-0053-4d16-a43b-8c89f3af6e6f",
        "cursor": {
          "ref": "e57a1ce6-45e5-419d-a8b9-e05f361d2709",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4cae121e-d98a-460f-aa3a-e00af1bcd5b4"
        },
        "item": {
          "id": "9c562e81-0053-4d16-a43b-8c89f3af6e6f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cd5c592a-68ef-4f17-8185-95dbfb59f18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fccc9df4-1a64-4cc3-8f17-1bded30b3ae4",
        "cursor": {
          "ref": "db6b9bb3-ddaa-490d-bae6-62e5f534c090",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "18be7341-921b-4f5f-a3f5-7ace46768822"
        },
        "item": {
          "id": "fccc9df4-1a64-4cc3-8f17-1bded30b3ae4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cb2b8bea-7a81-4f7c-a7b9-188c31bbd6c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb09e866-d755-4166-bf4c-46e8f77fe36b",
        "cursor": {
          "ref": "c25c231c-8156-4ee8-ab1b-fb52c62f00ee",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "eafc8dc4-a3b7-4eff-96eb-b823b53f9711"
        },
        "item": {
          "id": "bb09e866-d755-4166-bf4c-46e8f77fe36b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "30d79ab0-66c6-4c75-b7c3-ee40bfbb5844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8bd792-f4eb-4d16-9663-1a2c1f129e83",
        "cursor": {
          "ref": "c156465d-d486-41a5-ba50-be977b671f75",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "82979953-e09a-4077-b872-0ed6d3286f0d"
        },
        "item": {
          "id": "fb8bd792-f4eb-4d16-9663-1a2c1f129e83",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a78bfec8-5361-48e3-98c0-bc4b3debab45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a441ea-9aa8-46c2-b23d-ef2ab8458242",
        "cursor": {
          "ref": "da979285-dc48-4bb4-8f81-efc9a0f77150",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "46b79d1c-21d6-434e-9630-6aacf3232a6c"
        },
        "item": {
          "id": "f1a441ea-9aa8-46c2-b23d-ef2ab8458242",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2f016113-86ac-45d4-a872-ed4b53e2c415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddb6f91-6c3d-4979-973f-3b49a1ecdadf",
        "cursor": {
          "ref": "ddb11a29-a0e9-4148-8c38-259baa54bcb5",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "87b45345-6c81-406e-9ea2-631cd2bce578"
        },
        "item": {
          "id": "8ddb6f91-6c3d-4979-973f-3b49a1ecdadf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8ab9c5f4-7fc1-438c-8382-389f5628a8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf934ae-ba81-437d-aaff-c360ce8d5f67",
        "cursor": {
          "ref": "61afd46b-b56c-4382-b218-840c0f9cfdb2",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5871c536-c568-4e74-9bb6-05a2d35369ef"
        },
        "item": {
          "id": "cbf934ae-ba81-437d-aaff-c360ce8d5f67",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "cf7fb4b8-0ec3-4bda-abf9-14eb5119e11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9061e6-e73a-4853-ae4c-00329bc85a28",
        "cursor": {
          "ref": "263cf9ca-14e9-4b3f-b337-de49c76706bf",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a75200db-7c3c-44b8-84ed-800ab7b8b929"
        },
        "item": {
          "id": "2d9061e6-e73a-4853-ae4c-00329bc85a28",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "45acd20d-162e-47f3-855b-c3eb2cdad2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3cc528b-5631-4d2c-a30b-a900fd1e0acd",
        "cursor": {
          "ref": "1331efd4-8885-4947-a975-09f918c9572a",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5e8cb421-97cf-4b05-98c0-8133f3a8d354"
        },
        "item": {
          "id": "b3cc528b-5631-4d2c-a30b-a900fd1e0acd",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "398ed303-cd3c-479d-aaab-bfaf9a2b65bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bd66cc-5716-4bf9-b88e-a5f027abce07",
        "cursor": {
          "ref": "687653db-df8b-4360-a5da-831843c6d390",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6ff273e6-3995-4725-9d89-33adc4fe288c"
        },
        "item": {
          "id": "d9bd66cc-5716-4bf9-b88e-a5f027abce07",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a6b64d74-4171-4a0f-840d-3ef7f8960922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb681bb0-4493-4aec-9cd6-dc289b58b375",
        "cursor": {
          "ref": "9762021f-c1dc-48b2-9254-55dfcefd76f3",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f2816ae2-23bd-4025-b42c-0874168eee6a"
        },
        "item": {
          "id": "eb681bb0-4493-4aec-9cd6-dc289b58b375",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "432f711b-100b-43d9-a549-b3393fa45a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f7840b-ae0b-40a6-9b08-9cf9e0490ef0",
        "cursor": {
          "ref": "026572eb-5614-4a48-84d7-fb85fd272f27",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bd603e09-d17e-478d-8e11-a8e002c69a0c"
        },
        "item": {
          "id": "00f7840b-ae0b-40a6-9b08-9cf9e0490ef0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5dc7844e-5cb6-4c8a-a90d-533a877b3e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 348,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640e3be5-e60d-4e93-a137-33a9dee9ab1b",
        "cursor": {
          "ref": "c0f76a4d-30b9-4b75-9196-ce5e5067af7f",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5ce770a8-84a1-4fdc-bd8e-1194c75055f5"
        },
        "item": {
          "id": "640e3be5-e60d-4e93-a137-33a9dee9ab1b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "033aeaf0-75dd-4ea2-813d-ada569d1baaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7a5052-cee6-4e3a-9739-2e4475d32b63",
        "cursor": {
          "ref": "1d1b802a-6bf5-408e-925f-394e0bc2cee2",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ac811a2d-f1d2-4435-aeb1-f76ed19eb61a"
        },
        "item": {
          "id": "ce7a5052-cee6-4e3a-9739-2e4475d32b63",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "df13b438-763f-4d24-8390-5762a4d24dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d752847-a8b4-4514-a293-8b2d8717bea7",
        "cursor": {
          "ref": "c0c43f26-73a5-40ef-8d8e-7b823df48b0f",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "987c27a1-9cc3-4fe7-bb91-aa2123815b34"
        },
        "item": {
          "id": "3d752847-a8b4-4514-a293-8b2d8717bea7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "aa158aab-00d9-4f10-8e35-a9c6e684487d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4e5af6-0366-479d-afeb-76e34ab4529e",
        "cursor": {
          "ref": "7b9eba96-2fa2-49ac-a665-a08e51ee9342",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "39df6f08-aab6-4e65-9ebe-c0b8cae9bd62"
        },
        "item": {
          "id": "2d4e5af6-0366-479d-afeb-76e34ab4529e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "42cc62dd-ed53-4fad-bf10-18bfff607db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02e0e09-9cac-4c08-907d-2d11eb1ee2c3",
        "cursor": {
          "ref": "22c7e7b2-cd5f-4383-89e2-2a6371b331c9",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b2b573c4-3f86-4668-9b36-8917b3fedd65"
        },
        "item": {
          "id": "f02e0e09-9cac-4c08-907d-2d11eb1ee2c3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "35f7f9b6-10fc-428c-b03e-3c29cc18a4ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046cee1d-b316-4ae6-940a-752f796ad61c",
        "cursor": {
          "ref": "95f637ea-6bad-48c0-ba92-0062a2c384da",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "da036361-e0a6-465a-9a21-3257899b2c0f"
        },
        "item": {
          "id": "046cee1d-b316-4ae6-940a-752f796ad61c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9853ff5b-e870-41b6-bb4a-d2737b248cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be71ecb-7e39-4a93-85f4-1ed65781901d",
        "cursor": {
          "ref": "41fdbc53-7773-4b0e-8045-e7e5982c26c8",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "26b8c7fa-e337-4ebd-8909-12d815eea7f8"
        },
        "item": {
          "id": "8be71ecb-7e39-4a93-85f4-1ed65781901d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "203759d8-5ad0-469d-81c5-e33f01185431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9250bdd8-ef6a-4bc5-8d3d-4312e827e5c2",
        "cursor": {
          "ref": "c1371d44-707f-4e90-8132-0b3992e21d12",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8fd8759b-5d37-428c-8ed8-f8c3746759d0"
        },
        "item": {
          "id": "9250bdd8-ef6a-4bc5-8d3d-4312e827e5c2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "60c7a66e-7dbd-4ff2-809c-cea0404c2adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc2fde6-aee7-4412-bdbb-ecd12a49f047",
        "cursor": {
          "ref": "177f491d-0ce6-4711-ab2b-11b7e75c2f20",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "077e41d6-0ac0-4480-86dc-5557fe20b3b9"
        },
        "item": {
          "id": "bcc2fde6-aee7-4412-bdbb-ecd12a49f047",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9d3e8570-31aa-4bd4-a404-c95332b215fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e071714e-972b-40fa-a04b-439989bdc1d8",
        "cursor": {
          "ref": "99e467e3-350c-4684-aab1-9e29ae977704",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "33c663bf-b08c-4389-8315-b59451a4999a"
        },
        "item": {
          "id": "e071714e-972b-40fa-a04b-439989bdc1d8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c97c556d-fa99-4953-a37d-beb0a5455a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7bada5-810a-47ec-95a6-68a76eed3909",
        "cursor": {
          "ref": "2275bdfa-706e-42a4-aaa2-63e4ccc8f1d6",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f6c253f7-5db9-4e26-83e7-b5417622045b"
        },
        "item": {
          "id": "0c7bada5-810a-47ec-95a6-68a76eed3909",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "90aa5823-bbab-411b-b1f7-5ce3479ca435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717d766d-fcda-4521-b45f-31289fa0f816",
        "cursor": {
          "ref": "c3108c47-0c20-481b-a92d-f124d81fe658",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a2769901-ddd6-469d-99d1-0773c4150c82"
        },
        "item": {
          "id": "717d766d-fcda-4521-b45f-31289fa0f816",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "75ab73f4-00ee-4965-9ce5-5310d9a70d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a858d588-1bd5-4d7a-8f3c-4c122c74acff",
        "cursor": {
          "ref": "826dae14-b8ac-487e-8ccf-80aa63efe415",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ee56d222-150b-4047-a94a-05977a675e80"
        },
        "item": {
          "id": "a858d588-1bd5-4d7a-8f3c-4c122c74acff",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "59160160-f124-47e7-bfca-74ba7c30bc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e23aa1d1-7358-4460-9251-0f21c3aa6b9d",
        "cursor": {
          "ref": "9b872d97-6f13-46c7-a483-115e7929bee5",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2af4a1f7-db56-4b4b-83a2-b77b47f485df"
        },
        "item": {
          "id": "e23aa1d1-7358-4460-9251-0f21c3aa6b9d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9768b997-ab91-4994-a539-acd435e5ec73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c595264e-cb8b-4be5-bf23-1112798bd8b9",
        "cursor": {
          "ref": "28738113-a674-423f-8698-b9eb689a8df9",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d9c7233c-2130-43ea-be75-6b92b5859f9d"
        },
        "item": {
          "id": "c595264e-cb8b-4be5-bf23-1112798bd8b9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bf87fc7b-7a28-49cf-aaf4-04f49902c592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59dede18-6d1c-4375-a0a6-2700ed7b56a8",
        "cursor": {
          "ref": "44263da8-e0e6-47ab-ba87-bcbf5653b6f7",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7fddd8cd-34bb-443e-b033-e5cb5eb962bc"
        },
        "item": {
          "id": "59dede18-6d1c-4375-a0a6-2700ed7b56a8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "840e3d4c-3424-4d3b-9f2d-1443adfad8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0732fad0-5eb4-4b9a-a5c4-001195e879d8",
        "cursor": {
          "ref": "dc565d34-b2d3-4a4a-adc6-3aaa1ce1aacd",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8832fb81-1d47-40b3-b994-8b338db06671"
        },
        "item": {
          "id": "0732fad0-5eb4-4b9a-a5c4-001195e879d8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b608b8ef-b6b5-4eb0-bc0a-bf94a8ab000c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bc648b-7796-478d-80c8-85f813b4ad3d",
        "cursor": {
          "ref": "6542cc99-55ec-4d52-ae60-52d5e8b7c21a",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "65d6c310-5cce-4d7d-9766-0271b98e5023"
        },
        "item": {
          "id": "b1bc648b-7796-478d-80c8-85f813b4ad3d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "38ae624d-f010-458a-a160-0adf5f292da1",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "61d3e462-280d-44fa-a71c-b1bd6f51fd76",
        "cursor": {
          "ref": "7260662b-060e-493c-aa01-9ff80207f059",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ad7aee7e-1a98-4049-a37f-db99168c8e50"
        },
        "item": {
          "id": "61d3e462-280d-44fa-a71c-b1bd6f51fd76",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f3e42f89-0289-4ddf-a1eb-4741dab514e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea89117-ad0e-41f9-b5f1-33484b67aaaf",
        "cursor": {
          "ref": "3b8d4f9d-9b7d-4615-b2ff-8a15e2e64a3a",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bbc4b41d-f185-403d-aa79-3c4eea1141c5"
        },
        "item": {
          "id": "dea89117-ad0e-41f9-b5f1-33484b67aaaf",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "eb3194a7-940b-4104-8186-399cbf11e9f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decad837-df54-4df4-8a05-d633a03438f4",
        "cursor": {
          "ref": "61041fc1-66c0-437d-89d2-9b199ac97e55",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5f41f0fe-424b-493d-8219-cefae5dc4741"
        },
        "item": {
          "id": "decad837-df54-4df4-8a05-d633a03438f4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ae31a970-620b-4894-94d0-99f39ac8fe46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76611612-cfb5-476a-96c6-32128ea8b56d",
        "cursor": {
          "ref": "23625479-dafd-41b8-b963-f32b04972fae",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ada07a07-8920-46be-b4b6-dd303f9abf88"
        },
        "item": {
          "id": "76611612-cfb5-476a-96c6-32128ea8b56d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8eeff1e7-8f94-4bf3-91b5-5ab21de7269b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53acdd05-2d77-43a4-bba9-be33d67f27b3",
        "cursor": {
          "ref": "b55369d4-7c8e-4d73-8e77-dca5410d2d48",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7e4fa237-9787-4ac8-8d4e-09e838c75357"
        },
        "item": {
          "id": "53acdd05-2d77-43a4-bba9-be33d67f27b3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6adbc009-5ffa-4026-a12c-7505e68ef862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2c5627-b9ee-4473-ba86-3a96b9de6805",
        "cursor": {
          "ref": "19e7a941-8de4-45df-961a-dd66fbf0637c",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "60ffbfa8-9a8b-4225-9b5f-ecf4b274bfba"
        },
        "item": {
          "id": "1b2c5627-b9ee-4473-ba86-3a96b9de6805",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0e945d1b-0604-4359-9b17-c83ec8312cad",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "50fa2c3a-5309-44a1-b2b6-a4d397322e66",
        "cursor": {
          "ref": "645c2098-4687-4809-8623-59228a4fb1aa",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e70829db-9d8c-4286-9f2b-dc8119232611"
        },
        "item": {
          "id": "50fa2c3a-5309-44a1-b2b6-a4d397322e66",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "07c517a7-fe64-499c-a833-928250665861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9751acc-b9ae-4a24-acfc-bd3a2b9ebd2b",
        "cursor": {
          "ref": "f8a48ced-9137-4191-9d45-5130b75ae086",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1191d6bc-9b4d-477c-afd1-d572f6b016fb"
        },
        "item": {
          "id": "e9751acc-b9ae-4a24-acfc-bd3a2b9ebd2b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "33f78b59-a4e8-4c6f-b152-d2162dafb3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9b584b-8113-4bcf-96eb-f25b9abbcb09",
        "cursor": {
          "ref": "ad7e749f-795c-4412-ada3-065792ed0d89",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c2747873-7e43-4aa3-9778-75e8a901e944"
        },
        "item": {
          "id": "7a9b584b-8113-4bcf-96eb-f25b9abbcb09",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "80770513-a79b-4533-bc37-653500af1990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407ff89b-33cd-4444-9040-81ac794513e5",
        "cursor": {
          "ref": "96db3cb4-5763-4588-b52d-214e3874795d",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c90310a7-7e8e-449d-8c92-2861dd161932"
        },
        "item": {
          "id": "407ff89b-33cd-4444-9040-81ac794513e5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3097a2ef-770a-4064-b48b-5dfb321722fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9840d160-d5ab-431e-86e8-f13fee7b96d9",
        "cursor": {
          "ref": "10167e71-e691-4ae5-9d47-6634c681be34",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1bd4d242-4753-49b5-bb53-2619e1c7d39d"
        },
        "item": {
          "id": "9840d160-d5ab-431e-86e8-f13fee7b96d9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d48da724-f3cf-453c-be05-5904958ff777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ee8d1f-a858-449d-86c8-ba4e08ab7c95",
        "cursor": {
          "ref": "99ac56a5-6a6b-4bc2-a996-2eda85d1d923",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c4579298-c738-45c8-8a9d-45952daa8009"
        },
        "item": {
          "id": "d9ee8d1f-a858-449d-86c8-ba4e08ab7c95",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f5292943-76a5-4df2-94d8-e4f425ab8d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52dba7c0-ddcd-4310-a7c4-5dcffcc052ef",
        "cursor": {
          "ref": "268729e2-8b38-4b18-9d46-0ba2eb30c53b",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bcc0412c-5dce-4caa-bc9d-9ba3110412b3"
        },
        "item": {
          "id": "52dba7c0-ddcd-4310-a7c4-5dcffcc052ef",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bbb31bd5-6060-4c85-a405-a2a2d1e6f986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8d4aad-2b36-4185-b94b-4e8eaad02b99",
        "cursor": {
          "ref": "1da0b9c8-5809-4300-9b86-799fc01a8e96",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1b4ca8de-630a-4925-bcf8-4c439487b18a"
        },
        "item": {
          "id": "1e8d4aad-2b36-4185-b94b-4e8eaad02b99",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ecabaea7-950d-40d4-a503-cc79014d785a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2e4a79-6f6c-47e8-b30a-118513500da1",
        "cursor": {
          "ref": "29a5c9b7-e093-4058-93fd-52f6c6b67149",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "cac3815e-4477-4760-bc8c-9b29edb48c5b"
        },
        "item": {
          "id": "0d2e4a79-6f6c-47e8-b30a-118513500da1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "71070768-8b0d-4b74-9458-ad27c2554a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "9cddbf48-f9c9-4ed4-bfc3-40a304aee1e0",
        "cursor": {
          "ref": "7990b9c4-a6e9-4b81-946c-9b769ca620f7",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "06ab81be-8b7e-496f-9eec-24438d157b04"
        },
        "item": {
          "id": "9cddbf48-f9c9-4ed4-bfc3-40a304aee1e0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "691df63a-b981-45d6-aef8-14f2a185f0e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "d78c2e86-4637-48a9-b3cc-15aa1748a7fb",
        "cursor": {
          "ref": "4f2c207d-69c0-46c6-8fe2-9dec2f02d08f",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d173b2a8-aeac-4803-b9c0-cb64faf16755"
        },
        "item": {
          "id": "d78c2e86-4637-48a9-b3cc-15aa1748a7fb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cabbeade-edd7-4a9e-af5f-db18e7372af0",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b424f377-ec20-4370-a87c-91b1daac1367",
        "cursor": {
          "ref": "8dce3346-dc29-4b1c-abf8-bd4690201089",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6c4e1412-1978-4264-b04f-783ecdd47314"
        },
        "item": {
          "id": "b424f377-ec20-4370-a87c-91b1daac1367",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "1895eae9-11c0-42b4-9fd2-a00b23c890ba",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076d1980-13d3-40f2-8c8d-1950f2e304e0",
        "cursor": {
          "ref": "eb115689-2879-4b10-b036-575a06e9371d",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8649a4f5-9a6d-443c-9481-353cefdb6f01"
        },
        "item": {
          "id": "076d1980-13d3-40f2-8c8d-1950f2e304e0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2b9e9d05-7497-4a4e-9556-53cc98949eb1",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee12d0e-8368-478b-a18a-e3c72d6c5b00",
        "cursor": {
          "ref": "47b066d7-96d9-448e-b2bc-2607606f4910",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f8b5e95d-ca50-4e7a-b0d5-fa0e02261060"
        },
        "item": {
          "id": "3ee12d0e-8368-478b-a18a-e3c72d6c5b00",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "30d58256-1972-42d2-a3f9-4faa16ddfd52",
          "status": "Created",
          "code": 201,
          "responseTime": 361,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a606917c-caa2-4a59-9cf8-4d578a321321",
        "cursor": {
          "ref": "f10a7985-091f-4d77-900d-7319380c8361",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cf979199-5b68-485b-8840-1134eb6094d0"
        },
        "item": {
          "id": "a606917c-caa2-4a59-9cf8-4d578a321321",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9595c870-3a8a-4a6b-aca4-1cad33203cc9",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d7af80-8d2d-4f1e-9cef-8a472c308e15",
        "cursor": {
          "ref": "83631018-afcc-42a8-8e0e-1c2eed638f3b",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "47183064-0c6c-4968-9eb5-4a637f2b212f"
        },
        "item": {
          "id": "41d7af80-8d2d-4f1e-9cef-8a472c308e15",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4e285244-16fb-4680-b096-955d8ccf1ba7",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83dfc28-f12d-40b7-b954-6b9f2d766775",
        "cursor": {
          "ref": "0f274412-00a1-4260-8b59-279b6c1e147e",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2ff2acdc-06d4-4a2e-b422-b52e4655defb"
        },
        "item": {
          "id": "f83dfc28-f12d-40b7-b954-6b9f2d766775",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4f5570fe-765a-4203-8894-f55ae9294d81",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f83dfc28-f12d-40b7-b954-6b9f2d766775",
        "cursor": {
          "ref": "0f274412-00a1-4260-8b59-279b6c1e147e",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2ff2acdc-06d4-4a2e-b422-b52e4655defb"
        },
        "item": {
          "id": "f83dfc28-f12d-40b7-b954-6b9f2d766775",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4f5570fe-765a-4203-8894-f55ae9294d81",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e8557be7-da8a-4901-abd4-29e44f9f1ba8",
        "cursor": {
          "ref": "140a4e5a-8a48-44f2-9bbf-2d3258be251e",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "631888ae-2813-4409-a549-978d57423a57"
        },
        "item": {
          "id": "e8557be7-da8a-4901-abd4-29e44f9f1ba8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c3a082d0-6fae-49cd-9549-8ab9f915ddfc",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "86fbcc40-2454-4952-a730-db20fce8b6c9",
        "cursor": {
          "ref": "ee956840-588b-446d-9636-53714298721f",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "79eb05a3-ed9c-42bc-be4f-64253526f7be"
        },
        "item": {
          "id": "86fbcc40-2454-4952-a730-db20fce8b6c9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "349e28a6-bb47-49ae-8b3b-0625a2cc2996",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c46e02f4-4097-4b2d-99c0-f45c46261fc7",
        "cursor": {
          "ref": "64fdc64b-1029-4591-a3e5-8105e22d3773",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ca825882-19a4-4483-ae99-94137e85fca9"
        },
        "item": {
          "id": "c46e02f4-4097-4b2d-99c0-f45c46261fc7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "70a0202a-1a00-4e3d-b7c4-579c5937fe03",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "f58cf2a0-6000-4173-aeb6-f15945f55468",
        "cursor": {
          "ref": "0bb95b8a-1a87-418f-b86c-02e90b02a1e1",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f60a5f9b-dd16-4591-a326-41f5d7d16437"
        },
        "item": {
          "id": "f58cf2a0-6000-4173-aeb6-f15945f55468",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "aeb8c58e-f81d-46ac-a404-1b8114e5a950",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e2437889-19e9-4070-9763-01d63b640132",
        "cursor": {
          "ref": "60c47619-ddc9-4c33-a45c-d3ebca883335",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2fc85def-e0c9-4256-8862-f426b9e23e81"
        },
        "item": {
          "id": "e2437889-19e9-4070-9763-01d63b640132",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "efb3fe6b-a1ec-4cdc-9851-8866e690d94b",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "b4494e68-fd46-4a3a-b2df-98544316a76b",
        "cursor": {
          "ref": "fbba3e71-8735-4ca2-be21-360542fedb95",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ab03e548-08f0-4936-b4f2-046af361988e"
        },
        "item": {
          "id": "b4494e68-fd46-4a3a-b2df-98544316a76b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8c9ff2ae-0e47-4150-a65b-580b3d206775",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "46f64937-e103-40e1-abb4-ca87d193043e",
        "cursor": {
          "ref": "539ad4ef-f1e4-46f2-ade4-0138c99a8545",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7aa79af4-a5e6-453e-b0f8-2c9b633b5bfa"
        },
        "item": {
          "id": "46f64937-e103-40e1-abb4-ca87d193043e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7e154232-c27e-4908-8ac6-839ce15eacb6",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e044af55-180a-413f-a683-ce5bcc377b34",
        "cursor": {
          "ref": "0e9571c4-9ac9-4c89-b0d9-72b40efbd8c9",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "50fa2cc3-33df-48dc-a838-dc5799e07e53"
        },
        "item": {
          "id": "e044af55-180a-413f-a683-ce5bcc377b34",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "72996c36-320d-47be-810a-6f2419d34569",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "5356a418-0ff8-4a6c-b401-cf53766bf680",
        "cursor": {
          "ref": "f323116c-6ff7-43fb-be1e-74879b8877af",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "040c1401-c84f-4fb0-8d90-c8bb9ce2f9dc"
        },
        "item": {
          "id": "5356a418-0ff8-4a6c-b401-cf53766bf680",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "099103c1-d808-4b49-a385-8e23685e44fa",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "322b9d65-0a87-434c-8ba2-663953c641f9",
        "cursor": {
          "ref": "7d9dac9f-e80f-48dc-a93d-6e289f23d57f",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4aa183c0-ed35-4c57-9b93-445f22cd64c9"
        },
        "item": {
          "id": "322b9d65-0a87-434c-8ba2-663953c641f9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "cd8d6eb8-25da-43fd-b56b-61e004b59ecd",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "934c04c2-2e93-4956-9c0e-37531f9d1010",
        "cursor": {
          "ref": "64458fa4-e70b-4fbd-8350-82ad268ec2cb",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f80f1a9b-279a-479f-bcd2-21bc82c58cbe"
        },
        "item": {
          "id": "934c04c2-2e93-4956-9c0e-37531f9d1010",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3c9bc9ca-33bb-4363-b7e1-04b22b68919f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "67979601-6023-4339-ab8c-86849cc0b961",
        "cursor": {
          "ref": "e3c4ad11-3d10-4786-b897-8ffcc7b5af24",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b984d208-6851-417c-b8e9-8f9bca2f2cda"
        },
        "item": {
          "id": "67979601-6023-4339-ab8c-86849cc0b961",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "00439747-d21e-4a7a-939b-90ab1a0ea75e",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2099e997-098b-49aa-bedf-2e173393dd83",
        "cursor": {
          "ref": "07efc600-5cbf-402e-83f9-1065e4750b55",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "449976d7-340b-4e2f-9528-9cec6a347c05"
        },
        "item": {
          "id": "2099e997-098b-49aa-bedf-2e173393dd83",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3d80d1b6-c860-42db-881c-b2b08cca2849",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "eb5fb991-192e-46eb-afb3-7deb488a75de",
        "cursor": {
          "ref": "6b109fd3-b25a-4cf3-83d4-614f60d3d6aa",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b68f029e-6697-470e-9afb-11ea6d1ce035"
        },
        "item": {
          "id": "eb5fb991-192e-46eb-afb3-7deb488a75de",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "acde0f00-70ec-40ec-89e5-c415adf94787",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "0ae41b83-2204-472c-9c85-0abd7479ad0e",
        "cursor": {
          "ref": "5db2a7f7-7e02-4f4b-a100-d0e5dd7dc2e0",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3fa4a0a0-3fde-498a-ad1a-e2f46cbd4d06"
        },
        "item": {
          "id": "0ae41b83-2204-472c-9c85-0abd7479ad0e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "833ce625-46e5-473b-877a-cdd6d6974c7d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "99933ff7-bf4c-4090-a0ab-cd1a06fdb870",
        "cursor": {
          "ref": "f8163d94-71d2-4145-a230-1c85e0fbed91",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "70162d18-729a-42af-929d-85b14941cdb0"
        },
        "item": {
          "id": "99933ff7-bf4c-4090-a0ab-cd1a06fdb870",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c9f8a631-6576-4c67-8e85-1318138d5b6e",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "7966eda6-0859-422f-9201-482b75d5cdc1",
        "cursor": {
          "ref": "91a9551e-796a-4733-8235-322fb2f260b8",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "60959110-9f6a-4e8f-b73c-5aa4f0d7ecb1"
        },
        "item": {
          "id": "7966eda6-0859-422f-9201-482b75d5cdc1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "76e0d590-f1b5-479b-84db-8f55bd85918f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "45284340-ff97-447a-a36f-6248ef634cf5",
        "cursor": {
          "ref": "6fd16e6b-d43f-4edd-83a6-0bf5f0764037",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7e7c1f29-eff0-40bf-9065-7f71f11346d7"
        },
        "item": {
          "id": "45284340-ff97-447a-a36f-6248ef634cf5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "dd1ab284-10b5-4df8-839a-90fd139f9efd",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "af33f403-f8e4-47c0-bdc7-e0480625f6d5",
        "cursor": {
          "ref": "2c0fd57c-8986-43a5-951e-177a6f2a45a8",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1687329e-a680-40c8-adbc-cf3ecdb571fd"
        },
        "item": {
          "id": "af33f403-f8e4-47c0-bdc7-e0480625f6d5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1b8308c0-e306-44fe-bc10-09160024db66",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "3bafa231-8752-4563-b3e3-cd659c0af96e",
        "cursor": {
          "ref": "127c0093-c1a5-45bf-b253-4f9238acc7fd",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d0d653f9-2282-4616-b774-0a07ca56eb4a"
        },
        "item": {
          "id": "3bafa231-8752-4563-b3e3-cd659c0af96e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9b1cee12-9e38-43c8-ba64-eefa22173334",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "87a045f4-785b-435e-ad3f-96bc9ef21083",
        "cursor": {
          "ref": "23c18fef-0330-41cd-a3dc-24d7792f3d5a",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "60fb3f4f-f12f-44b9-9a22-730a39ec07ed"
        },
        "item": {
          "id": "87a045f4-785b-435e-ad3f-96bc9ef21083",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "33de50a9-b93b-492d-b0d1-be96587c59de",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "588dad7f-e966-4bcc-9a8a-8166beb2e461",
        "cursor": {
          "ref": "144b61cc-abbf-4b1b-8811-42f9b6b5c82a",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "32e64b14-2123-49fc-91ec-92af9c32f580"
        },
        "item": {
          "id": "588dad7f-e966-4bcc-9a8a-8166beb2e461",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6ca47ce6-f01e-44ba-bf28-8ee0822b69e1",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "16bc7b2a-549e-4778-9be4-deec7bf1d7c7",
        "cursor": {
          "ref": "db6eb64f-31d6-4361-b7dc-95b357f440de",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4d821df3-3b39-408f-96c0-58624012bbbd"
        },
        "item": {
          "id": "16bc7b2a-549e-4778-9be4-deec7bf1d7c7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "89912d1c-1820-4380-ad1c-12d7120f332c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "88c620e3-967f-438b-af4c-eff8773b29a7",
        "cursor": {
          "ref": "2f5cfef4-42e8-4435-bc30-d80051387da2",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "460f6c05-fc52-4c57-afe7-596d60241c4d"
        },
        "item": {
          "id": "88c620e3-967f-438b-af4c-eff8773b29a7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "53ed3987-d3a8-4b39-a37a-07547e56febb",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "9cb4a76e-9c75-42c1-bb5f-4d8579295bed",
        "cursor": {
          "ref": "964dfc66-8ac3-4424-86da-746c0a756032",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a36979a3-ded1-4bb8-8237-1591cf870e6f"
        },
        "item": {
          "id": "9cb4a76e-9c75-42c1-bb5f-4d8579295bed",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "04c1b0f8-fbc4-4923-8840-e33f814374f2",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "edc2685c-8b2f-4074-900c-85e5dd09db70",
        "cursor": {
          "ref": "da31d266-ff8f-4981-b9c4-c3233c97a2c6",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7d7d90ab-f9a6-4cba-bae0-5b4b0bc55932"
        },
        "item": {
          "id": "edc2685c-8b2f-4074-900c-85e5dd09db70",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "195b897d-591d-4ba9-98af-8a3a00544b19",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "e407a5a8-82a6-4e03-a780-96f0191a9c92",
        "cursor": {
          "ref": "8d8e4956-c9bd-4b86-a2ef-a2891f2352c6",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "10eadf9d-795c-4f66-8438-502a2f597095"
        },
        "item": {
          "id": "e407a5a8-82a6-4e03-a780-96f0191a9c92",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "75153ff3-753f-441f-9d83-070e1b746d97",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "5059dc79-4249-42a3-9dce-d33aecdcae99",
        "cursor": {
          "ref": "d54e205e-6603-48be-8136-468ec43cc6d8",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "63a85a94-8ae0-4b51-822a-14ff40131db3"
        },
        "item": {
          "id": "5059dc79-4249-42a3-9dce-d33aecdcae99",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1d6fa1f2-a9ee-4d05-9e93-52f4a21ee51e",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "d4350d7b-4819-4f57-a5d1-c08453bc4cb8",
        "cursor": {
          "ref": "946d8bfb-ba61-45ff-82c0-41999cb2c4ee",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ac73448c-85a0-46f0-a34a-c76891486527"
        },
        "item": {
          "id": "d4350d7b-4819-4f57-a5d1-c08453bc4cb8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b2b2a0b5-ad6a-4020-ad1b-7895a546fe81",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "32e09b38-26f8-4fa9-9262-8a2a162e4a24",
        "cursor": {
          "ref": "6b1fd34f-ff2d-41ee-bbce-dcb676e9831e",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cb3e21c4-693c-4dd6-b289-76306cba0912"
        },
        "item": {
          "id": "32e09b38-26f8-4fa9-9262-8a2a162e4a24",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fb0737ee-e67f-405f-b4c3-189546d55897",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "1bfcced0-fba9-4ea7-8f8f-8ab199ee2492",
        "cursor": {
          "ref": "f8f61d65-1244-4c07-933e-6a774e04dc72",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4305421a-1749-422c-a1bd-64989b0b4fbd"
        },
        "item": {
          "id": "1bfcced0-fba9-4ea7-8f8f-8ab199ee2492",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e06eed82-1f7d-4836-936e-79d231a34963",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "0a9f9e98-6d1a-43be-9c4b-4fea12e11228",
        "cursor": {
          "ref": "4ab6efac-d6a1-498d-8ed9-1fdc7c6592d8",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a58606d0-4aea-4fdb-aba7-9f514abe4367"
        },
        "item": {
          "id": "0a9f9e98-6d1a-43be-9c4b-4fea12e11228",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fb035a4d-79a0-4ba9-bcea-8645ead005cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb90ef1-77fe-4301-96ba-084512e08f8d",
        "cursor": {
          "ref": "713a860d-eb80-49ee-a464-eeab02998eea",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "69708731-db3f-44d4-a30d-dfb6e76e60bf"
        },
        "item": {
          "id": "adb90ef1-77fe-4301-96ba-084512e08f8d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "84058684-6dca-4afa-9926-fd1131633378",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5597fe84-2c3f-4688-a0dd-33adf91c63ec",
        "cursor": {
          "ref": "7e71d280-6314-4068-85d5-8018579d5740",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9bdee053-acfd-461a-92e0-1070fa0c29e8"
        },
        "item": {
          "id": "5597fe84-2c3f-4688-a0dd-33adf91c63ec",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5376e837-0b0f-47f7-876c-b60c8bf0a447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5597fe84-2c3f-4688-a0dd-33adf91c63ec",
        "cursor": {
          "ref": "7e71d280-6314-4068-85d5-8018579d5740",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9bdee053-acfd-461a-92e0-1070fa0c29e8"
        },
        "item": {
          "id": "5597fe84-2c3f-4688-a0dd-33adf91c63ec",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5376e837-0b0f-47f7-876c-b60c8bf0a447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9102843e-00fc-497f-9699-a65b43f4a514",
        "cursor": {
          "ref": "28986014-dfff-462f-8351-e10771522c22",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9f0c69ea-6d80-438b-bb54-9d48f7240e74"
        },
        "item": {
          "id": "9102843e-00fc-497f-9699-a65b43f4a514",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4fe10872-fd06-4080-8f2e-cbabacc4d245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43575c4c-71ea-4088-822b-e17dde2795fd",
        "cursor": {
          "ref": "4f3d7a27-0659-45d7-9db9-4ef3ed6462d6",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "38251342-d6bc-4cb0-b146-b3081ce73d0d"
        },
        "item": {
          "id": "43575c4c-71ea-4088-822b-e17dde2795fd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6cc82328-2fee-4478-89ac-9c84ee088a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9b19a3-353f-4747-acd7-70cc680b08f4",
        "cursor": {
          "ref": "c03d342c-ccab-449a-843d-5e4ce48d4067",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5b98f024-8038-4c2a-a4e3-cea7930707fe"
        },
        "item": {
          "id": "1b9b19a3-353f-4747-acd7-70cc680b08f4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "93e3f7ec-72d4-49fa-a77a-5295483d2d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ce12ca-2926-484c-8033-cfafe8f003ae",
        "cursor": {
          "ref": "c3972ebb-0088-4183-a63b-73d2e9423923",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "214a6c03-08b0-4024-905a-923e4a7ec025"
        },
        "item": {
          "id": "44ce12ca-2926-484c-8033-cfafe8f003ae",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3e4a430b-fbd4-41ad-8dea-28eb810f2f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11d33a6-1c0f-48cf-a3d3-8316ecf90e75",
        "cursor": {
          "ref": "a4ec5d64-bde1-42b6-89c5-29018f1c6e57",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6ea5316f-4677-4f7c-a921-94675c4e968f"
        },
        "item": {
          "id": "b11d33a6-1c0f-48cf-a3d3-8316ecf90e75",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6a3af099-cfc2-494c-a337-6dc2d37fdfcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478e7f50-9cd7-46d6-8e79-daef908e658f",
        "cursor": {
          "ref": "70eb887e-2cac-4b64-b48e-6f3bb6b5bf95",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2bc6ed23-cd3c-4447-86b1-d61f18d68537"
        },
        "item": {
          "id": "478e7f50-9cd7-46d6-8e79-daef908e658f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c7402f52-7b86-4eb2-8b69-6400403da494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 782,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b400c1-0915-47a8-8bbe-672e1cf7fef7",
        "cursor": {
          "ref": "f049d5ac-2681-45fb-ae89-14c61ef5c1b6",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c6de5711-e5f0-4c14-acff-f327d2ea5584"
        },
        "item": {
          "id": "f9b400c1-0915-47a8-8bbe-672e1cf7fef7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9e7b1652-7df6-494f-9a84-ec593da33978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daef2ded-b110-465c-8f18-cc1a5b0dc499",
        "cursor": {
          "ref": "c2eb33a7-1049-4b6d-80b7-3b1ef6637883",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a6664477-d249-440d-bbcf-f03597ccdb98"
        },
        "item": {
          "id": "daef2ded-b110-465c-8f18-cc1a5b0dc499",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "04a27e3c-dc94-4410-95bc-259369ea7b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decee9a1-dd5c-4f1b-ab72-847c660390f4",
        "cursor": {
          "ref": "e0247fa8-89bf-4253-8751-8749ad314ac4",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c7980494-2dfc-4dd9-8981-7345d94a073d"
        },
        "item": {
          "id": "decee9a1-dd5c-4f1b-ab72-847c660390f4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9d1f7c55-fc95-48ce-956e-49330f2080fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae5c49a-9a52-41f6-a2ff-fdc5ec02bf87",
        "cursor": {
          "ref": "705a8b1d-2c20-4cac-abcf-081148bd78a5",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a612bb5f-b0e7-40bc-b26a-031abea442d0"
        },
        "item": {
          "id": "bae5c49a-9a52-41f6-a2ff-fdc5ec02bf87",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "459028bd-e0c9-4201-ab36-e60453541811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19177de6-7c50-492a-9a2e-91db73d29f31",
        "cursor": {
          "ref": "5487af9c-e323-4fcc-850c-116bd6e76118",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "01b7de4a-0750-4735-a681-a88597a01841"
        },
        "item": {
          "id": "19177de6-7c50-492a-9a2e-91db73d29f31",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f1751fab-8087-48c8-9a8f-0e4da2368e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c90dbf8-236d-4a67-a287-51bde0a55cbe",
        "cursor": {
          "ref": "c0df8e11-edff-4a5d-a6da-69c78f903f67",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f1d3b45b-2298-450b-8cda-b65cd7c54e97"
        },
        "item": {
          "id": "1c90dbf8-236d-4a67-a287-51bde0a55cbe",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fb64d27f-4eb4-4c5f-b7d9-b7fda1821cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee0cd98-7ab2-4f10-aee4-dd626d1af632",
        "cursor": {
          "ref": "6e456ffd-1998-4a46-a26a-2115f6678fd6",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "900c712f-672d-4e39-bfea-f1186a3348b4"
        },
        "item": {
          "id": "7ee0cd98-7ab2-4f10-aee4-dd626d1af632",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "75cd981a-e4ea-489f-b6b0-2b1c1b9add80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42538fba-2838-44fb-a6c7-fedf3dd2f1d8",
        "cursor": {
          "ref": "a77dff5b-4eb1-4bf3-a7f3-4af08a0a9ba2",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8263b60b-67f1-4c7d-89e9-4fd11cd743d6"
        },
        "item": {
          "id": "42538fba-2838-44fb-a6c7-fedf3dd2f1d8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fe7f6f7f-9cc8-4d6f-aa53-68517a6b6e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba7d69c-6202-4864-839a-c6e8bd49079e",
        "cursor": {
          "ref": "da10a929-eba3-4a29-b6b0-3dd7d56e8829",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b29cecc6-6325-4757-9dfa-46e0f46c077d"
        },
        "item": {
          "id": "9ba7d69c-6202-4864-839a-c6e8bd49079e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7a49fef6-b684-4d98-8c7c-767efb7c2bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25bf0d8-5262-4305-938d-bed9e8934173",
        "cursor": {
          "ref": "8cc0810b-c1e1-4898-a5c8-55787fb89dec",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ca0d5985-8b50-4f0f-be87-93ebffba12f9"
        },
        "item": {
          "id": "b25bf0d8-5262-4305-938d-bed9e8934173",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "04227662-bdfa-41bf-9427-d9ce675edb49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62aee6f6-7c47-4a98-9d2f-61f5ad8121c7",
        "cursor": {
          "ref": "992c83e0-6b15-48f5-a470-75332920cc8a",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7dc241e8-9be4-497e-a2d1-ada0f22144a5"
        },
        "item": {
          "id": "62aee6f6-7c47-4a98-9d2f-61f5ad8121c7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fd8c9447-6516-491b-bf75-6cb7822a0caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 318,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1aff981-e9c1-44e9-800d-33d66d74db4d",
        "cursor": {
          "ref": "74c51b5e-cf60-4414-aa4d-7ab7bd410887",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0e7fddc0-757e-4e5c-b315-70c9073a683c"
        },
        "item": {
          "id": "a1aff981-e9c1-44e9-800d-33d66d74db4d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "16184604-5d7c-4026-be9b-4ff08a039399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09fe8312-61e4-4e4c-b57d-f11281725538",
        "cursor": {
          "ref": "26fdf014-1a1b-469c-828d-ce8276c3c2cc",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b96b0448-c53c-4b66-925a-47efd99d43da"
        },
        "item": {
          "id": "09fe8312-61e4-4e4c-b57d-f11281725538",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d2fa36e9-fab8-4754-972b-65a61baadf07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64352efc-c2a4-42dd-8ee9-9ecdd7c38045",
        "cursor": {
          "ref": "83e3df42-c87e-4af4-bcd1-e882a40ce167",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "28f3a2f5-780b-444c-8ae9-0f88bd05307e"
        },
        "item": {
          "id": "64352efc-c2a4-42dd-8ee9-9ecdd7c38045",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "32a02968-1755-4021-a451-1731a2fd4e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d91ba5f-fd44-4ac5-8261-e70635d40865",
        "cursor": {
          "ref": "347966f8-68b0-41dc-bbf8-e4339d82b749",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "86ec8614-3911-40ce-bde6-fb2c729d299e"
        },
        "item": {
          "id": "4d91ba5f-fd44-4ac5-8261-e70635d40865",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8733ebe0-6062-4452-a8e0-23c05702ec8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b692981-9ad0-4ddc-bd8a-ca04550137db",
        "cursor": {
          "ref": "a8a5f99b-ca42-439e-bea6-a2f69330b875",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9517d21f-3e23-477b-ab48-0cb26ee5c02c"
        },
        "item": {
          "id": "9b692981-9ad0-4ddc-bd8a-ca04550137db",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5a13bee6-87f6-4152-bc01-b61e504024e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1f3f0f-8b7d-4588-8206-dbc465bebae3",
        "cursor": {
          "ref": "c253c297-2b27-4dc6-8ca7-9ac0286e97df",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d4b3f878-474c-4457-a895-1fe52853f4d3"
        },
        "item": {
          "id": "2d1f3f0f-8b7d-4588-8206-dbc465bebae3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "40926057-eb71-4044-bfb5-bd85e8f5bc23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17af0eaa-1681-4f78-b807-c71cf94bfa2d",
        "cursor": {
          "ref": "ed7cb672-8f54-4e73-8336-6bda3e8a64a6",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1df08d43-7857-4492-9a12-b2385b52f6dc"
        },
        "item": {
          "id": "17af0eaa-1681-4f78-b807-c71cf94bfa2d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1228dbec-1291-45f4-a020-7eb3c44d716b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437d9874-1578-4c5e-b445-728e1504a436",
        "cursor": {
          "ref": "086e02db-b11f-44ce-84d4-19850cc4104d",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "cb136889-3b38-445a-adc4-33f666cf683b"
        },
        "item": {
          "id": "437d9874-1578-4c5e-b445-728e1504a436",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d33b8779-0519-4e25-9d1c-ac89922d9d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b539c5-9e9e-49bc-8691-a8f0d9601c51",
        "cursor": {
          "ref": "d640d7d4-dc0c-46a8-ab17-cec3279f3215",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8aefb910-68e9-4f08-8dbd-8f71d09e606b"
        },
        "item": {
          "id": "f0b539c5-9e9e-49bc-8691-a8f0d9601c51",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f21cad79-99f6-448d-b890-87979251e9e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff38110-1cca-4c97-b4eb-0f886bc9b201",
        "cursor": {
          "ref": "89402a24-334b-46d2-afaa-397840b7d1ff",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "787b44a4-c0ef-4476-ac1d-460a8837c461"
        },
        "item": {
          "id": "7ff38110-1cca-4c97-b4eb-0f886bc9b201",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4dfe89d1-208c-496c-8d78-e740162d562b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4cadb8-75ff-4228-a54b-2c7b634c6cb3",
        "cursor": {
          "ref": "5478d277-390c-4da6-a471-281886bcc1a8",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "375715c8-ede7-45ff-9a5e-287c232b1668"
        },
        "item": {
          "id": "4a4cadb8-75ff-4228-a54b-2c7b634c6cb3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6b1b40fb-7ef4-4f13-8987-c3a841743b64",
          "status": "OK",
          "code": 200,
          "responseTime": 212,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "89e13c64-e9a8-448b-9ef9-0a8c52b421a4",
        "cursor": {
          "ref": "2a02026f-a95d-4a6b-a864-5a47f1f80a30",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9a0847f9-ef2b-421a-b725-106fd56c4625"
        },
        "item": {
          "id": "89e13c64-e9a8-448b-9ef9-0a8c52b421a4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "eb56bd0d-2670-4a7a-b2d0-69d482c7f764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07b6307-ac28-4ce1-af20-6bd1a4bbd332",
        "cursor": {
          "ref": "7ef8bbd9-a0ef-40c9-b53b-c3f62430d630",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7f8ddfc9-fa51-4521-9b93-4761ce89fbc1"
        },
        "item": {
          "id": "b07b6307-ac28-4ce1-af20-6bd1a4bbd332",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "44e74d1d-ce72-42d3-bab4-5e69b1b05573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57f6733-69e8-4d43-858f-d0c01e8e484e",
        "cursor": {
          "ref": "a6aa6f26-6eb1-411f-9552-2b964f6298a2",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0d7f9674-f0bc-47dd-af2d-4165e362928d"
        },
        "item": {
          "id": "b57f6733-69e8-4d43-858f-d0c01e8e484e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3af67129-d694-4f29-8388-54fa172f5afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46be8240-3c10-4be2-9e33-f716add6bba6",
        "cursor": {
          "ref": "ce912ea6-d334-4376-aed8-4c5e83ce7464",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "55d17d4c-b24b-4968-8258-9309b0a3e0c8"
        },
        "item": {
          "id": "46be8240-3c10-4be2-9e33-f716add6bba6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fdc29366-c561-45b2-8d7d-2963f3831c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e9095f-ef88-4323-a5ab-0735fe3e3fbe",
        "cursor": {
          "ref": "9b169fa4-09d5-4e4d-aede-a0c428fc515c",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "aeb867ee-387e-4c0c-9463-c55115a62552"
        },
        "item": {
          "id": "55e9095f-ef88-4323-a5ab-0735fe3e3fbe",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "feb60e9e-65cc-4bd2-acb2-66e86afad4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554a16ae-4aeb-46ac-9b07-b4baf8c84921",
        "cursor": {
          "ref": "fd960371-e883-41ae-9066-ee2a55ad13bf",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "429afd8f-3398-462e-8422-a7eb0d3692b1"
        },
        "item": {
          "id": "554a16ae-4aeb-46ac-9b07-b4baf8c84921",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "18ba9506-557d-46e7-816f-deb000dd461a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0071a02b-c49d-493d-9171-ba9d816ac0d0",
        "cursor": {
          "ref": "8ff75e91-0621-43a3-b13d-3568f1b6d740",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d816d360-66da-4df2-bc24-4b8ba72777cd"
        },
        "item": {
          "id": "0071a02b-c49d-493d-9171-ba9d816ac0d0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "bf032f22-e663-4b87-8e31-22396d2f5206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c59906-427a-455b-9f20-3c7a60c26d56",
        "cursor": {
          "ref": "7ce82c39-7b21-4cf1-b35b-285e028e6a1c",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8748f7fe-0589-4cee-b5f5-9692ad450b38"
        },
        "item": {
          "id": "a4c59906-427a-455b-9f20-3c7a60c26d56",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f6ac21a7-5181-4097-b2a1-77d3c32e4aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c3999a-6599-45ea-93a1-3b2527a6719f",
        "cursor": {
          "ref": "4a91b9bd-8efe-4691-b7c3-ce83f85f1bc4",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f08350f2-1c98-4397-b2ff-de944789bbd9"
        },
        "item": {
          "id": "d3c3999a-6599-45ea-93a1-3b2527a6719f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cde173b4-eaf3-49d5-b72a-3f3c32285c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 490,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea613c73-6ceb-4b38-8a3f-2c7b024da75e",
        "cursor": {
          "ref": "eb685c78-35fb-44a2-b554-a7905e2b08c9",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "71b7fda3-10a3-4226-9e67-c49fd7ea96de"
        },
        "item": {
          "id": "ea613c73-6ceb-4b38-8a3f-2c7b024da75e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a72da0b8-659e-4502-af94-6752ea1f274f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16519c16-18da-4716-8ece-e6a20d576b0e",
        "cursor": {
          "ref": "f323c718-c34d-44fe-859e-2fa9578a0f54",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "82e434ed-044a-46e6-83ae-f4c46f376d09"
        },
        "item": {
          "id": "16519c16-18da-4716-8ece-e6a20d576b0e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "71e72091-8864-4cc1-aad4-62ab24728762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17b6b2d-03e2-48bb-b070-2335886a8623",
        "cursor": {
          "ref": "d8923358-6bef-45d1-a6fd-28738615bdef",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "557d0c5c-e59b-4c4a-b60a-acb4423c19a3"
        },
        "item": {
          "id": "b17b6b2d-03e2-48bb-b070-2335886a8623",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d29060fd-6069-43b3-9469-cb4d6bfd1e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9280bb-de72-498d-9ff3-8d0dd954865d",
        "cursor": {
          "ref": "efbf73df-ef50-414d-84bc-0012d1fdddfe",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2a696960-63fa-484a-86dd-53b78493acbf"
        },
        "item": {
          "id": "6d9280bb-de72-498d-9ff3-8d0dd954865d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "80690cbe-b968-4446-ae08-1e59dcf6f24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3f8a80-a171-4279-8d9f-8dc191ccdab5",
        "cursor": {
          "ref": "62d0858b-333e-4c77-9348-95947c7dcc9c",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9da3f13a-e964-4138-9f28-16a7c728fbe3"
        },
        "item": {
          "id": "3c3f8a80-a171-4279-8d9f-8dc191ccdab5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b016561f-0c58-4dd6-b7ca-0f24c6014b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e94388d-61bf-4e74-9180-a5af1222ad15",
        "cursor": {
          "ref": "50c67d88-c5b2-482e-a489-bf3bf32e0982",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "08062003-e9cf-4490-adfa-12a3143be018"
        },
        "item": {
          "id": "3e94388d-61bf-4e74-9180-a5af1222ad15",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2f21ca0f-1b14-49c9-a4d7-b8ef819b077e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508c9d76-f394-4def-a047-24645e6f6174",
        "cursor": {
          "ref": "802144c6-21b2-423e-ac5e-6607f932aa3f",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5abc2370-41b9-47f7-8c53-b78e985a79af"
        },
        "item": {
          "id": "508c9d76-f394-4def-a047-24645e6f6174",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6bd81fe6-a738-4745-8027-b4540a469a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e412d5fe-f3a0-4962-819d-ac4a7f74ed6e",
        "cursor": {
          "ref": "114f4059-46c2-4a3b-af1b-c2b34977a04f",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "13a72c02-344e-4d6a-b983-a938d11d1747"
        },
        "item": {
          "id": "e412d5fe-f3a0-4962-819d-ac4a7f74ed6e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "35f72b72-5f88-4a2d-ae5d-eb03dd3a2d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3689ceb-0953-42e3-93f1-9835a6932972",
        "cursor": {
          "ref": "a473e4cf-6313-4aa9-85fc-92a3227ee006",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "257b0369-661c-4d67-b1ae-db7a6193c346"
        },
        "item": {
          "id": "c3689ceb-0953-42e3-93f1-9835a6932972",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "08f9f795-881f-4b5f-a22b-65bed961ac29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c9fee19-f0c6-453c-a2fd-a7bd9b768386",
        "cursor": {
          "ref": "9dce77a7-ab91-430f-aefe-a0d5622405e8",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bbe2e1b4-372a-4c49-b824-a670fca29217"
        },
        "item": {
          "id": "0c9fee19-f0c6-453c-a2fd-a7bd9b768386",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "90287e87-8212-497f-a513-0ea5443967b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6fd716-7d51-48f6-887b-544084466599",
        "cursor": {
          "ref": "3c4237eb-45ea-426a-b952-4a6aa432164b",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "293c3d2e-5e23-4fc9-a7cb-d780c552a3a0"
        },
        "item": {
          "id": "df6fd716-7d51-48f6-887b-544084466599",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3b8a1142-d92a-4a3b-b2cf-b0b1070550c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69dca55d-5a83-482d-96d5-022e01cdfc84",
        "cursor": {
          "ref": "1673b2d9-adaa-4fdf-81b6-5173ec4af71f",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "59ee47d8-6eb4-4c66-88ea-94ece208d3b2"
        },
        "item": {
          "id": "69dca55d-5a83-482d-96d5-022e01cdfc84",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8be81585-625e-461f-9074-979a37b123ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7dfa1ba-ffeb-4ff1-b582-3a587970e60c",
        "cursor": {
          "ref": "a69c138e-6bb7-456d-92bf-56ff866ea795",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "be2c72ae-7075-46cc-98a9-0416e839e290"
        },
        "item": {
          "id": "a7dfa1ba-ffeb-4ff1-b582-3a587970e60c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "86eb26ed-7e73-4551-b5c7-f68c0d21bbff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860161f4-b822-4cca-93d3-afb904db37b9",
        "cursor": {
          "ref": "f407a2e9-e9d3-4243-a08a-8f2eef66bfd0",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b5be22d5-4769-4d55-917b-36c1e0f9fc5b"
        },
        "item": {
          "id": "860161f4-b822-4cca-93d3-afb904db37b9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "04f416c8-873a-44ae-8df4-645cb80e4732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbcafa4-616e-4567-ae5e-25cc97d7c4a5",
        "cursor": {
          "ref": "b8a62be7-3d5b-45cf-a70f-efad16b31f27",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7884fde9-57da-456d-ae32-afa50f468d0a"
        },
        "item": {
          "id": "fcbcafa4-616e-4567-ae5e-25cc97d7c4a5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c1c2c053-2b33-40d1-b296-36596c164bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013811df-7e93-4274-9156-be2437937e88",
        "cursor": {
          "ref": "09bc5bb9-8788-4fc3-9345-de88e938cb6b",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "08bb3533-5234-4e97-b237-9bfb0df93c36"
        },
        "item": {
          "id": "013811df-7e93-4274-9156-be2437937e88",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ef250af8-a2b4-46b5-b266-ac71a3d7be80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cce568-0840-40d3-a91f-26e9bd3062d3",
        "cursor": {
          "ref": "7674d15d-d104-4c0a-b704-be2038bce5e7",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0cf94922-810f-446c-9b72-c7c8499c4194"
        },
        "item": {
          "id": "c2cce568-0840-40d3-a91f-26e9bd3062d3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a7b62198-4a68-4d81-9507-00a5120d95bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e7ea70-6bd2-4d37-b04f-e553a0becc61",
        "cursor": {
          "ref": "a8f5ce11-3556-4c34-bc01-0c5e7f14b158",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "07c50fca-eec2-4108-9f98-72a5e7a98884"
        },
        "item": {
          "id": "d2e7ea70-6bd2-4d37-b04f-e553a0becc61",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e6f3f0e1-b3ee-468e-9bfd-bb910349e5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296bcb08-340b-403a-a247-4f03e306304c",
        "cursor": {
          "ref": "977c6bdc-abec-48b9-b95d-cf1b61914085",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4e9e3ae6-b509-4aff-af9d-760ccdcd0017"
        },
        "item": {
          "id": "296bcb08-340b-403a-a247-4f03e306304c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "291b5221-d796-4d09-bff4-18d57c434aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f813b380-a629-4a0a-a3a1-143fc5a486dc",
        "cursor": {
          "ref": "1a6dcabb-0969-4c47-8bcd-584417a48e90",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1f498e98-9963-49f7-9c1f-d5abb79faa31"
        },
        "item": {
          "id": "f813b380-a629-4a0a-a3a1-143fc5a486dc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5d51b893-c185-4991-9bc7-c79c759521f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6940f11d-8d34-4b08-a620-5108154e5683",
        "cursor": {
          "ref": "1e85ff08-bf85-4f40-98cd-f3d55173b9df",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "966f4b7d-11bd-4be5-aadc-901a3fad3718"
        },
        "item": {
          "id": "6940f11d-8d34-4b08-a620-5108154e5683",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "315fae00-6fd2-4a48-9f9e-4134cce531b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28289568-79a0-4d0f-b396-5629de870e4d",
        "cursor": {
          "ref": "ca28478e-715b-4b14-8b35-e619053e70d3",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "814d5af1-8e90-4d96-a77d-e65271f000dd"
        },
        "item": {
          "id": "28289568-79a0-4d0f-b396-5629de870e4d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "921544de-1c21-47f4-9724-e42bf2c1bd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8ba1df-e1a0-4d03-9875-0930424efe5c",
        "cursor": {
          "ref": "d9d7797f-7149-49be-9d92-291a696babfb",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "16b75039-31fe-4dc9-b487-8f788193d5fd"
        },
        "item": {
          "id": "ca8ba1df-e1a0-4d03-9875-0930424efe5c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c6d525fc-0316-4f28-910c-cf0ff273fb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af175e21-9190-4f2b-a9db-8e278ca6bc24",
        "cursor": {
          "ref": "21253f88-223a-4a59-aa74-18fdbdee0785",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6f087d9a-c49e-4405-9009-e299557a29c9"
        },
        "item": {
          "id": "af175e21-9190-4f2b-a9db-8e278ca6bc24",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4f7fd425-dc45-4195-8b70-fe2c0076d834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982b9524-1b89-4f08-9017-44e379ffbeb3",
        "cursor": {
          "ref": "2b50d46f-4622-4eaf-9507-8565da5c7e30",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4e82f1fc-69e0-42eb-8dd6-d48c1b9b4ff4"
        },
        "item": {
          "id": "982b9524-1b89-4f08-9017-44e379ffbeb3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5b9ad982-6458-4f95-8ddf-e4233d542e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a026a1-837e-4404-b442-c93c896bf588",
        "cursor": {
          "ref": "ba7f6994-9c36-43b0-812b-b7b46f11eb53",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a3ccd7bc-8215-4016-9208-c0030b2dc44a"
        },
        "item": {
          "id": "b8a026a1-837e-4404-b442-c93c896bf588",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0d047bc7-0939-4822-94bc-552a9f656d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c0ddcc-05b2-429a-bf56-7deb0a564b4e",
        "cursor": {
          "ref": "6b1d7afe-e54c-4572-81f6-150183cca974",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "24fc694c-5c78-46a4-bd64-dc569c8c7aae"
        },
        "item": {
          "id": "60c0ddcc-05b2-429a-bf56-7deb0a564b4e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fd0c7ed1-507b-466c-b315-fd4ddf709680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7542118-bbff-44a5-8a40-ee2ae8752c9f",
        "cursor": {
          "ref": "b48a2490-04a9-4b80-a660-cf50ee943e5d",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e019b797-9c13-43f2-bd7e-3da0b0f72053"
        },
        "item": {
          "id": "e7542118-bbff-44a5-8a40-ee2ae8752c9f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8e754239-5a8f-42cf-ad6e-b1aeb87e9899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1437b659-4b79-4756-9816-1a0485384664",
        "cursor": {
          "ref": "27f8bb76-b087-4dd2-84ec-1abef4a3d29a",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9cfcebda-908a-42aa-9c7f-fcdeff6f3996"
        },
        "item": {
          "id": "1437b659-4b79-4756-9816-1a0485384664",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "64ab24d1-3592-4af8-8805-276bb0180a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501d2d06-3fee-445e-b950-a6ac0f021e93",
        "cursor": {
          "ref": "cfc719bf-70a2-4787-ab66-2c04df0797c9",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a8a441fa-ef52-4ca6-a651-3aa43ea4317a"
        },
        "item": {
          "id": "501d2d06-3fee-445e-b950-a6ac0f021e93",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "79576638-81ab-4495-99a3-3de7738ecade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6475b13d-a62f-4e39-96fd-11a707593e23",
        "cursor": {
          "ref": "347cabb1-3b2d-4b7d-9f45-4daade08710d",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1a2970d9-f6fc-4519-8c17-47d14909adf4"
        },
        "item": {
          "id": "6475b13d-a62f-4e39-96fd-11a707593e23",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "10293faf-038e-4ca1-8004-659c0deed426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34cf54c-aea8-463c-9374-affdaa7731bd",
        "cursor": {
          "ref": "e418d33a-5d79-4a60-aacc-5294a8003aa6",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0422aa58-99c7-48c4-a9ac-b86298f684c8"
        },
        "item": {
          "id": "b34cf54c-aea8-463c-9374-affdaa7731bd",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7f28740d-510a-434a-8c00-189db3586ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d357ec-3c52-4edd-b458-8e7a8dc90471",
        "cursor": {
          "ref": "6b9d8f80-480b-479e-86b8-fa9494b8cf49",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7c7663d1-e530-46f5-a66b-ce7b0dcac444"
        },
        "item": {
          "id": "21d357ec-3c52-4edd-b458-8e7a8dc90471",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f99ba0a8-9aa0-4bea-89b7-7178e93092db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a15733f-f480-4a1b-9cf7-135708698d72",
        "cursor": {
          "ref": "1b336a7d-4af5-4e14-b745-23ba607893e5",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "11f066c9-5407-4f0e-9220-d64700022c4d"
        },
        "item": {
          "id": "6a15733f-f480-4a1b-9cf7-135708698d72",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e1f2ca1e-3d99-4e2e-b41e-7eb72aac437f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae454ca-e646-445a-965f-686323eeaa43",
        "cursor": {
          "ref": "fef4231b-35fc-483e-ae09-38c1d60a152b",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9cb8d69b-a794-440f-bbdc-c9b7a8547384"
        },
        "item": {
          "id": "eae454ca-e646-445a-965f-686323eeaa43",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "819fe26c-f7ca-409e-a4e5-6bf646199e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed052f05-2e9d-4643-b98f-47270a651ec2",
        "cursor": {
          "ref": "fac0a9af-f7cc-487f-94fa-c4d909de8cf8",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "65baccd2-fc6c-41df-8261-07d6cb42426b"
        },
        "item": {
          "id": "ed052f05-2e9d-4643-b98f-47270a651ec2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d03ec0ca-d558-4473-985e-0288e5afdbcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349bbb94-0fd5-459f-8c4a-77ae320102fc",
        "cursor": {
          "ref": "b2e2ee12-157c-46fe-bc0e-240218664c99",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0b7709de-fd51-4aba-9137-7e98e36f1e57"
        },
        "item": {
          "id": "349bbb94-0fd5-459f-8c4a-77ae320102fc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d27e1f30-e9d8-40e8-b3c6-64813fe76b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7505f049-59e7-47ef-a912-3ecde588605f",
        "cursor": {
          "ref": "f7baba3a-4958-4c7f-83fc-4e51702dab2c",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a28b6631-e32e-4747-95d1-48f39a6d44d9"
        },
        "item": {
          "id": "7505f049-59e7-47ef-a912-3ecde588605f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "da11b03e-6812-4f02-9843-697d47da4caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33154bd-b57c-47c0-924f-06c0183ad19d",
        "cursor": {
          "ref": "71d77a51-e538-47f2-8490-fb47fa1a9e58",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e3757dbd-50d6-4666-b3a3-1ee6cc41d860"
        },
        "item": {
          "id": "b33154bd-b57c-47c0-924f-06c0183ad19d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "395a46be-78d8-4d62-a042-fba4cd9591a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4de1d6d-0003-4fcb-a5f4-15500f1fa17a",
        "cursor": {
          "ref": "1c4cb999-fbb3-4502-81fa-625c06a47b4b",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7d6c666a-f1f0-45f5-b929-e4d071eec772"
        },
        "item": {
          "id": "b4de1d6d-0003-4fcb-a5f4-15500f1fa17a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ade9b7db-6519-48af-8145-136a02e2218c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d075c778-f668-4594-abb8-169fc7228d74",
        "cursor": {
          "ref": "d5eb99f1-7ba8-4699-8696-c535196bb59e",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9e3637b0-60a5-4a67-8847-24527d032a00"
        },
        "item": {
          "id": "d075c778-f668-4594-abb8-169fc7228d74",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "de524b85-8ff7-4ef2-95e5-753990f633f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a940f49-9d54-4a18-8e7c-739c8e997f30",
        "cursor": {
          "ref": "c1c475cd-2f2d-4817-857e-09dbc1bd6ae4",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "56e2fde5-b221-42b7-85db-06066688635a"
        },
        "item": {
          "id": "0a940f49-9d54-4a18-8e7c-739c8e997f30",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8c031dd3-426d-41b9-ab8f-dc6c8017ce44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d46e93-61e6-4f8c-b0bd-76a71558a6a5",
        "cursor": {
          "ref": "50071333-734c-424e-950b-f6b6a1402bcf",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a84d8a6b-01a1-430b-a0e5-a83f497c939d"
        },
        "item": {
          "id": "21d46e93-61e6-4f8c-b0bd-76a71558a6a5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1f82f236-d004-4b25-9191-3f79c8efb437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35530a5-e097-4b8e-ac8b-21eeb5bf9ddd",
        "cursor": {
          "ref": "bc63f1b8-546f-44ff-ac43-105a9bd5df17",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e9343405-8d0c-4e05-852c-3b66787d9534"
        },
        "item": {
          "id": "d35530a5-e097-4b8e-ac8b-21eeb5bf9ddd",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e56e66a7-6892-4e53-9583-107ac758dee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e0c69b-d3ef-4c2d-b651-a8445aa3f068",
        "cursor": {
          "ref": "4e52510f-5547-41a1-a5a7-f30e9ed83e06",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "109fa5a0-6fff-4ca3-8c50-5e1b98586319"
        },
        "item": {
          "id": "d8e0c69b-d3ef-4c2d-b651-a8445aa3f068",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0fb5e41a-e6ee-41c7-9144-92546fbd3ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eac9d2c-7746-4d4c-92ec-9f0773c52fb7",
        "cursor": {
          "ref": "7f9a2523-e29e-4227-92e8-f904f311aaef",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "88924cd5-3a76-49e0-bee7-a2097a7c70f5"
        },
        "item": {
          "id": "3eac9d2c-7746-4d4c-92ec-9f0773c52fb7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "88ced358-8c84-4db0-934e-37777be31524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76430031-7673-4583-ade8-c6e77e0d4006",
        "cursor": {
          "ref": "cbeebaae-e1cc-4f3b-9257-5e9fd3406139",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f48f48ca-7646-4ca0-a2eb-1ec68fba8983"
        },
        "item": {
          "id": "76430031-7673-4583-ade8-c6e77e0d4006",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9611036e-43f4-44b8-ac18-581a2f2c06a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08654d52-9822-4449-b4cd-d8b8cc9f5723",
        "cursor": {
          "ref": "6925289c-e720-45fe-8727-65a551093f8a",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cf3666f2-8258-4c3a-9cb6-7159f6b37f86"
        },
        "item": {
          "id": "08654d52-9822-4449-b4cd-d8b8cc9f5723",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6a475b8d-6763-402c-bbd2-b06fdb231d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e30744-fc13-4f5b-9d97-619da238c61e",
        "cursor": {
          "ref": "17d93ba2-d146-450a-8a6a-d01a077f467c",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "353a2d09-9cb2-433a-b2ad-8fbc30ecb122"
        },
        "item": {
          "id": "41e30744-fc13-4f5b-9d97-619da238c61e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e7981569-b0a5-4eb3-b6c9-8d53620aed30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f716f9f6-0841-40ae-bacd-0bef5d188b65",
        "cursor": {
          "ref": "1ffeb083-38e3-4748-9821-5870bce0e368",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a404d31c-9fd8-400c-952b-d0006bffcfc8"
        },
        "item": {
          "id": "f716f9f6-0841-40ae-bacd-0bef5d188b65",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1377a367-f5a3-4467-a5b5-5b8bc1b626a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992022fc-ad2b-4a88-80d3-e97332b0fe0b",
        "cursor": {
          "ref": "5375886d-40e5-4ca3-8777-2eb8d799b11c",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f04761a1-60f5-4d89-9041-e9839d64392e"
        },
        "item": {
          "id": "992022fc-ad2b-4a88-80d3-e97332b0fe0b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "287f45e3-1280-4da7-8dab-d1ca13fc50cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758d2b9b-2bc8-42f0-b43c-22f5be33b742",
        "cursor": {
          "ref": "e8fa7a21-c697-4ee0-8b4c-e214ef768dfd",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "560546e9-fe93-4ca2-80cd-df662d662a0f"
        },
        "item": {
          "id": "758d2b9b-2bc8-42f0-b43c-22f5be33b742",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "63c681bd-244e-4755-9671-22504ad7610f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef7c82d-c0ff-4d9a-9d2b-1f89875f2f28",
        "cursor": {
          "ref": "da6208b7-3655-4d7a-9b1e-2c8d68d55e12",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6f40c9bc-50b9-42f6-900d-1d91c78b0e83"
        },
        "item": {
          "id": "8ef7c82d-c0ff-4d9a-9d2b-1f89875f2f28",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ae9d0240-040a-49eb-bd60-36b895cfc525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204c0d4e-33ce-4fc8-93c2-6a3009b712ef",
        "cursor": {
          "ref": "9595a72f-1d3b-4c9a-afe4-7869f11a74ab",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8f25b24a-d997-4512-969b-5f6ea2092ee9"
        },
        "item": {
          "id": "204c0d4e-33ce-4fc8-93c2-6a3009b712ef",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "768b391f-dc57-4aba-bc46-9db3d0de55d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d427ae-228c-4fa1-9dde-2c97c1b15a32",
        "cursor": {
          "ref": "b6cef361-c6aa-42de-ada0-d21a76571a68",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "436ef2bd-b3eb-41b0-94cf-cbe99bf5e4d7"
        },
        "item": {
          "id": "15d427ae-228c-4fa1-9dde-2c97c1b15a32",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1e696110-a471-4404-a3e0-344c94bc2592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d126fd-2565-4671-a829-7b457690e80f",
        "cursor": {
          "ref": "9f308265-4a0e-4dce-9e7e-ebae0283cae9",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "df6483a4-a9f0-405a-bfaa-8a75b7857c11"
        },
        "item": {
          "id": "f4d126fd-2565-4671-a829-7b457690e80f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "231bf2a5-724a-4a81-97d9-5c1042888997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b35ea4-3943-48d2-8ef3-5734fa94bd33",
        "cursor": {
          "ref": "daad4767-d605-435f-90c8-fa89e1887566",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f7957e67-b09a-4e74-a4e3-aef631fe4c10"
        },
        "item": {
          "id": "29b35ea4-3943-48d2-8ef3-5734fa94bd33",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "605aaac5-48a1-4b25-bf70-8471b6cc9a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d3b7b9-f58c-437a-94b8-a44519d92061",
        "cursor": {
          "ref": "ea5db813-2a84-432f-bb36-d20789ef10d0",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c595f79b-98f2-42fe-a6f4-d40f5ec2ffeb"
        },
        "item": {
          "id": "15d3b7b9-f58c-437a-94b8-a44519d92061",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fbd5fdd2-5bdb-4f8c-b350-859717ff2209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b69c78d-daea-4253-80ef-d9506e007348",
        "cursor": {
          "ref": "19b3874b-1d02-465c-b485-b686c67418bb",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "384e5c20-2ef3-4d90-a44b-1bb48fd1d536"
        },
        "item": {
          "id": "0b69c78d-daea-4253-80ef-d9506e007348",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "28312805-dd4b-494d-aaf1-5a14d57b6bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d4349e-dbba-40ff-8c7c-b70805af2e0d",
        "cursor": {
          "ref": "61ef4740-9424-476d-a03b-c496d9f1916e",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e4f36168-932a-4835-aca7-5e9a6572990a"
        },
        "item": {
          "id": "20d4349e-dbba-40ff-8c7c-b70805af2e0d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "82aa4772-ccfa-4733-b22e-3cba01f4c889",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929635d7-3bd8-4bb1-8c1d-701cfbdf9901",
        "cursor": {
          "ref": "c6bb6be5-fc08-4124-bbc8-729a0800b87c",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "80c9b5ba-440d-4745-9d99-866b2d36f769"
        },
        "item": {
          "id": "929635d7-3bd8-4bb1-8c1d-701cfbdf9901",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "490652eb-59be-44aa-b6cb-b9f1da1ef0bf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 50,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4722ac6-c90b-4385-b193-589e76709b0e",
        "cursor": {
          "ref": "0fd27264-1452-4794-b3b1-8f936acf4c32",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "49572dd9-69b9-42ba-bf98-3235653acce9"
        },
        "item": {
          "id": "f4722ac6-c90b-4385-b193-589e76709b0e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "260d1e0f-9638-4e38-b246-710daced9c6b",
          "status": "OK",
          "code": 200,
          "responseTime": 308,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "80df4c13-20c7-4d41-b837-f62e75d6a3d7",
        "cursor": {
          "ref": "81503f02-155a-4e84-adb9-a0fb88a02c19",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "32904d35-1488-429d-a1f7-e7968f663a2b"
        },
        "item": {
          "id": "80df4c13-20c7-4d41-b837-f62e75d6a3d7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2ae98142-17d1-4004-a328-d6c0cd180668",
          "status": "OK",
          "code": 200,
          "responseTime": 394,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f549b0-a397-4de3-b498-6b412f4a4bc2",
        "cursor": {
          "ref": "37f6445e-48c7-4166-b37f-8ee01d6a63d9",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "86714875-30fa-47d3-b8d4-b3c5159c0b6c"
        },
        "item": {
          "id": "f1f549b0-a397-4de3-b498-6b412f4a4bc2",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "06ea352b-9a30-4269-add1-8971e7755cbe",
          "status": "OK",
          "code": 200,
          "responseTime": 743,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d6bf75-1252-4bb6-a87d-1b0955845152",
        "cursor": {
          "ref": "1847d2c1-4e41-4c7d-8e6e-5f761273df41",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bb574ba8-a568-4abe-bbaf-2bfadad00a8e"
        },
        "item": {
          "id": "76d6bf75-1252-4bb6-a87d-1b0955845152",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "fbd4d9ab-1c28-41ab-935c-33b571d8b1ad",
          "status": "OK",
          "code": 200,
          "responseTime": 378,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb085f49-b674-4b27-b8c7-e8932a6cc98b",
        "cursor": {
          "ref": "1a24fedc-4617-40a3-8f8a-179691c383d0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "45d30a2c-8c6e-4777-8e24-9b26858865be"
        },
        "item": {
          "id": "cb085f49-b674-4b27-b8c7-e8932a6cc98b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f4dd9f88-99fc-4dc2-902a-4cf5a87ff31e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb085f49-b674-4b27-b8c7-e8932a6cc98b",
        "cursor": {
          "ref": "1a24fedc-4617-40a3-8f8a-179691c383d0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "45d30a2c-8c6e-4777-8e24-9b26858865be"
        },
        "item": {
          "id": "cb085f49-b674-4b27-b8c7-e8932a6cc98b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f4dd9f88-99fc-4dc2-902a-4cf5a87ff31e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb085f49-b674-4b27-b8c7-e8932a6cc98b",
        "cursor": {
          "ref": "1a24fedc-4617-40a3-8f8a-179691c383d0",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "45d30a2c-8c6e-4777-8e24-9b26858865be"
        },
        "item": {
          "id": "cb085f49-b674-4b27-b8c7-e8932a6cc98b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f4dd9f88-99fc-4dc2-902a-4cf5a87ff31e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f570355f-80f9-4f6a-b65e-6e89331df88b",
        "cursor": {
          "ref": "17316ec1-fe87-4c38-bbb1-aa3c74fcd663",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a69ae691-a961-4426-9e70-cfe590dccdc1"
        },
        "item": {
          "id": "f570355f-80f9-4f6a-b65e-6e89331df88b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f6b35013-699f-46ce-94db-35a427289ee2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95fc455-5185-4aea-8a64-7d23a5b7f1c7",
        "cursor": {
          "ref": "70d21417-25f3-494b-a275-0bfa8b08a5ec",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a5f4bf00-1f40-4a93-b8d9-a60b36f4cfbc"
        },
        "item": {
          "id": "e95fc455-5185-4aea-8a64-7d23a5b7f1c7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9b080cc1-616d-44b5-8e13-60acaeb7c770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e95fc455-5185-4aea-8a64-7d23a5b7f1c7",
        "cursor": {
          "ref": "70d21417-25f3-494b-a275-0bfa8b08a5ec",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a5f4bf00-1f40-4a93-b8d9-a60b36f4cfbc"
        },
        "item": {
          "id": "e95fc455-5185-4aea-8a64-7d23a5b7f1c7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9b080cc1-616d-44b5-8e13-60acaeb7c770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2ae92bd1-5820-4dd0-9735-9307d5e3dd1e",
        "cursor": {
          "ref": "e2e67c0a-bceb-47f6-bc09-e970610c64a1",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5b571b63-5651-459d-9dc7-1a7bec7c521b"
        },
        "item": {
          "id": "2ae92bd1-5820-4dd0-9735-9307d5e3dd1e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "078e645c-1416-4e3d-9673-507154a5ccb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a537e442-c9fb-480a-a71b-d3b1057ea338",
        "cursor": {
          "ref": "a5c7d0bd-950a-4d3c-90f9-b46962ef1b42",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "05620258-d312-4148-94fa-4c8de027d39c"
        },
        "item": {
          "id": "a537e442-c9fb-480a-a71b-d3b1057ea338",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ab99ccc5-592c-4cac-849d-54112d749414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "a537e442-c9fb-480a-a71b-d3b1057ea338",
        "cursor": {
          "ref": "a5c7d0bd-950a-4d3c-90f9-b46962ef1b42",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "05620258-d312-4148-94fa-4c8de027d39c"
        },
        "item": {
          "id": "a537e442-c9fb-480a-a71b-d3b1057ea338",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ab99ccc5-592c-4cac-849d-54112d749414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "7cabf266-a12d-4418-be97-0eaa7ab386cf",
        "cursor": {
          "ref": "03be6716-3caa-4688-84ee-b46920f0087e",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "dbe07bc8-8277-445a-8c13-f0073ee1cb02"
        },
        "item": {
          "id": "7cabf266-a12d-4418-be97-0eaa7ab386cf",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "606de32d-6f9a-4f69-9cbe-8535c7e49b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}