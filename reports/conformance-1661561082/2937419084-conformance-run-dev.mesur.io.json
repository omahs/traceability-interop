{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7330208c-5aec-4268-800e-f3f538fb81b9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9fe6f899-9c25-4053-8687-1fe31fcb1e08",
            "name": "Positive Testing",
            "item": [
              {
                "id": "856b7bb3-f2a9-4ab2-b72c-e86f66b8548a",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d6d5805-caf0-4726-a89f-cdd60c6fbd3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7b86fdf-4ed9-4e91-b956-fcf26e0c8cd1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "a3ef7aeb-60fd-4407-af93-d73d5d775aa6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f72bbf8c-9316-4983-afe0-020d71d48a48",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef4624f7-a911-422d-82c5-c2afecbd2195",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7971977b-494a-45cc-851e-27f30c8bb3ad",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d39a40-3dba-481e-a4cc-ea87a72a1b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b897788-236d-4424-82f4-27ff7329520e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff4fa1f-8742-4319-b771-07e26e296af0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781b7daa-e2bd-44e6-ae79-cec8cb047493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5eb6e357-a411-47ed-b9ae-942b70c3937e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034acc5f-dbc3-4828-b2b1-33b0dedc5fd8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4098fed9-22d7-46af-8e1d-fe3eff964e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6bb2ff3-90ab-4d94-bce6-c66d04752366"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46e0cad5-f10c-4ae2-9277-9d54d0019e32",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74044606-efae-4bf4-a8e5-e1a657877967",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35ffb04-b481-44f0-9d0b-aaf0687a7a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "751886f2-7b82-441a-8957-d274c7b56079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb79cde-0015-47f0-abb3-1bad30f23d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9810057-0f63-4474-b0c8-a613486aa483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103cedaa-8909-49e8-98d7-3e9fa378435d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f07315-cd50-4a20-b6a9-dac841c2b421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1037d93-0da5-4e7a-964c-d9b2b709d6fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a021ed-fb78-4f24-8025-7ecf25a6c59d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "349bd122-1f1d-44d8-b73c-b37fca7215c1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5301eb88-d5a5-4f08-b8fc-ef7950fdea24",
            "name": "Positive Testing",
            "item": [
              {
                "id": "075cd801-d0e2-4b72-a553-1531a2c5fa83",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71d4f978-d1fb-4338-8abd-60e00bca7e9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "67728dc3-f6d4-4e95-a3b3-f9c3b2f47692"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8c314c9-93a0-49d8-956f-d4b85516d5e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2773d3cc-dc43-4c49-a7b1-b32279bdfa68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e8eb14f-e97c-4069-ac9e-ef36ff7d5110",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7f40ada-80ed-42f2-8981-a233919bca7a"
            }
          }
        ]
      },
      {
        "id": "358d5e1b-980a-40e3-8335-36972263c84f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8264e9cd-e109-4430-9c16-0e19160a7e6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "97c7c0f7-c7bd-4b1e-aa8b-490873568787",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "588a7ed9-840c-494b-8002-c89f1546ea37",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36249a22-9c89-4ca8-a3f9-64ed488fdee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71cd775d-eae1-49d0-9adc-7b7660c78bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a309b302-2173-4737-879e-a3c7335caccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65e76f1a-7d1f-49e8-b211-91524abe641e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9cbeea-1998-402f-a832-84d33e6c5929",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90332832-f6cb-4deb-98c5-400a03a48c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab097ab-ba5d-4c4a-ba37-3ecc36a84ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea084c87-9035-4a2d-a843-13a32965cf4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74432570-926a-4f19-88d9-0fe00ce4a925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae049e0-d5bd-4c4e-b115-538ec1fd5c11",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deed09d0-0a9b-4288-97ad-328f35c1d09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a637c952-0edf-4c2d-8eb4-30795d1781f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ead5a9-a838-47db-be02-d8dfb3e5f56c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cde6892e-b3f9-4e34-a8b2-bb5ee05d6c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d8a025-5684-445c-af97-5147ec5f5802",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b404c64-bebe-4f07-b4a8-88995bfcdab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c2555d-583e-4b1d-9cb9-141717738c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "092f7e7a-3b01-452b-afac-ee2f597b518e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b244226-76a6-40cb-9be6-6238c1bfeb61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bef987f-c9b5-4f5c-b206-056d49e223a3",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d857314a-52de-421e-b9db-aeaef633280a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e57efeea-e7cc-4f1e-ac6e-e47d5bc6a917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097f7baf-b832-4f13-8574-c214dde0e87f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "924d4307-15c0-41ec-9e6f-90d38fecd4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d55e3c-30bc-4504-99a1-36df2213e13c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962d511a-a5c3-494b-9075-750c0e2a847f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6157bf92-6b5d-4d3e-ab43-33454047ae13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f12d7ca-f73d-4d2d-a063-e878051a3f7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ced0984-46e6-4fe8-8855-cb53161e09f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6a8c72-fb8d-4068-923a-2ac58ef7dd6b",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76362038-5002-47a4-a3a0-71731ba243c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e9f8c2-1e4c-4a58-8cbd-97dcf154a12d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccc9e3f-ef15-40fc-b471-5706853bbb0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb1f705-a3fe-4f45-8238-327380b97e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8ef800-268c-4c50-9580-d9412c46fae2",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d115fa99-9366-45ec-9365-8f5b534f1020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f5fed8-15f3-44dc-acc8-bca41335d1d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f529684-c6ff-4b3f-9017-9e885acf8fc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ab0152b-ae5d-44e4-9e38-06a4b8ddf28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a72f1a-37f9-4d84-941e-72e6e7777ab8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "487dc541-d2dc-4a68-8d31-8bdd8f9ce400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9041c3c-e18b-4c1c-816b-4df23de691e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fcbe49-f353-46a9-b761-3661ec79ee7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "844d50e5-3a19-4ba0-83a9-cae5d9d716d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc2ba5e-7f1b-4179-9db2-2b166505df96",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfb6889-fbf2-4eda-94ae-0732d8f7fc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb789f7-5741-47cb-9285-9e15f4cf9825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfeea11f-b9a9-4cc5-b0fa-272e9d88ce0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c401932d-5852-4489-94fe-a53be08b5e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e2c73a-e9dc-465d-ab1e-69c8f73e4f36",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cceba54-2c5b-414c-9455-323cb0de113f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f4a53d-7167-4ddf-89f6-6ce48e189bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b62f00c-1d9d-4844-9d69-33afbc2fa181",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b901b8f6-fcf8-48c6-a3ea-e022c095caed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c2b14b-aafc-4f39-a365-d2bddd3aa871",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a5d6e6-57f9-40e5-94a4-0392ae30b060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1e9260-a7ab-4822-b1e1-f22af25f6da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cd08ca-de36-4e07-8286-ef2db45065a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "0f5dd557-2ab6-4b6f-aff6-e0b0908885eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8145e41-2483-4b53-83e5-8bebec895898",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd7465a-4d70-499a-8cc1-0df367cb7ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b22ebae-503c-431e-ae10-730cd95b352d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93bb776-bf43-40f6-a6ca-04ef8cd8667a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c51ace3-db5b-4354-ac38-6fa40e96a317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436b7aa5-298b-4cf1-a0eb-c4fa36372652",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958e458f-ed4e-494d-97f4-6de2a3a8a650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec297dfc-0b3c-490a-9a37-0b855eec5640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1bf33e-8c33-4778-beab-05e7a4fef222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c72df4c-f69c-4bb8-9502-2e2445a7dbc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27a94b6-a32c-4303-ba6e-f5ab9fb94dff",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4ab68f-e405-404a-aa8a-c89dba0052f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8061d418-89cd-4a01-9787-da8f3631d704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e3eb4b-a760-483c-acca-8a8bff904738",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "14053d10-0e32-40f7-b3da-ad5daff38e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51247b4-fc6e-4e4e-8c35-0bceca314038",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b626e1-2dad-4940-8a50-91fbfd1f65c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0035936f-6867-41c0-af6c-efd85c0de59c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597d4adc-f4df-49ac-aad3-8c095b486c21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "0820c495-4741-4271-884c-8ef1eba65f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0cf8569-e13e-42b8-915c-a09436902bc2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f094f3-b3c6-495e-8861-a4ed3b289c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055f3f73-3a7f-4608-914d-8734b7f14db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657101ef-a4cd-45c6-8b78-d0e2595e4daa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd484ed2-0abb-4a0e-b35e-22befd80ac0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f14f5f5-6220-41c3-9080-639f1268d09b",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8548b53-e793-433f-ad8d-0541eb1c99c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cced73e7-f519-4c9a-b852-0eea2c30a430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67ca979-a2a1-491f-bd7b-4a6d67f8fb4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7de2a9e4-44ec-4a04-92a2-e34e874cf109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f994b9e-9f01-459f-b90c-ae2a12c31ae3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57577e7-2f72-432b-b52d-9478837b62fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76aae01d-c5c2-40bf-8e81-17db6770be8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a522fe67-f55c-48b0-839c-96c7c2bb0a30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "193530c4-c351-43f0-9504-d28e6c915aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db044510-01e2-40f1-9384-96429eccae1f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbcc16e-9640-4a86-862d-72231fbe0f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb52074-fd92-41ae-b054-fff2120f540e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fac16aa-346c-45b6-a8ef-25e35a7b5bff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d41575b8-b8c1-4524-980d-6a09dd5dc4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a16d077-2295-458d-83c4-1274ff9219f9",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29326101-76d9-4ed9-85d4-81d4edf2da9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b208fc-ad03-4b6b-929d-2ead020b1d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d71ccb-8388-4fb2-b069-de414de58b68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e46b9803-edb3-42fc-912a-3b8ab2549259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7194ba4d-c0da-48bc-937d-6decaa8eb9e8",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92efd833-42b0-462f-a80b-e13f52a56484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b479d62-1e3a-4d45-9964-69c5a1cec83e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7034baeb-3122-4516-87d2-28d5dcb91752",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2838544-9a80-4dcf-a3b7-d00fb525c1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa97ae2-9ffb-4388-a143-a91e87954c30",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dbc70b-07a3-4c73-83eb-da0e436105db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83b8264-ec45-4e18-9d85-5703264dbbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a390484c-a58c-4b1c-a403-5ab5845b9d63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28d2b06e-65bb-497a-9025-d40dab550d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90f69b0-37c7-4414-88a5-5dbf937789fd",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bc0118-53c4-4c43-bf66-9ae2ffea6b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe80b36-8c0d-4224-ba8b-7a64549c153f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2302f7-de95-478b-94de-18fdf2de33a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e868709e-05d4-4608-aebe-e6c2840a0dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5c7686-1b10-467c-8d69-b1c6ca268bdb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713e557a-53a0-4de1-8751-26a68bd4f626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d1ea84-07b0-4e31-88be-d5eeb1b605be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b578fb9-ce2d-4ee7-ba93-ef5c1bbb385b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b810ab15-870b-4ab4-9fcc-aff5ed52fe24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c666845-c932-44e6-9e57-d8a5451731ae",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1d32f6-3acd-40e6-8e60-c75b224d3e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f770f1e3-231a-41b3-bd48-145c8a565bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf912554-757c-4936-a09e-9cf06945582a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb57027c-00e1-413d-a7cd-4186fccbb000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94afd2f1-998f-4ca8-98ae-2d5763f1125f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9975b9-f46b-4ac9-bcb9-8f00f39d0ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9379f916-1a70-4644-b39d-52cecd0c56a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5ef66d-ebb9-4998-80ef-539f61c403ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf30a3f2-a568-4f2e-94a4-9667bf2d5d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4086c846-e3be-4e77-b07e-a9020fcd0daf",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd43337-50c0-4e3a-891d-c6713a674a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b36b33-3442-4729-b259-911b5b367928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0340400d-0704-46b1-9503-b7896f0632a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96dda5cb-19c4-4528-9de0-97a4ab994be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc95f82-2fa9-4f14-ba1e-5bd034210b4f",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70810bc1-64d0-43c9-bb0e-faf7da365802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fc128d-ea5c-4197-826d-d6ecc0261ac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b4aae1-cad8-4482-b363-c53bc9f44ddc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22af60bc-6ed9-4c66-a4b6-132e2c8bd57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a0d347-35c1-4ea4-9ae0-090cb0b37db8",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23da3a33-cef3-40ca-8da2-72d5af25dd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d118f05a-de93-4b1d-a954-25dc164f4331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10aeaf6-f452-4084-ad4a-dd10683dcd87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb2ee777-28e2-4b99-8545-ed244a06100d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f3539f-11b2-4a63-85a8-5a038adf06c4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09b7718-703c-49e2-850e-98e127a02612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c4777e57-38cd-4a97-84a9-59be23f849c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f6c1ea-2f39-4b7f-81da-f4532ab85a8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c8704df-c544-48d4-94f8-1208e86666bb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b0bb7320-0517-46ee-89c9-48e7fd2e5fce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8cbdbb09-2169-4baa-97ab-f768d56e0f6f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa3caa8-fb16-4cbb-bb0a-660858e7bd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d45de321-92e3-4357-861d-337a1404c479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c342ec1a-9115-4b10-a687-512e6bed8b17",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "45d86098-266d-43f3-b48f-3bc1d01bce36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ec63ce-3cf3-4f93-9d66-c4c7b477c5a3",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26415756-2a15-4c47-8ce2-efad2b6eb726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "656334fe-6a66-4bb7-9a18-9ce330733fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766b1d40-1555-4f97-8ea6-b05c0e0fd645",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "00f0b65e-28a6-4930-8969-1428fff80757"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5799e5cf-634a-48ec-bd91-939e4ed6279c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67c35b8a-195f-413b-9e26-7d6d113b02c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c45a17f7-fbc8-4688-94d3-8ff6858da306",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98af26e8-6274-42ae-b182-51930f40ffe4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "006a0712-e21b-4987-91cd-2b46bdce6341",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37a0cec0-5ba7-420f-8067-86ebd8e56168"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f6948d7f-d258-4017-a7e7-5266fdd75314",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "13482374-f722-4fe6-bee1-d08e71e9ad42"
                }
              }
            ]
          },
          {
            "id": "8439942e-9971-4258-9fa1-985965de28d2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c929f3d8-eca6-4c9f-8c5e-3061a3b47fb5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "daedaca3-9bd5-48b1-860a-32d907ebbb1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "192ff9aa-d74e-4e19-a2e3-b5def85ca9f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f24e16b-e6f9-41af-922f-663751570962",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "72919538-d02c-45ce-8739-f4a313efeff0"
                    }
                  }
                ]
              },
              {
                "id": "7511c700-9ccd-47fc-bf77-6549eb4323e9",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60d21190-4924-4693-8c35-71c96d80f111",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8524ac2d-613d-4c6c-b489-a6c94bc9b9cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bce9f9eb-7265-425a-a596-d0b4a815f6ce",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "df5f1e7f-7d72-4398-b114-830e780ea352"
                    }
                  }
                ]
              },
              {
                "id": "df079f7e-7e63-48b4-8434-c2f0dfbc86f9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd2fbf07-c1e9-4a75-aaa8-154d1f7efe36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd2cbc42-ad38-4fac-b309-8bfc3f7dae9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9d31453-ec6f-4f7b-b17b-59670dd15b06",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "993015ce-eff6-4f8c-99e1-76660aebc47a"
                    }
                  }
                ]
              },
              {
                "id": "61db9bf4-842c-4842-baef-656de7a322e4",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd05d866-c07c-4f94-bac6-92928f3932a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2cc9c7e8-28bc-4188-a7af-4dbfc24c7195"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d535a13f-e939-443a-853e-0523c2e4d1cf",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "630fd34b-b10d-4d46-808d-c407caf2bfbf"
                    }
                  }
                ]
              },
              {
                "id": "b1b3bdce-6414-4ffd-9c91-00ce7f7c5a8f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af5ac15d-458e-4d78-99e9-94aafe2708a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "fef003a5-87d2-4a94-aaed-683744dc3208"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5526aeb9-7a48-4769-87b8-2f92d6bb95b7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "388bfb14-802e-4f26-b965-d679fb407ec3"
                    }
                  }
                ]
              },
              {
                "id": "2faa505c-cde3-436c-90ee-648c533d2759",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "750d3764-d430-4e7d-897d-a0120687a8b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2b7bdbb-f503-429c-9b7f-6fd0e059912f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30b7418d-dfdd-4cc2-95d9-3f685fe7bd1d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c1e2e4fe-b452-4c38-b6a3-01642779eeba"
                    }
                  }
                ]
              },
              {
                "id": "10dad28e-d541-4287-8fa8-3c1c7065a5ec",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6bd77f4-8472-4f51-b3c1-db9e42d54e3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ce0e644-0ff9-4224-864a-60f31e04aff7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee61e30e-b4f6-4d04-91b4-181dca972fc1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3000221b-7fcb-40a5-bd7d-02eff706603e"
                    }
                  }
                ]
              },
              {
                "id": "71a2d42f-0813-43fb-beae-d482aa16934f",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ea634b8-6d1c-4e34-b7af-fc9921ce0977",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "012af383-918f-48cb-96ca-b28ef9cbff4e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63fe7b41-1d3b-4a6a-a25f-327f72deea4e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "4a4bcb25-e064-4da6-a7de-a5037df5678f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ca3a33eb-4bc5-4ac6-9344-2d9011f3626c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9141f2ee-80e7-4dbf-a1bf-12011c20ef14"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "62bc3f4d-f221-4bee-8b6f-99b6a1bb7513",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2aae8004-5670-4d8d-b18a-181980b12d62"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4fc8133-9ade-459f-90fc-570ef158ddf3",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "f1f6604a-11ee-4d70-a73d-0b8ba0babe1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4110fd4-6092-49cf-9e58-feb1d2c1470c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10591cb5-4bf1-4d09-a0e3-aee6fd0a0a95"
            }
          }
        ]
      },
      {
        "id": "8851a8d2-d6d0-4cb9-9474-27270f3cdcac",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "98c3832f-dd0e-4647-aa80-102d9065c888",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8524a254-0aef-4385-b8b0-f100aba60651",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d2308c55-7803-4cac-9702-2b7f46acb9b3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037cd944-f880-4a75-95e2-d93a3f237094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18713818-1e8c-4d62-a788-ba6d9eb13177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffccb147-0154-4b59-93d9-6fdac9d47e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e2ed707-46aa-4013-a241-0429296a2d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb4cbbe-78b6-4aeb-a4b9-c9358a8d8e9a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b38d6ba-705e-4bad-9547-53af302dccb6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "085ac04d-57fd-48bf-9e4c-a3827efa7acc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcfa88a-b71e-4317-bdda-8a467b648635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3dc484f7-0ead-4b01-8763-c637cb6d2b11"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "732c4107-67ce-4bf5-b207-821393811e4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "452d408d-a27a-4619-b66a-bad9ea7a6f32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25efb820-43d7-43a0-8ce2-637a0ba40168",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8333851-ffdf-4973-90e6-3934702d9eee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "089a2140-2b56-47a5-9bf3-bb4a9c8212c2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "da305bff-1e11-42ff-8537-b31631f2d843"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b168b583-4685-4b73-a172-c0562f85ae61",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a9e54a6-5fab-47d1-b933-b74f0d0b4c2c"
            }
          }
        ]
      },
      {
        "id": "e5596d8d-180e-4cdf-b548-1b96c187d50a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b9a5706a-a74a-48c7-a8be-59f0cd708b88",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11ab8c8e-a925-4674-893f-0f31eae3ec07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d96adb5a-bf3a-462a-80f9-7dd4ba424d77",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f2bd7e-d0e5-4d39-8969-c21a25fcecd7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "1720a009-8685-41db-b2cd-35314e4731dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3f7b90-6933-48c1-b997-18878148b231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b51278a-4b98-4d4c-b196-853ecb0820b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27b8cf7-8984-46ab-bd9a-ed07874e43f9",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001d7e88-46a3-42fa-bbe2-fadda8a63036",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "bea0fddb-5a2f-453f-b638-142790dca395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6d9c28-0414-4d5e-9aac-282c7d1c2072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf1469c9-6f80-4de6-90f6-6fc4de554d77"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf22f1a4-3986-4da5-8a1a-f155b37c2789",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8149f861-d63e-44b8-9e0e-4eebfbd6854d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00e561ce-a0c8-4a54-87b6-71553303561e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c154e6d1-07da-4bfb-8846-43c085554b5b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb752260-c078-442b-b395-959cf04bb95e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3f4edfa1-57ef-480a-b0ef-76b54cfade7e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c298e4b-6a29-4aa4-b280-67d671014cc1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8467d71b-8fc2-4028-bd87-05dd5a3eb318"
            }
          }
        ]
      },
      {
        "id": "776597d2-1cdf-4546-895d-eabdea924db2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e71e0db3-0ea9-40e2-8dd7-11abdb2dea39",
            "name": "Negative Testing",
            "item": [
              {
                "id": "45e478bd-4bd6-486d-95a0-023fdc2764ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78f8a44c-e845-4a65-bb3e-5079ff12c46b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdca094b-9ba6-488b-99b0-c179bf29509c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "270b8966-8d14-479b-ab09-6c9ad2de8c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba00cc15-3240-4bcc-8cc1-97f23d461542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1522b65f-ea50-4703-9a9d-58d6b66a7b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c7a28c-10bd-4c48-a760-99baf1a12434",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74613b72-7952-4215-aad4-8483e0210c52",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2cfcb382-90a2-4d1d-a9c7-67830276ac74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293d95b9-aad7-41ca-9d19-9202a44afe36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afdd74af-49df-41a2-bb5f-cb5d6fde4c2f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2aa3cf10-f31c-4bb3-83fe-980d3875a2ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1c458b8-291b-4003-b561-555115919d05"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c32a336d-b071-446b-a349-3c7168fc6890",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f92358c0-0979-4b37-a2d0-a8d273584f33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e74feb7-9181-4064-a4b3-21d417dbc5ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "896195fa-a235-4f82-b460-68245ba29faf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52c5e53c-7f31-4748-bc02-df41f2b78e86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "350564b8-b1f8-40fb-bf1a-fdb9983d9668"
            }
          }
        ]
      },
      {
        "id": "212495e1-79bc-487e-94bd-fb41cc22d593",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "06423c31-2a76-4bb4-8d85-e8a4a6049d54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f4ef7bab-a565-49d8-ab84-c0bc5414e9b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eded0945-6e55-444c-80e7-8841bbee79b0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efff797c-ed16-4553-83e1-35d2cfe8530f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4fbfa8-745c-4f0e-8536-5ccbdd4cdc9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c76bc9-187f-4107-838c-debfae792269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f85c82b7-3087-42f0-b498-45bd3864c299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234cf96e-34ed-45d3-afe5-0bafde1150d1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918b9149-964d-46fb-a895-5fd4335edddd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "ffa2e67d-3933-4418-8a60-2c34b6b612a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4699d94-7529-4009-9e5c-5b53cf45edaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4b2e107-341d-4b96-9878-4fbffdb9f981"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0b96ecc-d9c8-442e-aeda-65d64c3d9b32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b6b3b9f-91c7-49f1-868a-f9a2151db294"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c90b222f-c09e-4695-a00f-5132679568cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dec51b09-8c85-49c8-9ec6-c12bc353cce3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d69c3f0-7f7b-4004-a243-6dbf20ab0655",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "7742d5b1-78b7-44f6-a106-970e903e4d57"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c073a6c-5149-4212-8793-1c9a4ff98512",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9d4438d-6cbb-4051-8ef8-989221205c7b"
            }
          }
        ]
      },
      {
        "id": "defe73e3-d5eb-420d-8431-1bcb53600732",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1a2b21d1-8e27-40fe-bd47-712c20876c9b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "843435ad-5481-4d3b-a4bf-bd868d3d11ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "459e86f8-7149-40f8-b6fd-8a3b35dadc00",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6570eae-d982-4a2e-8da8-01451f84ee05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727bec30-7cb9-4ac8-b69e-13f1f1aa4b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e05ea6f-fce3-42e4-81c5-01e051d0ae7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d650300-27bb-47cc-8c14-aee1fa702e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d30c04-9549-433f-ad32-fa6bb59e2b5e",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70d98cb-661d-4752-a686-b12cb30ba87c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "ee1aa395-47fa-4872-b4f0-2ab57d2fa271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75310825-113c-4159-b023-fdd56394efb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9dbb5477-6f33-4723-946a-5efedecd4c2e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f7eea21-bf8f-4278-957a-d6db88cab8b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f1ad61c-3bbf-495c-a1f0-e1db748ee0b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a22da96e-c872-4a64-90e4-e5dd11b964c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e1ed160-d0af-4b4a-b330-27bf0c685dea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6bed77f3-5a7a-4a27-a042-077db56507ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "c9a2cd24-bf9a-488d-ac33-05cb075ea8c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6905018-8755-492e-8335-5373236c1b02",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "144b0cc8-bb61-4008-8ded-57031173c2c1"
            }
          }
        ]
      },
      {
        "id": "9ecf3139-d5f3-4978-ad83-13c8c3e8aa26",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "e155f572-d0cc-4c18-a808-e9e46940c390",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 82.42990654205614,
      "responseMin": 32,
      "responseMax": 734,
      "responseSd": 112.71650918142974,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661560963105,
      "completed": 1661560974917
    },
    "executions": [
      {
        "id": "856b7bb3-f2a9-4ab2-b72c-e86f66b8548a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2392199c-b655-4e92-9da7-59da425fdb66",
          "httpRequestId": "90d924a1-5d99-4e2d-a203-221b8cd57803"
        },
        "item": {
          "id": "856b7bb3-f2a9-4ab2-b72c-e86f66b8548a",
          "name": "did_json"
        },
        "response": {
          "id": "d46d29f5-035f-4964-b559-07a9da118f89",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7971977b-494a-45cc-851e-27f30c8bb3ad",
        "cursor": {
          "ref": "86389434-7c6e-4851-aea6-8e19837b0906",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "dc06a618-66ad-449f-bdce-e29d68c19469"
        },
        "item": {
          "id": "7971977b-494a-45cc-851e-27f30c8bb3ad",
          "name": "did:invalid"
        },
        "response": {
          "id": "473aa3f8-a4d3-4342-9bd0-989687ab347b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7971977b-494a-45cc-851e-27f30c8bb3ad",
        "cursor": {
          "ref": "86389434-7c6e-4851-aea6-8e19837b0906",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "dc06a618-66ad-449f-bdce-e29d68c19469"
        },
        "item": {
          "id": "7971977b-494a-45cc-851e-27f30c8bb3ad",
          "name": "did:invalid"
        },
        "response": {
          "id": "473aa3f8-a4d3-4342-9bd0-989687ab347b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff4fa1f-8742-4319-b771-07e26e296af0",
        "cursor": {
          "ref": "f1a80676-c71a-4efc-83a7-6f00381fce01",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2eb9750f-cd6b-4a37-af9f-7e68ec8a2996"
        },
        "item": {
          "id": "9ff4fa1f-8742-4319-b771-07e26e296af0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d8425cc7-6ae3-4bf9-add7-161a85ab474b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 83,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034acc5f-dbc3-4828-b2b1-33b0dedc5fd8",
        "cursor": {
          "ref": "3cb669b7-0775-4000-bc80-5bbb14544237",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "46830f5c-92e5-4430-a76e-7ccba0c51633"
        },
        "item": {
          "id": "034acc5f-dbc3-4828-b2b1-33b0dedc5fd8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "aa5f8d7c-ffdc-4599-bec4-acbeb124cc30",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74044606-efae-4bf4-a8e5-e1a657877967",
        "cursor": {
          "ref": "63616abb-67cf-4544-843c-41e7c31a21b2",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "50e22d05-3a47-43c0-94b7-6c526d919f1c"
        },
        "item": {
          "id": "74044606-efae-4bf4-a8e5-e1a657877967",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0c8192a9-eff4-4389-bf4b-2e861bd4c815",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103cedaa-8909-49e8-98d7-3e9fa378435d",
        "cursor": {
          "ref": "a6c044cd-5114-4cb4-be1c-b06cddef2125",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9500ff97-baf7-49f8-853e-ba5b5f0aba35"
        },
        "item": {
          "id": "103cedaa-8909-49e8-98d7-3e9fa378435d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4ce059a5-8c7d-4e43-84ca-bd6299b5a6f9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103cedaa-8909-49e8-98d7-3e9fa378435d",
        "cursor": {
          "ref": "a6c044cd-5114-4cb4-be1c-b06cddef2125",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9500ff97-baf7-49f8-853e-ba5b5f0aba35"
        },
        "item": {
          "id": "103cedaa-8909-49e8-98d7-3e9fa378435d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4ce059a5-8c7d-4e43-84ca-bd6299b5a6f9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075cd801-d0e2-4b72-a553-1531a2c5fa83",
        "cursor": {
          "ref": "a26f64c1-1d68-4055-8c93-3a406bb81d54",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "aa06a69b-9d8d-4e89-bece-ddbaefc034a0"
        },
        "item": {
          "id": "075cd801-d0e2-4b72-a553-1531a2c5fa83",
          "name": "identifiers"
        },
        "response": {
          "id": "679c8c29-d206-4e02-b35e-d5ce82317739",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588a7ed9-840c-494b-8002-c89f1546ea37",
        "cursor": {
          "ref": "671b7620-18ba-4569-9b41-9ad50575df5b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4fb99a42-0303-4dfb-830e-48ba6003b523"
        },
        "item": {
          "id": "588a7ed9-840c-494b-8002-c89f1546ea37",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "23e99b17-a248-4443-b332-0ea620a59554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588a7ed9-840c-494b-8002-c89f1546ea37",
        "cursor": {
          "ref": "671b7620-18ba-4569-9b41-9ad50575df5b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4fb99a42-0303-4dfb-830e-48ba6003b523"
        },
        "item": {
          "id": "588a7ed9-840c-494b-8002-c89f1546ea37",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "23e99b17-a248-4443-b332-0ea620a59554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588a7ed9-840c-494b-8002-c89f1546ea37",
        "cursor": {
          "ref": "671b7620-18ba-4569-9b41-9ad50575df5b",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4fb99a42-0303-4dfb-830e-48ba6003b523"
        },
        "item": {
          "id": "588a7ed9-840c-494b-8002-c89f1546ea37",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "23e99b17-a248-4443-b332-0ea620a59554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9cbeea-1998-402f-a832-84d33e6c5929",
        "cursor": {
          "ref": "2f98c29e-a478-43a2-b13a-e9b29c8f7e1e",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a327fbbd-cbb4-44f9-83fb-05b36f28a513"
        },
        "item": {
          "id": "ba9cbeea-1998-402f-a832-84d33e6c5929",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c17abc01-93f7-441b-83cd-ad89d4ba4948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9cbeea-1998-402f-a832-84d33e6c5929",
        "cursor": {
          "ref": "2f98c29e-a478-43a2-b13a-e9b29c8f7e1e",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a327fbbd-cbb4-44f9-83fb-05b36f28a513"
        },
        "item": {
          "id": "ba9cbeea-1998-402f-a832-84d33e6c5929",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c17abc01-93f7-441b-83cd-ad89d4ba4948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae049e0-d5bd-4c4e-b115-538ec1fd5c11",
        "cursor": {
          "ref": "43ab1c12-6454-42ae-9530-a0b8565b0f52",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ead4ae49-d063-48b1-805f-404c34b26ba9"
        },
        "item": {
          "id": "dae049e0-d5bd-4c4e-b115-538ec1fd5c11",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "33d60021-770a-42f7-a006-4b1cd02c6611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae049e0-d5bd-4c4e-b115-538ec1fd5c11",
        "cursor": {
          "ref": "43ab1c12-6454-42ae-9530-a0b8565b0f52",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ead4ae49-d063-48b1-805f-404c34b26ba9"
        },
        "item": {
          "id": "dae049e0-d5bd-4c4e-b115-538ec1fd5c11",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "33d60021-770a-42f7-a006-4b1cd02c6611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d8a025-5684-445c-af97-5147ec5f5802",
        "cursor": {
          "ref": "52f3e3fb-1498-4d28-8e59-b414f04dce62",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ee9c4a62-1116-40ed-a002-8dcd5d03262f"
        },
        "item": {
          "id": "20d8a025-5684-445c-af97-5147ec5f5802",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "91e2258d-94eb-43aa-8250-12def0f36fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d8a025-5684-445c-af97-5147ec5f5802",
        "cursor": {
          "ref": "52f3e3fb-1498-4d28-8e59-b414f04dce62",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ee9c4a62-1116-40ed-a002-8dcd5d03262f"
        },
        "item": {
          "id": "20d8a025-5684-445c-af97-5147ec5f5802",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "91e2258d-94eb-43aa-8250-12def0f36fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bef987f-c9b5-4f5c-b206-056d49e223a3",
        "cursor": {
          "ref": "ab311c64-0823-4aa6-9b0a-a5452732c4d1",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "495188b9-a3d0-44f8-a462-238ad2019181"
        },
        "item": {
          "id": "0bef987f-c9b5-4f5c-b206-056d49e223a3",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "0f859ee7-9c2e-4d01-add0-1d048a84ac68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bef987f-c9b5-4f5c-b206-056d49e223a3",
        "cursor": {
          "ref": "ab311c64-0823-4aa6-9b0a-a5452732c4d1",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "495188b9-a3d0-44f8-a462-238ad2019181"
        },
        "item": {
          "id": "0bef987f-c9b5-4f5c-b206-056d49e223a3",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "0f859ee7-9c2e-4d01-add0-1d048a84ac68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d55e3c-30bc-4504-99a1-36df2213e13c",
        "cursor": {
          "ref": "63fdf84d-7dea-4feb-aa12-a7f7c4c41e2a",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f612152f-30a8-4590-b503-ab8fab7393e2"
        },
        "item": {
          "id": "a9d55e3c-30bc-4504-99a1-36df2213e13c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fe5e5083-2566-41a3-a5fa-9bf82d2227a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d55e3c-30bc-4504-99a1-36df2213e13c",
        "cursor": {
          "ref": "63fdf84d-7dea-4feb-aa12-a7f7c4c41e2a",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f612152f-30a8-4590-b503-ab8fab7393e2"
        },
        "item": {
          "id": "a9d55e3c-30bc-4504-99a1-36df2213e13c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fe5e5083-2566-41a3-a5fa-9bf82d2227a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6a8c72-fb8d-4068-923a-2ac58ef7dd6b",
        "cursor": {
          "ref": "61415852-79f3-429f-8e1a-043095d00d7b",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cf04dd27-1211-4e43-a591-92b6917e17af"
        },
        "item": {
          "id": "db6a8c72-fb8d-4068-923a-2ac58ef7dd6b",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "60099715-8d47-4d9a-b6c2-e2ca011ffe30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6a8c72-fb8d-4068-923a-2ac58ef7dd6b",
        "cursor": {
          "ref": "61415852-79f3-429f-8e1a-043095d00d7b",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cf04dd27-1211-4e43-a591-92b6917e17af"
        },
        "item": {
          "id": "db6a8c72-fb8d-4068-923a-2ac58ef7dd6b",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "60099715-8d47-4d9a-b6c2-e2ca011ffe30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8ef800-268c-4c50-9580-d9412c46fae2",
        "cursor": {
          "ref": "86b7247a-1bb0-4f96-ada5-44aebe30b416",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "344a2cbc-52a4-4fcf-92a1-eaad57de578c"
        },
        "item": {
          "id": "0c8ef800-268c-4c50-9580-d9412c46fae2",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "0431017a-25f2-4474-9e4d-96ab05bb2984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8ef800-268c-4c50-9580-d9412c46fae2",
        "cursor": {
          "ref": "86b7247a-1bb0-4f96-ada5-44aebe30b416",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "344a2cbc-52a4-4fcf-92a1-eaad57de578c"
        },
        "item": {
          "id": "0c8ef800-268c-4c50-9580-d9412c46fae2",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "0431017a-25f2-4474-9e4d-96ab05bb2984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a72f1a-37f9-4d84-941e-72e6e7777ab8",
        "cursor": {
          "ref": "eb90e89b-a10f-4529-b9f8-79835e4ade98",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3075c239-7cbe-4121-87d5-94d552e5d328"
        },
        "item": {
          "id": "98a72f1a-37f9-4d84-941e-72e6e7777ab8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "934d8ee6-4f5b-42b2-bec3-7e118c9da1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a72f1a-37f9-4d84-941e-72e6e7777ab8",
        "cursor": {
          "ref": "eb90e89b-a10f-4529-b9f8-79835e4ade98",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3075c239-7cbe-4121-87d5-94d552e5d328"
        },
        "item": {
          "id": "98a72f1a-37f9-4d84-941e-72e6e7777ab8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "934d8ee6-4f5b-42b2-bec3-7e118c9da1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc2ba5e-7f1b-4179-9db2-2b166505df96",
        "cursor": {
          "ref": "85f2a30b-dd98-41bf-858e-8c96eee0617c",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d9b75466-733f-4f9d-b124-6dc7d5c2c9e1"
        },
        "item": {
          "id": "9cc2ba5e-7f1b-4179-9db2-2b166505df96",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "fdfd5916-11ab-4a5c-804e-8388bcf11fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc2ba5e-7f1b-4179-9db2-2b166505df96",
        "cursor": {
          "ref": "85f2a30b-dd98-41bf-858e-8c96eee0617c",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d9b75466-733f-4f9d-b124-6dc7d5c2c9e1"
        },
        "item": {
          "id": "9cc2ba5e-7f1b-4179-9db2-2b166505df96",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "fdfd5916-11ab-4a5c-804e-8388bcf11fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e2c73a-e9dc-465d-ab1e-69c8f73e4f36",
        "cursor": {
          "ref": "daeef749-3c05-4877-95d8-e308e6ce779e",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "42a11604-3de5-4c84-8a2d-2b60948e96c4"
        },
        "item": {
          "id": "66e2c73a-e9dc-465d-ab1e-69c8f73e4f36",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "6d4a337f-7569-4785-934d-b6066619d475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e2c73a-e9dc-465d-ab1e-69c8f73e4f36",
        "cursor": {
          "ref": "daeef749-3c05-4877-95d8-e308e6ce779e",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "42a11604-3de5-4c84-8a2d-2b60948e96c4"
        },
        "item": {
          "id": "66e2c73a-e9dc-465d-ab1e-69c8f73e4f36",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "6d4a337f-7569-4785-934d-b6066619d475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c2b14b-aafc-4f39-a365-d2bddd3aa871",
        "cursor": {
          "ref": "50b07166-7753-4821-80a5-4632776b6919",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "24506031-042d-4ea1-88fc-a48beb65d54a"
        },
        "item": {
          "id": "85c2b14b-aafc-4f39-a365-d2bddd3aa871",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8a4e7e9f-ed4b-4c36-b3ae-399f8bd49f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c2b14b-aafc-4f39-a365-d2bddd3aa871",
        "cursor": {
          "ref": "50b07166-7753-4821-80a5-4632776b6919",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "24506031-042d-4ea1-88fc-a48beb65d54a"
        },
        "item": {
          "id": "85c2b14b-aafc-4f39-a365-d2bddd3aa871",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8a4e7e9f-ed4b-4c36-b3ae-399f8bd49f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8145e41-2483-4b53-83e5-8bebec895898",
        "cursor": {
          "ref": "486b15d6-3d4c-4d32-8104-e52abc2cffcf",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ccb75ccc-2884-4e0c-a4b8-36c20e976f3f"
        },
        "item": {
          "id": "b8145e41-2483-4b53-83e5-8bebec895898",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "544686f4-ec1f-4cfa-a0d3-55faf2d77816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8145e41-2483-4b53-83e5-8bebec895898",
        "cursor": {
          "ref": "486b15d6-3d4c-4d32-8104-e52abc2cffcf",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ccb75ccc-2884-4e0c-a4b8-36c20e976f3f"
        },
        "item": {
          "id": "b8145e41-2483-4b53-83e5-8bebec895898",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "544686f4-ec1f-4cfa-a0d3-55faf2d77816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436b7aa5-298b-4cf1-a0eb-c4fa36372652",
        "cursor": {
          "ref": "6ab0594a-9b9c-4eb3-8437-9582d33e99ba",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ca0ccbe0-a4ed-49b2-a513-ae90a7dd0c30"
        },
        "item": {
          "id": "436b7aa5-298b-4cf1-a0eb-c4fa36372652",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "918abb52-2d36-4b6f-85de-587e131d4b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436b7aa5-298b-4cf1-a0eb-c4fa36372652",
        "cursor": {
          "ref": "6ab0594a-9b9c-4eb3-8437-9582d33e99ba",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ca0ccbe0-a4ed-49b2-a513-ae90a7dd0c30"
        },
        "item": {
          "id": "436b7aa5-298b-4cf1-a0eb-c4fa36372652",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "918abb52-2d36-4b6f-85de-587e131d4b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27a94b6-a32c-4303-ba6e-f5ab9fb94dff",
        "cursor": {
          "ref": "60ac57d0-5b5d-4acd-9b01-7e2f83313c19",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3b09a6b0-c327-49fa-a9c2-3a330e84aa8d"
        },
        "item": {
          "id": "b27a94b6-a32c-4303-ba6e-f5ab9fb94dff",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "92d5fada-713f-44b4-a0b0-00e1280b1e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27a94b6-a32c-4303-ba6e-f5ab9fb94dff",
        "cursor": {
          "ref": "60ac57d0-5b5d-4acd-9b01-7e2f83313c19",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3b09a6b0-c327-49fa-a9c2-3a330e84aa8d"
        },
        "item": {
          "id": "b27a94b6-a32c-4303-ba6e-f5ab9fb94dff",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "92d5fada-713f-44b4-a0b0-00e1280b1e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51247b4-fc6e-4e4e-8c35-0bceca314038",
        "cursor": {
          "ref": "12bd5de7-cb01-4970-87bb-e5a6c140b2e7",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d6921ab2-8371-4095-8b17-8f6b2ad69b42"
        },
        "item": {
          "id": "e51247b4-fc6e-4e4e-8c35-0bceca314038",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cc1f1207-e5de-4af5-a3f8-198d9fa81fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51247b4-fc6e-4e4e-8c35-0bceca314038",
        "cursor": {
          "ref": "12bd5de7-cb01-4970-87bb-e5a6c140b2e7",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d6921ab2-8371-4095-8b17-8f6b2ad69b42"
        },
        "item": {
          "id": "e51247b4-fc6e-4e4e-8c35-0bceca314038",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cc1f1207-e5de-4af5-a3f8-198d9fa81fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cf8569-e13e-42b8-915c-a09436902bc2",
        "cursor": {
          "ref": "3b7242c3-c113-4f9a-b565-b477242b34c3",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "63e39920-1e76-4030-b7cc-0eb9cf474a0e"
        },
        "item": {
          "id": "d0cf8569-e13e-42b8-915c-a09436902bc2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c803dc80-b31c-4961-9460-fc18565f480d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0cf8569-e13e-42b8-915c-a09436902bc2",
        "cursor": {
          "ref": "3b7242c3-c113-4f9a-b565-b477242b34c3",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "63e39920-1e76-4030-b7cc-0eb9cf474a0e"
        },
        "item": {
          "id": "d0cf8569-e13e-42b8-915c-a09436902bc2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c803dc80-b31c-4961-9460-fc18565f480d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f14f5f5-6220-41c3-9080-639f1268d09b",
        "cursor": {
          "ref": "782a0782-7c71-4adf-9aa4-ca37c827e96d",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bc59a8ec-7caf-428d-b2ab-4b8f714ba239"
        },
        "item": {
          "id": "9f14f5f5-6220-41c3-9080-639f1268d09b",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "5db03089-0220-40c1-9c1b-1702a3aea250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f14f5f5-6220-41c3-9080-639f1268d09b",
        "cursor": {
          "ref": "782a0782-7c71-4adf-9aa4-ca37c827e96d",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bc59a8ec-7caf-428d-b2ab-4b8f714ba239"
        },
        "item": {
          "id": "9f14f5f5-6220-41c3-9080-639f1268d09b",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "5db03089-0220-40c1-9c1b-1702a3aea250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f994b9e-9f01-459f-b90c-ae2a12c31ae3",
        "cursor": {
          "ref": "dca234d2-aeab-4533-8892-f54abb23dbae",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "28a191dc-14ad-40c3-bbb3-7734eac952d8"
        },
        "item": {
          "id": "8f994b9e-9f01-459f-b90c-ae2a12c31ae3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5ad9983d-8cc9-4993-8a67-0687200b2250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f994b9e-9f01-459f-b90c-ae2a12c31ae3",
        "cursor": {
          "ref": "dca234d2-aeab-4533-8892-f54abb23dbae",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "28a191dc-14ad-40c3-bbb3-7734eac952d8"
        },
        "item": {
          "id": "8f994b9e-9f01-459f-b90c-ae2a12c31ae3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5ad9983d-8cc9-4993-8a67-0687200b2250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db044510-01e2-40f1-9384-96429eccae1f",
        "cursor": {
          "ref": "4d3e4b11-7049-4d6f-b91d-62b89c9c9d79",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "77c2a26c-5afd-4c3d-8da5-220994f47ed4"
        },
        "item": {
          "id": "db044510-01e2-40f1-9384-96429eccae1f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "384b5cc4-3ee7-4785-8423-c9923be5cf11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db044510-01e2-40f1-9384-96429eccae1f",
        "cursor": {
          "ref": "4d3e4b11-7049-4d6f-b91d-62b89c9c9d79",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "77c2a26c-5afd-4c3d-8da5-220994f47ed4"
        },
        "item": {
          "id": "db044510-01e2-40f1-9384-96429eccae1f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "384b5cc4-3ee7-4785-8423-c9923be5cf11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a16d077-2295-458d-83c4-1274ff9219f9",
        "cursor": {
          "ref": "044bb79d-c135-43e0-87f8-783b2f5b74da",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "66e85a28-faea-4983-b9af-7379e5e8a53d"
        },
        "item": {
          "id": "6a16d077-2295-458d-83c4-1274ff9219f9",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "20acae32-3fe8-477e-a0e7-2ec0c370011f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a16d077-2295-458d-83c4-1274ff9219f9",
        "cursor": {
          "ref": "044bb79d-c135-43e0-87f8-783b2f5b74da",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "66e85a28-faea-4983-b9af-7379e5e8a53d"
        },
        "item": {
          "id": "6a16d077-2295-458d-83c4-1274ff9219f9",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "20acae32-3fe8-477e-a0e7-2ec0c370011f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7194ba4d-c0da-48bc-937d-6decaa8eb9e8",
        "cursor": {
          "ref": "457a0665-77f1-48e7-a0c4-35a8bb1302b6",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "57acad18-bfb7-49a5-8015-79451bd7bc86"
        },
        "item": {
          "id": "7194ba4d-c0da-48bc-937d-6decaa8eb9e8",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "e1311ce7-d61f-4cda-b064-f3fcef14643d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7194ba4d-c0da-48bc-937d-6decaa8eb9e8",
        "cursor": {
          "ref": "457a0665-77f1-48e7-a0c4-35a8bb1302b6",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "57acad18-bfb7-49a5-8015-79451bd7bc86"
        },
        "item": {
          "id": "7194ba4d-c0da-48bc-937d-6decaa8eb9e8",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "e1311ce7-d61f-4cda-b064-f3fcef14643d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa97ae2-9ffb-4388-a143-a91e87954c30",
        "cursor": {
          "ref": "a2812234-62e7-43e7-8db5-6e8c4d17833b",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ff025d2e-d81a-4f54-9204-ccf9afe01ca8"
        },
        "item": {
          "id": "9fa97ae2-9ffb-4388-a143-a91e87954c30",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6e0a9fa1-c9ed-413a-b6c9-d17af843b985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa97ae2-9ffb-4388-a143-a91e87954c30",
        "cursor": {
          "ref": "a2812234-62e7-43e7-8db5-6e8c4d17833b",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ff025d2e-d81a-4f54-9204-ccf9afe01ca8"
        },
        "item": {
          "id": "9fa97ae2-9ffb-4388-a143-a91e87954c30",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6e0a9fa1-c9ed-413a-b6c9-d17af843b985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90f69b0-37c7-4414-88a5-5dbf937789fd",
        "cursor": {
          "ref": "0b3e2f2f-c075-493b-abde-8aa4a9506abb",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2e5367b1-4087-41a6-bbb8-8e6cd361f923"
        },
        "item": {
          "id": "d90f69b0-37c7-4414-88a5-5dbf937789fd",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "51e8facb-5b5b-4e8e-a8ae-7aa196139f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90f69b0-37c7-4414-88a5-5dbf937789fd",
        "cursor": {
          "ref": "0b3e2f2f-c075-493b-abde-8aa4a9506abb",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2e5367b1-4087-41a6-bbb8-8e6cd361f923"
        },
        "item": {
          "id": "d90f69b0-37c7-4414-88a5-5dbf937789fd",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "51e8facb-5b5b-4e8e-a8ae-7aa196139f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5c7686-1b10-467c-8d69-b1c6ca268bdb",
        "cursor": {
          "ref": "3cbb5c19-6831-459a-86df-c5031829f3bd",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b75d96d3-0575-45a1-8fc6-5d3309aa2e31"
        },
        "item": {
          "id": "8c5c7686-1b10-467c-8d69-b1c6ca268bdb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0b3a7173-de8a-485b-aceb-559912e0b686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5c7686-1b10-467c-8d69-b1c6ca268bdb",
        "cursor": {
          "ref": "3cbb5c19-6831-459a-86df-c5031829f3bd",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b75d96d3-0575-45a1-8fc6-5d3309aa2e31"
        },
        "item": {
          "id": "8c5c7686-1b10-467c-8d69-b1c6ca268bdb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0b3a7173-de8a-485b-aceb-559912e0b686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c666845-c932-44e6-9e57-d8a5451731ae",
        "cursor": {
          "ref": "56c2338d-7e9c-44b0-9a4e-dafc64cefa86",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cef765d2-717f-422b-8ba4-2e50acb81ab9"
        },
        "item": {
          "id": "6c666845-c932-44e6-9e57-d8a5451731ae",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "09499ca4-13d0-4877-a09e-2d7aef12e97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c666845-c932-44e6-9e57-d8a5451731ae",
        "cursor": {
          "ref": "56c2338d-7e9c-44b0-9a4e-dafc64cefa86",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cef765d2-717f-422b-8ba4-2e50acb81ab9"
        },
        "item": {
          "id": "6c666845-c932-44e6-9e57-d8a5451731ae",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "09499ca4-13d0-4877-a09e-2d7aef12e97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94afd2f1-998f-4ca8-98ae-2d5763f1125f",
        "cursor": {
          "ref": "99353ae8-5039-470e-9ad4-6743db985559",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "df6940a8-4815-4de4-8624-e42868ec45db"
        },
        "item": {
          "id": "94afd2f1-998f-4ca8-98ae-2d5763f1125f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ca511c71-00a0-410e-b14d-3519d7d4773b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94afd2f1-998f-4ca8-98ae-2d5763f1125f",
        "cursor": {
          "ref": "99353ae8-5039-470e-9ad4-6743db985559",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "df6940a8-4815-4de4-8624-e42868ec45db"
        },
        "item": {
          "id": "94afd2f1-998f-4ca8-98ae-2d5763f1125f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ca511c71-00a0-410e-b14d-3519d7d4773b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4086c846-e3be-4e77-b07e-a9020fcd0daf",
        "cursor": {
          "ref": "c3fe2fef-d7cf-49c9-9263-0e8ac9b92dc5",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4dfeb697-7ce5-4d33-99b7-e888e095175a"
        },
        "item": {
          "id": "4086c846-e3be-4e77-b07e-a9020fcd0daf",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "96774b4f-024f-4bbc-8eef-e180d16c7c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4086c846-e3be-4e77-b07e-a9020fcd0daf",
        "cursor": {
          "ref": "c3fe2fef-d7cf-49c9-9263-0e8ac9b92dc5",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4dfeb697-7ce5-4d33-99b7-e888e095175a"
        },
        "item": {
          "id": "4086c846-e3be-4e77-b07e-a9020fcd0daf",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "96774b4f-024f-4bbc-8eef-e180d16c7c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc95f82-2fa9-4f14-ba1e-5bd034210b4f",
        "cursor": {
          "ref": "e1975f90-cc0e-4d2f-aeaf-ae9bc71db8ef",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c2690364-6ee7-4f41-82c1-fadf13d3cbe3"
        },
        "item": {
          "id": "cdc95f82-2fa9-4f14-ba1e-5bd034210b4f",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "386b023f-9228-404b-98e1-46d86083e947",
          "status": "Created",
          "code": 201,
          "responseTime": 734,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "cdc95f82-2fa9-4f14-ba1e-5bd034210b4f",
        "cursor": {
          "ref": "e1975f90-cc0e-4d2f-aeaf-ae9bc71db8ef",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c2690364-6ee7-4f41-82c1-fadf13d3cbe3"
        },
        "item": {
          "id": "cdc95f82-2fa9-4f14-ba1e-5bd034210b4f",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "386b023f-9228-404b-98e1-46d86083e947",
          "status": "Created",
          "code": 201,
          "responseTime": 734,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "92a0d347-35c1-4ea4-9ae0-090cb0b37db8",
        "cursor": {
          "ref": "fd110fd5-bd39-4bd4-85e8-3e50fcc3296b",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9b678867-3d35-4f07-9433-1743483e2088"
        },
        "item": {
          "id": "92a0d347-35c1-4ea4-9ae0-090cb0b37db8",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "fa1b6fe0-75af-485a-beff-6768495f6756",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "92a0d347-35c1-4ea4-9ae0-090cb0b37db8",
        "cursor": {
          "ref": "fd110fd5-bd39-4bd4-85e8-3e50fcc3296b",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9b678867-3d35-4f07-9433-1743483e2088"
        },
        "item": {
          "id": "92a0d347-35c1-4ea4-9ae0-090cb0b37db8",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "fa1b6fe0-75af-485a-beff-6768495f6756",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "16f3539f-11b2-4a63-85a8-5a038adf06c4",
        "cursor": {
          "ref": "018825b5-3390-428f-979d-9c89e9f0a967",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "50de320a-4114-4384-9e35-bbaec94a2e45"
        },
        "item": {
          "id": "16f3539f-11b2-4a63-85a8-5a038adf06c4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "cf616f85-c7ba-499a-96f8-160353d5b1a4",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "16f3539f-11b2-4a63-85a8-5a038adf06c4",
        "cursor": {
          "ref": "018825b5-3390-428f-979d-9c89e9f0a967",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "50de320a-4114-4384-9e35-bbaec94a2e45"
        },
        "item": {
          "id": "16f3539f-11b2-4a63-85a8-5a038adf06c4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "cf616f85-c7ba-499a-96f8-160353d5b1a4",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "8cbdbb09-2169-4baa-97ab-f768d56e0f6f",
        "cursor": {
          "ref": "c47a0c58-1b04-41b3-ab3c-d73a31863638",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e296ec4e-d2f4-4c8a-9593-84dee8990787"
        },
        "item": {
          "id": "8cbdbb09-2169-4baa-97ab-f768d56e0f6f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5e8450d9-35bc-4511-8484-22d882c0003b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbdbb09-2169-4baa-97ab-f768d56e0f6f",
        "cursor": {
          "ref": "c47a0c58-1b04-41b3-ab3c-d73a31863638",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e296ec4e-d2f4-4c8a-9593-84dee8990787"
        },
        "item": {
          "id": "8cbdbb09-2169-4baa-97ab-f768d56e0f6f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5e8450d9-35bc-4511-8484-22d882c0003b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ec63ce-3cf3-4f93-9d66-c4c7b477c5a3",
        "cursor": {
          "ref": "2c3382bd-5c47-490f-b057-5cd305cf45ff",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3827a89c-2517-4465-af27-e5a2b314e6e3"
        },
        "item": {
          "id": "c4ec63ce-3cf3-4f93-9d66-c4c7b477c5a3",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0e4f5ffa-ef27-4d0d-95a2-f5b434fd10bc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ec63ce-3cf3-4f93-9d66-c4c7b477c5a3",
        "cursor": {
          "ref": "2c3382bd-5c47-490f-b057-5cd305cf45ff",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3827a89c-2517-4465-af27-e5a2b314e6e3"
        },
        "item": {
          "id": "c4ec63ce-3cf3-4f93-9d66-c4c7b477c5a3",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0e4f5ffa-ef27-4d0d-95a2-f5b434fd10bc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c929f3d8-eca6-4c9f-8c5e-3061a3b47fb5",
        "cursor": {
          "ref": "58351668-bea8-4a56-975c-30ef8e5dec77",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bed38059-19f3-4dc2-acc4-4cd7670eff6f"
        },
        "item": {
          "id": "c929f3d8-eca6-4c9f-8c5e-3061a3b47fb5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b7b35bff-bf18-4e08-9f6c-8fdac858f40a",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "c929f3d8-eca6-4c9f-8c5e-3061a3b47fb5",
        "cursor": {
          "ref": "58351668-bea8-4a56-975c-30ef8e5dec77",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "bed38059-19f3-4dc2-acc4-4cd7670eff6f"
        },
        "item": {
          "id": "c929f3d8-eca6-4c9f-8c5e-3061a3b47fb5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b7b35bff-bf18-4e08-9f6c-8fdac858f40a",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "7511c700-9ccd-47fc-bf77-6549eb4323e9",
        "cursor": {
          "ref": "2fd1ffd7-5590-425b-b98a-99a1bb999408",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0b7fbfca-acfd-4f49-b5c4-71056c8677d0"
        },
        "item": {
          "id": "7511c700-9ccd-47fc-bf77-6549eb4323e9",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "d45eae10-ffdc-46d7-994e-3b77611c3c0f",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "7511c700-9ccd-47fc-bf77-6549eb4323e9",
        "cursor": {
          "ref": "2fd1ffd7-5590-425b-b98a-99a1bb999408",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0b7fbfca-acfd-4f49-b5c4-71056c8677d0"
        },
        "item": {
          "id": "7511c700-9ccd-47fc-bf77-6549eb4323e9",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "d45eae10-ffdc-46d7-994e-3b77611c3c0f",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "df079f7e-7e63-48b4-8434-c2f0dfbc86f9",
        "cursor": {
          "ref": "c48d227e-d215-4ea7-b011-39e0b16e9e91",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b24ca9d4-0cc5-497a-a960-1726d47e5bc1"
        },
        "item": {
          "id": "df079f7e-7e63-48b4-8434-c2f0dfbc86f9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6da70d9f-6398-49dc-9f88-3af02c87456e",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "df079f7e-7e63-48b4-8434-c2f0dfbc86f9",
        "cursor": {
          "ref": "c48d227e-d215-4ea7-b011-39e0b16e9e91",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b24ca9d4-0cc5-497a-a960-1726d47e5bc1"
        },
        "item": {
          "id": "df079f7e-7e63-48b4-8434-c2f0dfbc86f9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6da70d9f-6398-49dc-9f88-3af02c87456e",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "61db9bf4-842c-4842-baef-656de7a322e4",
        "cursor": {
          "ref": "349fccd4-c221-408a-9361-8e1dfee59410",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7bcbb4b1-488a-4a73-99d7-b3eb7f99a696"
        },
        "item": {
          "id": "61db9bf4-842c-4842-baef-656de7a322e4",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "c9efed72-e577-48f9-8127-4a93f1cac91c",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "61db9bf4-842c-4842-baef-656de7a322e4",
        "cursor": {
          "ref": "349fccd4-c221-408a-9361-8e1dfee59410",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7bcbb4b1-488a-4a73-99d7-b3eb7f99a696"
        },
        "item": {
          "id": "61db9bf4-842c-4842-baef-656de7a322e4",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "c9efed72-e577-48f9-8127-4a93f1cac91c",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b1b3bdce-6414-4ffd-9c91-00ce7f7c5a8f",
        "cursor": {
          "ref": "9c78b72a-9b5f-4213-af39-9b958cc3f0be",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bc55b862-d9c4-4dcd-ad57-194478281943"
        },
        "item": {
          "id": "b1b3bdce-6414-4ffd-9c91-00ce7f7c5a8f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1e01e1d9-e86b-4d28-9cc7-d6fe22acd814",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b3bdce-6414-4ffd-9c91-00ce7f7c5a8f",
        "cursor": {
          "ref": "9c78b72a-9b5f-4213-af39-9b958cc3f0be",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bc55b862-d9c4-4dcd-ad57-194478281943"
        },
        "item": {
          "id": "b1b3bdce-6414-4ffd-9c91-00ce7f7c5a8f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1e01e1d9-e86b-4d28-9cc7-d6fe22acd814",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2faa505c-cde3-436c-90ee-648c533d2759",
        "cursor": {
          "ref": "d09f836b-7857-4f73-a11d-ad624fb34f3f",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "94960f6c-f980-46c4-953b-37cb4486e94b"
        },
        "item": {
          "id": "2faa505c-cde3-436c-90ee-648c533d2759",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ab681d58-b76c-416d-9326-8155f50fbd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2faa505c-cde3-436c-90ee-648c533d2759",
        "cursor": {
          "ref": "d09f836b-7857-4f73-a11d-ad624fb34f3f",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "94960f6c-f980-46c4-953b-37cb4486e94b"
        },
        "item": {
          "id": "2faa505c-cde3-436c-90ee-648c533d2759",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ab681d58-b76c-416d-9326-8155f50fbd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "10dad28e-d541-4287-8fa8-3c1c7065a5ec",
        "cursor": {
          "ref": "03fc8ada-bafa-4bb9-86a8-3ab8373a4f91",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "abdba5d3-8017-49ef-9372-56f1f4adf6f3"
        },
        "item": {
          "id": "10dad28e-d541-4287-8fa8-3c1c7065a5ec",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f498229e-f9b8-4d0c-acd9-e19ebe3a7c68",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "10dad28e-d541-4287-8fa8-3c1c7065a5ec",
        "cursor": {
          "ref": "03fc8ada-bafa-4bb9-86a8-3ab8373a4f91",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "abdba5d3-8017-49ef-9372-56f1f4adf6f3"
        },
        "item": {
          "id": "10dad28e-d541-4287-8fa8-3c1c7065a5ec",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f498229e-f9b8-4d0c-acd9-e19ebe3a7c68",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "71a2d42f-0813-43fb-beae-d482aa16934f",
        "cursor": {
          "ref": "6290aeec-3911-4394-b32f-e492ba70683e",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b12bcbbb-18d4-43dd-a3cb-bac9a8652e85"
        },
        "item": {
          "id": "71a2d42f-0813-43fb-beae-d482aa16934f",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "4a4a62e4-e743-4d4f-a6e6-83232a09ae51",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "71a2d42f-0813-43fb-beae-d482aa16934f",
        "cursor": {
          "ref": "6290aeec-3911-4394-b32f-e492ba70683e",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b12bcbbb-18d4-43dd-a3cb-bac9a8652e85"
        },
        "item": {
          "id": "71a2d42f-0813-43fb-beae-d482aa16934f",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "4a4a62e4-e743-4d4f-a6e6-83232a09ae51",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d2308c55-7803-4cac-9702-2b7f46acb9b3",
        "cursor": {
          "ref": "c4101677-c240-4680-ba61-a664b9bb291c",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cef9167e-2d91-43c5-bd26-d645e2ec53d5"
        },
        "item": {
          "id": "d2308c55-7803-4cac-9702-2b7f46acb9b3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ac9c4768-e6ef-45cb-b455-55964437e0fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2308c55-7803-4cac-9702-2b7f46acb9b3",
        "cursor": {
          "ref": "c4101677-c240-4680-ba61-a664b9bb291c",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cef9167e-2d91-43c5-bd26-d645e2ec53d5"
        },
        "item": {
          "id": "d2308c55-7803-4cac-9702-2b7f46acb9b3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ac9c4768-e6ef-45cb-b455-55964437e0fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb4cbbe-78b6-4aeb-a4b9-c9358a8d8e9a",
        "cursor": {
          "ref": "ea4841b7-d562-4ce5-8b62-c0627e47e4e5",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "de4d57c8-ade2-493e-89c1-5dee460a7408"
        },
        "item": {
          "id": "7bb4cbbe-78b6-4aeb-a4b9-c9358a8d8e9a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5afdb114-684a-4785-ae9f-80ce2639fda4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96adb5a-bf3a-462a-80f9-7dd4ba424d77",
        "cursor": {
          "ref": "8d486ad6-6d4f-4852-81f4-4bbea29f93e3",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "097694b9-2995-41e7-ad92-e689298b8f30"
        },
        "item": {
          "id": "d96adb5a-bf3a-462a-80f9-7dd4ba424d77",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6ed699be-4bf0-4bb5-83c8-73dd7d85bd83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96adb5a-bf3a-462a-80f9-7dd4ba424d77",
        "cursor": {
          "ref": "8d486ad6-6d4f-4852-81f4-4bbea29f93e3",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "097694b9-2995-41e7-ad92-e689298b8f30"
        },
        "item": {
          "id": "d96adb5a-bf3a-462a-80f9-7dd4ba424d77",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6ed699be-4bf0-4bb5-83c8-73dd7d85bd83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27b8cf7-8984-46ab-bd9a-ed07874e43f9",
        "cursor": {
          "ref": "2671294e-63d5-4522-aad9-ea3b70ac05e0",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ac6c0e4b-c571-464d-bf0a-e478eee6ea00"
        },
        "item": {
          "id": "f27b8cf7-8984-46ab-bd9a-ed07874e43f9",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "72ff6589-34e6-49bc-941f-21e1b58f6a55",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f8a44c-e845-4a65-bb3e-5079ff12c46b",
        "cursor": {
          "ref": "0ce842a1-8b62-4fae-b808-1a33590a6a43",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "677c45aa-d54b-4dc2-852e-c612f21c1218"
        },
        "item": {
          "id": "78f8a44c-e845-4a65-bb3e-5079ff12c46b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "85498a3f-22c4-455d-bc01-e62b56c39245",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f8a44c-e845-4a65-bb3e-5079ff12c46b",
        "cursor": {
          "ref": "0ce842a1-8b62-4fae-b808-1a33590a6a43",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "677c45aa-d54b-4dc2-852e-c612f21c1218"
        },
        "item": {
          "id": "78f8a44c-e845-4a65-bb3e-5079ff12c46b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "85498a3f-22c4-455d-bc01-e62b56c39245",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c7a28c-10bd-4c48-a760-99baf1a12434",
        "cursor": {
          "ref": "43f95216-2c70-492d-a814-b99a2f62e174",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c40cc62b-7926-4e3e-a7b4-1c5899059f75"
        },
        "item": {
          "id": "d2c7a28c-10bd-4c48-a760-99baf1a12434",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "12023b03-60c7-47e6-b5c8-5e7242af851e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 42,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eded0945-6e55-444c-80e7-8841bbee79b0",
        "cursor": {
          "ref": "d15e804c-019f-42b8-920a-3a0788878dab",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fc13970a-1852-42dc-8a17-ca475148d788"
        },
        "item": {
          "id": "eded0945-6e55-444c-80e7-8841bbee79b0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d846327e-dbc5-48b7-ae35-8869f705720d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "eded0945-6e55-444c-80e7-8841bbee79b0",
        "cursor": {
          "ref": "d15e804c-019f-42b8-920a-3a0788878dab",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fc13970a-1852-42dc-8a17-ca475148d788"
        },
        "item": {
          "id": "eded0945-6e55-444c-80e7-8841bbee79b0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d846327e-dbc5-48b7-ae35-8869f705720d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "234cf96e-34ed-45d3-afe5-0bafde1150d1",
        "cursor": {
          "ref": "777b6ae8-405d-4f39-85f1-29b71c6fb844",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "219ea0db-fd25-483e-a765-873c3d2c3076"
        },
        "item": {
          "id": "234cf96e-34ed-45d3-afe5-0bafde1150d1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "fc610362-b066-444f-89f6-8a76b6da50e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "459e86f8-7149-40f8-b6fd-8a3b35dadc00",
        "cursor": {
          "ref": "3bfa6c85-1f66-48f8-abe4-3f0516a23357",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cdb74fb8-9f51-4f54-81b9-a9be6deb5423"
        },
        "item": {
          "id": "459e86f8-7149-40f8-b6fd-8a3b35dadc00",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5d5a412a-d5f0-4480-ad02-1f485565d022",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459e86f8-7149-40f8-b6fd-8a3b35dadc00",
        "cursor": {
          "ref": "3bfa6c85-1f66-48f8-abe4-3f0516a23357",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cdb74fb8-9f51-4f54-81b9-a9be6deb5423"
        },
        "item": {
          "id": "459e86f8-7149-40f8-b6fd-8a3b35dadc00",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5d5a412a-d5f0-4480-ad02-1f485565d022",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d30c04-9549-433f-ad32-fa6bb59e2b5e",
        "cursor": {
          "ref": "983bb8cf-09da-49ac-9119-98ace5d33b01",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f6ca72fc-6f38-49a3-9b1f-b2473b513e50"
        },
        "item": {
          "id": "32d30c04-9549-433f-ad32-fa6bb59e2b5e",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "426bbdb6-84fb-40c8-9583-cf32b5516a89",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}