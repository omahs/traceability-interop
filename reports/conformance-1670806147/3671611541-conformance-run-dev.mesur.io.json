{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "98eb4c7b-4cdf-4d25-b148-51f580f91b07",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e446fffc-33cd-431f-ab5e-ae9cb667668e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "05af8649-736c-4655-b036-2f637d8e5842",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "541ead13-99f8-48f2-ac6d-1d0a8fc534ad"
                }
              }
            ]
          },
          {
            "id": "9c8332b0-89a2-4de7-adc7-d261314e5919",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a34f4034-c7a9-4b85-b04a-9fa5edc740bd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2545f023-29a2-40cd-a3f3-b42270bc557d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "205b611b-b677-4c82-875e-a2a99d671718",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8adea6f6-30f4-4f9c-b9bf-0e843bea7acd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "359c6aec-706c-4673-aafd-4158a610dd88",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5507569e-971a-4be8-a0ca-2e9395e6bb88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83c698ee-32e6-4c49-ac3b-13f07eca0585"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bd3ef469-0cfa-4576-baa6-49418a9ea2ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd90e061-e629-4e2e-907b-23e32fefcf18"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6e88d45f-a264-489b-8fc2-5bb66e964595",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33acc776-d546-40cc-9755-8554f6490654"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a05a74a7-9df5-414c-a412-96a6759c8f0d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "34c629bb-2223-470e-85c2-4436701c76d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "206261a0-a6e7-4eb0-b8db-65970cfc93e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad7aa6d7-136d-43ec-8e27-f62ba4548491"
            }
          }
        ]
      },
      {
        "id": "eea28f5b-b349-4ae9-bc27-03a2d1e9a072",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "aaa9dcfd-8a47-47b1-9a28-7b7b35de5bfb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41f68455-ea71-4b32-8426-b85847acf698",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "57807631-fcdb-4ee8-a249-e05fcfd4d0dc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a072628-42ce-4ae5-b76d-e58cbf344ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d549ad4d-36a9-4749-aee3-635731d4b1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3dbe3b-a20c-4bcd-86e7-946ab58e8137",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d750bb5-aadf-4166-8f49-ffdbe3c522a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5aa21a3-a20b-4042-85db-6c2b671a45ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106adce5-0082-4e6f-b38b-5145ab901cbe",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a87cb55-7f52-4220-91bf-0448356819de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf35fbb3-0099-4296-8c75-ae8331948458"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "62141c97-7485-4bc2-beed-1c7d4f7573bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "67b48081-1246-4f6b-aa65-8c49fa3b8c41",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01d64d2-3bda-4887-b2a5-d5e8cde6e50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a08d31e1-4f6a-4d77-914f-194c4dbef7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54c8e92-1793-4fab-a569-1292f47d4b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de0d9e4-9fe1-4523-9e86-6f3e4cad331c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b930e90a-1e5e-4f9b-99fb-fd1a7e87da67",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1632a2bd-d268-4c81-92fe-4191b1c8e63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1096100b-0d0b-42a3-b858-8c87d7d457c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0caaa5-913e-4e68-8acf-8402493e1c40",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2d6bc416-15d5-482f-857f-f5b0245f3e29"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0239f372-0225-492c-b6c6-155f1395fdaa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "069da202-ca29-4ee3-8446-3203f62ce6a0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54bde113-721b-4eb5-bd8f-29ff1032273a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "da70969e-3c0d-4a2a-a6a0-096a0670eadb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c24b181-dbc7-47c7-9aac-da165d94026f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "818a8f88-3184-4e41-a79d-738ad7e5a843"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2b7b120-1fea-48bc-853d-8d4473881c12",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "667dec49-189d-4fe5-8c3d-cd70da56c24b"
            }
          }
        ]
      },
      {
        "id": "a0ab3a85-6865-4881-b1fc-24dec24b1f0e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7440914e-762c-486a-a9e9-af67108c5230",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0477ba3-dda5-43f2-bf2b-1088027bf469",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1851a812-bcfa-4422-8c6e-e35c2be7871c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0675014-3f6d-40f3-9c8f-3fa068344f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad481afc-66f1-4e10-a8b2-6548eebd3988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c83359-8dc8-4d74-a2c8-4c73ffc38769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fd27a22-fa36-481b-90f7-06ab64a3bae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8937a68-fc9d-48c5-92f6-c43bd8e566fb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0808ea-b414-40e2-9fcb-8d44eb67e516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be19ee2c-8b4d-4f22-8259-b958eb0c69b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206de971-56f9-4cc2-acdb-a3f07e634754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05519da5-6700-4397-9ab8-f339e51dd181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5120b118-7969-4516-823d-b6cb564d1506",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6caab833-b89a-4860-a631-16b529447bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82371037-05f4-4262-978d-1e2e2fbc8330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9bdc3a-d0ac-4115-ba8d-2179009f20b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f02964a7-6009-48f9-8994-216ea84150cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf51c02-6235-4b0b-b786-c10a2ba6ca05",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab4c20d-74c1-443e-931d-637a77322de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68059483-29bf-4b5d-a71f-3d6704e75fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be417ea9-7fd6-420c-9239-4954da089e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a227acf-a031-4e0d-acef-31a396d897e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608b4905-7555-4030-83d7-6ed1e24c08da",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e56842-7fd9-4060-97d7-ae887da02914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2e9be4-9617-4f14-ae8d-ab2c7732a754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe528d4d-13c9-4057-835c-0801d132eb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85661149-fe1b-4c4f-897e-b04d17b9642c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b345c34e-ec66-4ca2-8acb-e18c863feb3f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a36d62-7127-4ed0-bd4b-8ee6ebb683c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "060f4793-79c8-44f4-a79d-fc5e5566162f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4335ca3b-4110-4af6-8dad-eb708a14d016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a74e3e73-6f60-4a4f-a698-74639467366f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc75259d-1704-4368-9d2b-916400c3797a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f85a85-6883-41e7-9017-88f5d7137c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551226a6-45a6-4b88-8fe3-25d299ce5d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d334b06a-de62-4fa5-8b95-5f5f8dfb31fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39db197f-b209-4282-9206-107394ff2f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e8f485-dd58-406d-ba3a-e61b091f32b8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7216ccd-8c84-4e7c-81ae-5a20b4bb6ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97db5003-8eab-4dac-84cc-035c5122bc37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28827779-405d-4feb-8f81-7d5a7a9fbacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5de92b88-5b94-47f4-8038-160f4041b109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45eace80-3b8e-41ea-8d9b-b9bf078cacb6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a28db0b-9c86-492a-91ea-393beea820de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0ba40b-1c7b-4b54-90b8-8f180664ad66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7388163b-773d-4e55-857f-4cdf429484fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89f5394d-1bca-4c31-b33d-9a2e4e1f752d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def12a85-ada7-4c30-a2a5-6375e3878885",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85409e0c-6993-4735-9d9b-60c30d809332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8de9d3-a554-4dcf-898e-3289f16d0292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ccecbd-d529-447f-848b-b5d590e24ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd17389b-4a9a-4842-8909-d43e3c68c816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c1511e-5f1a-43c4-961a-548809617831",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a155901-fda0-49b7-a30b-79fa8a641701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfb98b5-fe2e-4aad-bc3f-7fe7cf1679ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b7a4c7-3c4d-4356-adbf-1b9e2e086c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8efa54d-14b4-4ab3-b7db-377a0821ac00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37445bf4-5d78-41c6-a013-bb0ec0d38218",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84bbc365-6673-4399-9021-87cfbdb1e24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd2d20f-1ad2-400e-b9f1-15ab11248f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90a126d-c739-439d-be41-800730423432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23e951b4-68ae-44dd-895c-a0d7291513a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1001de72-e133-4606-89a6-d7e3848be7a2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce7724d-c449-4898-8d39-6069a62c71d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7898d6c7-b9ca-4571-add1-2e19dd07eab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265414a4-a4a5-4ad5-90c4-406dd8bcf865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfcc2b62-9f66-47d0-a548-045b2922c821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1669642d-1694-4cc2-9e9d-91e6ca29a6a7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "801653ad-53e7-4067-8ecb-e55ced8cd370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc89f105-ca35-4183-82d7-cdca97780837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6af95b-b32c-4a83-8be2-6f31890aa137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "213c3915-fd8d-49cf-ae9a-c9c56704b850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cf4387-875b-4a26-95ef-aa9f49f5869a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587e9ab8-1efa-4292-9558-9bf978f2ffd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10902b12-4144-4ea1-aed4-7d41a676d697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9caac7-e1e1-4901-a010-e8975cd999c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86c1834d-65c0-42f0-8209-dbd32fe39c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dccbc8-1367-4dc2-b2f9-fb2c6170144d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c1a0ed-bdd3-4bf7-a68f-0dff90620fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd599a8-556d-4ab6-8825-9370ffd39042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc652172-2c7a-425d-8bc2-eabb73aa873e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f67f484-9397-4d06-8774-7c873285598f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca767af-7f61-420f-8f9a-d97542f8179f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b09920a-bfc9-4ffc-aec2-e69be2473729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9476f4e-5998-48f3-880b-c927119dd0a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893151e1-9797-4b25-9c84-6d190c13bb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a23f6d5b-98bc-4dce-a4c8-4c13805407fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1556de9d-68f3-4bb4-baf1-78a1b6765e90",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b30a4e-a6b8-4368-9bfc-3f58b48dbcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74006e57-983d-4193-b23d-9005290e977a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b091b156-acfd-4b16-b062-3e304c976678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9509dc1-97d3-4d82-bdc4-d31ec3087dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27a9b66-87c9-4a16-98ee-2471e6e9f7d0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72b7f81-1e90-4b37-8bf5-e94c41b4e2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f72b5ae-a2d7-45cb-baee-f92feccce770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f9c0b9-65f6-463d-ae72-f3c865c0343e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c9ea6c5-35ca-4508-8d59-6487422c77f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c973805a-dc35-4804-9f15-04c7cb517341",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7b95df-5f79-4c3b-84d0-a8fd5ea3cb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0095c8e-5c3d-4a0c-849d-7acd49236fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8ae471-dac2-4a87-8dce-c1a6d6127731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd9c5ea-a6ae-430c-9a08-baf082bb52ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20921455-4d78-451d-a3a4-4f49222cb19b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05f3bef-70da-47b3-a937-5350c86736d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36be6fc9-7a4b-4d25-bdeb-072f7ca43264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22191a5d-9624-4c7b-8cb4-6eb2a6ab70d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e979b8d9-8e28-4f16-a385-ec8eafe2411a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ff32b0-4216-45da-978e-6fc26fabbcc4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90f09c8-8eb1-4b63-a7b0-d439f2ed96f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc9e7e0-4a60-43cc-9bb7-b843cec37d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a51ef67-48a9-44a6-9fea-879c2cc00b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b91c7d-1df2-47b5-86f0-c0ab54b6fefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbee1efd-8cbe-44e2-8cff-fc7a29aabcc8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222a343a-e672-4648-8827-ac6f558dc5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa220cc-c3f0-4ab0-94d0-7414beddad53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959bca47-1ca8-417d-9888-6080052980d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb428dc-86b5-464a-8577-7ba3d60aa242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b737690-09cb-4dee-a227-a4a1d880a9d7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62719d69-9c8f-43c8-b2ec-e5adcbca64d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ddf332-dd39-4852-8064-09e6826f884b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afddc9e-f5fc-4bdd-a661-5b3aecccf932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca67198-3d5c-4cfa-8941-b55f5bb45b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23de2d1-57d3-482c-814e-8c77b076bdc0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4546204-72e9-4abc-a874-321286a88772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e8ffeb-41ff-4e7d-9306-801d01f5d818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ecfaa1-4e8d-43e1-a45a-f23843b09e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bab66c50-ebab-4063-90a1-13773ba5b8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb32ad6-6c67-4dc4-88d1-3c0a5d9069b1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5819ea98-5a00-4717-8645-877547b2ad6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca33a25-f47e-47b9-a5fb-d6d76bbf489d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b4800d-4cdb-47c0-892c-ce0c8ebd2960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3b1ccf-4296-4412-92ab-399c15afb4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21072582-9b6d-449f-883f-bf002197d8f7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a549ab8-77e9-4223-8f32-be225334e42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6dfa87a-7452-4e56-890e-d665b37722fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3c0264-ded1-4657-a303-fde048a2c96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c68a9db-7d76-4825-a6ac-2789b5080442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c848d4ff-3154-4ec5-8e68-210854a06d5e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6688b235-5055-4f8c-acba-d5dac58b89fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be003f5b-d3ec-4d8a-89d1-f17e7f57e9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766fbab1-3e81-439f-9f3f-730e672e2e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5d0be5-5621-47c3-8cc8-a693eb7eab5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8eafda-36f3-461b-8e4a-bbbba83fe08d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9932a679-ad64-457d-805a-6acdf8ac41fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a53946-4944-4960-beee-9f8f5148f4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf7f1fe-a9d4-4b4b-9ff2-b76775000f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a742c50f-85ec-42d1-ac5e-58936197bff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f774bec-8339-4b4a-944f-1922fdb9cb32",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55863d3-31fd-4528-8207-6e3e63381443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3d849a-7e26-48f2-85c3-6fea845c749a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb38607-2c6f-4808-b58a-bbde51bf468c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "814b448c-f39e-4602-b1ff-dc8a3b2d3ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a67f60d-3152-426b-8b2b-e897a25bbac0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddcdbbb-fa77-44c4-b8f0-134b1e2dc214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3693a9-0cea-44ed-a5bb-1987b1446e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce653c81-ece9-4535-a2ad-887839aa1c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3595bfc-7c6e-4512-88bb-3f842364e97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ddbdc3-f043-4eaf-8351-8cfe5918a04b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920c9e16-9aaa-4c43-8fb3-0a1ae771b52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03b01a8-e4d4-4b13-af6f-a152944ecafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fc6441-e315-4dee-b51f-14f8a0d4e927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34643f50-18bf-4448-a3d9-3f910ccb5cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe449b8-63e1-451c-ac73-244c50b4ea31",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece49a3d-b08b-426b-bd90-4df4896cdd84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0daa4db7-5412-4285-8fa0-11a7aa20cca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ee9357-95d1-4229-b9a4-0baae698c5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11940c5c-2efd-425a-a242-54c8163e756d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f24b8f-e299-4f6d-ab6a-bfc29a4194e1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "121474da-085a-4cdb-b169-b9e7553f9a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df23685c-4ccb-4e4e-8cb8-a5c8db1489ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30ce311-1264-4202-b341-110ef955af43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7beb094-4270-4e2b-802f-5c0bc7dbb740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11c1700-2ad3-4cd2-a745-1c29fb50f6c8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa64548f-566e-41d1-acbb-d52b6d9f5988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386cc4df-bda6-420f-82e2-8ce441086ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d166361e-ee78-43b1-9967-c4279136834f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2d3efa4a-70cc-4ae2-ab4c-8daf61e14bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01295558-a6fb-4a4e-ba21-f8a47fc14ef1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e321be-8391-4d9a-8447-2f3e6ffa50e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bd96dc5-747c-44bd-af89-9bf97169c53c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26995c03-c595-4e9e-bff4-070efbf15e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1983de88-030f-41a8-bcf3-826a1892812d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61423522-a72d-4e98-a30c-3ca6ebf02c84",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17832c7d-9cae-4700-8b2f-ca8ca36d162b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de38d31f-50e0-4a57-9e9b-20c08caeab5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15edc874-86ed-4093-b75b-26b63dd009dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42fcb5ff-4094-4a0f-ae09-ae55a532c5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021db3f1-e769-4fc1-a0d8-c1075806d37d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdcd3ac-7b50-49d3-a751-f7785a3db9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21ff5d7-1435-435b-818d-9df62f2757b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f023cef-de7d-4d93-b331-2a4c6e3eb743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b31cb8-0d1e-441c-a5a3-4461fe3147d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bc6112-ef3e-4231-98f3-3f2e1114885d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ce8288-d22a-4282-ba5d-c480e2c8a757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f184600b-6295-4943-94aa-d228b5c8aa19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb449d5-787a-4e0b-ad45-97cdd8f6901d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "48f91d3a-1d12-4279-9381-09bdb4a69f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1277db-31e9-4471-8f05-903a12f2e3ff",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63385b2a-4d1f-42e9-80d5-6d466865390d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe2ab46-45fd-461d-9746-10cce45f984d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d87999-0d3a-4987-a29e-3158a4707f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4bb40cd-bada-4fc8-9d0d-e05a02124d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a909d18a-22e4-471b-874a-b5751b0c09df",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0cf321-b4b1-470a-bddd-e2b76a137e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ad8d1c-c76d-4821-aa9b-50c0671feca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7953ed0f-7997-4676-bc7a-09ef933a6435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bed0c7ca-9813-48b5-ae41-35f30c2a8218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845d2dc5-536d-45f4-984e-2ff84bc540b0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717eae38-6cc0-4f0b-8044-146cc7107e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9e18da-34cb-431e-87de-17991b8c958a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c43777-2e0c-4be8-ac46-4ec22ed3031a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "11bca9cd-31d2-4fe3-aa3f-bf20175744d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7512b3f-65e2-4c87-8617-7524ec80cd68",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adb5b22-a979-49ca-be9b-326624b9c869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113b2318-404a-45a2-ac15-8ab7927f5f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7c18f6-0af2-42e9-8eca-e16097841a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "77444485-2786-4687-a3a0-bd4bcb59f0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26613fbb-0f53-4849-9e40-843abda074a7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c514fa-2ad1-450d-8259-51c2b7e819a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb843dd2-c236-4fcb-b166-b1b589df4cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab4a6c3-8aab-46e1-9e84-33d5a004a657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "76c4dcf6-7a71-4066-bfd1-aa99fc4b4cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112777d7-3d87-4ec2-8430-d9802728f9ba",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649ea617-08eb-45e8-a5fa-c48726c1abdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "078a45a5-3eff-4bba-977e-2d157116a50e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a5481d-82c4-4dda-9f44-c8403cd23679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f55abf9-0602-424f-be80-15dc61c5e1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47205faa-a240-4562-b760-22af38a6901e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32212759-fa9e-4883-81d8-1793e39cb411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7a8e01-fac3-417d-b48c-1e5449f181b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4805ac-0c99-420c-9736-345be0884c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c299adf-020c-45b7-8357-ecd0ad331e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd85b015-5e60-46d0-a79d-b0fd2efe5d33",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce2f236-9c2b-49df-a102-364b702afb3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc08dcf-666a-43b2-b7d0-ff26bca6c162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e83cf08-fb82-45ee-8331-14f624057a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ece3a6eb-f38c-4d67-9332-af1de0448cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa2e24c-d5aa-4d99-9a36-8aa3ae3ee3ec",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bb66c8-f7ee-4489-a651-67782db95c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0802e6a-cb15-4d8c-a794-d985234be9dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665b5eef-3885-4aa2-9118-73d3d5880a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f42da879-3fcd-49dd-a39b-011599e89f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379d4c60-17c0-4028-98a7-0e80a3ed33a6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae38334d-71e8-4ad4-8ff3-a989e79a57be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d4f919-693d-4aca-acb1-8820e90124e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1214f7-421f-4b2f-8c3e-0801c2c25253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d36443e5-c5ae-4b68-b68b-66cddbca8564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093c2084-fc18-4c4a-a17b-f8039499cce4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "097b0d3c-ead8-44a3-be13-f3809132a1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1197f475-188f-4336-8f09-9f16aaaa0bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78b47eb-90d0-4d93-961b-c08a7f293e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb210f8-d970-4c23-ae10-59dfd54da946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275000e6-da8f-44b5-8ed3-93abb6eae26d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef89684-9d04-46ac-b213-4ea55f8090f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8521be9-b37d-485c-b2de-2643b4d5d294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4a4b04-3149-4fb8-b064-9851def0a0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa452ad-35aa-42b9-94dd-4a596e8ddb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704d7ed5-098b-448a-90c9-dadb81c2593c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed926792-93c2-429e-894d-7de11f2347f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a1962f-6059-4ec0-8e0a-d4128ae3c7cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5bacb1-d69a-44b2-a23a-324c806dc423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a8bf31-e950-4ceb-980e-c69626abbd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e75e240-6eac-4427-b233-8181b81bfd01",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f2f98d-d369-450e-9f44-76c6caaf9c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10394df4-8829-4227-a9a9-3ee17e432ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3609f705-e896-4d0d-92e8-32e19c597821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c659ddfc-9dc7-4ff6-a143-317a2f178a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d818779e-0fff-4bf3-a27d-1870d756644b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c692de7-669d-4aa3-baf2-219db6bd49b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a61015c0-c4f5-45df-92ea-7ab3a9713c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d761ee2-95a8-40c9-b964-46c5f3bc60a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a405348-edb1-4724-bdff-d8caa604ca92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68d0ccc-e8dd-414a-bb65-5c66c6951b15",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a680b9-130e-4331-ad5d-1beabe9a9791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d31e50b-ffb6-46ab-b180-c4b82718dcce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d04647-f264-4592-85da-4b43fdb709b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b78bd0c5-cb7c-43e9-a780-d5afb97ef106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f343c36a-d47b-4de2-821b-fde969bbc3b8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d46ab5-6f0e-4141-aff8-7806bc89f29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178c09d3-b1b8-4e2b-a1de-3acb45e9c91d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8a7060-15bc-4521-bb7f-64168d294d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "692f65b9-52dc-456b-a50e-5919800c51de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb9c1d4-deb5-44e9-ad2c-b27852316f4e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4976fb00-e9ba-4aa0-98a2-89151428d600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2753fcac-66be-4c93-9ae1-267a3449d741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a925be-dc61-4605-a127-7f8ff46c575a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c762bfa6-7a17-4e01-a49f-f7fae3f67a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd7190d-36aa-4177-9581-82fd5cf80e6b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1090592-d17e-470d-acfc-27e1a2cc1642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40966122-7860-4806-b467-abeca705c1d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f772ab-1c12-4511-904e-49ca5513407c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "887af3e0-8596-4520-9818-49840f92015b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee5bc81-ad7c-49b8-83f8-73a90038a927",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff15f10-0398-4f88-b418-1423d10453cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da738f9-0947-40e2-816f-3dc5adff0c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeff50d0-e664-4abf-b4b2-fe0cf5c2df42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "60fccbb0-300b-4ced-9d9d-7f5af5ecb568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbdb2d5-5e6e-447b-ab5a-08f8f541ae04",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923fd258-df84-46db-93b5-90e2511de634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf610f8-f267-4188-9938-3acc554c0ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd727db-bf81-467a-abbe-2794035d96b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "047378c4-92f6-4980-bd84-ad7d8fe3c082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db65dd7-7b96-44d5-8b2a-8e16b8ca88ac",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a929df-df0d-4bf2-a0aa-bdac7fe4a399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d90ee0-51b9-475c-ab30-718bf9fd1c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b8589f-35e4-4820-8537-3c0d3fd2dc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f0158e-4388-4640-8bbb-9754dd3967b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bcd9af-2834-48a1-91aa-c8588d729ef2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7694c4bc-a3ed-48c8-a325-32fcec61c4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ce72d1-5d26-4c00-bfad-23589d7f9bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2a64fb-9ac2-4ffa-a46d-0553e0fa1bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "56f0849f-e23f-4008-af59-cb38745a6e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c910c2aa-26aa-436b-90eb-0ece1b780381",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194b4ac3-cf51-4e94-bdf8-f8c2fc44caa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75b3df8-e7b7-4072-90ee-c53d8477c812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470c1d84-87c6-48ea-9579-4a68f4eae55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f786e82-10c8-4838-9729-9b7edcfe0b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3ed96e-43d4-4d5d-91a5-fde2a66c65f2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cba3f4b-6214-4dda-aeda-c709b6a4ed77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f091fa-0547-43e7-a0b3-5c9bc76cf425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc09eea-2041-47f4-bff2-c982afadd641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c49fbf4-1deb-4ded-ae02-83bae19cfae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537cd485-c85e-408e-b47b-57e4d2dc4ce4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec75a3af-8e36-4835-8816-6dc7ac6f8515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78fdd825-257e-4683-9d30-cd21a0d8a684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82289e0e-7fc2-4a5e-8e34-1a47c853fa20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a33995c-03b6-498c-a0c3-72b54f2f0cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abc2445-6fe7-4d28-bf1b-76f0d70930f0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7acbaf-87c7-4315-8ee4-f92e1e376661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ece9b7-ae56-49bf-ab43-b9ec44f2c171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9278d134-fac4-43cb-aaad-a1d60cc2eb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "356cc57a-0d52-4a13-b6bf-06ef7b2f4759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d6f8a6-5a6c-44ec-b31b-b565992ec9c7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "768a7f18-cd09-4977-bd16-fac15ae62d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88584d82-c100-4429-bbef-80ae95cadb0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4218e146-17bf-49e7-936f-4725d5a4ef1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e8df3a64-f023-47bf-a4e0-5f7c781051fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d02da5-d821-49a4-bf74-d1bd3e691edb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7869327-011b-4432-8705-56b7b570d553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e570d7c-9256-49ea-ad21-9bdc8e30ede6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2ee251-9c25-4b77-992b-ce7f74b83c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "99d6842e-6500-446e-a5ce-3df10f06ea26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7018d6a-ea6d-45c6-aa91-0ef391cad4b5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2e8281-fdb9-4891-b5bd-97299b79db7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc759735-c477-49c0-a4e2-52b49f237a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6cb55d9-2830-4c4c-bad2-72c562c43cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a4b9f7-edc0-4b9f-9b7b-61d09617fa2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394ebb89-0345-45d8-91d8-2f319863d20f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47dea8c0-e5e5-496d-a232-7fdcc2dbe4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641ed0ec-4f2e-4aab-a477-546442f4abfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b46a4c5-f538-472d-bd8a-4a02f46b2e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ebf074a-ba8d-492b-85e8-ea51ffcb4573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a12a576-4d3a-4534-b7a5-2661e05fed1d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a60171-7c38-485e-bd9e-6cf931e5a4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b88adc-3927-4afb-ab7b-2c2b5ceb777b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ad9e01-7239-40c1-9f1c-2a5bc8426a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f42f38b-18a3-475e-b950-30763210f028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e549f54-7bcd-427b-ac02-2c9bfd6a7b26",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eced0576-bd71-4953-ba8f-0aca337bb74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1931a7f1-5493-4249-b462-bdf74079541f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0b8f3c-8b32-4e24-993c-a51fc7b4dc7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "146a34ff-ce81-4c0f-9523-669e61b8e303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb82005-8f5d-4ef0-b572-1a81304c9419",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2321f919-59e8-4217-b0af-74a4d7c7e7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5af320-0b44-4219-bd0c-3cb34ea1339b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef03ca37-915e-40fe-8396-518e0583302e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "885e2b29-cc43-45a4-830b-e3824fc65441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5909837f-e16d-4794-81e3-d6121b0e2f8f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c417bfc7-8cd8-4da8-9f61-7a8933d6134a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e1d88f-d6df-4d32-b804-2593ea6e052c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428ca1c8-8f3e-453c-babd-fc7fdaafc145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8313e395-0924-4eb2-ba87-1275073f809e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834c4708-9c8a-4322-bccb-4251b6aa4d17",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de64596c-ec89-42a4-8876-d34ae7849fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edecf29e-f53e-46fa-8472-5ad86ddee352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92081e0-a5b6-4d17-a2d4-38b491e1b19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a08cd1f-d2b8-42fb-bca7-e6ecc4df99cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cd1abd-bffa-4709-b040-c9f847933630",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250be149-18e7-4e27-8bf8-f6f1014b00c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a9652a-2541-40b7-a133-67e053040717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8d50a3-2411-4b64-a4d9-c6bc58791836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "187952ad-65be-4e6e-9a2a-087875ff576b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc8384d-7561-401e-b02e-08b7981d32ff",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe11c0c-24ce-424f-b4fc-92ec5e0c3860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec375acd-7348-4f28-83c0-87882330db25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee7882f-14dc-479e-b059-1b30ab051887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bce06748-d8f2-4dc3-a8a1-f2d946d40c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50e80c6-608b-41c5-a9c2-883d32f06ade",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d90088-7bed-4883-b8ca-4e57c98024a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e5c96c6-1188-4e49-8564-9489178d265e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2d48fb-5cc8-441c-bfad-31c257bbe431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e77c11bd-c0a5-4975-a386-aed4bb309b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbd6ece-e5c2-4809-9672-c98908c7ad30",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136dee7b-9b4f-4f1e-a645-83d7dad7033d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936c1952-a309-4cb2-8761-3aa3016ab458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bffbe4-8466-4287-a262-f681ac257c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29f7c38c-920d-4a93-bfc7-acd7a69f594a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea3b04f-26fa-485c-bf2d-cd9dddef7378",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114a2e81-95e8-40bc-ba04-835b1c89a6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9edcd8fa-c992-46e9-b5f4-a7f142dc398c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada9f223-73b4-4761-9f71-df3b78745f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e8faeaff-2cc6-47cd-a1c3-04b3fa1cd26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1081ca6-c044-40c5-8e7d-f891ffdad754",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74c3733-e1bc-4bc9-a83e-f7de149f3c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33068de7-87c4-4a81-b9e9-05eba08b741c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6990a0-313a-4843-b9ad-2c46f337ae88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a03ca63-9967-4d96-ab6e-ff7bc9233649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d992dd9d-487d-40b7-b566-f27edd7c8ade",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fcbb0c-507b-4137-ae52-57ccebb2929b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b1fb47-b825-4132-88f0-36f7354fcdfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9f064c-4c8f-4aa8-9dee-80ae41c7bcc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0eefba9-cd2c-4d7a-bdbe-e03336c25874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f84c5d9-f578-40a9-846b-fc5a5c446e6d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6e1a58-ff74-43fe-9cea-5e1809038eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c4faf1-8e60-46cb-a6ca-43a6285a4cd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8086a0ad-cebe-46ff-8f0c-83e7cabe87cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "963bb595-232b-4349-a8c1-30c7bd075291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9630938e-898d-49bf-a688-eda3709a3e30",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce4866c-f86c-4e1f-9d0c-105f2a6442d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8060548c-90bc-4afc-921f-d293888d5a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34bbf84-6b70-479f-b0a7-e4800cf4c383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f48bab21-3c83-4cf2-bec0-b3a6ac87a13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaff8381-7b23-41ed-9846-e00cc121ef56",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad67b442-cd7f-43c7-a83b-a47bd25ed737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30ab3aa-353c-4d56-becc-b1f130c3a03b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fbdf32-dbf6-409e-9cb1-0b0156ce5c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec83ce36-e18c-488e-aaec-74833f583e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d497cba0-f587-4725-a230-a1fc2cd8efb5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddbda36-25d3-46fb-ad74-de24e9b31414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ec1f5a-2be4-4331-a150-a02a7b22b4a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4966b1cf-166b-4075-87a4-43d430190acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b312381a-18d0-4e50-b99c-112841dc0e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3e82e2-ad7b-4532-aa46-04b061e33813",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a48bd6f-066e-4263-9292-8949fe8f4b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29881951-5f79-45da-bafd-d5b1becc675d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5558a94c-bca1-4b8c-96e0-32f2e1bb6663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "643e061f-e9ca-4fd2-8a12-249888e622ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280048e8-53fb-4dcb-ad12-9f51c5fcf39f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50160ffe-c2ca-41c9-8f01-374eb58c2189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00956b20-8c1f-4ab4-ae27-e69ed51bdf7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e77aa4-5125-4675-8354-a66f9b658d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ec9550-9730-403a-8427-ed6c40b0a552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29820903-938a-4b7a-92af-4f218a05781a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af306f3-3980-41a7-9227-d2fd5284a52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839cc3ff-d83f-4d76-b5db-c811f38c7bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16087bf1-4e05-4c13-828e-11460400847c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b4dc87-9bf1-40c3-9414-678eccc47944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74b2c7b-11e8-47f0-814c-8dcda6c595c8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2664d1f6-61f3-41ee-bc7e-73d89bc1e1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9916d220-1c53-42dc-9195-623e51f29953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b20a881-f7c3-429c-a15d-677a8d80ef0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e738920a-efa6-48ea-a523-92e68a171a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff4f803-2af6-43da-814a-605c2f42e423",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96c1cd8-079b-4e6d-91df-f457b662a090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dfa2177-9dbf-48fa-85d0-47596901f9ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af932b09-8469-417f-adf9-2ae0c543ece0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9e73d7-a482-4f4c-ac78-aa079ca363c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672f0a51-ec70-4dcd-b143-e9d77f7e2815",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a21542d-bd07-4abd-b87c-81c9ff9d294d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "905b6a7d-06d5-445f-8901-491d9f152d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d8058a-f8b6-4547-9ff2-51470210b0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "74adb1e7-584c-4444-aa3a-04fe77680544"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d2fb2b78-fc64-4962-876d-9610ebc98c02",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de33f6d1-0b77-4b66-98fa-bbf350f4b971",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b2ae1a-bb44-4316-99f4-2923ccfef957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16f1db98-755e-48e3-8925-6b447cf20be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abde4b1-d155-417c-be0a-4a6978472c1f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "06e43332-052c-4dcf-b154-824ec403eb61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54093763-02db-4321-b64e-082f39b070b3",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433c8329-9d55-4162-98e1-a67da31bfc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0289c717-ee73-475f-966f-fa2ad7dcef93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95af957-96f3-4195-8283-beb1d13e1b90",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a9ec1134-e496-4d3a-aad8-69868bb3026d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ac01fc1-9984-46a4-b246-219b3410d3ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fd01f14-e652-43ec-9e39-79bf06d912f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cb84f56-149c-40c9-994f-173fb65901dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9b7f1bd-1dc1-4cc2-986a-2110082582ea"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "947c8671-7532-4cd1-94ab-d12da12410e3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3404d92a-0926-4793-ad2c-ea8c87f1e611"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "56775bcd-dde6-46e5-bd5a-1e11ab9ba890",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b433646-4978-4a1e-bcb3-30ca2309b11a"
                }
              }
            ]
          },
          {
            "id": "7d6d6058-7fef-48aa-99f1-5eb30c737a30",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f1cb3b6-6113-4138-88ae-7cbd749b5d8b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20cead37-4d37-4f4c-be19-efa3b9d3906c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0e849a0-14b3-4a9f-8060-c3595ad3c2b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b961d9e6-6443-4bd0-90d3-0873babd69f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa280cb4-39c4-4ffe-aef8-ac3e8fc66ea5"
                    }
                  }
                ]
              },
              {
                "id": "ea575173-7975-419e-818f-d9d9f9c4e58c",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fa8645e-3471-4545-8287-56fab376ef98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "38156d75-8718-47aa-9995-404796a08a12"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02fe1b2e-e09d-4838-93bb-8334e810d6b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ae90517d-a778-482e-8dcd-9c043c4968e8"
                    }
                  }
                ]
              },
              {
                "id": "6604ebd7-384f-48a5-a7c1-eb1aea92b3ca",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "413d2415-4354-47ec-a228-179849523322",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1511694-615e-4656-b723-ccdbd9435cb4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8e14ace-15be-4029-bab2-78a80effaed9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "90cc68c2-0a9f-4eb3-8b64-e3dc09b57ea5"
                    }
                  }
                ]
              },
              {
                "id": "6e0536fc-251c-459b-a2e9-473ce68b81e3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0abd1ac-e730-438d-a8fe-e62063c08246",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96d6d1a3-8ad1-4ec8-8b15-85316e9b43c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e70006d5-2fbd-4909-abb3-58575932ddd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "28141908-7b2f-44cc-83f9-9f147acada93"
                    }
                  }
                ]
              },
              {
                "id": "d06516bd-c561-4823-b5f2-e5da600882f4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44614982-0965-4d94-9c23-b8e41d57f632",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "faabd17a-055a-4b26-be9f-1709a7a21509"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3c04c77-a34f-4862-befc-3caa102a930c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ac1f84b1-b7ba-4aed-96c5-a43471a980e2"
                    }
                  }
                ]
              },
              {
                "id": "7be006f2-1656-4066-9926-4e65913b82a4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "80daea9b-efa2-40b5-8269-737369517598",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e468c4e-56f1-4c39-9244-3f1e57cff9b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f09b02f-2fea-48d7-9e7a-2ff509fd7a4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d6e4293d-b1c5-4bfc-8e2f-3915ef050f35"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "103c264a-6b3c-4736-b850-5208f9c53182",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9786d5f9-b2e7-4bfc-bcd1-81687d41c371"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1b5ea535-b300-4c5b-81ea-c3a295efa7dc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4fb5c7da-e980-4459-b6c4-e3d6e381cf62"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd9506fa-7edc-46c8-9c39-f1cfb8b7ef45",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "59724f6f-b96b-4180-94c7-2fa21a5a598c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ccbc2f0-193e-42c1-98fa-bf8fa6a9cb53",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c937622-0b06-49ed-9ab5-0cd1b71e52f8"
            }
          }
        ]
      },
      {
        "id": "c21eb9a7-e1e2-483e-b3cf-22ec47cbc042",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "17cbbf96-e8db-4fe3-83df-5374c8776a69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "460a1702-faac-4abe-8ad6-bfa83fdfe56e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "46f15608-7f4d-495f-b258-f6a08c76fff3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb80f22-7518-495d-9ed6-239e8250a87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de4826b0-9d04-461a-8829-7debb3cab6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8913857b-7143-4d26-b938-e91f0cd523b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd047726-7c5d-4083-a088-f8709c3cc223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccdb4b8-e9fc-4bb2-9533-6ff1889cdf15",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc9a30d-9cc4-4023-9581-6a983eef6b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa6895a-9686-4fb7-8844-2f1aa23d65fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d012c5-45b5-4307-a4d8-8376dde3918d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3346040-af2d-4967-908e-a71147820394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da754ec1-55cb-47b6-a121-b522662676c9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712393ed-3b9c-4b9b-a1c4-55eb8046bf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70e9b1ab-76c4-44ba-ac01-82e9de0f77b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b96354c-207b-4a5d-91b1-6ab4d430d5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80fda315-dd4a-469d-97c4-59e7375e4d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb339ac-67ab-4e1b-b476-15ff0f616db0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35f2954-556f-4a34-b7c8-d6b1eec4f138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec849784-d7bc-47e3-87af-4e7ad7a46fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5e83b2-1295-4cf3-aac6-3bc10005634d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2716fe44-bdcb-4763-aa16-366b57f6b02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5655ee49-9dca-4438-a4f5-83c2948622d9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e0da98-9106-470b-89d7-dfb8c2fee164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d82b44a-98d5-46a7-9ba2-a5ea4c9a1813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea201dd-c428-49a9-9e6f-4c84355a4034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ddd410-ca5c-4927-8878-806c1109cf60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99823883-ad3f-491b-83ae-19cb557e27cd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba9e1cd-3d22-4fa4-9524-feda8956ca1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa4c782-2dd4-40a0-98cf-cd76af0a613b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfd1756-9a90-44ea-8913-9d4e9244bce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "faf89fd8-b0a8-46c0-bedf-30a8ed97b69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f384b8-4936-4688-972a-2f61c9205f51",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128e47b9-9f85-45a5-8c7d-c67a7044a928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe70419-8e20-47a5-8e03-0401c48e898f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc2e6d6-7f76-4991-84b7-292cc4c6e69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6129e635-2b01-4d81-baf9-b210e10af28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6beff2-e89a-4da9-8ede-8b152100174a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87fbafec-5738-4dac-bbba-616613e92706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a97af49-d7f9-4531-824f-05238bf54196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8cb5a3-3df1-4c7d-9a14-63d97f6a8692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43ab116b-aef3-43bb-9dfe-2dcf88131ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe70370-eb25-4e4d-9cbd-506c53ce26b7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3218ef-4466-43b4-bfb2-ccf16a7fad44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8030bf-656e-40de-b8cc-30ad63c64cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912943e2-4985-4d2d-a15c-d315d617ef07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eae343bc-e6e9-4f4a-bee1-6df9ed681dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9491ac9f-27b0-41e8-802a-cf808f4ba30f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ccd1fc-c20d-405c-9e43-a27b84a297db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72954f97-4d6a-4378-bec9-6033225d243f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30bfde8-f24e-48c1-bc39-7a70e183fc1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db8db27b-d4dc-4199-b9f1-956e1ddc5af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67bb177-4d6f-4ca8-84c0-83f6d60dab74",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8367c16d-f665-49c9-a87e-f075d8fbdd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "692cf1ac-a4a4-46db-a420-85107f46937d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c667494-1784-4c41-86ad-f524b1de4d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "00d411f6-237f-4934-ad9e-5de1fca35d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9d6e81-359b-47d6-b9f8-ac4028d71ef8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1186b03-0f4b-45de-bf43-63eed42f4262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de1353d-6495-4bdc-8f1f-f446b4f16f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e029a824-32a8-41ce-96ac-9615d3dd2d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1847fa-3cec-480d-85fc-ade348040aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88200fb-066a-485e-aea1-f0a6d5258924",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd13360b-3c02-49b2-8536-e9ddcebff4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33eb2c50-8cf0-4b1a-839d-9634bc394d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23eedb7a-df50-456a-97b9-cc506f814778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e7976b-868d-4176-ba49-03bb7d181cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef364542-eeda-4005-ab0e-1d53e5a88449",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cedbb2c-4c1d-4d5e-b349-82e9497dcd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55905e37-70e3-4ca8-a167-63b50265ff0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a05a0b-0cce-486f-afb7-9a499cc59f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc5b073-b1fc-4097-bdf2-6aad4a69e895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f80ed0-a0ea-428d-a812-42564ea214ec",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5867bcec-e120-4979-9c92-902799911865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03afd5b4-c8d9-4456-8bde-c34669ee49e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48cef04-2844-4ec3-aefa-01acabda035d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "827fa91f-254c-4af3-a92a-4ba90afaa229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b94bbe2-0dd5-4797-bc14-97860b7cdd1f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b312ac43-0e8a-45e6-9193-e1ce17f56ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec184c7-2fa2-49cb-965d-012b458f4c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26819789-4191-4eee-9e8e-f79ea35b9c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f341081f-c33b-4e2e-9e99-a972dade8da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79b750e-67ba-4409-8e01-e493de78bf64",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea173b4c-1424-42c7-ae23-302fda3384cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "037d229a-5cc9-4c04-8ec1-68643cc1b345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73250f3f-7894-4782-96be-2d8e6f9be8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e53adb3-c580-4aa7-8cbe-436c50ac6b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad97ff3-f25f-47dd-b0fa-b2fd3a830fe2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "399e5e54-6348-4141-abd9-07beaac73d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9998123-9a7f-461f-8ed0-36cddec1b226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8dd4df8-8745-499d-b14c-a91e54172b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea5a0a24-7483-42e1-a5d7-3ea3b3bc8e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc6269d-74ec-4bf9-afd8-1b6d52ca10ec",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb032c66-f450-4ac4-be63-6ecbcc302023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d0bee5-f8d0-451b-aaf5-350e92377831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b977a6b-5a2f-4930-9fdf-d2e22b495760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39e53682-a1eb-4151-b1bd-085ef31781a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b706ff68-4abe-4efe-abdb-be6a4ae1d08b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabbd60b-1783-4799-9221-6dfe32629c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9087db4b-df06-4a11-b7f7-a01f5faf4acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec51ed78-e1b8-4419-9aeb-4ccd7200255f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a8da6d1-f5fc-448b-aa86-f9bdfa1c699f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b39e16b-499b-4d6f-948d-750d4f578047",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78efc3ac-0930-426f-b916-eab17af22dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a32dad-d505-4207-b9b3-463bad024fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cc9009-f967-45b2-968b-4130d644285e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01b172a9-551e-4afe-9b89-dc7b9dcd174c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8691f72-cfec-4e21-9080-a4c27bbb20b5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e71ad4c-cf44-4040-8f11-cadfed044d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468aef09-38fc-439d-824f-bba8790326c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9249f96-9edd-454c-af59-830bd2b0539c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55d88754-1527-4e89-ac6f-1b087dcb0349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af588cd9-3a10-45b2-a730-de3156ed9183",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54f09ac-eca0-4975-917e-aa0482bcaea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010dbe66-b0ee-48bc-8ecf-8813a6ce9ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a60bc5-6e26-4002-967e-1ffcfcfd2d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dbbe544-5352-4e85-93c7-9006f1ecc0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6897657a-73aa-4b7f-96a1-4f0b64aa7da4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d27315-70cf-4f9b-b3c9-39042670af2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cda77d4-557e-4373-a8ff-15af72e0e8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60947d63-d101-4c1f-a5dd-538fa03de5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca857061-7d47-43c7-80f0-69cf640febf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58432b8-da74-4fae-acec-61659cd15dba",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cd8487-2cc5-453e-8bbb-01d3811bda75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9301bb7a-5a27-4f79-ba29-f8fe3979a167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a9107c-20d3-4a71-a78a-b3c1f3e1b7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28163090-e3c7-48b3-877c-d200b3be71d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c79576-38ac-455d-aa9c-3bf2398f1e48",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d643514-dfd1-4944-a43d-5c1b9b576fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b69ebb9-b005-42b9-85d0-125659cd3ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28096ca3-eee9-47f9-8bec-1761d96dbd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c093823-21ec-483e-bee0-590aeb3f925f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132ae8be-9fbc-4fc2-ae9a-f3beaf336507",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "464dbdfb-cf88-4e3f-99e0-1bbc85030b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c58f48e-dbe0-4fe4-bded-3dea863a20b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e59bc6-7fc5-4def-815f-14b3bf22ae12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57e6954f-4178-4737-b844-ccf9f1f6c269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8cf4bc-90e3-434e-b319-62b605dee83e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1cd1c0-b14d-405c-a9a1-ebcc97c64b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0542c2-54f8-4139-95db-d0de42a87d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a18ddc-81aa-4a6d-b525-1fab6cf2b684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6c8613-7f9d-4058-b6d0-87293bf8944e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9440e2-c971-4d16-8059-c98eaf7d45ab",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e0416b-4ae1-490c-aae8-5762c22dc8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba453f3-0ae7-457f-afe5-f709b5a2d727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30828fea-ea38-4c6e-bb3f-6c2417be40ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75b99c13-63b4-4fff-98dd-b5c22c8143f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ebce14-ee47-478d-8ba0-911a78ac6786",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5041fc4f-fd3f-4620-92d1-474a5bdb044d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a7ba8c9-8a7b-4e3e-bc55-74c0afe61b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d50fb20-242a-421a-9040-459788e40b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85b100a3-fb96-45ff-bd12-b542b92f972e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8b0953-b04d-4ec7-8e61-b9366440a3c5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b07f8b-e01c-4de7-8aba-f96c3f195ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a97aded-6785-478b-9407-e2105d49051e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0223e06-f790-44f2-8f7a-78d06000a9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87567478-004e-47e8-95ed-6493a4a712a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50040ce7-f827-4daa-9ccb-d12059c69460",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8967b29e-e423-4a3f-8621-60d79112de78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca772a4-79cf-48b3-979e-c8ba037bd518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6105a5f-bb3c-40a4-88d3-5dbbb90f2d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "378d1a74-a206-492f-ad7d-a51d9ba1a908"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f18b32df-f84c-4ff1-9e99-f6cb7a1982eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35e0fb63-4dcc-4b66-9dca-42a69ff2fceb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d28028-480f-41f8-ab7e-0d11e4bcd5ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0e411b-7956-4570-be46-ac984b6724e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53cbe9a-bca9-403a-8930-b8a846b99e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a0cab76-f5b7-46b1-a149-f745734b5726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea59f6e8-d031-43e2-9ace-16ff314f9d45",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196e2311-6636-4850-bc29-f3f88c27bd88",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9a21c415-c66e-48e9-9a1a-f095380d715d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae1747f-7579-4536-9308-c46fcdd7723a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08ebdae4-038b-4804-86bf-5509bea4b3ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99974b81-5d93-439a-b28c-2732ad086933",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af3b2f63-c24a-4388-a085-c597faa09857"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "258d7077-fbf8-4148-a6ff-e6ac065f4645",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a9a50c9-87d8-4621-abf0-97eb90f5a817"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7fe3c33b-c4af-4856-8cef-f5658d653fd2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "de9db1ed-63bc-4894-a4a0-0f05e573da8e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29cd4f06-2bb6-476a-9e09-88b298ab9212",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ace0fb20-4674-4f97-8ae3-b38775340c58"
            }
          }
        ]
      },
      {
        "id": "11a599bd-e562-420e-af86-d7192fa153d3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c3b1a466-119c-4082-9783-2f809259f557",
            "name": "Negative Testing",
            "item": [
              {
                "id": "125aedb2-812a-4c81-a964-7257d3c7c7fd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1171c4f3-f221-401b-9a78-add4bf72bcd5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65cfa57-62ce-4c40-9ebc-87f373dc770f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9119a449-cd4c-4b21-8ce1-6ddf41e8e538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530e28a2-a599-48a0-9ace-d3611a8e0733",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75de96b-6001-4aa4-9796-8b89cb46808b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459ee37c-da43-481b-b8c8-6b8dfac71661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f720f6-9504-41fa-9cfc-42a30e78c53c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60f5aa1-c77e-4791-9f8d-715075f206f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3917e7b7-2def-4129-89a9-a33f2363fdb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1b96e8-7aa5-434c-9a6d-5233d699b4a8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ef2464-7cf7-4a8c-9f7c-176d978b9528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f87bff-26b2-4853-965e-8c0ec9b7bae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba80195-55b8-49e6-a719-c2bbabe27e0b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5193886-5ec7-4130-aa54-3389dfe52763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5eef85-4006-4b22-b9e1-1eed71a52d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e51d52-1df2-40a6-939f-cbb6ad6bd6f6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13364f92-2da7-4fbb-98ee-1a30370d5022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6a2f04-8a83-4606-a596-f89269eaca82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a68b74-0c31-428d-a5f4-f95dc2fd9c44",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c5011a-30fd-42f3-af58-ffc6bfdd27f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178d803b-14b7-4e13-8e23-805962547c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b175ccd-80e9-4e94-8a9f-6dffe2e41937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b83188-7668-4d6a-854d-68b29f4a2410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdba7072-d746-4fb8-9e0e-7262b4999108",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42602ce-eabc-4f1e-b858-29e17dae8641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23561a05-84c9-46b7-9414-d890f60612bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39aaaeab-9a75-47d6-8c44-ecd58a18b7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1fb1b08-54a9-4a7c-91a5-225d5665cbe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e97f15e-cb6c-4710-8914-9877b27346ed",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b542bd-3342-4bf1-a6a0-0ee3951ec401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b21220b8-26bb-449f-8abf-0da09c7b3b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7de00b-8d91-45da-8085-9890b1b6270c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2cf57f-b29e-4c38-bf1f-87ddf5f94ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef2d3f1-b45b-42ad-b8d6-587f10a45f0e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecf0f5b-dca0-405e-a605-9d21f9fa2df7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "543bb604-1e52-4119-b8db-33b1abd052a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f7c637-9bbc-4813-bc08-eba895e555e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e833706-3564-4fea-bbc1-6ed1bdfe9c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffb82a8-7334-476a-bec6-d4356a4a3049",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e264e39d-c1d1-46da-bea1-b35e027a5db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f1fd1d6-071b-400f-bf45-1bb2184f7e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5516d3-7515-45d3-aa6d-70fcffc7fd1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d740fba2-dfe4-4229-901e-a355c6fa5adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c3dd65-5e1b-4afc-9f68-664cbccde72b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d289825-2b1d-4bf7-8521-085f6c91c74d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358b4d8f-cc94-41a4-be12-f9e40572bf84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c857ea8d-754d-480c-bd4c-774a414042b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "739584f4-28f1-4f57-8893-1da06c1344cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ad62f7-7fff-46c2-91f3-78fe86fe239d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac80941-5aee-4685-af15-fd1fdda070e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc983b76-c35e-4d30-a9ae-81688adcce0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ff5db5-65e4-4f4b-88ba-94d80b6c4ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8bf9f0-9934-4948-aaa6-cdb543ad729e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b209d165-48bd-4f57-804b-69f7bb509a64",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9224cbb8-7d72-4db4-a511-dfa6a0750301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfc92597-b7e1-413e-942f-02507598310c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82982eab-c9cb-4875-859e-f5e6a92cb47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c8246c-7755-4ea6-92c9-edaddab0aadb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d33f37-e5dc-43b2-88e5-385c05990f90",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2439a0c0-13ba-48b5-8491-8f05b67141f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51c440fa-8f07-48e5-9bc5-de5b40e9904e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364955fa-5c97-4ea1-8137-ccc3ac85ea7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045160f8-1eb2-43b9-8d1b-b4bd78dcb3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177418b9-94a4-44aa-a4c7-99ace50a6810",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367c4e68-fe8e-4f58-aa41-9b468ce04f9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5401782c-1d72-46a3-84e3-c5d169089c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f447492-fa3d-4baa-9d9c-862cbfe30061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d59c4b-bf94-41b9-9a91-ba0356885124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a0972f-0bd0-4c20-91b4-d432fb03eae9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7fc1a3-1108-46be-a635-cc0a507fb433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00c1289-d747-4db6-b9d0-9e7c05f3947b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad35a0d-6752-44af-bf13-5e5fb1d20ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf9d45a-c8cd-4cf0-a45d-fe16d98dad01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d82c3b9-0f45-4447-9aac-cd286bce7ebb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8ad817-3856-4f4f-ac16-74af9c0f2e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6c354ea-f242-4c28-beb9-9d143979f392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c12be9-6e41-40aa-b773-8e0b1764b833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb0ed7c-a83e-4600-b6b8-ff8aee3de0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f667ff03-f71d-4d40-94aa-9a208c28a5f0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49e4e46-8c0d-45ee-bc96-92e43856d021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "473259da-9ffd-45b6-b92e-d235388787b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24f920c-3b2c-4714-be3d-03ec9434c49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43990ccd-4c06-45e2-a41a-ec854d7aa792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee1709a-daa5-49e5-bd56-10cfdf9abf6e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001e2b4e-47a4-481d-b03f-e3a1f8ec1f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "437e8909-b41a-495a-838e-06da609c6087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22e847e-92d6-4293-b969-bdb84e378b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c57f1660-6580-429c-b3fd-6b6e001bd238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8e4c81-31bc-437c-a509-63798d3a4452",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21dfab78-ae09-4bf0-a178-7a5ef8399d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a5a933-ff04-491a-9e0e-ecd46c985845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e100cc4d-350e-4394-8ecc-eabbbe968dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d72f30b-2952-4d83-b83d-9c52fa094903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2ffade-24f4-4753-b436-17744f168d9f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129e69f0-3d61-4d5e-bca0-b73bab1ca9c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2442d22b-af2f-4ed1-a294-d4c1603dc719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01dab0c-6cc0-48ee-a805-c3c1aacf2536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3586ca27-0251-466a-b843-29b702ae3c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895940cb-790f-48ff-aa64-240149b883c5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9251c3f2-e577-494a-a156-0ff6510358d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec914a1-af28-48c2-be13-f88beadfdef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c065494-fe1e-4732-bd72-35e937d51bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b5cfde-d10b-4c65-bc6f-24c43c3acfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35d2842-0d39-4f06-9e10-39ffdfc4cbc8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427afcb1-8c33-4650-abca-ffdb01a70bed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75204477-83ad-4db7-bc27-91aeeccca739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c65ac6-9663-48a1-bba0-ce9fc69af0eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8015b42a-0b89-47cf-b148-31e6d430d6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1699af4-2b7a-4c1a-9ab6-4ff7485bbac3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9316e78a-9c77-420c-9325-6286efaa17fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f5e7d36-f6e6-4b69-9b5a-bb10ce9664a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "342a1872-1de9-4795-939e-19eaddd99108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd30bc11-c66c-4276-9204-199b0845e41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d025511-1a9a-4f82-a6f1-6831f9ed9efd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12a659a-680d-442a-8169-8555cc133a39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b4b16c1-175f-4c06-9574-f8e0992c982f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db70aec4-d69f-4e88-9164-d985d9dc8f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded3bb69-3466-4a94-bb4d-89dc1b2d0394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ce49e3-db34-4f5a-9666-c7fecd018041",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466080f8-f054-4677-82d2-3273f0540a7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "296aa495-98ea-46db-a1db-2f3cf553f341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b233cc6f-32bd-48ef-b2fe-e2568b6ff50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac493d6-2566-4879-930b-7174c9b7bc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe01b847-9c6c-4df4-9e39-e1569fcf87c8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d697eefc-086b-4507-9fe2-f8fdc55e51c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df24972a-bdc5-4da7-b6ee-441a69bec8cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3bae94-8670-43e7-810a-53c04701b4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a76c514-05de-4c70-a0fe-1e62866bded2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5258dafd-f002-4bc5-a64f-88105fc8cb10",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12283f5-8ba7-494a-9aea-450d8cfe5519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8d90080-f6bd-414f-b18c-90659d69d435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee36002-7968-4385-92c4-01cefc8993cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de07abe-9d6a-4bfe-bb96-db131c0facfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f4f982-26d8-4b8f-a16a-6544dde14c0a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7129ae31-00ff-488e-8756-33d3bf0b7486",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0e67575-4f7d-4b1a-bcf3-a1e8767b441d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15909e35-c34a-4ffb-b9b9-046c4254e624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef2795b-c8ae-49f3-8e09-d77aa7ec27c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f2d96e-229e-4583-8a8d-aa888cdb90fb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63328466-63db-4792-975b-4d71a68e6963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0486449-3dc5-4f11-96b9-8c4c43e7505e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae29667-2f92-404b-b769-dcd0b5d76f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ed1f32-edd9-4aa3-bea8-b6b12ff2458c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff32f3e-2b76-457e-959a-359cb6293f4e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ef5d7f-a83e-492d-9b6d-ea4c9fe9855c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2e7e715-0ec8-4155-ac2b-1e81bbbe6f98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f752930a-bf2b-4135-8b2a-91b5f9316535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa6d3d5-ce69-46b9-a2aa-6dddd3db8741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bde6741-0c89-4cc0-9706-7e4dac784811",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4127b2-d57e-4afe-99ed-9222fcfe8b5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2c72f2c-a650-4cf5-8b23-65960de4b4ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8f1bf5-dd21-4903-8f0a-4794e5c6457e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cccca74f-874f-4efd-b729-7363e201d695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58d0a56-ad5e-49d5-8bc8-cdd1134389c8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7bac812-a81f-43a6-9659-6eec543d094b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f29bf03-5aa1-46ad-a9f4-d36e00fdeae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55cf3f3-bbe1-45db-84bf-ca68af89a7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6094b51-6ece-46fc-aa0f-f89c054728e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd68ad6a-f916-475e-a56d-5035e4487202",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027e364d-a7fa-43b4-a469-cc86becf8eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "098e9c92-5e75-4701-991f-acb9b5d503b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eee3983-e8b4-4025-9aa6-cc244e5f5480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f704846-f850-4b7b-8bed-00d58b28486f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57cc498f-26d1-4927-8014-b30e09f80471",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75429954-bddc-4fcd-8e86-d4cec9899011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e2f6860-867a-40a4-ba97-afd89d90f30b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfb98cd-a2a3-4c11-95be-d4839d0e32d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a42dfd8-92d9-45b4-af6c-400a8221aba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c599d29-487c-4bc2-b88b-9ebb1e01bd61",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d15466-5362-457f-8c80-efa0241c5dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c63370-0bcd-4a84-994b-cb76dbe62338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f45460-f0e4-449f-bd27-37842e4943a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a089f86-b2f4-4dfd-9460-7c6058ee41cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e85d31-7d6c-4f3b-b76f-97df5b2a329a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6912e6b5-c909-402d-92ec-3db5590f4c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7ca464-ea0b-412b-8567-bbc05ac46004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "015fa672-3e71-4dc5-9c6b-59d7db5efd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cffbf070-fb51-4f48-8243-b473fada7c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e7e6f5-5a8d-409c-9aa7-dc1364a27ecd",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ae1557-3eff-45e6-bae7-ee8983675f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c13728-2a32-4cb9-bfa6-f9aeb5294e87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3b936a-b9ff-44ae-8c9b-13f0ac1292e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2166b35a-21a6-49c6-82ae-bdff94e776a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3f61dd-7e5a-42b8-8de7-89c007defa2d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c57918-de95-42ed-ab9b-b59a1adae3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96955ce-ba38-43db-9742-e4fe11a73d43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e03e0bf-922c-496f-bc64-d2746da507b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a185d721-1113-4f5d-8a8b-cda70c49d77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d93db2-b1ea-479c-82f9-dfd4f366dbcf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405898ea-cbc8-429f-b8d0-769ac6390959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5cfc3d9-9a25-4026-912a-6c1d00560d25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da41424-e4ee-4e9a-b123-c7bcbcd18727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b032b296-a8ab-4e92-9b6a-5373e724a203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fe9602-677b-42d3-a11e-4b4d759ea2e2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2597fa-a925-4812-be5a-d84810831c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834a975b-2efb-417e-b6e6-fabcd621859e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a858e34-a205-4169-ad99-c1cb6c494b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03dae39a-a0ce-46a5-97a8-f72a00327532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9ee145-6e13-4d78-92e5-401e6e233894",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e01781-e80a-4582-b1ff-540d720c0092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c436ca1-1ff0-4edd-928e-9c16d3cacda4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5ecdc8-487f-451e-9b5d-4c51b669a453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3170e1-7f17-4bbb-b092-92c4a2e128db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e61f49-0d01-44ea-8de9-cea62b03383e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15031e32-ee4d-493e-9d08-88f1960be35f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87ec847-377f-4cb1-a4ce-cde671a0b962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e95880-5ce7-4341-baae-7ef07ea0d7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd79d0e-94e9-4fa4-bea9-b7af6469fef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75eaaec-9c79-408f-8a0f-7a2b89467589",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87185398-eb10-42ec-9bf5-12322ecdf81e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a78018a0-dad9-46e6-9906-b499b1dbc502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a5aadc-f947-4ed1-aa75-40c6b5f6c402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28408fc8-c344-4f11-b3b0-03e372b228ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdacff1-e83b-4012-a95f-bdca507b5d8a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241ac2d9-9882-4a3c-a2a2-6fdba1f60bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33653b59-c64e-4094-926c-824a70695bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364aff0b-f72b-4c48-97ee-32f2b918ca6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c407d7d5-12d0-426c-9da1-c78eee6fc554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6af9ae-ff7e-4041-8839-0e9e64f091a7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ed641b-b673-42e6-a77e-dd634fc1ec39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1178472a-b932-445e-a674-76329ee5b915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c041d1de-0915-4872-b389-87d36b564365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4905dbc1-4214-4c93-a965-97edcb3c0164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbf76a9-6c9c-4d80-8d0e-ababe1d4910b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6a59df-a6ff-4c9d-aee0-32577de82dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed25683-ee76-4177-a9f0-a99cd804bafd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af7265c-8b94-46b6-8d3b-c94c4e36df70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10fad602-3f09-473a-8a20-8f28821040ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c767a557-ed87-4077-b7e2-d525e8be6691",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59cdaf3f-ecca-4465-9a42-8af522deb4fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "684af885-42ab-4d13-84c6-3283cb27cf05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc4e04e-c48c-4022-9eea-668826aae46d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78c1a4ee-da24-4a90-b706-4bc8dc4cb47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ee34e5-dd36-4b8d-a42a-a3bbb7f6d857",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d0c12b-c539-4ba6-8245-2f53a1646b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0d063d-0be8-4ade-917e-7e718603e89f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abe0994-2588-4d02-b42b-ef9a643d7aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f9e7fd-7e5d-499b-b594-cd8c8f0abdb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe42693e-3ba5-492b-b40f-760bc4751deb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db255cf5-f0d2-4ca7-bec0-48638090f1d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7acd7199-f4cf-4693-926e-40a0388cc4fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "929b5d7f-2549-4ab4-b21f-68d93baee8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23419b34-d8a7-4664-a233-be0adabe1740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd0a4a8-78b8-4dce-9b7a-56b2a99ea83d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b965d904-2afa-48d6-b198-7c8d9e055a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b536d376-a507-43e3-ad62-11b9a4ec60d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9923ea41-b0d1-4686-877a-36a8e41028cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b2f464-ea9f-4ecb-8dd7-e92f42b1195a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28410e41-e19b-41bc-8d11-1e2f546b1c03",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37e2be8-c8cf-4fcc-ae0b-a9336b711f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "369dda9d-270a-4e46-b6a5-e43649a32b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "342d034b-69d9-418f-bdfe-2efc6faeb353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "917abe81-07f0-460d-9250-149b61a8b35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d080807-61a8-47c3-947c-0a4318364cf9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5799528c-7aff-4c1b-baa8-52cceea8c013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65d7ad86-9657-4ea1-aaba-a7c2f677d8d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d88dfe-1c40-49de-88f4-c8f49878ab96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87969cf5-350b-44b1-9cee-584443217e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3287a1-44e8-43c9-9068-b75e9f4ca83f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21e42f6-56ba-4dd9-ac56-d08ce0be614c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52fa087a-7997-4264-b37e-ca89a7047850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96b9b41-559c-4d87-aed9-e8026fb94d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a21b4601-0833-4afb-9d24-93f9cc1bd99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60899757-406b-4928-a2c8-872ab4528634",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4006ea18-9dcb-44d8-9405-4350017cdae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd867b7e-b2ce-4579-9847-063318b544aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e361d6-bdce-42cb-b283-348b8e3dedde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f0834d-9906-4aa6-9900-8332727279fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5303fb95-a81f-4a92-ba4f-d84e8ffbdd2b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ebfabb-30f3-4174-ad61-d851f2a1a27c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85340de8-a211-46f2-83e6-f6e74d198e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9527706d-3af1-47f1-bceb-2ef85d5ef950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41fe582b-31ee-459e-8d33-46a99ab75e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c4eb22-6db3-4795-9dce-05df95377d01",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531a385f-9ec0-4235-b7af-36020187e7f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f77bd79-ad68-486c-9b5a-4cf918fb9d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13a9a34-dfd1-4a75-a60c-1016164887ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c5fc41a-7311-4a99-8ab2-10ced0214b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6e69cc-f032-41cb-bb3b-ef7a24d86e38",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9db245f-fe1f-4eaa-baa1-e1e7cf27e179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a23f5a8e-9ddc-4821-b6b4-7cd569396c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43bf5943-bf7a-4170-8e93-2e4d307650ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18f3db5-3939-4e39-b60e-7fb5d841c966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cd2689-4d3c-4ea0-b471-61346915bf5f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb77af14-1e16-408e-bd65-1f06a3505bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a688f6-35ee-44f7-94ce-eef6d864ea1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cb3c83-1d85-4886-9fef-6b0951b587fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59718d5d-1c62-45a9-b0a3-99f6e7078fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbf7464-5d1f-495e-a007-299d5d710973",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ada3fd3-a0fb-4960-9f5d-f55b036bc8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e0db8b-7352-4177-92b3-e811b597cc38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b1b579-7bd1-40db-bff1-16f197d2a808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d30995-7900-45d4-9eac-5319f31a8dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bc24d3-7d8f-4d57-968d-ae7887c66a08",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7445ea41-b1f2-483f-819f-b9998effcd9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072ce539-e501-4640-852b-0b0c5dbce991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6917173-e3bf-44ee-af88-83602e73a518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa964d1f-6b53-479a-a66d-dceab5289339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa04d6e-4b41-49ca-835e-513586e1aa12",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637f1412-074e-40f3-9ba3-f671ebc25506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a567be55-30d3-43be-9921-a71bd23b6c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e53efd-843d-4e04-a987-5b2b9e9221d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab33426-4578-455c-8718-1e9dc699afc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83996d5a-e5cb-48be-afed-938880f17419",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bc3e9d-b83b-4c4e-a760-c3b572fb5709",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3246051b-9cb6-4b1d-9c3a-a2bd711eb7a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd3d637-6498-4b13-8ad6-3a1f938ca423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f66bc4e-3dd6-4f99-a57d-ac0e38a47b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3b4cf3-ae6b-4fb7-9c01-ef68babe6188",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164c3f81-d338-4458-804d-ebcc792bbd7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9df83aff-0245-4a17-960b-769e44e1424c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3fc58a-c17f-4224-8f40-a99a53dc3788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20289c39-b5e0-4039-a8da-12a4faa10585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28dcadbe-1fe0-467a-8598-7aed8f15ce55",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32f6dd1-3eb5-4832-933e-00d1c10f9c38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73edc224-e401-4eb7-a63f-278951a79c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0db62a-be4f-4f53-8fe3-52220f9e3ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32d33e1-6e88-4086-9b80-6e7d9ebdcf49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61508f3b-ee80-4d5d-8e0e-464b25458aea",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114731f8-1b01-423a-a28d-31a9f0b9f082",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07f10475-bd62-4842-9e42-d921e16187b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33d8ebc-a95e-4f9f-bc34-13aae709a825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3903de3d-5f27-4d5f-981a-3a947348536b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd430e45-8f64-4a87-aa00-80add4b76011",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978219bb-f0df-42a5-b918-3a5ae6fe127d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d90d422c-2834-4198-a9e5-102ea043458b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075fa785-3a75-4581-ab45-ed77693b9004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc70e507-8eff-4e60-be99-09e637658fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e991059a-09ab-49ca-ab49-a94ba50ce4c6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9e0770-23b0-4949-9d2f-8c2b847e4ec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4085fbe4-a741-416c-bb14-35440dc25084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "459369d8-a4b8-407b-b61f-20fbc69040a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a81c91-f2de-42e9-940c-fb2d8ccb3506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012c2487-6aa4-4a74-8a3c-8b1dad5d4859",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8647d6f1-762c-486e-9287-54b991afa2ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b71ca596-bd92-4a6a-bffb-9f853ff08660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534f3fca-dff5-4bfd-8b53-9a82b352bd46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6abacea4-c215-4341-a4fc-99f417dcc505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9465e24-9097-45e8-8d94-45cc7d500985",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c548a972-a4ad-41b7-ae85-1149c8dfeb32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9270712-ac27-4e40-978a-b0b3c0bb9b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ea9df3-7039-450b-ba49-44f0f12e8291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5800f027-096d-471d-a326-f5648b91d574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d81eb2-a954-443e-94a5-34c2dfe8a2a5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb49275d-7162-4a5c-a83f-e8fbebfcdb77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4023171c-b8de-4111-a062-4da95c8b0c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea68c85c-0d93-4fed-9d74-aa6f2054268f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21747483-d87a-4459-914b-30a48c3050a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8638fb-3670-44f2-a4c5-973a0abd5be0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c3da88-98bb-4ac8-a21c-fc8970d72073",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "076aa830-0fac-4b20-931b-4ba00515fc5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ed7cd3-7633-42ba-80f2-a336e6c351d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9aab8c-154d-485c-9f6c-fd87db7346ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd19a32-21e8-456e-9f3a-e7295dc88699",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3b7ff5-fdb9-4072-a1ee-403e1fc33063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48ec5e23-094a-4908-972b-0a126107db4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3ca9e9-27be-4889-826a-f26270fa10e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e8725e-2540-4365-8c27-650801a47651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84cc695-634e-4356-89a3-f9969c7b9db8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7956a22f-03b1-4d49-8d50-80f0d8461f14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02a9cc1e-2541-401d-b787-906196b8fc71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fde8ed7-a4fc-4cf1-8f83-76dbcd37192f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238a73c5-2e37-4711-bd7d-37a76206f4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa656ff3-e34b-4760-8282-594e96d6e353",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d127f5b-c949-48db-a1e4-9bd11ec4f8af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf07882c-3380-45ee-958a-99242e4dcf66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "134a4f87-67a2-479e-9061-775478fb98be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b011df7-e85f-49f2-bb54-ef31cfaa7211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2fe975-98a4-4619-ae5a-0885609f6339",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab76c65-80b5-4653-8101-d02595dca047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a3a0a72-7168-4e61-98c7-7483e89e195a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17fc509-23a2-4b18-9daf-a5bc2d5becca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8cefbe-b2c6-4d7a-a046-ce6b21ecdc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49484247-b997-4155-b9e1-2c678b1ddc62",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e7f498-1b31-4e0b-bc0a-358da7f70791",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30b5573d-445d-4116-89ac-6516c2a970fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db8d257-cf89-4a1e-bc07-29dd25ec0afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3229ab7-aa4a-4b29-96dd-72ef924218b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687fb85b-7aee-4ca9-a88f-1b73f77060d0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab18b794-ff6c-4389-9959-6856d788c138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7c59b55-311e-4222-8ba8-0bcc449dacb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5829f820-10cc-451a-a112-3ba235d61b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873e9025-b4e3-4f41-8522-7e06c8a1a35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea87f2b-79d2-45db-a34d-2fd02d471002",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed85e4e8-21a4-46be-b311-b937751af334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28044a08-f38b-4922-b554-16dc733c8355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "629431d1-2f0d-4ec9-849b-26cc83585a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77cb52e-424f-45cb-a3c5-4c3ada927e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e00325b-e193-4b1b-835c-a2fb9d2b1c90",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cd7010-7dcd-416a-9b47-944cdf4e14e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "facbe380-bda4-471c-ab25-f6e3f8349f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7809ca16-8e06-44b5-a8f3-00c692426c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf61ecad-ba63-431a-8fe0-6fcf73406a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bc9245-34eb-4b51-a830-f822f52f90a7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7dd0d07-07cb-4581-b47c-cf3f7368b4dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da62421e-16dd-4308-911f-40f94e570e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e98766-5c79-4d4f-9cd2-40f649c2b82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc27a3b8-49a1-4295-ba0a-6d8b559f680b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958b611f-5c8b-4560-8fe5-14b292f69bc8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4389cb74-9ed7-46ee-a886-b48f345808e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e900854-4b52-4200-b2da-2e1b5db52b5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1069078-9360-4f5d-8c3a-5bb32e88a619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b482b753-c22a-4ff5-b57d-540b061514a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50901524-091c-46c8-bef9-3bb9a8a722cd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909e1c90-1030-4501-8a70-5538dda15e10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "255a27e0-ba69-4694-991f-6b80b8dabded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad7baa8-6e83-4302-a2b7-b43f48121535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b5a2cb-5cab-4baa-bb78-d519bc4cc7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b258527-2a0b-4a71-a9c0-027d7c39f943",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46078567-ee1e-426d-9961-f39d6863cea0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7be06f5a-1827-41ae-aea0-c3be0c76ea33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4999a2b-ce8a-448d-8346-eebaaa7f4eef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3a90d9-ef1a-4b3c-a49b-6ede14367954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85d5db1-8f71-4c85-868c-189db4ec9d63",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1aabcd7-90d2-4392-956c-30a347eac943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce25a3ef-fad0-4265-8335-05af514c68ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e24915-10db-481a-b002-0d91b8b7aa50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48e071d4-5157-42d7-93c1-d3c49f22b700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a5b0c8-13a2-487d-8f86-de4a76644868",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a92e464-5f65-40bc-897a-94733dc55328",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7283293b-c98e-4c73-a207-dbb1db1183f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec34698-f717-40aa-8f02-e2cdfc6552e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da576cb2-6a84-46ad-a511-c647a0b31377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbdead9e-f254-473a-8498-22c1a05206e9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60575955-d0b3-47e9-804f-80d0357b96bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de5679c8-7f64-4c16-ba64-7c78817931ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a59310-173d-4ce0-9fb2-8bad398008e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4275cc24-bbc7-44a9-9d67-7eaf9f5a063c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64377d63-8b3f-4307-a31a-b5aae85887ea",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6b85a7-24b4-42a3-9fa7-358453b0a18b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb063ece-acf5-475f-9ace-7f2b905d7ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e52ace7-ce71-4705-9c73-db1332c2b52d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c651c6-4c34-4636-a6af-7deaae4cb30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0704be-6058-4c6b-9d2c-a3d57eace2f1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c969c190-acd5-4aeb-8651-1bdb61002749",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3769f3da-304b-40a7-a4bb-f08b1422e3de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7d01ac-eeda-476d-bf76-90c6a5b809ed",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38a9275-9002-44db-9374-9df4fe97b417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f60505-5b8d-401a-9ce5-d97098eea9f8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7e2cc4-c191-4a9c-b5bf-2ee295bd65a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e4cb0ee-aee7-4331-8578-c804212ee2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa727b6-5f25-497c-962e-335e1962582c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa33e97-c59e-4ffe-b58e-e5e04179da61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273ab38b-06da-4c2c-a5ca-d1a35ef33f04",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c21f01-3ffa-4874-a48b-f0591e4966d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba43f76b-5871-498a-8cb2-919658325b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aeed2bc-ac28-464d-a8b8-c0c53464e99f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fabfbb-3f1b-40d2-adfd-dc6421047755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3e6619-e85e-434a-a1f0-a2c05196ec11",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316a77e4-f4f7-4a39-8152-e6b0e7579c83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58260453-238b-4f6e-8b51-2dd368f5e43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ffe49d-dbbe-43fe-a9d6-75a850e7321c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49108a51-24cf-4867-9768-23bd8d6c5088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec21d09-5972-41dc-ac4a-6e1b3896abe6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83cb03a-2ac9-42b5-ae8f-1e72ff0ae6e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fe59466-280c-490c-bd5b-f7c9cf8072ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24dc01c4-6d99-4b61-9a36-90a83e7b2957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93fc3fb0-4c42-44c0-8742-52c62bafdfc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ec4233-f79f-4b59-972e-2907d8f30612",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf37ab2-5c40-4296-a74b-5080aa3bb72b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a0ce700-2d64-4aed-ac13-831b458e607a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ab5792-c478-45be-b2af-c61cbedc4741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14a406c-0354-472f-8b22-fd9f965cce9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af4f600-807f-4cc3-9872-dfe86e5d6ff3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c2ea64-7095-4388-8157-2b0853977c23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60a32f6e-e9bd-45be-a0cd-191f8f477bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cadb02ba-7971-4814-a4b5-23dd844bf4fb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb2f9aa-9eab-44c4-b5ca-6b242ba45daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e8c94e-76ae-49ee-b7a8-104cbd8bd2a2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b39b3e9-4813-4912-a1eb-66666789d401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b59a267b-a006-4659-b30b-858538ac18a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae112cde-4130-422c-907c-2f3d7b0ea6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ba52d7-3649-417f-b4eb-b8501efd1d37"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a13e33a-6b19-4291-af69-7e970523f02d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20aafbee-3edd-43bb-bb20-6c148e532403"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac42fe5d-db11-4647-be3f-a2868219282f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e889102-0456-411b-a462-023798828cec"
                    }
                  }
                ]
              },
              {
                "id": "7865bf18-a41e-45f6-9ee1-bd4c4bb7cd6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5540b03-1191-471a-bfdc-52ff091cd7a2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ffd1df-5283-4e8d-a131-4bac56a67635",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "aa6bfdf8-6b2e-4a22-aa91-08268ad18d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a2f988-26fa-4611-ba12-69ae699b1fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5eba822-4e3b-4ac4-8df0-f08c37f829ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ed45c2-b669-46fd-bd88-4f49f0929a56",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2020fdff-25d7-47e4-bd09-e896c39590d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "746d580b-13d5-43f2-97a0-fe18420ffe34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8845b987-b57f-4aaf-b3d6-ddf3ffa7a326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a492362b-5d2c-45da-bb50-11c37e4f6dd4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33268525-59c8-46d2-9ad9-e8192e985a8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "669e29f5-6707-4e44-aa95-0b041a33af8d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "846d89c1-4166-4729-ab26-a63d6005d070",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd4cbaf8-f53f-4592-b29b-025d6fc026b6"
                    }
                  }
                ]
              },
              {
                "id": "d1db7f85-0a7e-4c20-aae2-effb05a81dce",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "84e1cb5a-1a79-4203-9d2f-a67a834a491e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064c56e4-eb93-4dbb-8fcb-3b8378b02b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0ea2561b-a283-498d-86ad-8529b5526baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e63e0d9-919f-4063-b676-c1a26618598a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caaa5995-bf8a-4390-b043-6c86f855995e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a151a348-26b8-4c15-88e4-3cfa25022fc5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6965a843-adcc-4002-8be8-c34bfcf6f09b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33fb0681-519c-4d6e-83e6-bae9f1a54f04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7fe3cc36-e727-48b2-b553-82c044551d11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "108209e3-fc5e-458c-a679-b189a47a3787",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb401965-3aa3-4bf5-ac43-b4675d307818"
                    }
                  }
                ]
              },
              {
                "id": "952cc505-6294-4722-8067-68897639211a",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25bd0bae-fcdf-466e-a65e-28a82e203e4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "89bc09cc-9158-4e63-86c8-e2255bb19100"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbb175b2-0fc8-4e57-8233-a6fe4d94f208",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20e67734-3922-4e4b-a025-b1acce88af4b"
                    }
                  }
                ]
              },
              {
                "id": "7b03f6af-2fbc-4518-bea0-9affb0adcb2a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b25a4a58-fd40-4d31-a113-7875122b161c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "02dd800a-f508-4117-bc3f-0f5906ea91da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51a2f852-2214-4001-8f16-3b70a99774ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ae01ae3-4645-4b52-bdb1-cc179245c485"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a980cd20-0e30-4b27-b617-a3e37d6dc076",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1958b983-6cf4-45c8-adcf-48fe866400ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7030ff4-e5f5-4063-be7b-d5aadd763bf7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44a494dc-4014-4a78-aed9-53a891983803"
            }
          }
        ]
      },
      {
        "id": "e753d756-e838-4a95-bb80-e4cfd3900e88",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "180e20b3-e7bd-4bd7-afe1-9a3d92a037e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "71bcb3fa-be12-48b8-a680-05f4ef40f268",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4874e4f2-1237-454a-99ff-9c2e8f077c8e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cdcc94-14bf-49dc-a4e6-bcc78e2cdecd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d7900de6-6edc-4919-806a-0444e5f0dca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab133e1-0aa8-4f44-8b15-56faffc82290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02d1492b-3d70-4145-99a2-00f746ecf33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0ed970-204e-4d14-b5a7-6c450d0e32b2",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f1f2fc-4d90-4c05-924e-c84cb13f00e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3f32df81-0aae-48ac-b013-e137f9dd18ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81c3d8c-9dbc-44c9-a28d-371a2ff513f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e1bf3c0-8538-4dcd-a37d-cda285acf806"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa1b01a8-9918-4a69-b110-59c991b40d4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc4ed42e-fa8b-468b-807e-13c19cfd689a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae9b14ca-8b44-4741-bd0e-417d372e2f41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3ed869d-0f4d-45bd-8dc1-f24b47a4096b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fc1497b-bbe8-43bb-9276-e54b32ee2e7f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7a5692b0-de46-4652-a690-2443a811fb11"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55e1ed9b-722f-4623-8a4d-5eeca604355d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b181d5c-5720-4f9a-92a7-02d85c79abfc"
            }
          }
        ]
      },
      {
        "id": "ab2cf789-1cdb-4f14-ab2d-483b6727a3ba",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "87fd3b4d-bd70-44f3-becb-3327f79bc8d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af7074b2-8a63-4b85-a82c-26a2c364cc80",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "678060a2-c5b9-436d-9ef4-7c56bf2f01c5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a95bfd-b61d-4969-bc65-a63b96f4f0ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ae109dcd-25e6-4afc-94fc-b3897d3d366f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d42964-fddb-4e95-bc91-20f88f0d58f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "329e46e9-4ff2-4ea7-81a1-aeb78dec2c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a9fbca-e75a-481b-8663-12c337c30a09",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdd8acc-5d2f-4a31-95a5-a71b25a996a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0abed74b-1e5c-496a-be45-05cebe726ec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbc46c6-bf74-41cd-87b9-5996675fbacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70020d8f-2aa1-472b-a06c-2146e75f2095"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54f4da0e-32fb-4ae4-a931-c5fbf5456660",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5d99ba9-338b-4294-a68e-602f01b277f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cc67114-ae43-4ee8-9922-475d519847ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cb0e83e-2c64-490f-addd-20d3eec5c326"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e82f656-0b4f-49fa-9217-0d5b3ba0c3f7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "32929f7c-2451-4191-9cb7-aa3aaca23fc8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d81846dd-dce5-4d1a-aca1-3c4361b05b83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d107d70-744e-4786-a75e-6eab390d29d1"
            }
          }
        ]
      },
      {
        "id": "37f023dd-9d02-4495-a746-d71a5bece5d6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "82bedf71-90b6-4f8a-b5c9-0159a00a01cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2684bba-4c45-467b-a1fb-fb6f3595f93e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a136cd9b-d553-494a-8782-b9653d5a504a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb376f3-84a2-4382-84b2-e7b23158793c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3b405945-8627-43f3-99c8-024f360f6d20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1bac4a-f408-4871-aff2-546959de293c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c85039d-9df0-43b9-b745-6640d3fa4b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658523b9-f594-4643-b1aa-931bb1c47d0d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e427664-b765-4eeb-9ab2-0a90f0357728",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aaadddbc-952f-443a-94fa-997ac3874b16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0472835-c03b-4ee5-960d-1a312984fdcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aacb9c42-0ae4-4691-a264-d88200cca3a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27e3f4df-96ad-41fd-9987-375db385a814",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9191174f-cd60-4a0b-93e9-bddd01154859"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c495c8f-2812-46aa-8731-8bc6cc82f98f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0521ff30-aaa3-4e1c-b358-c69f571fd6fc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97b09434-f238-4eda-b32c-54345ac8b43f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e2482db3-0f20-473f-8a4f-1d42c1d52576"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb43788d-3e1a-447a-81ed-304f8fc423d8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fa580d1-b102-472d-91de-30202f02110f"
            }
          }
        ]
      },
      {
        "id": "b776f7af-91f2-4f6d-932f-5e7f8056ef2b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b8024bb3-0c4a-4626-8c18-7a2e9ea19e56",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31154738-b159-41da-a839-8b2d52c764fe",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9512cdfb-dd84-449c-aa92-ef82e5c11fb3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "965d3273-3823-4bca-824f-f549d096eb6f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8afba846-46eb-4e5f-8602-d859b30901cb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 107.38697318007662,
      "responseMin": 13,
      "responseMax": 961,
      "responseSd": 145.25583080216126,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670805838552,
      "completed": 1670805877748
    },
    "executions": [
      {
        "id": "e446fffc-33cd-431f-ab5e-ae9cb667668e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a02a6ef4-8eaf-4a2c-aa80-4ff7ac8fa0a6",
          "httpRequestId": "12ba4ba7-8a65-4156-81ea-1374b2efbd6b"
        },
        "item": {
          "id": "e446fffc-33cd-431f-ab5e-ae9cb667668e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "92cd32a6-39f8-44dc-8b59-12654913424b",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 0
        }
      },
      {
        "id": "9c8332b0-89a2-4de7-adc7-d261314e5919",
        "cursor": {
          "ref": "0d94c3d3-c5cc-4e83-9e5d-94af4b027a76",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2f66879f-5160-4844-ac54-cc5792581396"
        },
        "item": {
          "id": "9c8332b0-89a2-4de7-adc7-d261314e5919",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b24cccfc-a4d5-4511-9220-8b9e25775cb2",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "359c6aec-706c-4673-aafd-4158a610dd88",
        "cursor": {
          "ref": "782edecb-a42b-4d8a-b158-7c890c4d17b1",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "22b5abbd-9ec5-4dc4-8ca8-21818b657134"
        },
        "item": {
          "id": "359c6aec-706c-4673-aafd-4158a610dd88",
          "name": "did_json"
        },
        "response": {
          "id": "8d98ca9c-4490-4a92-8d08-e7e2ed95e1cc",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57807631-fcdb-4ee8-a249-e05fcfd4d0dc",
        "cursor": {
          "ref": "ffea6fe6-a018-46ce-a198-00fbe573a6b5",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7e5df285-a25f-4920-a0ac-8f0454bfdf15"
        },
        "item": {
          "id": "57807631-fcdb-4ee8-a249-e05fcfd4d0dc",
          "name": "did:invalid"
        },
        "response": {
          "id": "82d9c7d4-b925-4bcf-8020-9abac39c4813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57807631-fcdb-4ee8-a249-e05fcfd4d0dc",
        "cursor": {
          "ref": "ffea6fe6-a018-46ce-a198-00fbe573a6b5",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7e5df285-a25f-4920-a0ac-8f0454bfdf15"
        },
        "item": {
          "id": "57807631-fcdb-4ee8-a249-e05fcfd4d0dc",
          "name": "did:invalid"
        },
        "response": {
          "id": "82d9c7d4-b925-4bcf-8020-9abac39c4813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3dbe3b-a20c-4bcd-86e7-946ab58e8137",
        "cursor": {
          "ref": "854f74a3-a760-4d6d-ac6d-dd92b13b4263",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "523fcaa4-3036-4ea3-87c5-ea3fac94cb40"
        },
        "item": {
          "id": "fe3dbe3b-a20c-4bcd-86e7-946ab58e8137",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ea94645c-8f70-4918-ade6-141a5c4280f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 140,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106adce5-0082-4e6f-b38b-5145ab901cbe",
        "cursor": {
          "ref": "bffb3240-fae8-46f5-855a-f15f17a12491",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f5c9c8a1-ecc0-4c50-9925-f3e67d1fd5ba"
        },
        "item": {
          "id": "106adce5-0082-4e6f-b38b-5145ab901cbe",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3972f391-129e-49b5-80b6-611d4428124d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b48081-1246-4f6b-aa65-8c49fa3b8c41",
        "cursor": {
          "ref": "12b99c95-0c55-4b17-858f-8ffbe1f0e510",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ece9f898-2c3a-48d6-b9ba-9a4c9dd40d71"
        },
        "item": {
          "id": "67b48081-1246-4f6b-aa65-8c49fa3b8c41",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cf9b8b9a-3f4c-44ea-854f-f396545272ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b930e90a-1e5e-4f9b-99fb-fd1a7e87da67",
        "cursor": {
          "ref": "5793ddde-503b-4da5-b1fe-3f72f7e0d059",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dba7f918-8b1e-471a-ba00-9802b22fdf19"
        },
        "item": {
          "id": "b930e90a-1e5e-4f9b-99fb-fd1a7e87da67",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "72748408-440b-4056-a149-c6b10ed20cca",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b930e90a-1e5e-4f9b-99fb-fd1a7e87da67",
        "cursor": {
          "ref": "5793ddde-503b-4da5-b1fe-3f72f7e0d059",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dba7f918-8b1e-471a-ba00-9802b22fdf19"
        },
        "item": {
          "id": "b930e90a-1e5e-4f9b-99fb-fd1a7e87da67",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "72748408-440b-4056-a149-c6b10ed20cca",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069da202-ca29-4ee3-8446-3203f62ce6a0",
        "cursor": {
          "ref": "196eff97-627a-46a4-ac39-7a3a44fef6f9",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3fb0d32d-28b0-4b1b-9a5d-c06b4c7bf885"
        },
        "item": {
          "id": "069da202-ca29-4ee3-8446-3203f62ce6a0",
          "name": "identifiers"
        },
        "response": {
          "id": "429922d3-2d3a-440d-8902-681682f00c6d",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1851a812-bcfa-4422-8c6e-e35c2be7871c",
        "cursor": {
          "ref": "39da48d8-c6b8-4b26-a358-f9601e888579",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e5033dbd-24ea-4dbc-848e-6613617fe3d6"
        },
        "item": {
          "id": "1851a812-bcfa-4422-8c6e-e35c2be7871c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2c86403b-c205-428f-b718-d85cd022cdfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1851a812-bcfa-4422-8c6e-e35c2be7871c",
        "cursor": {
          "ref": "39da48d8-c6b8-4b26-a358-f9601e888579",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e5033dbd-24ea-4dbc-848e-6613617fe3d6"
        },
        "item": {
          "id": "1851a812-bcfa-4422-8c6e-e35c2be7871c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2c86403b-c205-428f-b718-d85cd022cdfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8937a68-fc9d-48c5-92f6-c43bd8e566fb",
        "cursor": {
          "ref": "fdafefca-6627-45d7-bdd5-8b823e0b4ba4",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2b0e2aef-3191-4f31-b409-6cae3615a7c3"
        },
        "item": {
          "id": "e8937a68-fc9d-48c5-92f6-c43bd8e566fb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9f3ec259-8974-4494-8c11-2afd021ba23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5120b118-7969-4516-823d-b6cb564d1506",
        "cursor": {
          "ref": "93cc3e43-d066-41f6-947d-5d3cf593c41f",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "336d1c62-cfaa-478b-8f9e-4d6e35bd6def"
        },
        "item": {
          "id": "5120b118-7969-4516-823d-b6cb564d1506",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d586dbe8-0ef2-4f42-8e47-809e9db8a9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf51c02-6235-4b0b-b786-c10a2ba6ca05",
        "cursor": {
          "ref": "feb8b8d1-56c6-4e12-a487-d19caec4a7ec",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4f57f1f5-148c-44ca-ac9e-d79b56cd6898"
        },
        "item": {
          "id": "caf51c02-6235-4b0b-b786-c10a2ba6ca05",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ee8f67c3-3d39-413d-9249-87dd9fbc15a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608b4905-7555-4030-83d7-6ed1e24c08da",
        "cursor": {
          "ref": "0df5530c-3180-4711-bd41-d8728e7364eb",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "22f8261f-c3cf-4a3d-87a6-61d2eea2aaca"
        },
        "item": {
          "id": "608b4905-7555-4030-83d7-6ed1e24c08da",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e4d16d09-4ea5-41f1-8c62-2f3f910a4b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b345c34e-ec66-4ca2-8acb-e18c863feb3f",
        "cursor": {
          "ref": "095372eb-1e61-41e9-a2d5-b68636a8e59a",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c0cadfdb-bbdf-4a57-b0e6-9cbf3a8a8d26"
        },
        "item": {
          "id": "b345c34e-ec66-4ca2-8acb-e18c863feb3f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "15302f03-6365-4dc2-b44b-2a70f71d7f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc75259d-1704-4368-9d2b-916400c3797a",
        "cursor": {
          "ref": "a19c0684-9dfa-465a-a7e2-4128f2521bd1",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5d93ca89-dbd3-4fe7-a2e6-e65f9a8cc5df"
        },
        "item": {
          "id": "cc75259d-1704-4368-9d2b-916400c3797a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8de31f4c-882e-485c-aade-19e8abcd54c8",
          "status": "Created",
          "code": 201,
          "responseTime": 961,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "d2e8f485-dd58-406d-ba3a-e61b091f32b8",
        "cursor": {
          "ref": "8d879acc-6985-4325-b20b-4aadeb3aed56",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "15814172-4598-49cd-aecc-5a75b0c55d01"
        },
        "item": {
          "id": "d2e8f485-dd58-406d-ba3a-e61b091f32b8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "20fb7592-aa9a-4309-9a09-9484e225601f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45eace80-3b8e-41ea-8d9b-b9bf078cacb6",
        "cursor": {
          "ref": "2b7c0734-af92-48e6-a901-db0fab58399a",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f2a99e82-c32a-43aa-a279-244c63a950b3"
        },
        "item": {
          "id": "45eace80-3b8e-41ea-8d9b-b9bf078cacb6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "26061549-33f9-44c5-b5e1-a6037ff1a605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def12a85-ada7-4c30-a2a5-6375e3878885",
        "cursor": {
          "ref": "12239a00-943b-4348-b2b9-f79f80074d4d",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "05677701-1137-4d4d-8842-d3af503453be"
        },
        "item": {
          "id": "def12a85-ada7-4c30-a2a5-6375e3878885",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "87b6d3fb-e7cb-426b-b71d-76ad68b97556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c1511e-5f1a-43c4-961a-548809617831",
        "cursor": {
          "ref": "578eec58-cc86-486b-9a52-f916244d6b4e",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "57b973be-d1e3-4d3e-a506-a8d86b10e2b5"
        },
        "item": {
          "id": "48c1511e-5f1a-43c4-961a-548809617831",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "17c2aca2-8d12-4b91-8cad-c34e155fb895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37445bf4-5d78-41c6-a013-bb0ec0d38218",
        "cursor": {
          "ref": "eb2d3b49-25a3-43b5-a6ed-6781df006426",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c3103b66-459f-49b9-90a6-c16dc56458b7"
        },
        "item": {
          "id": "37445bf4-5d78-41c6-a013-bb0ec0d38218",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ee272f09-3da9-4c37-8da6-b67462f76f2c",
          "status": "Created",
          "code": 201,
          "responseTime": 513,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "1001de72-e133-4606-89a6-d7e3848be7a2",
        "cursor": {
          "ref": "339803b1-027f-497d-9c2d-ff27051222d5",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "77beeda6-0e65-47dd-8af4-aca319afc3cd"
        },
        "item": {
          "id": "1001de72-e133-4606-89a6-d7e3848be7a2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "660d312c-b7c0-409b-b049-bb30986b6a33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1669642d-1694-4cc2-9e9d-91e6ca29a6a7",
        "cursor": {
          "ref": "edd72d42-e279-4715-8b01-85911a19511d",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "53bdb53b-d4ee-416e-88f0-20fabbb840fe"
        },
        "item": {
          "id": "1669642d-1694-4cc2-9e9d-91e6ca29a6a7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6d851dfc-e8ec-41c0-9976-58d80f9ccd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cf4387-875b-4a26-95ef-aa9f49f5869a",
        "cursor": {
          "ref": "de4af38f-9df1-474c-b0a8-be97ba8d0afe",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8fbd1cc1-954c-4939-b475-ca957a9906d0"
        },
        "item": {
          "id": "58cf4387-875b-4a26-95ef-aa9f49f5869a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a68262d2-1567-4c17-bd03-1ae1481673f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09dccbc8-1367-4dc2-b2f9-fb2c6170144d",
        "cursor": {
          "ref": "7f59405e-3607-4620-8cd9-843f0d815f81",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b311cee9-e15c-4d47-b9f2-cdf8d347255f"
        },
        "item": {
          "id": "09dccbc8-1367-4dc2-b2f9-fb2c6170144d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4d2f571f-a546-4f09-9ec6-652b3907ecb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca767af-7f61-420f-8f9a-d97542f8179f",
        "cursor": {
          "ref": "3fc3ff47-2d4b-488c-9a21-60388f3fdc95",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d0b0d905-c657-41c2-9a5d-f65ff617cc60"
        },
        "item": {
          "id": "5ca767af-7f61-420f-8f9a-d97542f8179f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7a4db709-bdfe-4f4f-ae41-556d8d167243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1556de9d-68f3-4bb4-baf1-78a1b6765e90",
        "cursor": {
          "ref": "a68c37b5-49be-4bb9-9217-93e34307f5c6",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2abdce1b-2919-49dc-b050-277831bed816"
        },
        "item": {
          "id": "1556de9d-68f3-4bb4-baf1-78a1b6765e90",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "dac33580-d2c7-4ab6-aa29-8b08b3927ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27a9b66-87c9-4a16-98ee-2471e6e9f7d0",
        "cursor": {
          "ref": "456a6ff4-c7d8-49a8-9d19-95f073fab609",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0c187280-5d39-4328-94cc-6be01cecbf7f"
        },
        "item": {
          "id": "a27a9b66-87c9-4a16-98ee-2471e6e9f7d0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "698058fe-c434-4ab0-88f1-836e44094fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c973805a-dc35-4804-9f15-04c7cb517341",
        "cursor": {
          "ref": "e42f1f92-3a8a-49e3-bbfa-657f9b2f3402",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5e5bff44-7e6e-44e3-8c19-e81c37948d3f"
        },
        "item": {
          "id": "c973805a-dc35-4804-9f15-04c7cb517341",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "816b2b2b-e3fe-492e-95e7-cdde8954c15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20921455-4d78-451d-a3a4-4f49222cb19b",
        "cursor": {
          "ref": "82e6c324-926c-4079-ad16-622837f1c484",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "46fe6f42-8b55-42e3-a289-53498f0a19be"
        },
        "item": {
          "id": "20921455-4d78-451d-a3a4-4f49222cb19b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d8ab9081-7525-481b-8973-ed44680547d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ff32b0-4216-45da-978e-6fc26fabbcc4",
        "cursor": {
          "ref": "c8499965-a985-4b32-a21b-e29bbf926434",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cd9ed9f7-18df-4e69-9f75-0e77d9e7a9d5"
        },
        "item": {
          "id": "a1ff32b0-4216-45da-978e-6fc26fabbcc4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f0c709ff-4df6-4f28-9f2b-7f92c396c8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbee1efd-8cbe-44e2-8cff-fc7a29aabcc8",
        "cursor": {
          "ref": "d2f92caa-23bd-46f9-9925-0880c1a4e309",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7b1b4075-4512-49a4-95c2-643553ae9082"
        },
        "item": {
          "id": "fbee1efd-8cbe-44e2-8cff-fc7a29aabcc8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5097f0e6-47aa-42e7-92ae-60ac83109447",
          "status": "Created",
          "code": 201,
          "responseTime": 583,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "1b737690-09cb-4dee-a227-a4a1d880a9d7",
        "cursor": {
          "ref": "495b6cb8-fecd-4849-8ddd-3f156801e84f",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2a08b3d6-2bfb-43e5-a26e-b615a9f1dc2d"
        },
        "item": {
          "id": "1b737690-09cb-4dee-a227-a4a1d880a9d7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "46f7d153-10c0-49bd-9f99-b7e7f9863292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23de2d1-57d3-482c-814e-8c77b076bdc0",
        "cursor": {
          "ref": "222aefe8-9ab4-4d98-a760-270fc6dc2ed4",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6a0cb8f0-d898-42d4-ae74-7f9215231fb7"
        },
        "item": {
          "id": "b23de2d1-57d3-482c-814e-8c77b076bdc0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e44a3a39-f2e3-4bd2-b59f-f60d1b30fc40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb32ad6-6c67-4dc4-88d1-3c0a5d9069b1",
        "cursor": {
          "ref": "ef67d753-7f7f-4056-844a-45b18bc79a7d",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ab164648-0287-4ed2-b1fc-dbaa9c94d9b7"
        },
        "item": {
          "id": "6fb32ad6-6c67-4dc4-88d1-3c0a5d9069b1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fdaa5558-faac-43dc-a4f3-0768d3e1fb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21072582-9b6d-449f-883f-bf002197d8f7",
        "cursor": {
          "ref": "e7eb4066-87d1-4546-a08a-0c0c54f47707",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6e658fb0-70ac-4d1c-9312-63d80f1865b8"
        },
        "item": {
          "id": "21072582-9b6d-449f-883f-bf002197d8f7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "eff3240c-bdec-43cb-9092-731c7c8d0b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c848d4ff-3154-4ec5-8e68-210854a06d5e",
        "cursor": {
          "ref": "6510b977-7f28-4ac9-8bdd-678e7f6bc722",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "15a62f2b-3591-485f-a3d3-67b9a4fb8478"
        },
        "item": {
          "id": "c848d4ff-3154-4ec5-8e68-210854a06d5e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "82f00b43-219e-4bea-859f-0d3c0d573663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8eafda-36f3-461b-8e4a-bbbba83fe08d",
        "cursor": {
          "ref": "e6d7135e-dd54-41bd-abd9-8867583a0d41",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "69d17918-be19-485a-bb21-c1de66d25575"
        },
        "item": {
          "id": "2d8eafda-36f3-461b-8e4a-bbbba83fe08d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "fca7e478-9614-4d6b-9372-237388ace162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f774bec-8339-4b4a-944f-1922fdb9cb32",
        "cursor": {
          "ref": "2efa31ed-c284-4d6a-b174-31483ef2b35f",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dacad097-db11-4a08-a5d4-7bfb6be430ee"
        },
        "item": {
          "id": "6f774bec-8339-4b4a-944f-1922fdb9cb32",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "26eea912-5744-4a35-ab5f-8f151a2a264b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a67f60d-3152-426b-8b2b-e897a25bbac0",
        "cursor": {
          "ref": "29987c46-45b9-40e3-8906-0bb23ece8ef2",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f5993c07-31ad-4caa-86fb-f48e7cd6d6fd"
        },
        "item": {
          "id": "4a67f60d-3152-426b-8b2b-e897a25bbac0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "dfb2827e-b0a2-4909-828c-7c255d389641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ddbdc3-f043-4eaf-8351-8cfe5918a04b",
        "cursor": {
          "ref": "2bb8b1bd-3ee9-43d0-9a8f-0afaa988ab49",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0d2c04fb-aebc-44dc-8187-65ba4a29aff0"
        },
        "item": {
          "id": "a3ddbdc3-f043-4eaf-8351-8cfe5918a04b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8896f45f-a451-4f71-a245-13335fd183bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe449b8-63e1-451c-ac73-244c50b4ea31",
        "cursor": {
          "ref": "d00689e1-6342-4e04-9ecf-7b420919b5d3",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ed191019-e0a0-44fe-9990-2cf64db975d2"
        },
        "item": {
          "id": "7fe449b8-63e1-451c-ac73-244c50b4ea31",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "184a772a-e2a3-43d6-a5cb-8837e19e080e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f24b8f-e299-4f6d-ab6a-bfc29a4194e1",
        "cursor": {
          "ref": "62f74484-0d09-4705-a2a9-c76f43541451",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d84a2946-50eb-4b10-a1b8-650baf562534"
        },
        "item": {
          "id": "f9f24b8f-e299-4f6d-ab6a-bfc29a4194e1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4731ea0d-ee7b-4411-a471-b29974074d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11c1700-2ad3-4cd2-a745-1c29fb50f6c8",
        "cursor": {
          "ref": "2acf9829-7aee-4fd9-9db8-055d491c5609",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e3192381-ada1-4fe5-b76d-948a41939fb0"
        },
        "item": {
          "id": "a11c1700-2ad3-4cd2-a745-1c29fb50f6c8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1ed9fce3-e4e3-4a9e-b601-c79a44ca7a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01295558-a6fb-4a4e-ba21-f8a47fc14ef1",
        "cursor": {
          "ref": "9f4979bc-4f5e-4bc0-bb56-c518bd37f0df",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "aaaf2fde-f7df-41fb-bf99-a147f26db62d"
        },
        "item": {
          "id": "01295558-a6fb-4a4e-ba21-f8a47fc14ef1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "cd18ed3b-c456-4887-99ff-47f1b319ecb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "61423522-a72d-4e98-a30c-3ca6ebf02c84",
        "cursor": {
          "ref": "288945be-8377-4993-a872-2390a977117e",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a6246062-1e87-4b1c-9004-82e0957819ab"
        },
        "item": {
          "id": "61423522-a72d-4e98-a30c-3ca6ebf02c84",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8862f182-2837-437a-bf83-8566cc643fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021db3f1-e769-4fc1-a0d8-c1075806d37d",
        "cursor": {
          "ref": "ea2cea13-9567-4dec-a0bf-d3c9d5f274b7",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2ba57c7e-d949-4c1f-85fe-ca7e3109f820"
        },
        "item": {
          "id": "021db3f1-e769-4fc1-a0d8-c1075806d37d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "327ce765-9e77-4e77-b241-7317397317a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4bc6112-ef3e-4231-98f3-3f2e1114885d",
        "cursor": {
          "ref": "e99a75ae-4b72-4486-96e8-9440183bc178",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0854eae3-12df-46a8-b15c-035f79f802c1"
        },
        "item": {
          "id": "a4bc6112-ef3e-4231-98f3-3f2e1114885d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9e07123b-aa05-45e3-a182-73ba456b20f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1277db-31e9-4471-8f05-903a12f2e3ff",
        "cursor": {
          "ref": "ce1767ab-cc1f-42ee-ba2f-b22eac6d6788",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bc87c088-8f29-4761-8395-08e7344d23ac"
        },
        "item": {
          "id": "ea1277db-31e9-4471-8f05-903a12f2e3ff",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e5244584-7589-4b8b-8718-b716139b644b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a909d18a-22e4-471b-874a-b5751b0c09df",
        "cursor": {
          "ref": "e76404f8-361e-409b-bea6-79335485f86c",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7b4dbcf8-71f7-41aa-ad61-c0ecd9c7f053"
        },
        "item": {
          "id": "a909d18a-22e4-471b-874a-b5751b0c09df",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2ac733ef-105e-4617-a1d3-a28db38c57f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845d2dc5-536d-45f4-984e-2ff84bc540b0",
        "cursor": {
          "ref": "e0765b27-e2ea-4e6c-b8e8-009f352d9c2d",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3fc77d24-86b2-4e01-b12e-db095e24fd9e"
        },
        "item": {
          "id": "845d2dc5-536d-45f4-984e-2ff84bc540b0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f9df2209-0eff-4f71-b6b2-e47d2451d181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7512b3f-65e2-4c87-8617-7524ec80cd68",
        "cursor": {
          "ref": "e7a1fc5d-a4c3-434f-92d0-47863d0dd629",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a913bc6b-9900-49e3-9e50-8828b5849487"
        },
        "item": {
          "id": "a7512b3f-65e2-4c87-8617-7524ec80cd68",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6d65073c-fb78-4257-8589-9bb77d083f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "26613fbb-0f53-4849-9e40-843abda074a7",
        "cursor": {
          "ref": "82a6b6f4-fce3-416a-b0a7-c83d24bf7d79",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ae66a1bc-cef7-497a-9967-dff44ace5ee3"
        },
        "item": {
          "id": "26613fbb-0f53-4849-9e40-843abda074a7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "45e88de3-5ad4-4058-bea5-92e3c9f9dff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112777d7-3d87-4ec2-8430-d9802728f9ba",
        "cursor": {
          "ref": "28410bd9-178c-42cf-ac6d-b08ab4845c6c",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e77ba88b-f41c-4127-8778-6032dcbb39df"
        },
        "item": {
          "id": "112777d7-3d87-4ec2-8430-d9802728f9ba",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "14442d26-d202-40fd-9404-fb0eadb78e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47205faa-a240-4562-b760-22af38a6901e",
        "cursor": {
          "ref": "89b4a90d-6789-4dc5-b931-ca8bcd9b987a",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a021441c-a28b-46b0-ae50-1e3e876e84bd"
        },
        "item": {
          "id": "47205faa-a240-4562-b760-22af38a6901e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b73eeed9-223f-4395-904a-b30a46e84064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd85b015-5e60-46d0-a79d-b0fd2efe5d33",
        "cursor": {
          "ref": "19292df3-212d-41ed-aaba-88901233b10a",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e4c218c6-a362-489d-a432-b709012c4fde"
        },
        "item": {
          "id": "dd85b015-5e60-46d0-a79d-b0fd2efe5d33",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a995502c-6f19-4450-9e23-6fb695b4a277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa2e24c-d5aa-4d99-9a36-8aa3ae3ee3ec",
        "cursor": {
          "ref": "fd0b2b02-89e5-45ad-ad9c-19111319ebb7",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5d1b8e07-3d48-4b3c-888f-53573ca15a1e"
        },
        "item": {
          "id": "4aa2e24c-d5aa-4d99-9a36-8aa3ae3ee3ec",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "03b0a7ef-0fab-4505-8c0a-76da2680e78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379d4c60-17c0-4028-98a7-0e80a3ed33a6",
        "cursor": {
          "ref": "78019141-a9c3-40a6-a600-e81f5dbc2f29",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9e3ab1c4-cf0d-458d-84d1-d6619455359a"
        },
        "item": {
          "id": "379d4c60-17c0-4028-98a7-0e80a3ed33a6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0f3494fd-1df6-4687-9464-6c9792ff0969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093c2084-fc18-4c4a-a17b-f8039499cce4",
        "cursor": {
          "ref": "ef1ec6e5-b49d-498e-b94f-cd0561aac9dc",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0d3fd07a-d42a-4586-acb0-6aad80dfa179"
        },
        "item": {
          "id": "093c2084-fc18-4c4a-a17b-f8039499cce4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4fe0d9d1-4f71-4aa2-9c57-7b544ffc1ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275000e6-da8f-44b5-8ed3-93abb6eae26d",
        "cursor": {
          "ref": "e2abca37-2869-4c1c-a493-ee07256e8999",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1d4c0d52-eda2-4fb9-834f-264b653e56b9"
        },
        "item": {
          "id": "275000e6-da8f-44b5-8ed3-93abb6eae26d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "60e57b1c-2105-4f4e-b6c0-d2b9fc382dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704d7ed5-098b-448a-90c9-dadb81c2593c",
        "cursor": {
          "ref": "ab0f48a9-527e-4f86-bffa-c37dcccd3ca5",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6df8be4d-d673-44d0-87bf-978464df50d9"
        },
        "item": {
          "id": "704d7ed5-098b-448a-90c9-dadb81c2593c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9cdbe25d-18c3-4f1d-a8df-284a8f9a78ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e75e240-6eac-4427-b233-8181b81bfd01",
        "cursor": {
          "ref": "31a0d1f2-85c0-486b-8cd1-2d6a04da3957",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6b7c03b2-6642-4264-9e17-d51d2ef9d0a4"
        },
        "item": {
          "id": "0e75e240-6eac-4427-b233-8181b81bfd01",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2ad2fe2f-3030-45ee-92ea-4ec6ad07e095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d818779e-0fff-4bf3-a27d-1870d756644b",
        "cursor": {
          "ref": "51ef92a9-2c5c-4176-910c-53e090eb1625",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "885f57fd-541e-4615-ab89-61c4ed0a3da3"
        },
        "item": {
          "id": "d818779e-0fff-4bf3-a27d-1870d756644b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "57ad1d2c-4882-4f06-8da8-70053abcc32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68d0ccc-e8dd-414a-bb65-5c66c6951b15",
        "cursor": {
          "ref": "124dc4d8-31f3-42f5-bd7c-6cd075dee33a",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b8d61301-758c-4892-aa40-5a03a9661a24"
        },
        "item": {
          "id": "f68d0ccc-e8dd-414a-bb65-5c66c6951b15",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b5f51cc2-da5d-4b1a-b3c4-d308eeb9076a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f343c36a-d47b-4de2-821b-fde969bbc3b8",
        "cursor": {
          "ref": "a398645a-e0fc-4b08-a2f3-be5cda540468",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "93f7ab5a-81c1-4419-b02d-d9f5b643622d"
        },
        "item": {
          "id": "f343c36a-d47b-4de2-821b-fde969bbc3b8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "00d3f558-a1cf-4b1d-9626-ab3027df0b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb9c1d4-deb5-44e9-ad2c-b27852316f4e",
        "cursor": {
          "ref": "2fe33559-0fec-48c8-abfd-c2c6d048c6dd",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "43f4ab34-63ac-47bb-83fc-e7884404426c"
        },
        "item": {
          "id": "9cb9c1d4-deb5-44e9-ad2c-b27852316f4e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1e464cb6-768e-4f45-9105-c1db0cdbb4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd7190d-36aa-4177-9581-82fd5cf80e6b",
        "cursor": {
          "ref": "867cf30f-51b0-41f4-8491-0be0f07905c1",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "eb150ad7-60a6-43ef-ac65-4b882447a2e2"
        },
        "item": {
          "id": "3cd7190d-36aa-4177-9581-82fd5cf80e6b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9ee588a9-37cc-4be5-a340-8316dc2ac526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee5bc81-ad7c-49b8-83f8-73a90038a927",
        "cursor": {
          "ref": "dd367233-dd02-4274-8b12-ea204e544069",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4ad086a9-a253-467f-a10e-289a88467dd4"
        },
        "item": {
          "id": "dee5bc81-ad7c-49b8-83f8-73a90038a927",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "98669246-7598-4e16-90ce-7c0d408f4dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbdb2d5-5e6e-447b-ab5a-08f8f541ae04",
        "cursor": {
          "ref": "9c900ff7-39bf-47a2-8199-675fd05a28a3",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "36ac46b5-c1ec-47c5-99fb-313ad43793fa"
        },
        "item": {
          "id": "9cbdb2d5-5e6e-447b-ab5a-08f8f541ae04",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b17f32c5-c5e0-4cb0-80e3-4b124b004a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db65dd7-7b96-44d5-8b2a-8e16b8ca88ac",
        "cursor": {
          "ref": "afef5b61-bf2a-4f3e-aceb-319c1f160686",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7ad85518-6cf1-4127-9534-4258b4a75aa6"
        },
        "item": {
          "id": "5db65dd7-7b96-44d5-8b2a-8e16b8ca88ac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c0517f9e-38c4-49af-a91d-8ca724dc93fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bcd9af-2834-48a1-91aa-c8588d729ef2",
        "cursor": {
          "ref": "25c38ee8-1def-44af-ab22-b75b4d0fc027",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "127c9dec-a991-4f56-a124-77532be8c72f"
        },
        "item": {
          "id": "66bcd9af-2834-48a1-91aa-c8588d729ef2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "16f88d66-a1e6-4820-8cbe-628000b32e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c910c2aa-26aa-436b-90eb-0ece1b780381",
        "cursor": {
          "ref": "221ebaf9-3fd2-43d1-bf99-c32299f7f85e",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "34b2f8be-0cd9-47b3-a4a7-88f0146d9357"
        },
        "item": {
          "id": "c910c2aa-26aa-436b-90eb-0ece1b780381",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5bf3c296-cb41-4d38-94fc-1eaa5a6212ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3ed96e-43d4-4d5d-91a5-fde2a66c65f2",
        "cursor": {
          "ref": "a82aa054-ea97-46c0-ba11-b851511fb602",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1b08da3b-581e-41e7-8c6d-903bcf3d9be2"
        },
        "item": {
          "id": "aa3ed96e-43d4-4d5d-91a5-fde2a66c65f2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ca7e8036-4b1b-4358-a76e-76e87fb5096b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537cd485-c85e-408e-b47b-57e4d2dc4ce4",
        "cursor": {
          "ref": "0232d93b-785e-4b22-8bf3-5b6346c6fc7e",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9a81c659-3c7c-466f-a785-6a05a392f94c"
        },
        "item": {
          "id": "537cd485-c85e-408e-b47b-57e4d2dc4ce4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "68a1fa1e-4744-4513-8888-0e2459bf17ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abc2445-6fe7-4d28-bf1b-76f0d70930f0",
        "cursor": {
          "ref": "db1b64ab-027f-480b-831d-97f196db7d2a",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b537aeea-ed71-4157-9eb3-7d82161d60e0"
        },
        "item": {
          "id": "5abc2445-6fe7-4d28-bf1b-76f0d70930f0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6f5f16d8-49fe-45e0-aa5d-d02d6d318592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d6f8a6-5a6c-44ec-b31b-b565992ec9c7",
        "cursor": {
          "ref": "1c3c7b90-5117-48c3-a3d6-fc0dc0f61a5c",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f853ba9d-6805-4d42-a544-32fa87cdc41d"
        },
        "item": {
          "id": "f8d6f8a6-5a6c-44ec-b31b-b565992ec9c7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4e9f13a9-0d8c-475c-a6b9-29e826992e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d02da5-d821-49a4-bf74-d1bd3e691edb",
        "cursor": {
          "ref": "58fd58aa-023d-4ef9-9ae8-f5300d0a934a",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "351bda9f-3eab-4de1-9716-cc42e08aeeaf"
        },
        "item": {
          "id": "47d02da5-d821-49a4-bf74-d1bd3e691edb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "881e60d2-3719-4453-b56e-43737eda86f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7018d6a-ea6d-45c6-aa91-0ef391cad4b5",
        "cursor": {
          "ref": "2a454369-1758-4e46-8768-88c9c5df873e",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "dd2da1b7-5514-418f-869e-6a124db3e317"
        },
        "item": {
          "id": "d7018d6a-ea6d-45c6-aa91-0ef391cad4b5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fc08bf07-1583-41a3-97e9-0f356f8f013a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394ebb89-0345-45d8-91d8-2f319863d20f",
        "cursor": {
          "ref": "c1de3dcf-0c28-49e3-bbff-8ce6b8ba63de",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "31f4370b-a23b-4bda-a630-f0a8c2f53cfd"
        },
        "item": {
          "id": "394ebb89-0345-45d8-91d8-2f319863d20f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9c2c185c-13b6-4be2-8c48-62c299b87db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a12a576-4d3a-4534-b7a5-2661e05fed1d",
        "cursor": {
          "ref": "a5e2e382-6ba4-4751-83b7-ebff6989ec35",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "46b68cfb-c98b-4d43-9f26-db16ba5f53d0"
        },
        "item": {
          "id": "9a12a576-4d3a-4534-b7a5-2661e05fed1d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b9002f1c-2f99-4cd4-ba31-f7a0388daa98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e549f54-7bcd-427b-ac02-2c9bfd6a7b26",
        "cursor": {
          "ref": "46b881a5-5eba-472e-9621-ea42297700a3",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c118b962-2108-4f50-b59c-8a8c039aff64"
        },
        "item": {
          "id": "7e549f54-7bcd-427b-ac02-2c9bfd6a7b26",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d41c086a-9287-4c43-85a9-1aac9449114c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb82005-8f5d-4ef0-b572-1a81304c9419",
        "cursor": {
          "ref": "40482ffa-51d6-4061-b254-54d835b453fd",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6f6b02be-c701-4561-9370-16c2a972fdc2"
        },
        "item": {
          "id": "6bb82005-8f5d-4ef0-b572-1a81304c9419",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b51239f3-75d6-40d5-851f-8bcb9992f4fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5909837f-e16d-4794-81e3-d6121b0e2f8f",
        "cursor": {
          "ref": "09672ce9-8f7d-40df-870f-811492575b13",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ed0ec53c-ae69-4f2b-a6f4-4e1fcd00d7ca"
        },
        "item": {
          "id": "5909837f-e16d-4794-81e3-d6121b0e2f8f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ce031cf4-2785-4387-b06d-2b211021272e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834c4708-9c8a-4322-bccb-4251b6aa4d17",
        "cursor": {
          "ref": "a0cd5e2d-968f-46e5-9e4c-ba762d3b6629",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "96962335-d16a-4852-b0fb-1b9d6d962c7e"
        },
        "item": {
          "id": "834c4708-9c8a-4322-bccb-4251b6aa4d17",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bf43b429-017a-4bfc-9d81-1b7f23e11d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cd1abd-bffa-4709-b040-c9f847933630",
        "cursor": {
          "ref": "0a38f2ad-bef3-42a8-8c6d-e1fecc64e825",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ce510820-1b07-4279-af23-6b24f4ea847d"
        },
        "item": {
          "id": "99cd1abd-bffa-4709-b040-c9f847933630",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9e5f650b-ad2c-474f-a32a-8910194c8a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc8384d-7561-401e-b02e-08b7981d32ff",
        "cursor": {
          "ref": "10d73a8b-7ae8-46d0-b53d-d163542fb1ba",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2567638a-aae1-44f5-9b9d-7e979068bd48"
        },
        "item": {
          "id": "1dc8384d-7561-401e-b02e-08b7981d32ff",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "da6dde6a-c0aa-4753-bca2-6fe3502725d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50e80c6-608b-41c5-a9c2-883d32f06ade",
        "cursor": {
          "ref": "925eacac-4e7a-474c-a572-ef8a83b290e1",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "081bfc5b-c9cb-4953-9191-01235eae5790"
        },
        "item": {
          "id": "d50e80c6-608b-41c5-a9c2-883d32f06ade",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "aa965ed3-252f-46dc-b359-f35e2352c663",
          "status": "Created",
          "code": 201,
          "responseTime": 479,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "cfbd6ece-e5c2-4809-9672-c98908c7ad30",
        "cursor": {
          "ref": "924986c8-4c9a-4cc9-b238-f0acc7af0afb",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e252ef9e-f5fa-4ca0-a017-aea9d366670e"
        },
        "item": {
          "id": "cfbd6ece-e5c2-4809-9672-c98908c7ad30",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "322e5de6-c4bc-4f70-8746-7d4f39cdd0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea3b04f-26fa-485c-bf2d-cd9dddef7378",
        "cursor": {
          "ref": "8c934a97-35d1-4a85-ac00-d1d2ccbe2653",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "db4abe25-7377-483a-9092-dfcd9dc82fcb"
        },
        "item": {
          "id": "0ea3b04f-26fa-485c-bf2d-cd9dddef7378",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d2bb2d5e-505e-4c90-b011-f1ccc656480e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1081ca6-c044-40c5-8e7d-f891ffdad754",
        "cursor": {
          "ref": "57848c2a-f5c1-4341-a11c-72f8b8f91c78",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6c52f276-4309-4ae6-9e72-f404589945c3"
        },
        "item": {
          "id": "d1081ca6-c044-40c5-8e7d-f891ffdad754",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "35b48bcc-5973-4896-92ba-ece867ae3a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d992dd9d-487d-40b7-b566-f27edd7c8ade",
        "cursor": {
          "ref": "078fa7f7-2dab-4210-9d77-b93a4f138769",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3e6ed3c9-fdd3-4390-8edc-7a5183ee152d"
        },
        "item": {
          "id": "d992dd9d-487d-40b7-b566-f27edd7c8ade",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "45e64edf-1ada-400c-8ddc-c6f70ac02371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f84c5d9-f578-40a9-846b-fc5a5c446e6d",
        "cursor": {
          "ref": "9e22ca30-dbb2-4b53-9c4b-be51d572cc71",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fbaf5e31-89bc-4bc3-90f9-b0604cbff63d"
        },
        "item": {
          "id": "3f84c5d9-f578-40a9-846b-fc5a5c446e6d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "319ad3d1-e790-4d67-a0ce-da6be697e3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9630938e-898d-49bf-a688-eda3709a3e30",
        "cursor": {
          "ref": "cfdfb07c-1797-4729-918e-ba18fc71763e",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e8dc9cad-90ff-4c90-810c-ad82e120b31d"
        },
        "item": {
          "id": "9630938e-898d-49bf-a688-eda3709a3e30",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f2a4a3be-40d7-4b56-841f-7d84f59f1717",
          "status": "Created",
          "code": 201,
          "responseTime": 564,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "eaff8381-7b23-41ed-9846-e00cc121ef56",
        "cursor": {
          "ref": "56c02aff-3092-46f0-ae29-82d88e5df2f5",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "898b8d70-2f3d-4216-9c0b-dfe151e16591"
        },
        "item": {
          "id": "eaff8381-7b23-41ed-9846-e00cc121ef56",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "52a2f7a7-38a7-4ee4-a0d4-1efde7f0d9e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d497cba0-f587-4725-a230-a1fc2cd8efb5",
        "cursor": {
          "ref": "84c66779-dcfd-4e3e-abd1-009e01f5e71c",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f5a6d82e-9bab-42b1-a4de-87d398beb260"
        },
        "item": {
          "id": "d497cba0-f587-4725-a230-a1fc2cd8efb5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6856753a-f1ef-4a4e-8c3c-9963ae5bef50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3e82e2-ad7b-4532-aa46-04b061e33813",
        "cursor": {
          "ref": "3143358d-9545-43d4-bf78-4a71f6a04adc",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fb3b16ea-0f38-4b15-9c7f-770b66fa4009"
        },
        "item": {
          "id": "fc3e82e2-ad7b-4532-aa46-04b061e33813",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "286d5043-e2ab-4262-9a93-171f42966b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280048e8-53fb-4dcb-ad12-9f51c5fcf39f",
        "cursor": {
          "ref": "7fb7c364-df40-428d-9366-4d373462aa5f",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "33da52f0-cd73-4f94-b04f-465ef25521c7"
        },
        "item": {
          "id": "280048e8-53fb-4dcb-ad12-9f51c5fcf39f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7af55ab2-0cd7-454c-b0c7-b39fdaec3320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29820903-938a-4b7a-92af-4f218a05781a",
        "cursor": {
          "ref": "35ee20ce-2e32-4f4a-bc11-8b29902f0883",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "50f46727-809a-4729-b0e6-29f867b46c1f"
        },
        "item": {
          "id": "29820903-938a-4b7a-92af-4f218a05781a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "388c5afc-e549-4a8f-a24e-ed8e39e0fb97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74b2c7b-11e8-47f0-814c-8dcda6c595c8",
        "cursor": {
          "ref": "eb4d1ee7-4fb2-499d-a3f7-a748a87f5241",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "66fca708-14a2-4829-bcd4-c81b9becbeef"
        },
        "item": {
          "id": "d74b2c7b-11e8-47f0-814c-8dcda6c595c8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6b77eb29-5f59-433d-a8a2-f6e394f1856a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff4f803-2af6-43da-814a-605c2f42e423",
        "cursor": {
          "ref": "1f8efb9b-49bd-42b3-8be9-6c4477ac8793",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b4f27d20-1ce5-4a60-8ac3-d795993b16e2"
        },
        "item": {
          "id": "aff4f803-2af6-43da-814a-605c2f42e423",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f3eed686-5125-44a4-bbc4-df5d80af7cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672f0a51-ec70-4dcd-b143-e9d77f7e2815",
        "cursor": {
          "ref": "a46bd6b6-e1d0-4a2a-bccd-ff3147f2b18d",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2e80e479-3033-4fa7-8a49-d38537e40a25"
        },
        "item": {
          "id": "672f0a51-ec70-4dcd-b143-e9d77f7e2815",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a31d3dae-4257-460b-96a6-c9faf3c5abe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de33f6d1-0b77-4b66-98fa-bbf350f4b971",
        "cursor": {
          "ref": "bb6d5d88-8de8-4173-adb6-fe6b61b5c1fc",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "cdccae12-f472-4897-b50b-5e8eb689d85e"
        },
        "item": {
          "id": "de33f6d1-0b77-4b66-98fa-bbf350f4b971",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fc25cce0-5184-4c36-8e1e-a57df1765ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "54093763-02db-4321-b64e-082f39b070b3",
        "cursor": {
          "ref": "ac14facc-aaed-40df-81ef-3ddcaca161a3",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "214aa426-e26e-406a-ac6a-584111717f0f"
        },
        "item": {
          "id": "54093763-02db-4321-b64e-082f39b070b3",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "2542d916-2edd-4d80-9bcf-a8fde4bb516f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "3f1cb3b6-6113-4138-88ae-7cbd749b5d8b",
        "cursor": {
          "ref": "65176c19-ae7c-4e9d-9814-19fe14afecb0",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ebc7e9ef-3fa9-46b8-bbcd-23ea0f48f3f1"
        },
        "item": {
          "id": "3f1cb3b6-6113-4138-88ae-7cbd749b5d8b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9d8cb28e-adc6-488b-9166-176c5fc1b68a",
          "status": "Created",
          "code": 201,
          "responseTime": 573,
          "responseSize": 635
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea575173-7975-419e-818f-d9d9f9c4e58c",
        "cursor": {
          "ref": "88ebde1d-a31a-4ab3-980b-92ff1cc95cf3",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e3470b9a-b426-4b41-b0c5-54c5982d8793"
        },
        "item": {
          "id": "ea575173-7975-419e-818f-d9d9f9c4e58c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f061f54e-6f34-4f05-a145-0480be2a2fec",
          "status": "Created",
          "code": 201,
          "responseTime": 471,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6604ebd7-384f-48a5-a7c1-eb1aea92b3ca",
        "cursor": {
          "ref": "d1b58935-55f5-46d8-aa7a-0f1fe8acf233",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "44285f5c-bf7e-4c51-b48f-71978bee42ee"
        },
        "item": {
          "id": "6604ebd7-384f-48a5-a7c1-eb1aea92b3ca",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d36232a0-98cd-4e65-8399-c0e360854203",
          "status": "Created",
          "code": 201,
          "responseTime": 406,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0536fc-251c-459b-a2e9-473ce68b81e3",
        "cursor": {
          "ref": "d5658d7b-f4b5-4470-a112-74efe2bc96bb",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6d51f612-dba6-42e1-a4f8-963a8b7fca0b"
        },
        "item": {
          "id": "6e0536fc-251c-459b-a2e9-473ce68b81e3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a5f3bf4d-74d1-4bfa-9cb9-a9f062a64e55",
          "status": "Created",
          "code": 201,
          "responseTime": 427,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06516bd-c561-4823-b5f2-e5da600882f4",
        "cursor": {
          "ref": "fe587818-9a5a-483e-8580-b470c2e12c6d",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "af76365f-240f-4562-9d46-60e4cd2792f7"
        },
        "item": {
          "id": "d06516bd-c561-4823-b5f2-e5da600882f4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b77a9a89-4935-4e96-8f71-7b639cf2d7f3",
          "status": "Created",
          "code": 201,
          "responseTime": 435,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be006f2-1656-4066-9926-4e65913b82a4",
        "cursor": {
          "ref": "f30611e4-b019-4b20-be8a-f6a578253791",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8bfd20f9-44eb-443f-abfc-9f7c75d73605"
        },
        "item": {
          "id": "7be006f2-1656-4066-9926-4e65913b82a4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "06609f3d-dde8-49a1-9204-86925720904b",
          "status": "Created",
          "code": 201,
          "responseTime": 432,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f15608-7f4d-495f-b258-f6a08c76fff3",
        "cursor": {
          "ref": "9f4219d8-a977-4de6-934d-2736e19c0af5",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8c659080-1b7d-479e-81ab-902275041de8"
        },
        "item": {
          "id": "46f15608-7f4d-495f-b258-f6a08c76fff3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ea5a2113-8b4e-40eb-8579-ed63ce5a9b85",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "46f15608-7f4d-495f-b258-f6a08c76fff3",
        "cursor": {
          "ref": "9f4219d8-a977-4de6-934d-2736e19c0af5",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8c659080-1b7d-479e-81ab-902275041de8"
        },
        "item": {
          "id": "46f15608-7f4d-495f-b258-f6a08c76fff3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ea5a2113-8b4e-40eb-8579-ed63ce5a9b85",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "eccdb4b8-e9fc-4bb2-9533-6ff1889cdf15",
        "cursor": {
          "ref": "32c7e0d9-d3ea-4bf9-bc5c-a95f34096852",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dc5efaa7-df26-45e2-9295-1ea451ed49be"
        },
        "item": {
          "id": "eccdb4b8-e9fc-4bb2-9533-6ff1889cdf15",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "06c45af0-3523-4128-ac48-3349716f3dc6",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "da754ec1-55cb-47b6-a121-b522662676c9",
        "cursor": {
          "ref": "9f95107d-9f0b-4b25-baa2-ec65ec4d124e",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a027aaa4-f7f0-4588-819c-cdedcc7e0d4d"
        },
        "item": {
          "id": "da754ec1-55cb-47b6-a121-b522662676c9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "109845d0-cee2-4ac3-99a1-dff22043ba5d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "adb339ac-67ab-4e1b-b476-15ff0f616db0",
        "cursor": {
          "ref": "46f55553-7980-42b8-9579-1a9a83583f3a",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "555b5d2f-46ef-445e-bbf5-c79756d9a291"
        },
        "item": {
          "id": "adb339ac-67ab-4e1b-b476-15ff0f616db0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0d5ad9c5-c44b-46a1-8a01-bd158b59fa15",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "5655ee49-9dca-4438-a4f5-83c2948622d9",
        "cursor": {
          "ref": "eee82ae0-97fd-4898-832b-2e586f4b6a6f",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c82a6505-a1ba-47b2-8682-7aeb5236905f"
        },
        "item": {
          "id": "5655ee49-9dca-4438-a4f5-83c2948622d9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5d284f20-e6d9-4af2-acc9-25c185919c9b",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "99823883-ad3f-491b-83ae-19cb557e27cd",
        "cursor": {
          "ref": "7cba5370-e964-455f-bc79-e3b51c7df2cb",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7b506e79-8996-45b4-88d9-6a1f2bf1895b"
        },
        "item": {
          "id": "99823883-ad3f-491b-83ae-19cb557e27cd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "09ea1057-4a72-4857-a9a9-6a4ba3c7cbc5",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "f8f384b8-4936-4688-972a-2f61c9205f51",
        "cursor": {
          "ref": "9559c85f-0f58-4ff3-bf9d-1d1934d4e397",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0d415b29-e373-4ca8-a165-d8072dbfc154"
        },
        "item": {
          "id": "f8f384b8-4936-4688-972a-2f61c9205f51",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a376728c-1f34-4285-acba-10569fe16bbe",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "de6beff2-e89a-4da9-8ede-8b152100174a",
        "cursor": {
          "ref": "b39864cc-7c63-4ef3-a1ba-bd28dcac2042",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6bf7509e-0c04-462c-9d22-3c47fcaed8d0"
        },
        "item": {
          "id": "de6beff2-e89a-4da9-8ede-8b152100174a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eead8196-1280-46d9-95fe-457617e0df42",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9fe70370-eb25-4e4d-9cbd-506c53ce26b7",
        "cursor": {
          "ref": "ef0fb212-8872-48ed-a0af-f5c2601dcdf5",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "02e30cfa-0800-4777-a8a6-dfe0fafc3ddc"
        },
        "item": {
          "id": "9fe70370-eb25-4e4d-9cbd-506c53ce26b7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1e8fe731-3185-402b-8ce5-885f3ff46622",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9491ac9f-27b0-41e8-802a-cf808f4ba30f",
        "cursor": {
          "ref": "1ea67826-3ae3-461a-b42c-d2bc4bb36d8e",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "369407fd-e6e8-462a-b585-ecdea06267c6"
        },
        "item": {
          "id": "9491ac9f-27b0-41e8-802a-cf808f4ba30f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c39d3f1f-8e35-4cd1-868b-740c9aa69de9",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "f67bb177-4d6f-4ca8-84c0-83f6d60dab74",
        "cursor": {
          "ref": "dec32b7f-34ec-4fa6-88cd-6d75f156cc4e",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "13ec0289-4811-4462-a42a-4dd83bbba298"
        },
        "item": {
          "id": "f67bb177-4d6f-4ca8-84c0-83f6d60dab74",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8dc6a4ff-0013-4180-ae0c-ac66a1155a88",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "6d9d6e81-359b-47d6-b9f8-ac4028d71ef8",
        "cursor": {
          "ref": "4b2b6b79-8120-4c44-ab98-fe1ffc941460",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5afa0c70-8e6a-4ef5-be0e-ff450519fb17"
        },
        "item": {
          "id": "6d9d6e81-359b-47d6-b9f8-ac4028d71ef8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3e333dd5-8c3a-4f57-8149-369fef4e7d36",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f88200fb-066a-485e-aea1-f0a6d5258924",
        "cursor": {
          "ref": "1371e789-16fa-4c8a-b3f3-b8a746dd791b",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f4e93ad0-6cd1-45a7-aee3-bf403211a8b1"
        },
        "item": {
          "id": "f88200fb-066a-485e-aea1-f0a6d5258924",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "80c4b15a-3e49-43b5-ab64-aa49186105ac",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ef364542-eeda-4005-ab0e-1d53e5a88449",
        "cursor": {
          "ref": "fb2c8662-fd49-4479-a688-1359c473ec26",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6341a188-4896-430f-a20e-eb835e154607"
        },
        "item": {
          "id": "ef364542-eeda-4005-ab0e-1d53e5a88449",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d76f37d7-7c8f-4bdc-9b47-8b7d3e8bea70",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "38f80ed0-a0ea-428d-a812-42564ea214ec",
        "cursor": {
          "ref": "78bd25ad-a417-4043-b0b9-eb6967439bb1",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1dd5df2c-126f-42e1-ac6e-ac6b0bac840a"
        },
        "item": {
          "id": "38f80ed0-a0ea-428d-a812-42564ea214ec",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5fa60f48-bcf3-4cfc-9fad-a61edce55ad8",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3b94bbe2-0dd5-4797-bc14-97860b7cdd1f",
        "cursor": {
          "ref": "f8535b6c-526b-45f7-adb8-347d95db297b",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "969835c8-1001-4861-b264-f4afc61aad68"
        },
        "item": {
          "id": "3b94bbe2-0dd5-4797-bc14-97860b7cdd1f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2c9c7fd0-82d0-47bc-8093-e5d92224fbac",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "d79b750e-67ba-4409-8e01-e493de78bf64",
        "cursor": {
          "ref": "385c01d7-8847-4138-baa7-376a2d5ce5df",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "907a7f23-4f4e-431a-be41-16cdf01f7102"
        },
        "item": {
          "id": "d79b750e-67ba-4409-8e01-e493de78bf64",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "66acc8b2-25b1-4e31-b1c7-17f8b82280ee",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "9ad97ff3-f25f-47dd-b0fa-b2fd3a830fe2",
        "cursor": {
          "ref": "34bcfbbb-37a7-4639-a24a-5f2dc8ea49d0",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b1eeb498-0ddc-47ee-b541-0c1e2c6b6cd9"
        },
        "item": {
          "id": "9ad97ff3-f25f-47dd-b0fa-b2fd3a830fe2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8ac328ab-dcdb-426a-9d4d-dce9df71fbf9",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "cbc6269d-74ec-4bf9-afd8-1b6d52ca10ec",
        "cursor": {
          "ref": "9dfa2f4d-1b71-4b49-97b3-ae137972b84a",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cd4773cc-5285-45ca-ac6a-c23b92000ed3"
        },
        "item": {
          "id": "cbc6269d-74ec-4bf9-afd8-1b6d52ca10ec",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b78cdc9c-29f5-48c8-83b6-27931ef46212",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "b706ff68-4abe-4efe-abdb-be6a4ae1d08b",
        "cursor": {
          "ref": "4d2f05aa-65b7-4c3e-a98a-3c151d1a2a17",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4d6e5e2e-8baf-4c55-9c12-ff6767419a54"
        },
        "item": {
          "id": "b706ff68-4abe-4efe-abdb-be6a4ae1d08b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6a40a23e-3568-4cf1-93a3-c45943b1dc74",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "9b39e16b-499b-4d6f-948d-750d4f578047",
        "cursor": {
          "ref": "76167621-6190-4de5-bcb5-906315437291",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b0466757-fe49-46dd-9ab7-0362635a56ce"
        },
        "item": {
          "id": "9b39e16b-499b-4d6f-948d-750d4f578047",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bb131cd2-d571-4abf-9a38-c27c5e2bbdef",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f8691f72-cfec-4e21-9080-a4c27bbb20b5",
        "cursor": {
          "ref": "eadfa059-2017-4bbe-80c5-2339129a5d74",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2397d671-5d48-4f29-addc-40da16f321b5"
        },
        "item": {
          "id": "f8691f72-cfec-4e21-9080-a4c27bbb20b5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a4526753-c0f2-4cd6-9a22-ac362577f44a",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "af588cd9-3a10-45b2-a730-de3156ed9183",
        "cursor": {
          "ref": "22d12fca-5b59-4e8e-86c2-da0fed4aa5b0",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b6680b2a-1df9-4345-b8e7-a2191b2836ec"
        },
        "item": {
          "id": "af588cd9-3a10-45b2-a730-de3156ed9183",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ab0ee561-e8c8-4a4b-82e6-0922154f8141",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "6897657a-73aa-4b7f-96a1-4f0b64aa7da4",
        "cursor": {
          "ref": "0755a547-0977-4a76-9610-520181dbb3a3",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b6a256ed-7415-4f52-b64b-67dd12fdebb4"
        },
        "item": {
          "id": "6897657a-73aa-4b7f-96a1-4f0b64aa7da4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a4d80001-4d5e-4d6b-b6b6-f367c25112b8",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "c58432b8-da74-4fae-acec-61659cd15dba",
        "cursor": {
          "ref": "4177c3a7-98ce-4a9a-94fc-d8f9a21008a5",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4a063547-8855-489a-94a8-be879f1be19b"
        },
        "item": {
          "id": "c58432b8-da74-4fae-acec-61659cd15dba",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1c7add9e-80bd-4540-b108-cd2d53b5dfa3",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "37c79576-38ac-455d-aa9c-3bf2398f1e48",
        "cursor": {
          "ref": "6e0e3e97-665f-4157-acc6-8a099bb4eef5",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "70be0404-353e-46da-90de-290d3da96e4c"
        },
        "item": {
          "id": "37c79576-38ac-455d-aa9c-3bf2398f1e48",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "47e3cb07-1a84-472e-8cb7-d5f13cf36fbf",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "132ae8be-9fbc-4fc2-ae9a-f3beaf336507",
        "cursor": {
          "ref": "8dda9f67-f4ed-4c10-8d47-c07cdcbb300a",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e2f25fa0-9c08-412e-a863-000377ea8fbd"
        },
        "item": {
          "id": "132ae8be-9fbc-4fc2-ae9a-f3beaf336507",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "15114a0c-e5d7-4229-b48e-02df1bf226c7",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1d8cf4bc-90e3-434e-b319-62b605dee83e",
        "cursor": {
          "ref": "23e5f457-c046-4f71-984d-7b9ff2dbc75c",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3443d579-29d9-463a-b1cd-b384fe01d09a"
        },
        "item": {
          "id": "1d8cf4bc-90e3-434e-b319-62b605dee83e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e12e78c5-6834-4f79-8108-436f077df98a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "ff9440e2-c971-4d16-8059-c98eaf7d45ab",
        "cursor": {
          "ref": "e1962c97-e039-4333-8286-e21c70ff7dfa",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "86c3ebf4-c726-4591-9cf1-432daea0b979"
        },
        "item": {
          "id": "ff9440e2-c971-4d16-8059-c98eaf7d45ab",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "042baf2f-a835-48f2-a340-3665b4b1c7c6",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "42ebce14-ee47-478d-8ba0-911a78ac6786",
        "cursor": {
          "ref": "06fff9d7-d559-47fb-b101-bfd62bc47c3b",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b95c9339-d84a-48b4-bbcf-9a0975680c2d"
        },
        "item": {
          "id": "42ebce14-ee47-478d-8ba0-911a78ac6786",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "261c35eb-882e-4afe-8c6c-1489df0e1aff",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "bd8b0953-b04d-4ec7-8e61-b9366440a3c5",
        "cursor": {
          "ref": "66fbfd25-1037-4f08-9e1a-5d37221ddc29",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b001d135-7445-4da7-a8aa-0734999cf6e3"
        },
        "item": {
          "id": "bd8b0953-b04d-4ec7-8e61-b9366440a3c5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f77e9deb-3162-4d22-bb49-8e57b0795d6a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "50040ce7-f827-4daa-9ccb-d12059c69460",
        "cursor": {
          "ref": "a413c76a-7f4b-4412-87f3-cb695f8c8f24",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f5759759-0683-43b1-a2a2-c5d558791719"
        },
        "item": {
          "id": "50040ce7-f827-4daa-9ccb-d12059c69460",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "58dd9987-d0e5-4587-9ee2-45241b91448a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "35e0fb63-4dcc-4b66-9dca-42a69ff2fceb",
        "cursor": {
          "ref": "cc1975e3-86a4-418e-9de3-1d5465d439a9",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "230ac52f-17ff-4662-884c-dee8d34acb81"
        },
        "item": {
          "id": "35e0fb63-4dcc-4b66-9dca-42a69ff2fceb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bcec122b-3fc5-4687-9511-248e817ea138",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea59f6e8-d031-43e2-9ace-16ff314f9d45",
        "cursor": {
          "ref": "c0c818f8-5983-4de6-adbb-c2208e0a95c7",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "be9948ff-c5b8-4f6d-85bb-a0ab628210bd"
        },
        "item": {
          "id": "ea59f6e8-d031-43e2-9ace-16ff314f9d45",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6e0e5bb3-100b-4917-8011-7c2f3f343e93",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 38,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1171c4f3-f221-401b-9a78-add4bf72bcd5",
        "cursor": {
          "ref": "42909cea-b774-4b79-8af5-18c8bc7963aa",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0a7acabe-fb4e-42c9-aacb-215cc226393d"
        },
        "item": {
          "id": "1171c4f3-f221-401b-9a78-add4bf72bcd5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8fea4529-e16c-4498-a920-4a71e5eeb165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1171c4f3-f221-401b-9a78-add4bf72bcd5",
        "cursor": {
          "ref": "42909cea-b774-4b79-8af5-18c8bc7963aa",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0a7acabe-fb4e-42c9-aacb-215cc226393d"
        },
        "item": {
          "id": "1171c4f3-f221-401b-9a78-add4bf72bcd5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8fea4529-e16c-4498-a920-4a71e5eeb165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530e28a2-a599-48a0-9ace-d3611a8e0733",
        "cursor": {
          "ref": "6e009749-4a10-4d82-8a57-e286fa556025",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c86b6c2a-3de1-4799-bd4d-e3eb27db1057"
        },
        "item": {
          "id": "530e28a2-a599-48a0-9ace-d3611a8e0733",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4c95639b-3de0-48d1-96f3-58ec0e29da50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f720f6-9504-41fa-9cfc-42a30e78c53c",
        "cursor": {
          "ref": "3b61b977-2a4a-41f4-8abc-87ac7704eea9",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ada575c0-862f-4820-994a-1a88edf0cfe9"
        },
        "item": {
          "id": "d1f720f6-9504-41fa-9cfc-42a30e78c53c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "79fb228b-3c48-439f-b1bd-82612b00cd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1b96e8-7aa5-434c-9a6d-5233d699b4a8",
        "cursor": {
          "ref": "117d4842-5a62-4f4b-9c31-f897ab493b3e",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "daca759b-0a32-4742-a77d-95ffc5a342f1"
        },
        "item": {
          "id": "9a1b96e8-7aa5-434c-9a6d-5233d699b4a8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3e53d07d-d10d-4bcd-bbe5-31cec4b3c0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba80195-55b8-49e6-a719-c2bbabe27e0b",
        "cursor": {
          "ref": "7edb77b0-6dda-45d4-b186-380b22b04c7d",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e7f301f9-bd04-4f44-bd2b-844931666757"
        },
        "item": {
          "id": "cba80195-55b8-49e6-a719-c2bbabe27e0b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "749bdd74-c152-4164-8530-85c4dc579bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e51d52-1df2-40a6-939f-cbb6ad6bd6f6",
        "cursor": {
          "ref": "a8521178-cb97-4f1e-a0bc-61fd6b85a44a",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3c3abad8-f627-4c4e-93ae-d50d967e1e72"
        },
        "item": {
          "id": "92e51d52-1df2-40a6-939f-cbb6ad6bd6f6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "14860945-cbc6-4eaf-b2a0-19dc85c42066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a68b74-0c31-428d-a5f4-f95dc2fd9c44",
        "cursor": {
          "ref": "15f99a72-8ef5-4135-b4b7-2e8f8e1f45d6",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "03e1d5c2-ec2a-44f9-8639-dba335fdca48"
        },
        "item": {
          "id": "04a68b74-0c31-428d-a5f4-f95dc2fd9c44",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4c665f95-f384-46c6-8a3d-36f08ba75a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 712,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdba7072-d746-4fb8-9e0e-7262b4999108",
        "cursor": {
          "ref": "b78e2e30-c2e8-447d-a5d8-54d0fcf1c22b",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "277515d9-6001-47f8-a16c-3e57e7bdab10"
        },
        "item": {
          "id": "bdba7072-d746-4fb8-9e0e-7262b4999108",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8189ffe2-f6b0-4094-95e9-18af65e6174f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e97f15e-cb6c-4710-8914-9877b27346ed",
        "cursor": {
          "ref": "4f8e6216-e7f6-454c-bd6b-d5889419bd00",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0483df38-79c1-48e9-9e66-271f14a10eee"
        },
        "item": {
          "id": "0e97f15e-cb6c-4710-8914-9877b27346ed",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b6f28c8e-d50b-4c91-91df-bdce4d5a0928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef2d3f1-b45b-42ad-b8d6-587f10a45f0e",
        "cursor": {
          "ref": "32c76287-db87-451f-8325-12b26768faf4",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4de771bc-108b-45fc-82cf-bc7c6a7bedd7"
        },
        "item": {
          "id": "7ef2d3f1-b45b-42ad-b8d6-587f10a45f0e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8fbc1958-ac0e-4f7b-8544-74c98679b512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffb82a8-7334-476a-bec6-d4356a4a3049",
        "cursor": {
          "ref": "c9fade1a-aa32-423c-b29c-a1dc7db9e41f",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "37ce2aa1-fe00-41fd-b6bf-dc0f0bf8eea0"
        },
        "item": {
          "id": "4ffb82a8-7334-476a-bec6-d4356a4a3049",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d8c35069-9ee8-459f-8534-d2dc2776db9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c3dd65-5e1b-4afc-9f68-664cbccde72b",
        "cursor": {
          "ref": "80c35246-dc86-45ea-9544-cf0c95d3f138",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b5de1089-c15e-4c2a-b2f1-88a99ba842b4"
        },
        "item": {
          "id": "92c3dd65-5e1b-4afc-9f68-664cbccde72b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9fe753e6-659c-4c5a-8692-f57ecd3e9059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ad62f7-7fff-46c2-91f3-78fe86fe239d",
        "cursor": {
          "ref": "e11b9750-f4f5-4c39-88da-6f5f99c93af4",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cc67d739-4f1e-4f8c-a93a-f8be929b8401"
        },
        "item": {
          "id": "79ad62f7-7fff-46c2-91f3-78fe86fe239d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2258243e-ce23-467d-a659-c0fbf07bebad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b209d165-48bd-4f57-804b-69f7bb509a64",
        "cursor": {
          "ref": "a8d49675-ddf8-42c6-8751-29a6baf74d65",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f1d05edf-816f-47d3-a51c-46944ed6f665"
        },
        "item": {
          "id": "b209d165-48bd-4f57-804b-69f7bb509a64",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4df87ee8-7236-4f89-a51b-c17626af2dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d33f37-e5dc-43b2-88e5-385c05990f90",
        "cursor": {
          "ref": "cfec568d-fc8b-4994-b55f-b6e3738b9a6f",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a486cfce-23af-4b45-b588-f769f92b50c9"
        },
        "item": {
          "id": "52d33f37-e5dc-43b2-88e5-385c05990f90",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2eac0c1a-c816-4eed-b038-49e1774df12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177418b9-94a4-44aa-a4c7-99ace50a6810",
        "cursor": {
          "ref": "c5fdedab-d35c-490c-b09b-8048327ddf49",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c3cb3c34-9a0e-4d7c-88ba-8d1dd6f66541"
        },
        "item": {
          "id": "177418b9-94a4-44aa-a4c7-99ace50a6810",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0e7e3119-dcf1-4916-957d-0859050bca54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a0972f-0bd0-4c20-91b4-d432fb03eae9",
        "cursor": {
          "ref": "cee7418b-da03-44eb-8f33-19457444e8f4",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c39e777b-207a-4322-82a7-9560adfa1425"
        },
        "item": {
          "id": "62a0972f-0bd0-4c20-91b4-d432fb03eae9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "78b825de-f766-44c4-8bad-a3ddc21fba8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d82c3b9-0f45-4447-9aac-cd286bce7ebb",
        "cursor": {
          "ref": "dc6b905d-d980-40f1-9a33-f4dc2ad52f2e",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "32f91ba7-9e05-42f3-979a-caff365f19ee"
        },
        "item": {
          "id": "5d82c3b9-0f45-4447-9aac-cd286bce7ebb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8f12334e-39b8-42ae-8b35-2728c27b4bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f667ff03-f71d-4d40-94aa-9a208c28a5f0",
        "cursor": {
          "ref": "51d14ff6-c1d8-43b7-9d5e-e6144eef5527",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "251083a3-cf26-499c-b8d2-6215579f7dae"
        },
        "item": {
          "id": "f667ff03-f71d-4d40-94aa-9a208c28a5f0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cfee4b8c-3a7c-4a09-be42-856cd0118763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee1709a-daa5-49e5-bd56-10cfdf9abf6e",
        "cursor": {
          "ref": "d0501073-2f6a-4cb5-9382-fe53febcc755",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b003075b-ab28-49e5-af15-3d20b0ac683a"
        },
        "item": {
          "id": "fee1709a-daa5-49e5-bd56-10cfdf9abf6e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2b1ce556-da9c-4145-a176-f69c667a3195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8e4c81-31bc-437c-a509-63798d3a4452",
        "cursor": {
          "ref": "ebc70935-0f80-4e81-894c-c41751d4c518",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "af5735f1-9800-4dff-8541-faf0ab2045f0"
        },
        "item": {
          "id": "da8e4c81-31bc-437c-a509-63798d3a4452",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "91cbc63b-35ca-4db7-83a7-0e4cfb043e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2ffade-24f4-4753-b436-17744f168d9f",
        "cursor": {
          "ref": "9e123ce9-21d6-4953-9aef-d8c0b9b4984e",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6115d85c-c88f-454c-9978-cd469812df22"
        },
        "item": {
          "id": "4e2ffade-24f4-4753-b436-17744f168d9f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8db2d0a6-0207-4f09-8245-b2748b457455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895940cb-790f-48ff-aa64-240149b883c5",
        "cursor": {
          "ref": "e5232022-0be1-450f-99dc-1ffd41163339",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "50f14a24-9dca-46d0-8e66-c3034a3e962f"
        },
        "item": {
          "id": "895940cb-790f-48ff-aa64-240149b883c5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5f5b4443-22b2-4bae-a926-63f35093e5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35d2842-0d39-4f06-9e10-39ffdfc4cbc8",
        "cursor": {
          "ref": "d25f630c-9665-4655-aa93-0fd961a6bfec",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ed37c16c-810a-4865-a369-ebc4fc404b2f"
        },
        "item": {
          "id": "e35d2842-0d39-4f06-9e10-39ffdfc4cbc8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3edf8617-c6f4-4eea-9e82-81aaa5025376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1699af4-2b7a-4c1a-9ab6-4ff7485bbac3",
        "cursor": {
          "ref": "e8c39c73-08c2-493d-80a3-e45225df78e5",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9ec245bb-c228-425f-a188-969cf45a4553"
        },
        "item": {
          "id": "d1699af4-2b7a-4c1a-9ab6-4ff7485bbac3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b1753c60-e888-4699-a46e-14aedd472c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d025511-1a9a-4f82-a6f1-6831f9ed9efd",
        "cursor": {
          "ref": "cff44704-47b9-4afe-b733-25f81793629e",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9327f477-8dbb-4021-bc79-a779efe85070"
        },
        "item": {
          "id": "7d025511-1a9a-4f82-a6f1-6831f9ed9efd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "60224630-7487-499d-81a2-2b120c56c032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ce49e3-db34-4f5a-9666-c7fecd018041",
        "cursor": {
          "ref": "896f403e-b86b-4483-bc97-e75e1990d0d5",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "63e96757-bd83-4f77-84a4-ec4235ce7328"
        },
        "item": {
          "id": "e5ce49e3-db34-4f5a-9666-c7fecd018041",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c298a2c6-cc54-4f27-8bde-05230d23dc59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe01b847-9c6c-4df4-9e39-e1569fcf87c8",
        "cursor": {
          "ref": "0c74880c-ba78-48fd-b991-680643c97b28",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "809a7981-0ac2-4c48-a191-85612699ef47"
        },
        "item": {
          "id": "fe01b847-9c6c-4df4-9e39-e1569fcf87c8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ab5e28d0-a504-4972-a8ab-23f8c5289569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5258dafd-f002-4bc5-a64f-88105fc8cb10",
        "cursor": {
          "ref": "45c1550e-b2fa-485e-840a-856fb0401135",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e51a7d7f-00a5-4e20-bd66-fce30f9874f2"
        },
        "item": {
          "id": "5258dafd-f002-4bc5-a64f-88105fc8cb10",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c7934ec5-b981-408d-916f-14369dbc7854",
          "status": "OK",
          "code": 200,
          "responseTime": 257,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f1f4f982-26d8-4b8f-a16a-6544dde14c0a",
        "cursor": {
          "ref": "4d8ea36f-d302-42e8-94b7-4b02b61b3638",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "31d2a88c-e19a-440b-ad3f-60c1c300e4c4"
        },
        "item": {
          "id": "f1f4f982-26d8-4b8f-a16a-6544dde14c0a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6ec168a4-4f13-445f-8d32-2d341d960df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f2d96e-229e-4583-8a8d-aa888cdb90fb",
        "cursor": {
          "ref": "abd5ea8e-996c-4825-8b42-62cb06867cea",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8de32fca-dcad-4168-9f18-cae52c1635ed"
        },
        "item": {
          "id": "07f2d96e-229e-4583-8a8d-aa888cdb90fb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b9398b90-17f4-49f2-95ef-7e627e389fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff32f3e-2b76-457e-959a-359cb6293f4e",
        "cursor": {
          "ref": "f9784a30-0784-4b1a-a5d3-db377321f71e",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2bf866f5-3aed-49ac-84b7-d6acd583ad6d"
        },
        "item": {
          "id": "8ff32f3e-2b76-457e-959a-359cb6293f4e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e3aa57c2-ef0a-42bc-aca0-b9a733ff896c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bde6741-0c89-4cc0-9706-7e4dac784811",
        "cursor": {
          "ref": "5da2d08a-961a-42ff-be9f-57c8a09c5b73",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a88ca18b-2728-4e00-a5cd-e7a882a2fa9c"
        },
        "item": {
          "id": "6bde6741-0c89-4cc0-9706-7e4dac784811",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "60eab8a2-66ee-4a5b-a08a-6c50cbb48e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58d0a56-ad5e-49d5-8bc8-cdd1134389c8",
        "cursor": {
          "ref": "617d4fe8-e14f-4e98-a212-cad8afd78637",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b098c84b-b891-42a2-9d20-b5bfc4530dc6"
        },
        "item": {
          "id": "b58d0a56-ad5e-49d5-8bc8-cdd1134389c8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fc25703b-2f7b-4b3c-a282-162cc57b1dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd68ad6a-f916-475e-a56d-5035e4487202",
        "cursor": {
          "ref": "ec79b190-1bb5-4ab1-9d3a-9649e78b9245",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f68b5ef4-1bc4-4fa2-beb4-56fa9eba0709"
        },
        "item": {
          "id": "cd68ad6a-f916-475e-a56d-5035e4487202",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "da4274c4-7789-44e8-9545-0a97a53128c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57cc498f-26d1-4927-8014-b30e09f80471",
        "cursor": {
          "ref": "84148d76-a874-44de-b5b0-98d2705b632b",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8da37377-d7b3-4cc2-94d9-95b82696e163"
        },
        "item": {
          "id": "57cc498f-26d1-4927-8014-b30e09f80471",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c20798af-3fed-41cf-af27-6fba5a25f3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c599d29-487c-4bc2-b88b-9ebb1e01bd61",
        "cursor": {
          "ref": "a6eab067-f9b5-4921-997c-1ffa166e7f09",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "28af1220-df94-4db8-a5e4-c32d2cfec251"
        },
        "item": {
          "id": "9c599d29-487c-4bc2-b88b-9ebb1e01bd61",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "82cb9c81-ec1e-456a-9c8b-e166f295917f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e85d31-7d6c-4f3b-b76f-97df5b2a329a",
        "cursor": {
          "ref": "8ac92370-c6c1-48f0-97ec-2ee02526bfe3",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0e9ff11e-6bee-4ffe-8940-09745d7b7463"
        },
        "item": {
          "id": "02e85d31-7d6c-4f3b-b76f-97df5b2a329a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8e5a08cc-017a-4fde-ab48-10ff706c19a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e7e6f5-5a8d-409c-9aa7-dc1364a27ecd",
        "cursor": {
          "ref": "5bfc5afe-76f9-4900-866e-72bfbd0239e1",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5602ce83-970f-4ffe-abec-414bf014825d"
        },
        "item": {
          "id": "b8e7e6f5-5a8d-409c-9aa7-dc1364a27ecd",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9ed917f6-174e-49a8-8bd3-5e5079342ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3f61dd-7e5a-42b8-8de7-89c007defa2d",
        "cursor": {
          "ref": "7d30af9b-87a7-4f78-864d-4cca73e781bf",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ab95b282-12e3-406d-8cfd-6281bf447950"
        },
        "item": {
          "id": "aa3f61dd-7e5a-42b8-8de7-89c007defa2d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "996572df-5cba-427a-a4ec-323cf9062f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d93db2-b1ea-479c-82f9-dfd4f366dbcf",
        "cursor": {
          "ref": "14c4a9e5-c7f9-46ce-a725-43da8e8bb771",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9a259b13-754c-4d6a-93d6-18b47f2f32a8"
        },
        "item": {
          "id": "e6d93db2-b1ea-479c-82f9-dfd4f366dbcf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2a22f9eb-bd35-4d7f-b67a-e97b8c677ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11fe9602-677b-42d3-a11e-4b4d759ea2e2",
        "cursor": {
          "ref": "7044f3df-8dc7-4cfb-bdb2-0f81c208b021",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b9dd6a51-c383-4086-94a2-091141e3262d"
        },
        "item": {
          "id": "11fe9602-677b-42d3-a11e-4b4d759ea2e2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9f59ac8f-a318-4abe-9b85-ba4a1b12e664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9ee145-6e13-4d78-92e5-401e6e233894",
        "cursor": {
          "ref": "7fa20be2-ca37-450a-879c-954af4ab8396",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "eb702e84-1de9-42a7-a105-d88157c3b2a7"
        },
        "item": {
          "id": "dd9ee145-6e13-4d78-92e5-401e6e233894",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8cb2d958-f6e5-4ff7-8f6a-fddd65e99dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e61f49-0d01-44ea-8de9-cea62b03383e",
        "cursor": {
          "ref": "15e71529-378f-4efb-b26b-7d21f5d420cd",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7f3130f3-9759-44d5-86d0-981da329ff55"
        },
        "item": {
          "id": "a7e61f49-0d01-44ea-8de9-cea62b03383e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d12ed58a-924d-4056-9057-458c9dbf3311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75eaaec-9c79-408f-8a0f-7a2b89467589",
        "cursor": {
          "ref": "6a50bc4a-1bf7-494f-b630-6b62d9f5b8cf",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9db3e176-e43d-467f-9f11-e7a57e1f1e54"
        },
        "item": {
          "id": "d75eaaec-9c79-408f-8a0f-7a2b89467589",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "199ddc60-29df-4152-9aa8-6069d179788d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdacff1-e83b-4012-a95f-bdca507b5d8a",
        "cursor": {
          "ref": "ca5ab645-3b79-4fc2-9d8f-6c86406a31e4",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "eccc8dcc-b82e-4f61-bc3e-a3691a61208f"
        },
        "item": {
          "id": "3bdacff1-e83b-4012-a95f-bdca507b5d8a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cfdcc8cf-d059-4cd4-a065-6ae3d1d8c454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6af9ae-ff7e-4041-8839-0e9e64f091a7",
        "cursor": {
          "ref": "eb2b2192-5fc0-490b-9d32-c7b245a2f8b6",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "17b51621-76e9-4b96-ad45-e0bd2029f11b"
        },
        "item": {
          "id": "1e6af9ae-ff7e-4041-8839-0e9e64f091a7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3e8b6aad-434a-4b3a-8bc4-1c3c199bbe38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbf76a9-6c9c-4d80-8d0e-ababe1d4910b",
        "cursor": {
          "ref": "6b20c4a1-cc3c-49f2-a17a-3a5adaafbd9a",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "37c9fbbb-d49d-4670-a3de-c6e9ca3d8e40"
        },
        "item": {
          "id": "efbf76a9-6c9c-4d80-8d0e-ababe1d4910b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6c827efe-d900-4795-9cfc-40e4f881751f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c767a557-ed87-4077-b7e2-d525e8be6691",
        "cursor": {
          "ref": "5eb7510b-bd89-4beb-a7d0-7742ffe7e994",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "57fa2126-2b96-4fb5-84fb-3e741ba87926"
        },
        "item": {
          "id": "c767a557-ed87-4077-b7e2-d525e8be6691",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d3d297e9-ea95-4a6e-b10e-e869ae7337cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ee34e5-dd36-4b8d-a42a-a3bbb7f6d857",
        "cursor": {
          "ref": "15c7d41f-9b4e-42f7-acd9-3262949c7a42",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "45ef713a-d464-4f7e-b336-a453705638df"
        },
        "item": {
          "id": "89ee34e5-dd36-4b8d-a42a-a3bbb7f6d857",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "15fc8ee7-76e8-4cea-8ea0-ed21ddc93542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe42693e-3ba5-492b-b40f-760bc4751deb",
        "cursor": {
          "ref": "92befa41-2ee4-48e3-a424-cdc62e0e928c",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4fb3433a-ad9f-492b-9643-e992b8428447"
        },
        "item": {
          "id": "fe42693e-3ba5-492b-b40f-760bc4751deb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c48ba668-ae8f-4e8d-ac33-61e6dfc14e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd0a4a8-78b8-4dce-9b7a-56b2a99ea83d",
        "cursor": {
          "ref": "76d513ee-70c2-442a-9485-b28ccfb7f5a9",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2d9cd600-b381-457a-acc8-f88b040a0b30"
        },
        "item": {
          "id": "9dd0a4a8-78b8-4dce-9b7a-56b2a99ea83d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "753187cf-829e-4f10-bee3-c7c289fabf4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28410e41-e19b-41bc-8d11-1e2f546b1c03",
        "cursor": {
          "ref": "ab808e4a-0abc-4a3d-89b8-08c1115e9b0a",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "087c8956-d512-4f6f-b01b-d5582f303108"
        },
        "item": {
          "id": "28410e41-e19b-41bc-8d11-1e2f546b1c03",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b42a6762-fa77-4272-ac9b-faf610f6ec97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d080807-61a8-47c3-947c-0a4318364cf9",
        "cursor": {
          "ref": "980b950d-0c4d-490a-b5c3-ec4e4e104801",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ac9c259d-aded-4698-b1fa-7ae32dbbddec"
        },
        "item": {
          "id": "2d080807-61a8-47c3-947c-0a4318364cf9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "352d83aa-41da-4bad-a195-3f81954cd86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3287a1-44e8-43c9-9068-b75e9f4ca83f",
        "cursor": {
          "ref": "a32b66bf-24d8-4f6c-b039-0c15f8226615",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "390efe07-367d-464b-b6dc-a1405be07d80"
        },
        "item": {
          "id": "ec3287a1-44e8-43c9-9068-b75e9f4ca83f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5907ed87-61a3-4885-a6d5-c284108401c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60899757-406b-4928-a2c8-872ab4528634",
        "cursor": {
          "ref": "63cd7126-62cd-423a-b2ae-a84fa3c36675",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d7544238-c417-456f-aedb-9082b7d81518"
        },
        "item": {
          "id": "60899757-406b-4928-a2c8-872ab4528634",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "202764f0-0033-4497-92c2-583d605e1be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5303fb95-a81f-4a92-ba4f-d84e8ffbdd2b",
        "cursor": {
          "ref": "7e984f58-54e1-4922-b20d-3b0646e4c64b",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5713df29-ad0a-4c2f-891a-5f4e26edeeb6"
        },
        "item": {
          "id": "5303fb95-a81f-4a92-ba4f-d84e8ffbdd2b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8df9e3d7-2cfa-456c-bf31-a01aa0d893e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c4eb22-6db3-4795-9dce-05df95377d01",
        "cursor": {
          "ref": "2493cf3d-6f41-486d-9831-d2d5f241732e",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e51cafb6-5ea9-47f1-a71f-8ae73ee0787b"
        },
        "item": {
          "id": "57c4eb22-6db3-4795-9dce-05df95377d01",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cd5d5ba1-d9f7-4457-ae27-389beceeac0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6e69cc-f032-41cb-bb3b-ef7a24d86e38",
        "cursor": {
          "ref": "fc97fe68-64b1-4b09-91e5-478cd84f60b6",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "de240c80-cdd0-46b7-8264-03654eb079cb"
        },
        "item": {
          "id": "bb6e69cc-f032-41cb-bb3b-ef7a24d86e38",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8a049f0f-0940-4f40-a851-a0bc3f4fdbd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67cd2689-4d3c-4ea0-b471-61346915bf5f",
        "cursor": {
          "ref": "88bb4517-44bd-4689-b70f-85a99dfdee1d",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8411219d-d1bb-4f15-a796-5f24b0c45576"
        },
        "item": {
          "id": "67cd2689-4d3c-4ea0-b471-61346915bf5f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f83770e2-da66-4b62-868d-2d2c24504153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbf7464-5d1f-495e-a007-299d5d710973",
        "cursor": {
          "ref": "15b07731-fb47-46e6-9d3d-bf22f6d86812",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4897567e-bb28-49d5-bab7-c8d963809288"
        },
        "item": {
          "id": "1fbf7464-5d1f-495e-a007-299d5d710973",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "efca8a52-0a54-4ef9-bbfb-d4ce913aab83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bc24d3-7d8f-4d57-968d-ae7887c66a08",
        "cursor": {
          "ref": "0b0744e3-89e8-459e-89a3-a0625e01f863",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4130432d-cd3d-46f1-b212-511cbaf19780"
        },
        "item": {
          "id": "f9bc24d3-7d8f-4d57-968d-ae7887c66a08",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5cb45e94-8160-4ebd-bdc6-934ceaf3d4db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa04d6e-4b41-49ca-835e-513586e1aa12",
        "cursor": {
          "ref": "696598c0-3419-4d59-ab31-cfa413a64dcd",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "72c207ef-4dcf-4cc1-9c07-f6f4fd6cd95d"
        },
        "item": {
          "id": "5aa04d6e-4b41-49ca-835e-513586e1aa12",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d8bd0096-510d-4e47-a51a-5c3d64ac864d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83996d5a-e5cb-48be-afed-938880f17419",
        "cursor": {
          "ref": "4d68b52b-7122-4d73-ae4e-bba83c618b10",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9f761289-712f-4be8-b9f7-1bee3d0a8c6d"
        },
        "item": {
          "id": "83996d5a-e5cb-48be-afed-938880f17419",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f2f1afa2-f5ef-4840-9f49-00c100eafd10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3b4cf3-ae6b-4fb7-9c01-ef68babe6188",
        "cursor": {
          "ref": "a6f3a221-495d-4e3a-9938-43ab1d20e9b7",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2dc1bff9-14be-4126-be08-c6ff8258d622"
        },
        "item": {
          "id": "5b3b4cf3-ae6b-4fb7-9c01-ef68babe6188",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cc9716d8-6a95-45f7-bdee-42886f7274e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28dcadbe-1fe0-467a-8598-7aed8f15ce55",
        "cursor": {
          "ref": "8d336211-86fa-478d-af19-381e7ee35a53",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6a1452a0-a1b4-4045-9ad1-b8a67c8d268e"
        },
        "item": {
          "id": "28dcadbe-1fe0-467a-8598-7aed8f15ce55",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "369fa25a-0f06-4112-a11a-78e8ac0a9447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61508f3b-ee80-4d5d-8e0e-464b25458aea",
        "cursor": {
          "ref": "64ccb7bc-4fef-4397-b202-4155e581c91a",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "472a502d-14a9-45f8-a7fb-9b1780d782c7"
        },
        "item": {
          "id": "61508f3b-ee80-4d5d-8e0e-464b25458aea",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f686f415-4b0f-4226-bffb-67e12bf812d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd430e45-8f64-4a87-aa00-80add4b76011",
        "cursor": {
          "ref": "0a1ef104-1983-4789-9454-d676c35d162c",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c5e02b43-04d2-4a7b-9e23-15429d5bec10"
        },
        "item": {
          "id": "cd430e45-8f64-4a87-aa00-80add4b76011",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6965bc42-6d1c-4931-858b-3abf22433a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e991059a-09ab-49ca-ab49-a94ba50ce4c6",
        "cursor": {
          "ref": "e88ee0d6-8fcf-4a52-ab0c-5b6de6a2b233",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "354eaa02-bb57-426f-862d-b353afbb58fc"
        },
        "item": {
          "id": "e991059a-09ab-49ca-ab49-a94ba50ce4c6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ce9763da-1505-4f43-b356-73cb262bf242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012c2487-6aa4-4a74-8a3c-8b1dad5d4859",
        "cursor": {
          "ref": "ff325886-5893-478c-9bac-7bb59a149c07",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "507ca642-999c-4ef7-b120-e337a9385388"
        },
        "item": {
          "id": "012c2487-6aa4-4a74-8a3c-8b1dad5d4859",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b05708f2-ce43-48d0-8a99-b992585ffdac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9465e24-9097-45e8-8d94-45cc7d500985",
        "cursor": {
          "ref": "546c53e1-9f18-4fd1-af00-135180871c0c",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d33fbb84-9298-406d-90d0-bfc4904a9d1f"
        },
        "item": {
          "id": "e9465e24-9097-45e8-8d94-45cc7d500985",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "828d87d2-ee8c-4986-b98a-641670dbb51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d81eb2-a954-443e-94a5-34c2dfe8a2a5",
        "cursor": {
          "ref": "e3a4d283-8d02-4e60-9c61-d14ccbf88703",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ca086b4b-4ba6-4abf-b002-f414ff6f696b"
        },
        "item": {
          "id": "72d81eb2-a954-443e-94a5-34c2dfe8a2a5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "48d7a498-8ab4-4cb7-a0a9-4bf043eaa1bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8638fb-3670-44f2-a4c5-973a0abd5be0",
        "cursor": {
          "ref": "e8b7be0f-e62f-4492-ac72-b8773ef68f14",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b4adb247-f162-4ef0-948e-f315736b1f86"
        },
        "item": {
          "id": "ce8638fb-3670-44f2-a4c5-973a0abd5be0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0da53c44-0d0f-4847-9bd3-78102dc924d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd19a32-21e8-456e-9f3a-e7295dc88699",
        "cursor": {
          "ref": "ab02410d-8429-437f-9f61-fc6ee3d0be75",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "91344089-2502-4d4c-a115-e2ef657d8d08"
        },
        "item": {
          "id": "0bd19a32-21e8-456e-9f3a-e7295dc88699",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b16e06f2-f71c-4e1f-863a-7f74cb26199a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84cc695-634e-4356-89a3-f9969c7b9db8",
        "cursor": {
          "ref": "614e93b4-3f69-4c46-b1b8-85f860ba0fb9",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6d997016-1981-4d12-96a1-d8a8d6935925"
        },
        "item": {
          "id": "b84cc695-634e-4356-89a3-f9969c7b9db8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "227ba23b-385e-413c-975a-e3bff814ebd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa656ff3-e34b-4760-8282-594e96d6e353",
        "cursor": {
          "ref": "b76b2155-8058-49c2-9c55-1e4832561207",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "18a7f800-3bf2-4002-88f8-27fe85e02c95"
        },
        "item": {
          "id": "aa656ff3-e34b-4760-8282-594e96d6e353",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0a1e3d35-cf51-4a7c-9f3c-947d1335e158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2fe975-98a4-4619-ae5a-0885609f6339",
        "cursor": {
          "ref": "86167dc3-7aab-489b-a093-a7bd7faaa863",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5c723b94-79b0-4db3-b7b7-6ba9b4bf57bf"
        },
        "item": {
          "id": "cc2fe975-98a4-4619-ae5a-0885609f6339",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e1c156c9-e9b8-441b-9193-3256d5cbabae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49484247-b997-4155-b9e1-2c678b1ddc62",
        "cursor": {
          "ref": "932a80c7-de3b-458a-a110-3198e3d6dbc7",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "874c48d6-166e-403f-8bc5-7e6745f21b3a"
        },
        "item": {
          "id": "49484247-b997-4155-b9e1-2c678b1ddc62",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a8431870-0388-4d55-a8ba-ca1e373c960f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687fb85b-7aee-4ca9-a88f-1b73f77060d0",
        "cursor": {
          "ref": "ebb959be-fe25-4872-8632-98ec8d6cd73c",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a758be23-b025-49e6-9d8b-425377c46a5a"
        },
        "item": {
          "id": "687fb85b-7aee-4ca9-a88f-1b73f77060d0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ce1d6740-509f-4628-9af8-8ad5d10a4e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea87f2b-79d2-45db-a34d-2fd02d471002",
        "cursor": {
          "ref": "806cf5fe-61d0-48a4-9305-b21fbe3af657",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a5546a43-313a-4cf9-b073-234a8519abc8"
        },
        "item": {
          "id": "cea87f2b-79d2-45db-a34d-2fd02d471002",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f9b1785e-1e2e-42ef-acf9-78f8e39bdaf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e00325b-e193-4b1b-835c-a2fb9d2b1c90",
        "cursor": {
          "ref": "02346c6b-e22e-471d-800e-6acc486c3d36",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e2478628-a193-4b41-b5a2-816e4d5d564c"
        },
        "item": {
          "id": "8e00325b-e193-4b1b-835c-a2fb9d2b1c90",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "577210b8-0ac8-439f-b123-5198af6c1f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35bc9245-34eb-4b51-a830-f822f52f90a7",
        "cursor": {
          "ref": "9a970b49-3f6b-4704-97a0-265b072eb82e",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "44d0ed85-6b97-4404-8a1d-d8b38c5c1934"
        },
        "item": {
          "id": "35bc9245-34eb-4b51-a830-f822f52f90a7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d9191198-9feb-46ed-a864-0a54b1af2d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958b611f-5c8b-4560-8fe5-14b292f69bc8",
        "cursor": {
          "ref": "56be440b-ea0b-42e7-a7d6-ff74db887715",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7035299a-f20c-4f50-93bd-3474807af350"
        },
        "item": {
          "id": "958b611f-5c8b-4560-8fe5-14b292f69bc8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "49b38317-d738-4bfe-a0b1-68c58181416f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50901524-091c-46c8-bef9-3bb9a8a722cd",
        "cursor": {
          "ref": "1e1d19f8-2f57-4ea2-9f5a-60a42f0d3398",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0215880a-ad9b-4917-bec5-6ee428056bda"
        },
        "item": {
          "id": "50901524-091c-46c8-bef9-3bb9a8a722cd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4f4ee4ac-c5fa-4928-98e2-177b36301ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b258527-2a0b-4a71-a9c0-027d7c39f943",
        "cursor": {
          "ref": "6cd4c5b6-9c4d-479b-8ac3-6d3c1cd52fa7",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "97f9cd42-c210-44c0-9306-d0ba542bc91e"
        },
        "item": {
          "id": "4b258527-2a0b-4a71-a9c0-027d7c39f943",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7738551b-1787-41a5-a56a-2c05cac49742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85d5db1-8f71-4c85-868c-189db4ec9d63",
        "cursor": {
          "ref": "1def9191-8f2b-481b-a77c-8901950e74fc",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "33ea4f9f-b0cb-434b-8500-309caa49fa29"
        },
        "item": {
          "id": "d85d5db1-8f71-4c85-868c-189db4ec9d63",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "939bb6df-b757-45c9-b08b-ca17f83ac9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a5b0c8-13a2-487d-8f86-de4a76644868",
        "cursor": {
          "ref": "e926c04a-ab8f-4c87-9575-1d26fa41eac0",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "10b861b7-b596-45e6-adb2-b3a263ece098"
        },
        "item": {
          "id": "85a5b0c8-13a2-487d-8f86-de4a76644868",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5528ec7a-7af1-4a9c-be80-e0fa0d993bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbdead9e-f254-473a-8498-22c1a05206e9",
        "cursor": {
          "ref": "0913e1e3-39de-49a7-962e-902f5479425b",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7a82b7d7-c487-4e2d-afd3-4e79de5d9bed"
        },
        "item": {
          "id": "dbdead9e-f254-473a-8498-22c1a05206e9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "11678d05-6e9c-4768-8a38-7dee96527511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64377d63-8b3f-4307-a31a-b5aae85887ea",
        "cursor": {
          "ref": "33cef027-8998-45e4-bb2d-7665984b5dea",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4a32ae1b-c456-42a2-8a42-74c75ef9e52b"
        },
        "item": {
          "id": "64377d63-8b3f-4307-a31a-b5aae85887ea",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bb147c59-c609-4eff-b3b6-d7ca7a0459b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0704be-6058-4c6b-9d2c-a3d57eace2f1",
        "cursor": {
          "ref": "c9b695aa-7f11-40ac-a938-e755dac26ae9",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b1d9452b-959e-4d00-98d1-ab51ac10a2ea"
        },
        "item": {
          "id": "6c0704be-6058-4c6b-9d2c-a3d57eace2f1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "49f916f7-7ff2-4364-b330-0c33f6395255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f60505-5b8d-401a-9ce5-d97098eea9f8",
        "cursor": {
          "ref": "adc1e092-1c67-4937-8ce3-fbc0ad6ae718",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "03d5f000-c70b-4e49-82f8-9edbd699b50f"
        },
        "item": {
          "id": "11f60505-5b8d-401a-9ce5-d97098eea9f8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "aa04d9ba-efc9-434b-abc3-4fc6a1c87200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273ab38b-06da-4c2c-a5ca-d1a35ef33f04",
        "cursor": {
          "ref": "4004ada1-ec9e-4f58-a3b6-404c41fa798d",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2b67128e-3465-411a-a099-3b35ecb2eab4"
        },
        "item": {
          "id": "273ab38b-06da-4c2c-a5ca-d1a35ef33f04",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "84251070-56d8-4bae-8803-1b83b61ed4da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3e6619-e85e-434a-a1f0-a2c05196ec11",
        "cursor": {
          "ref": "3c36e6ce-fd18-4da3-a632-fadfe05ad7da",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "262946f2-df82-4604-a9e5-df076f1f7811"
        },
        "item": {
          "id": "6f3e6619-e85e-434a-a1f0-a2c05196ec11",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a574f7dd-94e4-4df1-bf68-ff9a6e883bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec21d09-5972-41dc-ac4a-6e1b3896abe6",
        "cursor": {
          "ref": "cd53fd7e-b1aa-4f20-be50-a29e328f2b26",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3e7fce0a-08f9-4272-9ab7-e68e08598852"
        },
        "item": {
          "id": "eec21d09-5972-41dc-ac4a-6e1b3896abe6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d082f3b9-e5df-47d5-af50-97510a3bd4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ec4233-f79f-4b59-972e-2907d8f30612",
        "cursor": {
          "ref": "5067d527-7860-476d-af48-866baae7516b",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "be94e094-f7bc-44ae-8409-a34fa7e5eb53"
        },
        "item": {
          "id": "c1ec4233-f79f-4b59-972e-2907d8f30612",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fc8f5f5a-dbaf-46c4-a8b8-6aa15465e0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af4f600-807f-4cc3-9872-dfe86e5d6ff3",
        "cursor": {
          "ref": "90b453f2-6082-4b4c-8c91-57b33f8bce33",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a188c3df-630b-48ef-b776-c82c3d687903"
        },
        "item": {
          "id": "7af4f600-807f-4cc3-9872-dfe86e5d6ff3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3d71a7b5-abec-4728-8958-3217db26acee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e8c94e-76ae-49ee-b7a8-104cbd8bd2a2",
        "cursor": {
          "ref": "4dbe96a3-0dd1-40a5-ab10-966b0f725db7",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "12234d18-5ad9-46b1-bef9-cfd301514b90"
        },
        "item": {
          "id": "50e8c94e-76ae-49ee-b7a8-104cbd8bd2a2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8652e49d-0da6-47ea-99be-d478551a27dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5540b03-1191-471a-bfdc-52ff091cd7a2",
        "cursor": {
          "ref": "e5897ad2-3ae9-4eec-a8ad-f959b188e43f",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ae6d2062-ced2-4f7f-80cd-81e39502280c"
        },
        "item": {
          "id": "b5540b03-1191-471a-bfdc-52ff091cd7a2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "81faa799-aa54-4679-a1e0-f968b2b43771",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ed45c2-b669-46fd-bd88-4f49f0929a56",
        "cursor": {
          "ref": "1f786c22-84dd-43c3-935c-a16e4c3d7e01",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "38126cf5-5bfc-44ad-b75f-7600582b5ec2"
        },
        "item": {
          "id": "09ed45c2-b669-46fd-bd88-4f49f0929a56",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d2bb0fcb-9afd-4673-b393-b67d61e6ee5c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 42,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e1cb5a-1a79-4203-9d2f-a67a834a491e",
        "cursor": {
          "ref": "eeff07d6-de8e-4dd9-bc4b-aa01a76284cd",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "660f4a4f-8e6f-4945-86e1-08375ca6a2b9"
        },
        "item": {
          "id": "84e1cb5a-1a79-4203-9d2f-a67a834a491e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "075dd02d-0f69-4184-b08d-8d21d32a8b22",
          "status": "OK",
          "code": 200,
          "responseTime": 281,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "6965a843-adcc-4002-8be8-c34bfcf6f09b",
        "cursor": {
          "ref": "81838675-17b3-440d-9a1a-debbc3bc5198",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "64a4ef19-9114-4b3d-a262-3020bbeaa556"
        },
        "item": {
          "id": "6965a843-adcc-4002-8be8-c34bfcf6f09b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9e664c50-63fc-401a-98fc-6b0796301da2",
          "status": "OK",
          "code": 200,
          "responseTime": 549,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "952cc505-6294-4722-8067-68897639211a",
        "cursor": {
          "ref": "01d7c524-ad16-4d2d-805f-41f63087a440",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b90f0109-2a6d-405f-8b51-d6c1bb7269f0"
        },
        "item": {
          "id": "952cc505-6294-4722-8067-68897639211a",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "a0976821-2bf4-444d-8b80-c2b39bfc6d8c",
          "status": "OK",
          "code": 200,
          "responseTime": 920,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b03f6af-2fbc-4518-bea0-9affb0adcb2a",
        "cursor": {
          "ref": "9ebc7c88-9546-45f6-aaf2-94b3b1d38490",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ec6314c3-5cb1-4e63-ab5a-b1ec5cbad9e4"
        },
        "item": {
          "id": "7b03f6af-2fbc-4518-bea0-9affb0adcb2a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bc225a9a-b96a-407e-b07b-b98472545486",
          "status": "OK",
          "code": 200,
          "responseTime": 541,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4874e4f2-1237-454a-99ff-9c2e8f077c8e",
        "cursor": {
          "ref": "dcd29f42-0298-4a8b-a5f4-b5fae68475bd",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f9c4561a-899d-42e6-bcc8-f3ee53c2f39c"
        },
        "item": {
          "id": "4874e4f2-1237-454a-99ff-9c2e8f077c8e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38468efb-3822-4917-86d2-8d2e7eaf36e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4874e4f2-1237-454a-99ff-9c2e8f077c8e",
        "cursor": {
          "ref": "dcd29f42-0298-4a8b-a5f4-b5fae68475bd",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f9c4561a-899d-42e6-bcc8-f3ee53c2f39c"
        },
        "item": {
          "id": "4874e4f2-1237-454a-99ff-9c2e8f077c8e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38468efb-3822-4917-86d2-8d2e7eaf36e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4874e4f2-1237-454a-99ff-9c2e8f077c8e",
        "cursor": {
          "ref": "dcd29f42-0298-4a8b-a5f4-b5fae68475bd",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f9c4561a-899d-42e6-bcc8-f3ee53c2f39c"
        },
        "item": {
          "id": "4874e4f2-1237-454a-99ff-9c2e8f077c8e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38468efb-3822-4917-86d2-8d2e7eaf36e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0ed970-204e-4d14-b5a7-6c450d0e32b2",
        "cursor": {
          "ref": "827da173-443c-4c00-84fc-c64b74018b1c",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "565ed8ae-4a05-4f78-a6bc-3bf0c48aba1c"
        },
        "item": {
          "id": "be0ed970-204e-4d14-b5a7-6c450d0e32b2",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d5b9f769-5455-4275-a99c-035c5e35499e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 44,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678060a2-c5b9-436d-9ef4-7c56bf2f01c5",
        "cursor": {
          "ref": "ae0d7a94-1c0b-4cd2-bb08-107f6adab6e2",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "33b97866-1dee-46c8-9b74-1db8e42481e9"
        },
        "item": {
          "id": "678060a2-c5b9-436d-9ef4-7c56bf2f01c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6b54b2b5-d6b4-4757-bcc1-b1e74c294c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "678060a2-c5b9-436d-9ef4-7c56bf2f01c5",
        "cursor": {
          "ref": "ae0d7a94-1c0b-4cd2-bb08-107f6adab6e2",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "33b97866-1dee-46c8-9b74-1db8e42481e9"
        },
        "item": {
          "id": "678060a2-c5b9-436d-9ef4-7c56bf2f01c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6b54b2b5-d6b4-4757-bcc1-b1e74c294c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "61a9fbca-e75a-481b-8663-12c337c30a09",
        "cursor": {
          "ref": "0665773d-22e5-47dc-ae5a-62e93f0ddea6",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4bf68aac-1bca-473f-b46a-3a406ff01dc6"
        },
        "item": {
          "id": "61a9fbca-e75a-481b-8663-12c337c30a09",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f989c76b-2aaf-4ed3-b9eb-02e610a2e820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a136cd9b-d553-494a-8782-b9653d5a504a",
        "cursor": {
          "ref": "18715d11-d8dc-4c09-830d-4a4dffad35ae",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "857675d5-efd4-4d13-a12a-ae6b54099b57"
        },
        "item": {
          "id": "a136cd9b-d553-494a-8782-b9653d5a504a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "eeed424d-b848-4c38-ac26-a9848bf7fa4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "a136cd9b-d553-494a-8782-b9653d5a504a",
        "cursor": {
          "ref": "18715d11-d8dc-4c09-830d-4a4dffad35ae",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "857675d5-efd4-4d13-a12a-ae6b54099b57"
        },
        "item": {
          "id": "a136cd9b-d553-494a-8782-b9653d5a504a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "eeed424d-b848-4c38-ac26-a9848bf7fa4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "658523b9-f594-4643-b1aa-931bb1c47d0d",
        "cursor": {
          "ref": "8b378eac-b844-4422-a80f-30df44b2c62e",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2fa1d614-63b4-4f17-ba0b-64e14779e801"
        },
        "item": {
          "id": "658523b9-f594-4643-b1aa-931bb1c47d0d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3407b110-0d1e-48e4-91a6-50f8966bfe53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}