{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8e2974e8-79cc-48a6-8611-5d329096aa45",
        "name": "Clear Cache",
        "item": [
          {
            "id": "31e32cc0-384a-4419-b3dc-6d0884c46143",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f5e9f1cd-8d8b-4507-b9cb-70e938c7dea6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "64309d71-8ba1-4c19-bb07-d38811e0e732"
                }
              }
            ]
          },
          {
            "id": "659f76a0-c708-4595-9068-2f43c2a936a7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b21ad34-e0f9-40a0-abf8-5553cfc4a814",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "327870ec-6b6e-4bbd-8f20-470dabe4683e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c049baf9-d956-465b-ac6a-c2b1cfdcc044",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "19bd5b7f-d287-4610-b4e8-6892915f4501",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e3d86b5-a10c-4f0b-83e5-2589364ffb95",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be2f8be6-1a06-4eab-a2de-a41f4bf3511b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3cf33ee7-4156-4efa-a309-f008f4214a26"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eedcdda3-e976-4159-9cdb-bcf075b9f550",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5cea5a65-9759-4fb8-bcc8-3f59a2938970"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dd488f0f-99cd-42dc-8e45-65b69c0281a6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b682f9bf-b784-4bed-b129-37ac10a000c2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64fbe358-b4d7-4689-a545-041da22e6045",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9c719c2f-18b4-4331-89e3-33ef5b4c911c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3fa11f51-1c31-4b6f-9803-5155d87f401c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "239bc677-ef18-430b-b37e-239728b75a8f"
            }
          }
        ]
      },
      {
        "id": "f6af9608-ff72-48ec-a930-11a255e3bc28",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ebb5a78f-f032-4e74-a462-6c0f9016c266",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37db3c57-b42c-4d4b-8494-bd6cc6077803",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cc61878a-c298-4388-93f1-d8844743ca78",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40702e34-93e2-4fd9-8d95-72502e177e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b9b9143-ea3c-4b65-ae6a-6fc4c1278f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11456315-9179-476a-bf03-96a678dac5a7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa63721d-8d5b-4ad8-b891-152666127800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3bd1c47-0310-408c-ad1b-57544513d0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1bd734-533d-4a7f-bac0-11f3efa63000",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20bbf36-d272-4754-ab1d-e6bf1e0de9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20b6c337-e0be-4cab-bee7-0fdb05ad103d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c44a975-6311-423c-b2a8-a0b67feae0f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1c080f47-b8cc-4178-ae5a-5c00de4d630a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a402ece7-b5bf-4cd7-be4f-5d8cafa32551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78dfc8c6-c5b5-437f-92e8-3e20968d2158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4032a09f-d6d9-4982-8bae-b8063618c957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9531fd6-9558-442b-8c1d-f3ee3d7ae3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e95bb2-8beb-4ccc-b9db-80e16451a4a6",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9653fd9-d2af-4565-9dc4-e5c2e06de416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b901c055-f919-4464-bbc6-101ca812be97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca26acc-9283-4bb9-a70c-3038697d26ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9986d989-c192-465a-9839-9fca483818f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b9ddb125-d243-493a-8e9a-951ab63a1f92",
            "name": "Positive Testing",
            "item": [
              {
                "id": "90c344b0-8ab7-401e-99c4-483809caaa3e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c7501c9-c918-4865-b15a-f90d53e770a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "18fd4885-50f9-4f7e-ae64-6f0241a3da41"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2aeddc99-791d-4af6-984f-49d4c434e29b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0a54992c-572b-47d3-b5d3-6c4c93faa7b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c30d5052-47eb-4407-a230-08d46c101e38",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f6fa58d-daf0-481e-aa26-27ff383fcefc"
            }
          }
        ]
      },
      {
        "id": "0f71e24a-1aea-4e75-b2f5-e53652c44d81",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1a7a663b-673b-4e20-b350-cbe82bbf1c5c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3971e9af-f1d4-4a30-8328-0ecdf3683cca",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2529fe94-0327-4c7f-9e66-08624e06e962",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34e9e3b-a6c0-4083-a29b-5600b7b408ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed47618-5ce1-4edd-895c-5f1db451ad70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d6afc7-128a-41fb-b4f2-0d1be274730d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "697acbe9-325a-4b9d-bc25-9164baa0f3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725a799c-bbb1-4768-a0cd-3448fed3fa02",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a881d8ff-22f2-4035-af47-29e46f5299d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612d6207-dd51-417c-963c-df76d5d42323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172d59d1-e900-4232-9b99-08ed90240c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f571827-30aa-4fcc-8ccc-c90765a4bc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b196e8c-1885-4405-9d76-fb0e28932c9d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "206f6623-268f-44e1-8c76-63f1dd176537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26fccf4e-2a0f-4517-8e3f-5051e9dbd76d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5534c490-e852-4679-a359-aeeac4ed5926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39bf9b41-9dbb-4a62-8080-60d51fb2ab0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df70637-f211-45a9-b9a2-820b86991433",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c3a185-34d3-4be5-963c-3b9c007ed05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1c9f4e-f3c1-47ad-b7a4-529ad1337b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1dc78c-5347-4934-8fb2-74c92d5f314a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bf23f0d-d5cc-4d8a-bc39-69f5adbbac52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c79701d-ae19-4791-9e13-1e88ccb3fabc",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c922cacb-bb16-4f4c-bb19-f47f61fd95cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744c5256-0a11-4446-98c5-a614a10f6481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c633959-b5b2-4d70-aa13-7f0d41ed67db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cfb5838-df96-4ade-a938-b05cb0312c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6776fc-8de1-4fc6-8892-f3f8f8aa29ba",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0a0278-f0f7-4849-a463-9a7025ff78e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce8bd3a-707e-44fe-b8ad-6e23d75b91c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ced75a3-ed20-4af7-a577-5ff8ff82df8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fe75cf9-95a7-4ae0-8a39-a2252cffc764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f843aa7-1c2b-4f81-b758-40e6ba347225",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a456b9-32ea-43c2-9b23-359f84e61546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3059b49-f6af-48d0-a2f9-2bf6ec45d90a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4931f65-90f5-4f8a-a646-ad522168df83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "516a43b0-4765-4d59-ab31-539e81404aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18de6bbe-6797-4baa-ab4f-afa692cf968e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3216ac78-a9fc-4e7a-8d9f-32ea0042d411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7971da8b-a321-4297-a8bb-5e8d07ff993d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed239a3-ff54-44ea-bd46-357454557959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6954d724-2162-42e9-9a88-90a07bfbeb87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e78ce53-3740-4c5e-b855-d386f073d2fb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e7fb9b-c32b-4f80-a2c8-1eee6d5f4ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba7e70f-82d0-41d6-bd1c-cc819ad9dd5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5be50ff-3624-401e-953a-43c36f468801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dd2692f-fddf-4405-8fb4-1828e050f30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e650d2-a4eb-4b5e-b55d-c5902fa1ce39",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db99d5f-23b9-4b20-b2a1-04d7db30597b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ce4c53-2cae-4f26-935a-e644a8a43c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202dfd24-b637-421f-a9c9-e8159ed2a2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58471802-41fc-471b-8cc5-75ebe2a0f196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7a0180-e37d-4e4c-b1ac-773136a66c20",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c3b7f7-cd43-425f-a1c9-a410fc93f4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d557d02-211d-44ea-8296-f9264d9a6c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b674aaae-08b0-4986-b500-84c01660d17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe572104-b708-46fa-829c-0b5ae5bee9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcd93a0-c7b5-44a7-bd55-7b84a2c9fbf5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0961b20f-cefe-4c95-9a5c-b6537ffb4857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55994ae5-c060-4a15-9bd3-4146ec7bcde2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea888e5-8dd3-41af-9c51-dbae44acb840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65ea0faf-116e-4817-8ea0-67479e3b55a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c6bd6d-4bf5-443a-97cd-c87a555e1fcb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7257b8-c8fc-429a-a625-bcf9cb10bf20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1697761c-ad1c-4ef6-a698-173fb3614e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c84cdb5-e0ab-494c-a6d6-21d2484b05d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5825a655-0774-423b-a131-3cd1c152b84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56aa2096-e5a9-403d-bbf0-320035d831ff",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a143c3b-ad7c-4ed7-ba0e-e413d1335ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39307339-6ac6-441b-830b-cc5ac0e00576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52d939f-25e2-46d1-8cae-b184e51b9b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81860b49-1749-4a9a-8c84-c8e827631823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82191cae-ccb8-4321-899e-0fd596ec7e66",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc1b125-774e-441d-9073-a61c33221eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c2d137d-d144-403a-b8f8-ad46aa6de068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e03450-ab12-4a7c-95f5-afc8e331a37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7724d6d1-2be0-4fb3-896f-0d1ae900b36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0db3bf-3de4-46a0-8e8b-60c45401de0c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9095e7-ec93-4948-8290-03c4fb86f668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c16313-2965-41dd-a257-6c2db061a15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eba9b58-e1d7-4e5f-9880-6ff02792c521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d991116-04fb-4c05-ace2-1d4e90704344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec3ea3c-4105-448c-b077-08edab4cce26",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac22dca2-b608-4406-9937-abe44189e545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b2c59a-9c72-4721-b8df-ed2fdf3a4b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422fcddc-3f58-4a29-8ed0-9b5701263ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3069930-d2bf-48e9-b4ca-3456625aeb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0beb80b-bd57-40d4-8c92-528224da6158",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd0133a-22fe-4c0c-a02c-b8ce4b5675f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7549064b-9981-4a9a-92ec-80cf2eb0049d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6948aac3-33f3-47e5-89de-f4fd0d435cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb9d5bc1-1b6a-4f3c-913e-b6eb21b99603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b673704-243d-461f-b2f1-f5c56af4ad07",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba92cf4a-93a8-46bf-986b-acf3096ad690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a466dd4c-da4c-4c67-aee4-4b5da4d03e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3d1449-bf68-446e-8921-c9abe74e33ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dea78499-20c1-47bf-b1f9-868100bfaa85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6196a0-5259-4649-b34e-d23b5fb3a1c0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54e7c81-0e0f-4419-bed7-be7f664e0a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e666d416-607f-46e3-a7fd-4dd5ca651744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3903928d-cd5d-494d-89bc-77c3509650b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b67a8226-b22a-40b9-ab6e-3d3ae154db3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38d8338-7552-4784-96d5-2d0276a52a4f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59376a56-0eb6-4c96-9715-83f1d226f506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6981408-62e6-4ec4-bca7-d2e44a59a88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a4129f-4def-4308-90dc-108f14bb5338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64da1944-db96-4dd5-bea0-8051e82187fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e490511-90af-407f-a1f7-ac010fcfbe58",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555fe701-eff9-4f9c-b13a-ac3fe342b69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e51599-cfc1-44bb-babe-f9a5b8a094bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00e81d7-a7d3-45e6-aec7-2043a20cbce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00d3e257-1dfa-4480-badc-f3210c65061d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805e5a7c-9e23-4004-aca7-5b252f16cb2d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9ad12c-432a-4172-ba52-743426ca6938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa38ea6a-97d8-487c-8820-1e2acb4c9fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb44e8db-9570-430d-9ad7-240e834d0b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "be260b09-2f55-4f4b-952d-33e6623610ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca5f865-547a-4598-b1f2-511a4bc2af3a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0592b302-9acc-4755-a3cc-0c19991148ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80b03df-b6ce-4f15-9ea2-b8033d8c939c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87627980-6cec-4ad2-8cbb-fb1f25c446e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "92225be8-cd90-46c4-a078-5a5c2bf55cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d009fd8-8809-40eb-9a18-4f067ca5ca21",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd03a31-2368-4613-b25b-3efb6bd782ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc9de31-cbbc-4160-b01c-54251afdaea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b6efb2-29bc-4c27-b45e-1a0b3548cc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "334793e1-d88b-4098-ae7e-83eb8d1a6045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac66929-37c1-4ad9-9c9d-a5f9ad0dced4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e9c306-fb7f-41af-9acd-3471f77c55ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ea2feb-3502-400c-8a1e-57efdf25566b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fe87b7-95d1-486f-a99d-8b3f5351539e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "19597a3f-2608-4854-88ed-41c2d3078085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b059fdb-9d03-4401-b4af-c49d61593c99",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce690acd-808a-48a8-9be5-d0cca84d27e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedeebdb-56ce-46ff-bc2b-fa963478eb0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecf342c-d170-434c-ba31-b579088e989c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88b2226a-5878-414e-a39d-4da9624ec322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c327d41-5a12-42a4-a1d1-cab505f4868b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e53db2-6e8d-463c-8226-a6a09010faf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b336c1-ea8b-4c9a-a7cd-f22a38a5e86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44121697-b467-4bcf-bac9-92d16f1722f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dae13410-748f-4663-b6dd-047d55e198be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650b7830-9458-4de9-8456-7df12cc4542a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9572447-9bee-4ed3-8d45-14cd62906dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98815ae-ab75-4264-b37e-1a8d3a6e3748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761b251f-8492-40d7-8a7d-764bf3be4f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff6d0a6-c7c3-4ebe-8ca9-e82daed888f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e60c70-a363-452e-b3f3-ac7d141198c4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac02beb-27b0-4218-ae26-1df06b924a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d71a83-d4d9-4442-a01a-82c74451e776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd891d44-bc6c-4074-b216-8d005a21fc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b4404e3-2fe5-4385-a127-d35e76aa5e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093fa50d-1e87-4a14-8bb1-67c419b4b79c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a3ffa5-354b-4548-9012-d483be3d5b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641a5ed1-b546-440a-b0a9-728b43ebb3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c30abd0-d793-4498-925a-54c474a3c3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7092ad30-10fd-4ffd-a67b-9bdbe2f4d112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4b9401-03b2-4759-854d-910f8d5c40a0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4cde21-ef2e-4b9e-a6c0-43120713867d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a08284a-f638-4175-be74-a8d2fd61badc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62deaec4-655b-4301-9a32-3befc95973d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3103386c-424e-4636-9451-5566d77f71ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72f13b5-eb44-475f-b8e3-966e3eb542a8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f7de14-2c65-4899-a1c9-d62559ab60d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b869da-9557-4320-8285-be1c8bb2aafe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95819a98-183f-4fc2-890d-613290d7dab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aaa1a73-bf93-4611-9077-b61b35702c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05487df-ae58-4b00-bd8b-5638196215c8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978e25d1-0c5f-4e2b-86d6-85f28152726a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe50ecca-bca2-4172-9f65-f2079c9cc5d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3316d003-93f1-49d3-beb1-5a267b2756f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "012f8571-c606-4d81-93d0-d9e8a9503b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6f0432-67e3-4634-8389-eecf4b794807",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35b7304-86d0-4e9e-b24f-e21cd5092e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0d317f-1a17-4e75-b07e-bdadce263d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71162528-74fb-48e3-bea2-80e395424bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a26e3fb7-f459-4f56-9032-a02bf651cf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c36057-d6c7-498a-a9f5-537b7930af49",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4dcee37-ca9e-4654-bea5-9bb15be5a1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d7bca5e-bf16-4081-9ab9-fb6d292da207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f6de54-a486-4de0-971a-3459f05e1dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6634f5d4-e05d-43bf-9262-52a6c996674c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3dc639-b98c-47f7-a5eb-e0a49d7233dc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aababd9-4692-4837-8841-c1e75b214b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304fc3d1-eac9-44fe-97f3-947600e5dbf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98adda18-d9f2-44fb-ba3a-9540e9da6af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "49e40f74-7e13-4146-8380-f5bbbd7e07c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4dfc70e-f499-4bd2-9d31-eab5c433c968",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9934f3c-c359-4b0a-a4d9-bd83d5f4e928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2294ed2-4866-4e5a-a2ca-f5ef27bef014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4399c3-cf4c-43aa-8c24-3024c3e220c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c23bb90-364d-48af-9d70-dae32dcafdcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f5992d-d7f7-41a9-96d6-ddad96b95d61",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2696a86c-6863-4237-9d07-5effa3038a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ced10d7c-0a46-48e0-8b5d-16a05f8e98e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e441421-8cdd-4cd3-a9f5-6257eaa6b648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf5251b2-be87-4d57-9883-8445c7f2d2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a60efd-5e13-4651-8969-9f2ebfea2f85",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e882d5-0c3e-4b8b-9ca3-88cab6eedd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7551ac-633e-4406-922b-c9c96a24c323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a498e2-b8d0-4e13-bd01-cda9327efbca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d0c8c0-7f5f-4789-81c3-f0b9c68083b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d28e83-07c2-46c9-b505-8393a81726d6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3934eb-0113-4ae3-b7ed-77fc5e7f6132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5061d3-6aea-4b83-a57a-df964a6eb896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a794b4-06cf-4f89-a3c5-153d89e93b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d8a80b3-2867-4e2e-bb30-72f09ea4923a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62c0d6c-e614-47b0-b2f2-e4695c6a3f65",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d047337d-bdef-4f39-8b2e-a65cfd55f411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b6c8e5-3daf-4aa4-9b9a-cbf4a4f5e4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc69e3be-a6ad-42b7-81d0-e01b38d1fdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2125e4fd-d848-471a-b2c2-e1b330d38a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136c8569-ebfd-411f-865d-adee63eb82ad",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b41e18-480e-4e0c-9665-5e7683270210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125d5cc6-defc-4fcc-9998-21b80807395f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf68e61a-d364-4f16-b32b-7107f3a2ab82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f4e905-6f46-4499-aabb-95435aa54df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23595358-d6d3-4ddf-9442-e0c325cbe179",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb6dcc4-c583-4de6-8b9c-6aa054fdd272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0793757-7102-480a-ab72-6799bb23ccb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ce4183-07e7-40a5-b8cc-85acce83ddfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ffa830e-93d3-403f-8fb1-fe2cc1d0caf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f49d53-3edc-44fd-8fb5-bcc7d7c7197e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e34c9d-4b54-4c35-8900-29e012620ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bace5c50-e018-447e-a337-13c82f20a728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe2541c-8e89-4b0b-8e67-82160a5e7da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c9ad37-cb9a-4731-ac9b-9256289f0889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbbfcaf-c58c-4e87-a3de-e14066cbf644",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f59a94c-8a44-4431-b2ec-4aa661bae148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8a9783-d5ab-4258-9f94-0c43f898a993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e4732c-3f20-4fdd-a1be-5724361a8ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "401263a0-62f1-413e-b451-29a8b96ded2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1cb0a3-eab0-4fce-87f7-651f201b4161",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabff1a7-d456-448c-8b38-b4001c41c196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18aa19b3-c533-4c3e-81ac-512bc54dc6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ce42dc-a597-4b10-b574-d143a6c782b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7661d44-b0e2-4b3f-ba88-bd3503e52967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3112efe-2cf4-4819-a828-82f8812a756f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459f6f60-25b5-4d1b-bb84-2988a52764f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f261896a-ae77-4396-80d0-286c56cd25ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c89fb0-0760-42c3-a29f-11206b22dc60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8997bea0-c31f-466d-8e9c-8302a39b9872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0294fb27-34dd-4b31-ab29-5dadf92b8b7f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390726e0-0c08-4954-add3-1df6b85b4b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803b17cf-fc45-4d90-88e0-49fab2222263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e84e51-76a0-441a-b351-2d73f75ecb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9489a598-89b7-42cd-8915-4f780b60ab3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49537e9b-2615-4da9-8c58-6d3e41dbd505",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82875d34-dc52-4dff-a84c-3febe54984d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3f530f-5895-4039-8c5d-55780adb1e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3868f83-cb75-4955-92dd-246f2975e3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd124ac4-4c98-47cd-babc-0ec330b805bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a3df51-9488-4f64-a2bc-2406475b48bb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5178e55-6052-4789-9ca5-bad9cde65eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52eae4ac-5605-4dfe-a4fa-5869fb5ce621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d7941e-67b1-4130-820f-197a02661448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "610daac2-dbb3-407c-bb66-257d90117166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daecbd07-78ff-441d-8713-1d14bb8805d4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "316f36a6-fedc-4f93-b5e3-784ff16fe66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c26cdf-005c-4476-b24a-5bb82f5ba491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44daf468-40a7-428c-b286-b919d7ffa40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "795dae66-6203-4d96-a66f-22c191307f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01738855-66af-494b-b325-195f6ac7c5ae",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1aeadc-863b-42a6-b7de-6ee3f054781b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6445aab-0917-46b2-80d4-10d430ea5aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbcf057-23f7-44dd-af8d-ec98e43fccc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1be514-1067-4041-96f1-00413eacfd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d39aa8-f238-47f0-b8be-e67a2f86da47",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35563731-e70d-4aea-ae18-d885d47ecc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab77137-966f-4d14-ab90-10fc5a420e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e87273-d5ed-4749-a8b0-7a2c4ecf9b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d826c8c-12da-481f-9080-444c2431b1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d088cbcf-53c3-4aea-a490-8aa3c304b7e5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8af44c1-3319-4d26-b108-dbb8a17043ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9049878-0739-4d33-82b3-0c5a949b298c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a2797d-7db7-4788-8898-fd020cecdefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d880d9b-6c16-48a1-bb02-9e106ec4587e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412bb496-b28c-4c7b-b1a2-04efc07c0568",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233adef6-0ce0-4fa3-bdfb-3eb6dc70beea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef3124c-a9d7-4230-bf61-d7ff180e05b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43a3d68-cf18-439e-a8aa-2d1e43549fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d0261b6e-19b8-4619-8d36-2632cc62ba53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1849f52-d028-4fae-a8d3-ad413d318d0a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea899a18-cad8-4b7a-811f-1e8ed79941b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33489099-e593-4292-ba34-3b6aec3f935f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7e9b12-b9e1-4c45-9d19-69e68d7923ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d0ae60a-1588-4faa-ac89-b1258bc42ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54aab749-dc9f-4891-83d9-904776d94768",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56254d06-1719-4cb7-853a-8d9ead0d261b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2c6059-02b5-4fe1-9cf7-8962682100e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5a5c74-17fd-4121-85ee-ecea1e45cb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4858c62-15e4-4eed-b035-1870213841ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5e2223-f851-41e0-a831-fb5df3b3ad62",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951f6313-8eb3-42a7-8bb9-edbfde71f3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09bdfd52-f13a-4067-9a61-fca09e2259aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b02b440-a299-49af-8c93-878f529a8c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0eea0f4-1585-4678-ad71-b8d697c398e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d364b8f-0d9d-4e92-b738-f15434f9d7ac",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ca1ead-6435-47cd-b0d4-09b25c14c4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d713c96-8ab7-4297-8a7e-c5d31422ada1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3159cd7-8e8c-42a5-82bf-7e34882de59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6983c0dc-3aac-4252-a6ca-456ac114a7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc29cb65-b94b-4708-b7af-dc8726ac2139",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17156c5d-d0f2-4dcd-8ac1-7e0c44424f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731dac45-4700-4095-a74e-0bf960bb814f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9332100-36a3-435c-a050-fb0384157b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac25943-7337-4a28-9af1-676d1bcbfcba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138e6d22-5c2c-403d-9c83-778f6d51ddd0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48c795d-8d1e-4bd5-8259-8d2108b144e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc99aac-435d-4efe-af8f-561c3f93c46d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281cf089-112e-4d27-8240-c888d81b1730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a35c83-26e5-4b59-b908-338e00a74de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c00ca3-81bf-4052-9796-cdb741fc9f6a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f252a9cb-08ca-4cb1-9012-00feefe59e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fda7579-0c8e-490d-ba80-e857e3e8b881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa0d7f0-9a09-493b-9117-f3c03d42b28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "407e17e8-6c09-403e-985a-c1de13d64ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f4f1ca-6edd-41b2-9420-dbd06accdbcd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761c868f-b958-4093-86ee-d303c5c11c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9989f3ad-bef6-4e0d-9b6b-4e5974434cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451903b5-631d-4913-9e6a-8a5719f70c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb88f17-28e2-4432-8a1b-4d0fc22e9b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba47a04-3202-4a58-8499-0de0acec7286",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3513e878-f2e1-4265-b671-869ac4f62b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d914b2b4-b966-4bd9-b455-170abc2ea221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d04587b-bcc1-48c1-9ab8-a61fb8e2f0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "675ab032-2771-4dd4-a317-a97ac8bebf5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29aa2a59-cbbc-4f3c-97a7-4b80a82105d4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d311590-631e-472c-ab3a-167b7a41d151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2543a990-e3e5-4623-b57c-b849c95e26ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685efd4b-67d5-4a18-aa74-e65f2d548460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b14e0711-c843-4af4-af05-50b20ee5faca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079cd2e9-a15e-4730-aa0e-a21bdd3fc1d4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6854b1-9371-4015-9133-326500f182d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732bba82-3398-479f-85cf-3d3a2fba50b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f093bf4-946b-483f-a4c8-57705d373120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9309644f-c2c5-4372-88f4-714c23f95d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f29668-ec3e-4896-80fe-20acd28ea49a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac58326-c094-45c7-8bcf-d8cfbc5fa004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d474bc57-c980-421a-b9cc-5999d16d6f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21875c7d-abca-4e0f-b4be-ad17c5497a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a682f22a-c22f-431a-b174-eaa1ddcbde89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3bd583a-213b-4f79-8012-5ea9c840153d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6912e45-6241-48ba-badb-38822b3be3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc447ecd-497b-415c-9034-6f02a53d364c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe031d90-8bbb-467b-8468-4808bb821a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d23554d2-f4e9-49e5-8d7b-8dc470b9755d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042246da-057b-45e4-9de4-5619cea0ceaf",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4b9ad6-f5ad-42c5-998f-5f346f8e730e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40390e37-0686-48a8-835d-0b2fc1418778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c69e625-69a8-416c-9ff0-a09119093253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4cca419-eba1-4c06-bf5e-32dd5b89d8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e023d8-5a36-40f3-8fa6-121577081b9f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab022bb1-31d3-4379-a16e-27a64778dce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973cd9ec-0dbe-431d-a018-a07ee7b7ef3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4923e034-6265-4ed6-989f-1b72ae8031d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5c4cf82-71c1-40d7-94a3-2ed017517e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ebbeee-40d0-449b-8437-3ee8f8241ff1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e170f27d-201d-4ce5-bf5d-20bc13d1149b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bdd5004-1875-49fd-a211-8afe251eae41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d63050-5101-42ab-88e7-9bf38ca7be05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cac9a80-973a-4c43-9b00-5f336f3bcdc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634b82e3-2189-4ad4-9b99-ed9edd6c84bd",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "decdd862-cd31-4d3c-897d-6e862e2a8551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6174cf-e76e-47de-b968-9983e3256091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0b6ccc-664b-452f-9652-50df84aabc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5aaf583c-4e09-4708-b754-205591c6eb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60570c6b-2cc9-4610-839f-07ada6d1a158",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f075f9-4a58-4bb3-aadc-ea2cdeeb39eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ebdefe6-746a-4b90-8468-587185c33ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5779294c-b2d8-469a-9367-37bf60d01d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7f5568-5887-42fe-affa-408a06bd8656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bc6782-8705-4d87-9b18-249e9832289c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c80397-f6ec-4f4a-b90f-fa2fc7859be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "909bad23-acbe-41fd-b11b-6e10e4c09e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0535643-8deb-4ee8-9da0-1a08b704e4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a99a28b-5eeb-48bf-80f3-ae9b0367513b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764f90fe-526c-4293-aecf-753e3d0ed850",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31255f9-266e-4b0c-b3b9-f4c29fde2b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a496a0-ac9c-40ff-aaee-615d4c154df8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02cb997-4716-43cd-974a-02858e6ea751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45257e10-b340-4b21-bfd4-f132afab871e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d896156-90e0-4be8-a4ed-260d38e9d0e8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e35cab-d2bc-4e04-b4ed-d769d74d3874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9d1a9c-32f7-4930-bce3-10003cad50d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df10edc7-6a0e-4fd3-8973-5156d46afe67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f779fc8-33d0-4030-8486-fa667b40c45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abac7f0-f103-425c-a109-ee2b8865cdba",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41420357-3e0d-4f1a-abc4-2d5fd48e6cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00cb94ea-a65c-44f3-97df-ee35851e26ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea1ba8f-c07e-4002-8a1e-272256feadd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "243b115f-fbbc-4852-b7db-b39352dd4691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd860ac-a7ab-4a00-bb33-a7427482dd03",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc00bbb-88a7-43ec-9be8-9e506243958b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd7e535c-baba-4a73-a186-f67b4d57643e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b6a577-2dd4-4327-ae60-0ba09b6a1861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3584f28a-cac9-4a8e-bb7a-26441051dda9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5621378f-50fc-45f7-a33b-451751e93239",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec04e1bf-f962-4525-9c19-7e210deab861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8519025-e583-4dbb-9dac-b1f550e96dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83302fe-ccc3-4bcd-b067-b7c77bd298f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a024fc5f-26e5-4c7b-b338-09110e0960d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae782be-479d-4b88-9f3f-9aaa21a74837",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f01a00-e2ad-40ec-8084-ac0a5147f0b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40cf96b6-1861-4f63-8634-b4e7258eb20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c52ceb-bc91-467b-aae5-9aaa8f54a0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "22a25441-c9f2-4da5-9fb8-cdb810123acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1cbfc0-66de-4988-bcdc-3d3fa90f6fb5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99575ee-69a7-4bf8-8164-0b8ad1656450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c45909-a4df-4101-9b33-6f3bcdecc99f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae81243-c4d7-47ca-9635-d76ca7fd8113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d90e818a-4eb1-4b05-8b6f-aa5336b6dafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7600cb-dd45-4618-a791-dd3ef85678a2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74cdb6b-a151-4719-b139-82edda661ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3868f35b-9114-4f39-8ced-260ade07e8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371f9a88-49a9-436e-af2c-8a8509856bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2ec145-d6f4-4997-8ea6-9fe26a8e554e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19741d6-e07c-4ab1-9bfe-ffda841e3ccb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc90fefe-8bfb-4a93-8a9c-829d984935ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26d906c-0ff1-402e-bb43-1938d8ef0f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9040b501-3c52-4a11-b674-f04b395eb51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20073a88-e1a9-4893-a03a-f4d18094a17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91500f43-082d-45e3-a2d8-a06e9e6e4be7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3002ff-8399-48a6-996d-efceaa2dc4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c7178e-5631-48a2-9f9e-44f93ee55b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9211c475-bc98-4206-a3d0-446a63b88035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e89e40b6-612b-40c6-8285-3f87e0635075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5561edbe-b0d2-4ed8-835d-09639fa44601",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3447b40-81b3-42f2-9355-af41e42cd670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866ca297-9b4d-438d-8ae2-0623ae320f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3364d200-f77d-4bef-9c54-99171c341b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af43b189-ab30-4d06-95f1-9e27cf918860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b5e972-c395-4dd8-a8fa-f30f22e846b4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb45110-20c8-4231-bf68-97b5e193d688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27021987-c0d4-4d19-b912-8813b9be3976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828c42bb-9a4c-46fe-a359-be68d4679d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "32f16e11-4726-43f0-a50b-b5124f22501c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052a684e-348b-4eb2-bd02-8b006da93559",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7175d6c2-ec74-4ede-a653-eff97575e1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be02b512-a322-414c-bd37-3731719f675b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f11f8be-5bf8-4292-99ad-e71923bd57d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "02383a78-5d15-42e2-9c42-19dd09905dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2dd034-40bd-4dc1-b6ea-14cf92585ef5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6b879e-4f0f-4089-8d1e-de76f1c09191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18fd5a10-da26-41bb-adfc-55fc41efa519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21850f0d-f71e-4762-9551-a388348b591c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "56c9d75f-c4af-40db-bcd7-99efeaf71406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000f1fc6-63be-4504-a087-34f8121e9b30",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dcb58c-fe27-4e24-9c70-7b96a0ff6676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b45606-521b-47cc-be2e-3f211f8f86bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a20203-f9e4-45da-aaf4-931a291699ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f7d478-b6ec-499d-9428-a4cfa0077b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95e8994-f754-40c0-b567-97f4cbf80114",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9a03f6-7e56-4b26-a2b6-59a7b594192c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a753c49-ec05-4bf0-9e67-b2598ee3f822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d233dd-32da-43a6-ba4c-37a47a5261d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "339116ed-1f7c-4a74-bcab-06c884e97d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f44603f-a040-47d6-8b0e-4c1299a71073",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86fd7e6-d18e-47c2-8191-089f7a900c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0868cdf6-6e88-440f-8c69-2ab4181ac86e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e356a1c5-868e-4d87-9c99-d7577a09ad5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9b2fc97-8c26-4397-85ea-0e58f3b45ed8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "62f0a08c-7c4a-4630-8456-73c74eac9ab6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8799a26f-6f92-4d8f-9c88-4c0406e7c9b3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a530c628-f909-4e82-a46a-7ed626b2eba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6e5afee-2fca-4e35-9f1b-2fb3c5bbdf72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5c28be-294f-432e-929e-d14b45b58c23",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "aa4658fa-628e-48d1-bc72-30ca8b17acba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b02806-57cc-4d37-8fd6-890c2dfc43fe",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbd2369-0dae-49c5-bc81-56f469386e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b16cfd9a-33fd-47b9-8286-f3db28550811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9baeaa-8066-460b-84c7-05602dc2b49f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ce4e7064-4266-4f79-8499-b151a7b680ca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00d3d84f-7261-4d4f-a233-cc79da6c4072",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84690e52-e057-4d67-b77e-c4871aa9ab13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5c198a7-1502-4355-9f5d-64840161ce4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "217da185-cc59-47f6-a88e-f2adc779ae9f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "45df4455-5430-453a-8435-f8c6de544d6c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "537e5917-8b48-4d95-bb88-76c639874b58"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "18c83474-6990-4e57-9985-29790702932d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c5a99d60-a098-4a88-a1e4-36ceebe0fdb1"
                }
              }
            ]
          },
          {
            "id": "9c5f295f-c225-4158-a965-4516d70c241e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fdb6ea50-c925-42f8-8594-b383b99e4c25",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7aec6f42-fabe-45bb-abac-4ddcd9bcab51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "22fb1ba9-1d86-4faf-9ab1-75d021fc8edb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ed02005-f9a7-4058-88a1-3628f212517b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0757753-0601-4c33-a1ae-429d14092e59"
                    }
                  }
                ]
              },
              {
                "id": "716c03e4-2a08-4340-8515-80bb2d7c8769",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65e33fdc-0e62-4932-a896-44e9768f5cdc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b07965be-6464-4b85-bb63-03d191dd50af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b059a05-32a8-4e5c-a17d-ae103385ee58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "53508103-1035-43c0-b406-693f78925e9c"
                    }
                  }
                ]
              },
              {
                "id": "0bb70960-2a04-4b7d-a29b-ce9ef24f5a5c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a601c9d4-5579-4d54-9463-073d6836e601",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc183c5b-2763-4999-ba91-7ffe82c38bcc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9b78610-1583-4c59-8c39-5088e819565d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "05558a41-55e8-4abe-b361-3fd84216c7cb"
                    }
                  }
                ]
              },
              {
                "id": "c2cd86a2-d149-4a74-8e2a-ee5b7d7636e5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b2e1af1-bc77-4bc8-81ad-53bfb71de0aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "793400cc-3ac4-4e1a-80b3-93a32f0f806f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27c69905-e415-4bd8-8eec-32e2903010b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fcf74380-1f13-4073-8fe8-b8c7c21c9950"
                    }
                  }
                ]
              },
              {
                "id": "b145fe51-f77b-4b2b-9ade-d83ce0e8738e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40bd7eaf-f372-4613-a6f8-41f98221fe34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7ea6db11-7a49-47c5-aa35-122eabb1abbb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f5ab4f8-6567-420b-90ab-ca5ad3c2dcb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "685c25f4-c79f-4a20-86d1-541d1f32c20a"
                    }
                  }
                ]
              },
              {
                "id": "36271dfe-c647-4794-aec5-871fdbda8a14",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "675a8cb4-2638-4612-bb9e-4b8a7e0c21b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7ad33a9-2f6e-46a0-b12e-34641333eca6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4b0a0d6-2c35-480c-84c3-69ee96a85458",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "45943d00-9c70-40be-b4ac-f4ec76e81b53"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "817decd6-4060-4394-a787-1d9a968ffc16",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b4d74c2-1803-446e-b7b8-8bfad738ac87"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ac1d7e2d-17d2-4068-a2f0-f4f1c9cfa31f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aafc102e-1b71-4e44-b1a3-dc28060bbf96"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4036dc46-2128-4a2c-b6ce-fde8252face3",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0b7b2259-7edf-4603-921d-06145cd18e40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26d5fb25-2497-4684-9364-5b8c943361f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "adb9e196-35e5-4c8b-9ac2-ea0297385d1d"
            }
          }
        ]
      },
      {
        "id": "bed2ac28-1db1-42a2-9710-f3ff78744756",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "22a7e4dd-8557-4603-a9d2-309e57c346c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d41ac03a-2a4a-41e7-876f-ff9a061b6cc9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "995bf65b-197d-4849-8207-3b6ea700c046",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b817fde-29a5-4b8b-8b37-c9d4023388ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a69b8253-ad10-44aa-b991-2f42a1a395d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381141f5-11be-49af-b574-eea9796ef1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "454d0784-3e6a-4cd5-b3fa-e998f5ddc14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a76a0b6-a8a2-4218-b983-4640f1acb196",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "792d7594-48a3-457d-94b3-414aecea7705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c952ba5d-866d-42b3-980f-c6b4d10ca63a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54665c22-9529-4ca4-8bc9-12a2e23ea9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d3b2ad-3398-4872-82fd-b5092abed50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41a70e5-0123-4b3a-808d-3f72b9c99d39",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d499f7bf-5187-4c4f-8346-a810aa7a0584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa278bb-ca3a-4316-bf40-08b6ce70e9dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f12f5cc-fce2-4013-be04-b8a4bab95f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1dfd3f4-82df-4168-9813-0305255e381f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4243df44-d2cd-4d7e-bafb-40a05b90773a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bceb906a-0412-42ea-a4b5-5b313c6dd658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f7f962-574f-4ed2-a12f-94c9ad38c195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8487684-b4e6-4dd6-be58-237522bbb799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "25cd15fe-1947-4691-9128-6ecd391e2ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cbb74d-8b0a-4da4-8ab7-563eca84fd76",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677853b7-df4b-4313-902d-cbec498ae29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7bf3765-f0e8-4b2c-87e8-e8c8c8088618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f112938c-e298-47c0-90bf-08f2024391ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8db00dad-e73c-4faa-8278-176cdf2aae68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28145ca6-d17e-4d29-b8c0-a28446952b27",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2bf6f43-c4d4-44a6-80c0-3c9ca96dd5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a81ffc-f1a1-4de1-96c8-eb9921603ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52aafe3b-7b53-4a04-b6b2-9ebe4f3be39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ada81152-29ca-4cca-a399-5397c45287ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9bf443-bf3a-4361-bb5b-acc4facce22a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4398bf7-5991-4604-b9be-c1c57b117ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0098f3-736a-455b-bfba-fabed513daf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c55ed0-19a8-49c6-8f08-76d0003f8d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f800ff-0d1a-417b-a2fe-ca0aaf837fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7003f85-280c-454e-a83c-904bc082a7c8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06dbeb8b-b3e8-4805-b3bc-0167870e01e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25a7cc1-9a8c-4322-9b88-a52906d335e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9497740-65ae-472b-8e04-b2230a921f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df75027b-9de7-43b0-921c-377010eb17a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a78d3d-4e81-492d-b9f5-615f8b27086e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a4b8f7-1eb1-4643-8b1c-9e7dcd2fb317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd149c1f-72be-462c-bc6e-98b1c4da401c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09a23d8-29df-423e-92f1-0b0e800798de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e837049-ca2c-47f5-aaff-3e7a749daa79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99164af-d57c-4eb2-8c16-664fc3fbe08d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2551863d-b49d-4e3a-a7dc-0a369cdbb58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1376408d-b5be-402e-9f92-ca497b7c79e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9871601b-2969-4f32-ae31-7d5b8965e744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c1c891c-a224-44fd-9b0e-b1d264d22036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47efd640-763f-40ea-9b2a-dd4f6aee693b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f262858f-9aa7-46dc-a1b6-859b2013a646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e733d948-5711-4aae-8da8-eda193e66cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7489aa54-e947-4847-bd23-d26367525aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b6401b61-e00f-46d9-973d-d0e727fe0476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2cf1d50-2b3e-41a1-8b1f-f95f22199a81",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba3a502-d2d3-41c2-95ab-541da9268dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948e91cc-7301-44c4-9d0a-d54145341af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1e83ac-d7d5-4df4-b092-19ec8f4eb3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9705c37d-52c4-4978-9d9c-6e4d7894d4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6b102e-11d8-408f-81d7-bbfcf6b69598",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14399d9-814b-488e-9ede-5fe85430d29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb33b9d0-537b-4cdb-ac60-85237385f5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a87032d-31c4-47a9-afcd-6d799414bfcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b164bd3d-ffc8-4e20-b3ff-9e3a789518cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be00dc0-d188-4777-83a6-f5d210ebe097",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb41e5c-9ca1-4f9f-a8ca-753c63e15e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31116b97-4337-4d57-8b9d-fc885ce129c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9d3af9-57af-4ff7-b2ac-e705dd82369c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f16fd542-e041-4696-9483-fd1aaa1eb47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7cfb31-a1d1-4077-ad6b-d0262892748a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d764610-58b6-4f50-ae77-3fc1f102e313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5d1e59-d345-4e8c-a8ff-32dbabfe90de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72666338-55ae-473b-b169-c2a0290f4d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f83fe9-d076-4c60-a99e-66e01d487f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cfa744-3026-4087-b490-d924272470cc",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b39a8d-13ed-483b-92e6-c9c2df0830ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4f7430-62b3-4e44-904e-96fe48c2fc50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab53d2c5-60c5-4746-85c1-2053781b5a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "471dd4ba-617c-4ff3-b94b-6f8bbb539bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04a9fd7-173f-4108-89ba-1fb4a92f5920",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e1918d-5330-4954-ba33-ba21f1f11b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9e9a81-afbd-4f52-87a5-7b597db8a496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb984882-af6b-4dab-b473-4de1d53fb23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "98636e64-5cb6-4a8c-a16d-2bcf68664aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41215afe-5bd9-4e9c-8ec3-06010a3b3bd4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e797390-9735-4afd-9dcb-f0f5979bf76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd14361-465e-4397-84be-90da7a128eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca110d7-f47d-4374-819b-3e610fbfd95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f050f1f9-0d01-411e-9f0b-213853032fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d685ffcb-d6f0-4357-bae4-42f6da8191d6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c655b20f-e2db-4cec-9384-a0d5980f7034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d36b6f-43f7-47f6-b42d-cae608b12364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff64bf76-2661-4f44-8529-0a48e77a3e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f571059b-259f-43b5-b708-d740480c083b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a50fee8-7469-4a90-b667-9d17d5584f91",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d5e2e3-8a33-4e07-ae69-d6440f6a4db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7a0329-9c48-4bfe-9c25-c6c43c44e09e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0585a0-1000-4283-82ad-0ee3fd3af13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "309330e7-fb1e-4119-adeb-4a80cdedeb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7549fe8a-0fcc-4f18-8cc2-7dc9e93d2ec5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4cfe48-c8fa-4b76-b26e-30ae413fd8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6391105b-1167-4016-b38e-05832732404b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4467cc6d-0e71-4f6f-b6a0-fe311469450b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92709f32-468d-41c7-bedd-8f8ed3bb6cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fbcd2f-fc56-4df9-ab56-c49e9b197d6c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7276fcfe-bf24-4723-9b80-e97e1840cf96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd05ce0-15b1-4a9a-9fbe-6d87fc3afb06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de14c81f-2b82-4ecb-9051-afe13ab5fa82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87b0d967-ce4a-4d10-99f8-0ac8fe7031e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d2b892-9950-45b2-a2da-7533a3c505b2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3b05d9-d063-4a2b-a39d-167dc7f1f748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8662742-5605-4a1b-9579-713f9c18ed89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f024279-153b-4e98-a4f0-32f8f4a68ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74e2ec45-47c2-454b-9fee-adbe02dedfbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10cecef5-70a5-4cfb-9dbf-f14368b7fbcf",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c815506-2792-4b35-a0d1-98223c415ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54313e5a-8352-4dd2-a248-33b641dbbfbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9145c8b-e2e7-4d3d-9fa2-0aedb8f8d390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69403312-c2e1-47f5-a86a-061c29439a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375f3b32-3bbd-445e-93de-fbd39d977139",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc30f33-fe70-4d8b-81c2-4366c9a260f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b68ef9-c5ce-4347-a029-8d888f15a8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c540c6-b179-4765-a69e-5fd7edfe08b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8808c576-051e-4aad-8f59-00287c1d6586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a540802b-ab1b-4c90-8826-50c4a08c7ffe",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd5c827-a910-4183-b3e9-a79c18355330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2116c55c-c10b-4093-bd6c-ddcc8615ddc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08de895-d43c-4ad1-ae63-6eea3f1925fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aea58072-6915-4f4a-af2d-2ee3081a4866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2c5741-2254-493e-b58b-c6b2a5b06b4f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1599c6f-eb8c-432a-a111-9ba440c2395b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733c9592-c155-4714-9025-f4ac9c9e78e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11502cd-5b4d-4326-8495-c9a00b8fa774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96021e17-852a-47c8-a6be-6e84efc2fa5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262cb3bf-34f2-492b-bc62-f5c41bf7a461",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86f199c-51bd-402e-b9ef-cfdafd6a4e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb1d31d-f279-499c-8b33-6a459ca1ba08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b60bccb-4e52-4397-8008-0ff44dc0e672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce88afb7-d73b-42ae-8c65-8b92f574e4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcbb995-816e-4cbc-b9d7-08e7bc5c78f9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7496b9-4f56-42e4-a349-1293c5e7bc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89cf59c0-6ee1-4e81-94b4-748795ca5795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b209f4b7-b09d-4fcc-861c-b329933d80d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5466eb41-a684-4723-aeee-3aeb578ea90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf5e9d4-1fab-472b-b42b-6d1b283ab08a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73389f39-65f8-4711-98b3-6b5db8d59b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2deb515f-5f6d-4edc-842a-c1fc327f747d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513fba5d-683f-4849-b59f-c6e0429d48d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9065320-c385-4910-ade5-21eb35ecb084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12195422-19d5-4596-96a3-602e7d8d5f6a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b15368-87a8-490b-9efd-1f81fb232464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43805709-a374-42f0-a982-7007bc17c939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb27fed-de0d-4e97-8193-04c43d05fea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3871207-377c-41bf-b3a3-b31f5a0937b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6697d92b-a08b-4d13-b22e-e552543f1ecb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841404d7-72a4-4183-852e-e3f99104536d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6647ffa7-debc-4695-a188-6df4f68fb85f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc524c5-6fa8-467f-b724-1af444ea059a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c176d2-3582-4cf9-a5be-283d8d37d75c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "218d9b62-f735-467c-9a8d-10629e737cbd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb64c8f4-a0ce-4885-b2ff-9ef30b8bbbad",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f1ef2a-3438-4c03-8744-eb5c02d9ad47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45b4ac28-92ad-4c92-8784-8f888f56ce7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69101a33-f50a-4211-b04c-05d6b6013c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "815defe8-85fb-4555-8161-39e3df691d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3820da40-6439-40cc-8484-7fa5f91636fd",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58940a9-6a62-419f-921a-3c149a9d701d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "069331a2-e3b3-4a33-a6b2-721c22f21da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09cf9c50-55ae-41d9-aa40-37766c02e188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "238d875c-b2d2-4b90-9b1a-f44b78158931"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12b43c28-1c8c-4e75-b30b-18c675f824a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa3dd9cb-1931-4099-9d7c-efa600027303"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a044333-f102-4c79-a8a9-3ae5dcd0902d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e1e82e9-c40e-44c1-9997-9468b570f0de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c82e068-f45d-4766-b241-f4d4599339cd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a150c999-9ba4-4ad9-aa06-8059e7d7aae6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77c789e6-9ab2-4260-a3f1-5b5785b36ec3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61a3ce8b-117e-4bd9-81f3-1e291b591fa4"
            }
          }
        ]
      },
      {
        "id": "661e657a-96bb-43bd-a999-174f1901f69a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "05f2eb6f-f422-4e44-818f-bf587fc9cc93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab78fc16-6e58-4c0d-9f08-af6d15afa94f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "93dccc2d-0197-4f5d-9d04-603c1c8f6878",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce641e24-92e6-4913-9778-2c6db05dfdd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7955301-2bc2-44e0-ad58-774a515917a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef9a7bb-6044-4db3-8a56-c3d06419ecf1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abfd562-3981-4845-aa8f-365c642cceff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c286d2-bd58-42a2-8150-594d1dfdde6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f0f25c-9301-4bd4-b754-13c4535e0aae",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce3fe79-3750-482f-9e53-d10e2b5c53e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8962671b-8e2d-42c0-8464-facf6e99157b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a80879-d8ab-4d36-a9c0-02fdeaff069c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b72f0c-c8a1-40d5-9022-2dadaa13ffb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58daa21f-c571-4d3c-a5f7-e6013291cdd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bb52d3-9a8c-47f8-aa49-a3111e985a7c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bda471-244b-4438-ba2b-67e278819491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e17497-7187-47a6-97f8-53415d779696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4235a3a6-70c3-438b-95bb-15e2cc221463",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78990bc9-f9ad-486f-9b6a-b8bacbf641ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46575fa-b214-4a80-9617-9c839ab4ece9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82598166-9e3e-44d0-bd15-d70deb12a054",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b003265f-50d7-45ae-a8e6-ac533d0c6455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a11c4ac-b5f1-4087-bd6e-303902a33513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72907f60-9d9f-47eb-8259-c98e2ce1862e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce00e577-eb70-4d04-874c-642d7c797d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cf4138-3ed9-4fbf-b621-7581d4204dcd",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c2d3b0-64cb-42c1-a590-e5b0833eea90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd170322-c940-46cf-ad58-98be47a4e780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94954fca-f04c-428e-94dd-0951565106ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5511eaf0-74e7-4d17-af1e-1f08b1da809b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a654b65b-e428-46ab-a720-92f1a2d688d4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8e9050-c680-476f-96cf-560ed97ce0f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d400e1cf-f149-4508-aebf-cc6e224d9410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d40039-9e46-4ee9-a4ac-f3811cc96ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135132bd-156a-4bf3-8b9b-930d2261f3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf83ce84-7b49-435f-aaed-25e2a6ac980b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a290e9-1a03-4595-a573-660fbf334961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5024cd27-d1d5-49aa-a536-de446559cdac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0be0e54-4cc9-4043-9c13-b7d240707264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac19aee-7ae0-49a5-b442-3ee05c9d1862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48841950-fb45-4e90-b08d-a18972b8ad87",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2c63f5-d1a1-4ce5-92ea-222f77fbc33b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cd2c8b-fe98-4ce2-b212-13fa660610f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9249f029-3928-4779-a262-56f68b7c4597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f36b4a0-6d55-4f9d-b79b-d49d22812788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57729406-900d-4bfd-9491-0b9a1b2f89fa",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2bdf10-e46a-42f6-9c5e-d4a736f02eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e55ff7-6554-4c84-89d6-5a281b97f565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "619a1cf4-cde7-4c24-9bda-7c6ff3ed29c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26dd90fa-4683-4ca6-8843-a7c7321e9e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf9bff6-68af-40f3-a126-0796487f2b7b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d553f7ed-882a-4697-9dd5-5907813573c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efd758e3-4476-472b-bd06-2b21c5913178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "457e70b8-a597-489d-8f03-8874a763ee25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "065782e0-6654-4ef7-b114-8179bd372715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952e465f-0cd0-4a6b-a99e-c3135c20c221",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf969efb-3864-450a-8769-196605577727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e11e9064-6343-444d-9390-8d844ef60060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "509df031-aab6-4d36-a361-86f09dd2bf3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15495830-9091-490d-8749-7a050e7f9886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d75655-564a-4fbc-b02d-5c298d52466b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e581df7-8668-4539-bdf8-b4e6b6a53ff4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a57d928-72f9-401b-b8be-d98ffeffef6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb85935-c277-4490-909e-f995536442a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a38c130-d88e-49fd-a926-acc0a72c991b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2e1f60-e488-46ac-81d4-65011bf30f69",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00cbcff-8414-49aa-b3e8-21174a0ab868",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a2ebebb-51a8-4256-a258-88a338f82aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f232ddd3-2421-4f11-bc6e-549e1e71cc9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec79887-075c-481d-a209-21857c35fe28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7330ec94-0ecb-48f4-93b0-d5fc4e2bbb06",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a36a51-50ab-483d-aeb5-95b0f0a86778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38eedbf1-1dd9-425a-87f3-a94692fea70b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6d4f3b-7bb5-4aa6-8fe4-c7ae93854cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4331574f-7738-4bd9-a486-801afa13590b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e973b9a-1a35-4cc5-aa41-fa2a034f616f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba85932-b439-4d87-bc22-26a09de7dd2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65fda075-293a-4313-9aeb-359ed332924b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c15903-c382-48a5-ae8e-15b260ade27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f8b51e-d930-45aa-9a90-ee5948df90fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61dced9c-3b85-4c0d-8ab7-9cdc687aec9b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d61da0b-1ce2-47eb-948f-4e494573948a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4b900c-e4c1-486c-8e41-170051a09867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded012dc-d172-4522-bf0a-0bd823b3c6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a1c5df-6ec9-4a93-b35b-e7e7225c39bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d447769d-1694-4889-85be-397bb8e0cd34",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6607fa77-9942-4395-bdf7-b0a3827dac67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07be4001-b147-436e-bcc0-f05c907d80a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c80d683-64d4-4b68-adf9-395a5c76b242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734dba69-73de-4792-bb21-045bed9e82ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce83074f-5ac3-4cae-9433-11635b7592cd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9ef033-2fc0-40dc-97bb-fa0f6ebbf84d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a97cb21-1f56-4157-b0c5-feecb2c4573b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af7458e-4948-489e-8d33-e29ce0a2c98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87253081-1479-4bb7-8edf-7f71186896af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3bd449-317d-41f1-bcb7-7a02b11f8e15",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665fe765-c75f-49c6-9fae-9f6fa1f89b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5c7f830-159a-49c9-bec5-1d6ef245d8ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e036a3-c2c6-4a59-9b78-36b3986a290d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba671b60-63e1-405e-920c-d67076ebb29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03ebc3d-e2d3-4e89-ba51-981fdd4afab9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd69d11b-9117-40d8-a4d8-f625e710941d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f631e3-2c0a-47cd-b321-8b81cc917f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eae4514-0e65-4185-a567-1f80ac31fe41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d34c55-686e-432a-ae48-facfbd832eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874a610c-6c2b-4864-856e-b4fba119884d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9112129-46a2-49ad-a228-d252f847bcff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "567ead9d-2e72-43f0-924f-adcc254c106b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2faae3-46ac-4ca3-af35-b2b65e3b4084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c612ad-dc4b-4423-8d25-9446ce65428e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a3b9dd-1ba1-4330-a9a0-8b0fe3d4c955",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2204c43-e11d-425f-a4aa-a8c937a2890f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a4e2492-3584-4ece-af94-0a62661c5e17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a56e3d-5c7d-4761-86f7-a7f2bc471e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148a6a21-fe7c-4ea0-9bac-f31244f56cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3298fa-c8b2-4d89-9834-037f90b12b8f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34f0e8b-3470-4f41-8434-77f5a4cda038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61fe2271-1342-4317-a203-38faf13c2a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6deb8c62-9859-41f8-914d-a5bcad6f611c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef31184-04c2-4668-ab17-4bcad535ff75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1de8ad6-06bb-4c45-b964-a0e065036a6d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b302dcb-aa38-409b-bb5c-59bdcbd46d8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a04642da-6e21-42f2-9dec-4e1baaf6d55b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9926be-78bd-4539-8b9b-86aac6ceb799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf0fbe8-2332-40d5-83ee-14956aad9a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1413a7-1379-425e-800c-eea6b04bf83e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aec72e9-2b2f-4e62-8b03-2e0494cad983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a96f2bd-85cf-4a58-8960-c93fc7696a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e00534-1474-4c3e-a73a-e74e41c690d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d1846c-d2c5-4d56-8460-2765d6cd4ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a03d32-71b4-42f6-b84c-b26497fcdfec",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6686d1d-0d7d-48d5-8740-8416551294e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08b15086-62e5-4103-bad8-3c916ffa5165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4838c48-eec8-494a-a140-12bd01f872f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f90e7db-a641-40ee-811b-e3ba1c08f1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b0a783-0bea-4570-aa3f-a2f06b1e259c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887d89e8-68c5-4f2b-99c2-79b9c719d42f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee390323-17b4-426b-8a00-ad5a1793804d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ba5de8-212b-4151-a101-6fe79148a6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b863e940-001e-4e4c-b4b1-9a157a2cdd4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcb4338-b195-4ad9-8ef6-ad162ad779bc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbcf308-ebba-4c4a-a13c-985afa6343a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77e97acd-730e-4c2c-aaa4-b93e2f35b9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ee68ce-ff6c-4cc0-9098-e5cd49b90da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52bcb97-6418-446e-8ed5-336f29a888a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b99f953-2ec5-4b79-9bc5-a360072859f2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24067e78-9801-47b8-8636-f6f287877ddb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8299b9be-ab68-4f21-8ed1-3ab6e2a3f478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "245f1ea5-48e0-423c-bcba-fcb4d0757910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62618e8-eead-47f7-85c6-c21abeea5750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9b8775-8753-49de-829b-6c5724380cf5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7735f5f-f24c-47cf-9ab1-49eceac02efb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d8febff-092c-48f7-a058-2d8e72529d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21eba61c-7632-4bfc-a45e-479f0ec96c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e895356-4ce7-4728-a493-d6ace68bc708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0a0449-1fa2-4253-bd1f-307fff5de418",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fbeaac-3133-40cf-aa93-d11385c23837",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2529afdd-a960-4ef0-972d-811472c7de26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e89837e-1b38-49f7-86ca-e23bf4c2ef17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d367f880-2365-410b-bf66-11a5053503e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9576ac35-5fff-40f4-a233-e7cb4c25639b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b928d622-057c-4b82-8e30-b5522c9841aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa70963-b63d-43b8-9e98-fc73ef2a7f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fedef66-b8e8-4d57-934f-39e87636be96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f033b51-dd5c-4cd3-936f-5b193fbebf60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1a2c9b-2cab-49d1-8192-b6860a72ff01",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d101f62-2b6a-4436-84d3-fc1ca51f9c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef15273-a75f-4f28-8562-4b96f4a83f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee80d1a9-600e-481f-b909-dc8411c435d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eaed846-67fe-4390-850a-31bd5c9beebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8b695c-cbb2-4193-9902-1274a13b52f9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c52deb-1922-4ef1-aeeb-354f01748d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27881033-240f-419e-9563-cbfbb658ad56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799c3ef3-bf28-427c-8402-906d8ee4b414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a0fecf-6bd1-45b2-a68f-8b487f333de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720c0e90-4f17-4c3a-98c6-1021232313b0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2958b143-d88e-4035-87ac-61949b397a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1fe6e2-070c-429b-9458-f9ed1b68f08d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0e5a1a-f903-4df1-8d71-4f0c2fb9c685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4aa0c94-152f-4c82-96ef-f4fa4d27e817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438497ba-45ae-4556-bb6c-7be500fe85d9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c78bd83-d0b4-4387-a880-cc2855a4f5ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "118845f8-6bf2-4cf4-b578-cdd3ca350a2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "062a1faf-1b2e-4fec-98e1-3273633f2888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19bc7808-2e95-4a41-8f23-7a591de6f445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12ed3e6-0186-4765-8c00-ec95be660a82",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7da906-0928-4522-9a1e-f5a8108e735e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6159e061-cff5-4f15-be5a-9f8d441500e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db160ce-7a86-4932-82a5-38d07e1f8c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6249962b-e66d-42d8-add9-45214d54b525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfb8b45-b8e0-43c0-ad46-8b82f00fbbc5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352d40bd-5bfd-49ec-a18f-ac8406b22023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1464b54-03c3-4b38-9d55-58b3294d2610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "223668c2-0d51-4965-a5db-565fe4a9f676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7397dac4-73cb-4a08-83f0-3737488876b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0cba47-3738-47ba-b502-5a646306cd01",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917f9f90-974e-446e-bce9-955a3e6f4275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c1c26e-bbba-4148-a1c1-bb5f88d2087e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfafb45-3401-4dac-925f-0e86db609f03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f7a889-5607-4973-94fd-bc4a3ab84fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07684f2-01aa-4344-94b5-fc4d7145b3b1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5f0b77-ef42-4b96-8a21-83dce9f46b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df212a72-11f4-47cf-8db2-37c1e9c2540c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ea1959-454f-4e45-89ab-562b04752601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d91b446-d3ed-434a-a536-73ea7fb63081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679a1e59-f9f7-4606-a982-bdd0f192b8f4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5881779d-3002-43c9-820e-0e6bb157bd33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8516e448-3595-43ad-984e-74645c94d504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8385f5-ad69-4691-9ab6-29c048d23b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77864a4-c1d6-409c-92d2-225d9e73c07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28428b68-827b-4810-b2ed-939c4eedcd9e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bf2a07-3b7b-4a49-90b0-e13197116154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43940fe-bcb9-43da-a924-9aeeaeb18751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa4ad20-1472-4708-bd29-5eb0e6b46d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8d02cc-f06c-46a0-be52-83345638fbd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe8501d-82d9-41d8-a76b-ce32bd88a335",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa88ed6-592d-44a2-abc3-50fff5fe972c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd52cc6-e261-4e2e-ad9f-546de0e4d2ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44a0917-1fcb-43c0-980a-0d7c58e84cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc514b6e-9222-4fa1-8cc4-46e42162d1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3475bc2-7f0d-4055-a902-cf71d97f4464",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903461b2-e3a4-4490-92bd-728e306ff363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99970434-e270-48d2-831e-ad3bb7a1427f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f597d7-6049-41d8-a197-affb9f3473b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af814832-8f5e-4b6d-819e-3b65933a2221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4551121f-d395-45c4-b2ab-1b2a570556d9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a762f834-e975-4481-b4b0-519f509c1e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c586fd76-c544-4292-be6f-e49f95eedcf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6e2c55-6ff0-47a7-83fb-cdd2dd269c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd2f4d5-119b-476b-91bb-612f79ca7eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556a3caa-0f85-4cc0-a43b-c347e5f297a6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c9eb3d-c4fa-4a06-bd07-0fe8f63ed16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb553acf-ab2a-4db2-b6fd-7632624815f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bdb9a9-03c5-4e89-9fb1-76b4e010320d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d874a4-7732-45a6-9153-153b9c549ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ae738c-1666-44a1-baae-ecd5ad94052d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8face3-ab29-4b7e-a304-dcdd0e7b89f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "491c1236-fee7-43d1-9984-896bbea2c5b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae93ad35-b6e3-493a-9337-3012886a201e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a0b5da-401f-4851-882e-d2b6b7ead113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d925ec9-b467-4ebd-ba61-96953cb4bb72",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c655f0-b47b-49f8-a4b1-cdeb04a9ea94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3bd6e1-19fc-432e-8543-373955e99394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22668d25-d1d0-4878-8f42-79eec651c209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2472f5cf-f3e5-4442-9d92-cdb42ff5dfd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a1ce14-4e0a-473e-a1ab-7b753743ed8f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70abf654-57ec-4fd5-98c3-e68758b93ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e83d19-d6a5-4ed6-b0ba-3db9082c52f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "203cbbdc-bf14-45b4-b7f6-d31481529622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ab36a3-5bf3-4169-9a72-61cbb247a444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251df23c-d511-4702-9b87-32735bdeae5d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b705a063-ea29-4abb-af8d-5f6145fb936d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fffe082f-5e69-4dee-9257-2202268991a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ac068b-96a8-403b-a50f-2b71a18c22f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd931feb-9147-4ffb-8b01-0bd4f11d060f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97cb93a-6400-4bae-b0a2-cea4fcdf6e00",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c20fd3f-6b55-47bc-86ed-cd25897a8fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd5e200-2677-4c07-9989-1299b51c0ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf35beba-43fc-4db7-a986-4744cf9572a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bafe2dac-2cb1-49a4-a0be-7f40c55174be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772d3085-b4be-4d0d-9ca9-d3996d83f4d1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3d2fdb-9818-49a9-b554-b8a64e47edfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638de01d-dddb-46d7-9e6c-acc0d0db5299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff7e609-0262-4da9-a582-43b9098a26a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f8f919-1873-493b-a927-c29ac5ea611d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef31f6a-aeae-4825-b8a6-9c4879070bea",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70dd864c-aa16-406e-9e5b-1b996af428ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c7969a-6f78-46c4-9945-e50483ffad09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02fbc26-9997-4a77-aaa9-4c74f2bf0ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed21cc1-9aac-4a58-98d2-ff5d2b7cfd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2fd6e0-74c3-4ef7-b070-faa14592f134",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20530259-c991-4af6-afd1-fcacb2c94864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341e5608-8388-448a-ad3a-34eed511981e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8495f3-520b-4dc7-82e4-ca988d3da448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028c245e-0cb4-4d56-9c1b-723eaf340827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca03daf-edac-4c24-8e36-f2208b934154",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3750bb53-0a5e-4eac-9010-9c255c53aacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43feaa35-4ffb-4ffd-b116-15f5f7f92464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f00a67-1de6-4ab0-b058-e0e52ba12a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a98802-4e0c-40a1-bee3-6f92dc9f3a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df81723-c048-47d4-a163-f642d2d156a2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8c7e40-4467-4667-9e50-051eb4eade9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91256b2f-1365-4266-b828-95fbc66f4c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae74f4e-b382-4ace-a8af-cac8a8d7b49d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79301ebc-c924-4548-a245-b4eb90d4024b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70373ede-bc43-48ce-96df-1ada6aeeb139",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37755f55-678a-4e57-92a7-5e56e1e5c71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "464485af-6b78-479d-a385-4a054a74c103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61636529-c1e0-48d6-a9d5-632856b615a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ae7176-b57d-40ec-b2c1-b60625651f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9d2187-5605-4919-8dbd-7c064d6a0487",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682752b5-f15b-4e4f-8308-2b72b325b3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee8d9e2-8673-479e-9985-edf5db8a572d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69faef4b-61ed-412e-90d5-3a507c10dde5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0de666-eb64-477c-843e-fd59e0e2e54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4640a3-e163-46c5-9dce-d1459ccd31fb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accd0627-837c-467b-bfc2-42f643443693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7bc6332-007d-49f4-bff7-b09b1d2e133c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a86d0f-bd0a-4f25-826f-92d7f0212204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a0dab8-6b11-4372-84bb-b94e22a43133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0faf2710-99e9-4c15-9000-be6a3541b244",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e1b4c3-9a66-48be-960b-49a44565378a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26b98c7a-8b13-46b3-8b6d-161428f17542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abaac52b-0db9-47b3-93a8-eb9ac8463667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3201bd0-c226-4d6e-8a90-24908a4a7dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97adeb88-1cae-48f8-88ac-ee480b5de8df",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13be87cb-7fe3-46fe-91e2-62f4e707c69c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb6b7320-a579-49b9-b3e5-1d533f0e2544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5d09a1-f8f7-4b96-a6ec-0f1f2120b105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2f7d6d9-d5e5-4770-9dd9-ef6c0ed3c8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ede412-3e14-4376-be9b-c76ed0a0ed0a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce49c5cb-b000-4db4-a8f0-1727367802c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d017227c-0df0-4514-9cc0-ceb21cb803a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "917b48e7-6503-45ce-abfd-3782454a7515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ddc8142-f3fb-446d-96a4-50dfee427847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc1c1d9-897f-4a08-a9ab-c9e1d2d13989",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6ce92d-440b-45d4-a2de-f5d22c96e298",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a95fe1b4-3b37-4ddc-ad10-d6a5391a9404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6afb44-272b-45ad-850d-54e4d324bd6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59ed76f-625d-4669-bbaa-0be680870ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e00c6ac-cb87-4425-a19d-b68aa43640eb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1fcc11-88a4-42cb-bd16-496f42e88ba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "341e07cc-86ef-41da-b5f2-51af4faef6f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efc1459-6257-479e-bb51-03938d2f5ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b70fb6-0677-4a8f-9f46-0ff0386e2979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bb3b55-75c3-4e94-baad-e266ab20f859",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327d4fa6-03dc-451a-98b9-a8f44fb16f1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aac2b1e5-d546-4e95-b0b4-f657cf3a19fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb48007d-06bd-4a86-99c2-2ad2251e71c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355fdbda-df63-458a-a5df-09df23ea82a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1d1e0a-7bd0-41d7-8989-64c955a9901c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f533a8d-6b1a-4bf4-ac83-feeaef57b3e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8dda035-c16f-45b3-aeb3-20ae0d3b606a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01158a1c-fd2d-4921-992e-ab5ff6c00b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f265d6-73e4-4435-a56c-8d8b8066eb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acac155e-d059-4145-8b30-f22478bfef3f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246e2c8d-cb7a-442f-92c1-75504cf95fb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35d22e3c-72cb-4638-be0b-ce9f8241a4fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bcb766-04bc-4ecf-9cc6-97d31f74bf4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71136200-9524-4532-9ff2-cb2f3c656c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145c73bd-3626-4530-a4e0-5e3f876edf62",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b885ec43-2f9d-45f0-a09b-f38f478dbe16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18fb5d3f-a040-4793-a806-f9c9a1e301f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727c728d-c1dc-4e2d-94da-0190fc2526f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d8b634-fab6-4f02-bd37-bc494a36fff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbee2f5-e2b3-4fe9-aaa8-fe887fa5ce8c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1005c58-c408-4118-8922-53526b54cb72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "823fa9dd-285d-46da-8074-93eb390a6b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85567263-6965-4ecd-ab69-6e7e1f7dfd06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91aafa93-e899-43c9-a626-219be440cd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23733683-bdc6-4568-9828-0424ea76b48e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57dd5b2-9536-4673-815d-a366360fd7ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "345c858f-25d1-4da8-901f-1e88485868a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5501c256-2684-41d3-bf7e-58bfbcd557f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c52ee4-de97-4fca-b087-3432155164db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f77bbc-d048-476a-9c31-c4f8b3f2f677",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcfc6c2-a230-423a-8f62-99449cfc537e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86fcc023-d5f8-4c7a-9cc4-b40d8f1bf688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0968fc0-0fe2-463b-807a-8bc8cd2f0dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a701815-834f-4932-a55f-b80d8e32f2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bd2d42-269f-4729-869d-947cbef05f28",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764fbf11-4370-49dd-854b-0b133832a063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ede1ebad-ddf2-4167-a5ad-b4f124da6fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadd48af-695a-4fa1-a4e3-d39f6cdbfa91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac1f6fb-3e21-41b0-b0e0-fb95bd3759bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c0a167-c08b-4279-8860-daa7825d70b6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7110e57-e6d7-48da-b8f6-ed4d9fae5f5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3c5c7c8-3baa-4b2b-a87d-bad7adbbd263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88df01a-6f50-446b-9ef3-0ee194ff7b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15166a18-d8d5-44e7-bfc8-dab127a193fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad66154b-ef61-4689-b9f1-180bbed0d486",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89b89c6-b72c-44d7-b948-5343c9734512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "809d5880-08a9-4238-bc0c-1855e1839915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d61a1b-b87b-4ba2-b09a-1117ccbe6775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4d1345-2ebd-4397-a961-22ba60ca17dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1faf5227-ff78-401a-b452-34965a898e8a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6522b1-d9d6-40b6-9414-5730a1d2aeae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b84e76ad-70ec-4352-9f10-bea832581db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e65aae0-5e27-4da6-ba2e-eb14f0b10a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90dbd86e-14ce-4d5d-8a34-f9ec5b7d678f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9e65b3-f727-46d5-9328-05f012b56478",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbf5eaa-486b-4877-b5e3-95c3b5fe4b2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32ca4860-8a22-475f-95f9-598957f05edc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ecf075-d816-47d3-adf9-11ebacf9f34c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09bcd1b-4e1f-4a26-9369-65938081029d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561d47ad-25d1-4564-a58a-8b578f50bcee",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8bc2b6-522a-45b9-af05-eb80ff18a44d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64b2028c-49d4-4a95-884d-4d8039e94257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9a8547-43e9-4efa-a32b-42b573c0c133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8c45ad-fe59-4070-a927-3dfc035d7f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01631002-4b6c-43b7-96ec-a18647c04c64",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdebe77-73f7-4658-8982-2b34f7822a74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5793749d-df6d-4dcb-930f-ef204fcb2879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff2d327-fe30-4d17-9633-828564293eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052f20ce-5c64-49cc-8584-d6e4b39da501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e090122b-3887-4167-92d4-0a25b1bb0135",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb6c081-3703-4ad8-995b-8f13a26c2c73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e138a487-09df-4b01-a2ae-2aeebc4f9000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "307d2fd1-58c8-4912-aad8-5f5d48b27733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b84872c-7459-405a-a81a-210c35336070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2fa6fc-95a8-431f-96d5-41b6a85057ce",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573ad6c2-f44d-447a-97fe-c11819f68496",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2691b7db-cee3-4d1f-a75a-94b627d8ea9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6d757a-cde1-400c-8a0b-e6e4bebcbd2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6320ddd-ec97-4194-8f9a-a66fe5f9ce2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4408f9b-b1c8-4486-98ea-4f372bb07a2a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dd234d-d115-432d-805d-aec36e5d62d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04ba679d-2a00-4b53-8016-958030d1bfe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56242cca-57df-4339-adc5-52caf4dc468f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d73d87-58b1-4097-859c-8227aa1f15d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41518559-4621-41bc-aa02-7906cd61b59a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6d7cbc-1acd-4e1f-a971-7ef657e4dada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fbd523c-d2b0-47c1-b0c4-d8160e3bbac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d561098-bb58-49c1-a587-34dcc9af5143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ad1b29-94d3-467f-8f91-5c1ededd3433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7250225-cafa-43e3-b49b-15e8c308f134",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656200d0-5b3c-413b-a827-32814f3126a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "255e118f-88e0-4272-a3b7-6ac350a1d50c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a86acf-091a-4a21-8463-262a0ccac262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb97095-3e35-4547-84f5-67fe2cab30a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667fc630-7e61-4517-a986-f272d69b7734",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ea51e7-4ea9-47ed-8fee-4bb9e0df25a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e521518a-f9d3-4226-96f9-3ea4bfd81749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6859e021-82d2-471a-bf74-95f73f66d123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea4ac5b-07d2-4cc2-9978-2deb7f562bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2ff268-1300-408b-90ae-45ec10fecc93",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957126e9-e9d9-43c3-9709-03bb6b2608c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bc55cb2-a76b-44d2-92d5-ee6bfcce09bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12932189-f20c-486c-8f06-c68ce586aef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edffc922-4bfc-4aaa-9ed4-8498cf3067b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c11e20-0f7e-4127-90b9-08a706067fcf",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc00869-6eee-4d93-a43b-88188cffec1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf633d6f-c710-4f62-9b45-51af6b180f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a194bd51-3767-4683-b1fa-66a677004ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e48bc7-0e18-461d-b061-79ae2927e409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdf129b-7fe8-42c0-96a7-b1283d80763b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9128e87-0006-43a7-b439-710c7d07fca6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a513278c-9236-4644-91c7-da05d757e96a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e42db58-06d4-4fce-b77b-1f15a1ea2777",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53093208-edfe-4c1a-bf16-1e5acf4f6e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbf9cd4-e78e-489d-a613-7a6ea68a28d4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0672d459-987e-40e8-9029-8862b7487ab6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c750c251-be6b-4c12-9663-b15ae110306d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4a8612-c4e6-495e-86c6-bf061c536ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87fcbe8d-3d20-4666-88d4-0521bf2aed85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eac94ff-090b-44ed-8e53-80509899ef59",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9db4c6-f4fe-483b-8d1e-0689f01b89a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e0d428e-d5c0-4826-a6c3-2b7c5c72d9d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be336922-b90d-418f-aa0c-4131a335360b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db3d53e-53e5-4d65-b440-40a075d6e6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085ea93b-8027-4016-b83b-987c71816d1c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea70622-0a6d-47bc-9f83-fd0760701fcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f017516-a7f3-4c62-ad71-cb9137e81f6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb71be4-2d8e-40f0-b6d8-bffce6ebfc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52fbde37-aae1-4ff9-a2c9-4420046bd9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67966b4c-b222-45b9-a3ee-3e3b963ca23c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9806eb5e-ca20-4d26-a8bd-72ef9b9d9bf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e349b355-3a5e-470a-ba99-d274b2cc26b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e0f570-1d85-4e13-b478-443d5c59eec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04dea684-98cd-4cac-81c0-aed8c740f976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2ac65c-4f60-43e1-a056-0160e83299eb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3107d6-dc32-46ae-9718-90c0dd23962b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6363a7b-dd83-4298-90ae-a6d9fb4f1e29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b37d89-9c0b-455c-9806-77586af08e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba615627-0165-45b1-af59-890f01e32b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bbe4fa-3288-484e-8070-953e0589d3f7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d665b83-ea2c-4c01-932d-9b349ca49f02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ddafb4e-4306-4a4c-88b4-ca51b9aa3277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cad77b5-c345-4500-8204-a213731c903e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "491f4621-3591-4b54-80f4-5b634380b0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b36f834-ac67-4ed6-9c3c-b1ed283320e7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acaffd78-a6f9-4cfe-8fb0-1b832dd25365",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b7b8877-4279-4f1e-884b-6bb2415d5041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cef08c1-9340-495d-95ea-0404a284fda6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "762084c2-6aba-4613-82a1-4d2385be8918"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19ebb629-9d43-4cef-9e46-0f59eec56d84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89d811ff-4fb3-4665-9ed7-730d23b4c109"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84dd5bfb-1fc8-4d8e-9f8c-b0d67315f191",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93c09a59-f667-4ff1-9091-4300053caccc"
                    }
                  }
                ]
              },
              {
                "id": "40778239-4868-42c9-b21f-5a751ee5acec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "afe606c3-3d6a-47d4-9441-94c46b4f1fd9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ccdd73-166c-4ec3-b93f-74bd535fc33e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bb87df6c-0b3e-41a7-ad09-e4f9ab688fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "954496f1-7d5c-4b23-bc0d-af908e6587f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92d0dc2a-bced-44a8-8239-ded686660cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23cd8e3-7d6b-4fbb-886a-de8bfe62adcd",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fbfa3d-8830-4de6-9bb5-9deffd302dc9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "be1ab403-d964-40bd-b4c5-b4d2b64aec97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea7e015-5a64-4cb9-8d17-f30c91700686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3d3f71a-604e-466a-81d4-11e92f078346"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f475cfe0-256a-4d53-94ad-96d8578333db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "628cbab9-78ad-4e5f-939b-6974f7a6bd91"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "256ea930-6f5a-4347-8ddf-9b4c0c4ceb1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cecbc75-df87-4bb2-b118-b6681747b852"
                    }
                  }
                ]
              },
              {
                "id": "a23c57af-0ef2-4d50-a959-d704f5271270",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0e7241ce-4c0f-4b3f-8908-7e3d7461e7d9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd198263-eb2c-4b20-aa7d-625f56e3bbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "229ca642-4f9d-4308-814b-7d94e63227cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7903d734-b30a-4e87-aead-929735e4eee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc81f5d2-275c-4cc3-9175-a0aacdf7e8bc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "36ec82a4-1e8d-41bc-b872-9f843c2a6a4a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4f7a5ff3-f491-4a40-b79e-3f5c7ea92733",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2333702-c0cb-4d73-a4b3-3d6e38fb1473",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "56511fcc-e57e-4197-8333-6f7dd33ff855"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca7eb356-173f-4612-8b46-e32ac8613185",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a1de855-14fa-4bca-a574-c2f79b4abb54"
                    }
                  }
                ]
              },
              {
                "id": "5140a148-8c8f-4e3d-b6ba-a1ab98ed87d4",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "741094c1-eaa1-411b-aaae-d690db3841f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a3b23b48-bfac-4f18-8f61-eb63cad779bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae79c9ca-40fe-47b1-8ea8-4dcb7358b157",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7154e403-ed90-4d86-ab4e-31d93d77277d"
                    }
                  }
                ]
              },
              {
                "id": "481b5fe3-a86a-4a54-bab0-32b61bbc0257",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f756c319-8799-4f1b-b8d1-155488186eb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "89936a77-8fb4-452d-bed0-9a0eb12eddd6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2cc7f52-e3d8-4ad4-9160-92b3963c54aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa68e595-8f1d-4be4-8f33-d1b1e3880cb5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9781bd2b-a788-403f-8c40-e120f682b867",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3c615aa8-e907-494d-8db2-2a0e5cf06570"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4c119fc-00b0-4688-919d-ea63d21bcb5b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25cfe6f3-a405-49fd-84db-3f8ee401ece9"
            }
          }
        ]
      },
      {
        "id": "6a37456c-0ad0-4b96-95ab-6fecfb2055c6",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c13ece39-331d-49b7-a609-7fcc898a4945",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70871596-c8db-45b5-ba86-60ce45f6c4de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8b9f5b2-6dae-4716-87f2-96bbb8900e3f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6425fb52-e488-49f1-bcdf-c26115e21caa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "73e94489-14a7-429f-82c4-92f7f775bb41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "658fe003-8154-4133-b924-4919c2b4ecac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23691061-bc3d-4e74-b4e9-b5dc35504885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d018a051-b8cc-46f3-aeb8-0993f240a8ae",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fa67a7-9bff-4b49-bd85-9e412b18398d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7ac3c39e-614c-499a-a5ca-4089c8dfd95f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73673dd-769f-4963-b67e-423d116767f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5666177-ec55-4e74-873e-9cde037bd8de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17d89850-c946-4a33-8a5c-aa98c2ceeeb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cd1e5b3-757f-4757-b1d8-645a6b188341"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad8605f8-b5a6-4f8a-9851-22cc89f5ac8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa26e3dc-a060-4f24-ac71-ddcab842b73b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "baa114f3-7c6e-46b8-8f5e-d73c4858b640",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6c23e44b-5ab9-450f-88ee-7efed36dd176"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fdfc0750-646d-4d9c-8752-e0a9ee4ab5c2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b9ad511c-d887-4388-ab42-2a9b0e6096e5"
            }
          }
        ]
      },
      {
        "id": "a43b9ea7-514a-4dc2-8ff0-25a9556d313b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "61a69974-5b12-4584-bd41-f4b682e86ddb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04b17482-7962-4df3-b501-511aebbefe33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "122161c4-94f7-43f2-8c3d-42444fcd639b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f4b4f3-d623-4ab3-9e20-e5dc4831537f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ec953e64-98c5-431d-8e0e-04f2f786fe74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "939d6c91-db15-46f3-aee8-8fde99f7d91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5de672a-7ada-4783-b745-f61f52bbc29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103d5011-3b95-4f49-8400-0661087087a6",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a30819-a5a0-4f82-aace-18997e49beca",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1884f9e8-b832-45ab-af7c-f21b3b52d873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91da6d62-c1ff-49d1-96e9-f1b1eb200072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75e73830-8f4b-45a9-ab7e-d8444fdb6625"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4046d34c-c3e2-445d-a533-7a85eb471ae0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a38d9885-6edb-405c-98d5-c0cf1d78c9b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63adc635-20d7-49ef-b487-7b95c371ed9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ef78d41-c174-4c83-8b12-20216cc06046"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75d787fa-8b3c-4470-86d3-7f2b3d1085fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3a86746b-61be-4042-841e-70e54ec53529"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0ab2f19-2cd6-4c51-aa8d-48487ccacde3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d09b676-f945-4e78-84e4-f0ddaabf1258"
            }
          }
        ]
      },
      {
        "id": "afe1d8aa-657e-4af7-8e64-185bb4a29030",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "65d56325-e36e-4d6a-83a5-0694d937b2ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "26ed1715-4f4e-48ea-8be9-e0c6741e4b93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "67d3dbe6-4925-4c67-b81c-35d7c71815de",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6446dc22-21fe-4bf7-8f1a-3dabdab1a731",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1cd694c2-6ee0-4c54-9712-18c17eca4163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f596dc9-8dcd-4b5c-8ce1-0c64e809e6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3310a554-1118-428a-8050-572c298e906b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49dc7586-64f7-43c4-ae75-8fefa6d7df5c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ca42eb-7c25-4ade-84a9-0598c96225c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "63dc904e-e880-4d02-aa93-c530c6d77530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c914648-63c1-4053-a3f4-d0f826567196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07b5e54f-624c-4228-98cf-35481c4ea48e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5270f92-e516-48e7-8b9d-c027ff5854b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7aa8d87-ddf2-4049-b87a-445971a7d154"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fd2ed6c-3384-4414-94fc-a5efbecb02fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b894840-f34a-41c4-8794-4f43f6188848"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa9ba985-571c-46d7-89e2-476c848662e5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8439b57b-4146-48fd-9b42-35d6c07c4a6e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9efa16b-f33a-45ee-b03b-4a3d74a9464a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24845a40-e936-4120-8b7d-9e751c35fb79"
            }
          }
        ]
      },
      {
        "id": "b6087dcc-cb20-4754-b823-bff74ed3f232",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7eaed00-c974-4235-9b6a-12f8f8f4c61d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f93057d-ae5f-4fe1-9989-6ee4aaa6dce5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7ff3aaf0-f4c3-4683-be4b-6a72d6870533",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8caec31-f698-4544-8754-a5ea27e038cf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1139ea5-b851-461a-8af1-85dff8f1bfbf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 95.39846743295017,
      "responseMin": 13,
      "responseMax": 705,
      "responseSd": 107.04477810114797,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668905250343,
      "completed": 1668905285945
    },
    "executions": [
      {
        "id": "31e32cc0-384a-4419-b3dc-6d0884c46143",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "783be115-7b12-43d1-92d6-8d813c4a813d",
          "httpRequestId": "a27ab45b-c341-4dc8-a616-ad9b0bb62243"
        },
        "item": {
          "id": "31e32cc0-384a-4419-b3dc-6d0884c46143",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0c8030a8-40d1-476d-b1a4-155585247875",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 0
        }
      },
      {
        "id": "659f76a0-c708-4595-9068-2f43c2a936a7",
        "cursor": {
          "ref": "082e917d-1285-4b64-96c2-0e3c7c073e37",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0e190c43-3c0f-4514-9320-11c87fef4a95"
        },
        "item": {
          "id": "659f76a0-c708-4595-9068-2f43c2a936a7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3467cf49-f6d7-4cab-9f93-efc6574250d3",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "0e3d86b5-a10c-4f0b-83e5-2589364ffb95",
        "cursor": {
          "ref": "2512e5fb-7d12-4c50-8bb2-d6f6542aa6d7",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c4b7dbbe-66a8-481a-8014-f0b95263dcff"
        },
        "item": {
          "id": "0e3d86b5-a10c-4f0b-83e5-2589364ffb95",
          "name": "did_json"
        },
        "response": {
          "id": "618c0439-a2ca-40e4-9757-bed9b6944ab1",
          "status": "OK",
          "code": 200,
          "responseTime": 226,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc61878a-c298-4388-93f1-d8844743ca78",
        "cursor": {
          "ref": "e6626826-0f45-4081-a11a-4870938012e7",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "53d606d9-d38c-449b-b63a-d2126fe2a179"
        },
        "item": {
          "id": "cc61878a-c298-4388-93f1-d8844743ca78",
          "name": "did:invalid"
        },
        "response": {
          "id": "62a78e00-64e5-4dde-af74-a64047c7edb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc61878a-c298-4388-93f1-d8844743ca78",
        "cursor": {
          "ref": "e6626826-0f45-4081-a11a-4870938012e7",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "53d606d9-d38c-449b-b63a-d2126fe2a179"
        },
        "item": {
          "id": "cc61878a-c298-4388-93f1-d8844743ca78",
          "name": "did:invalid"
        },
        "response": {
          "id": "62a78e00-64e5-4dde-af74-a64047c7edb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11456315-9179-476a-bf03-96a678dac5a7",
        "cursor": {
          "ref": "0e7b0989-be40-47e5-b832-3504e2f1196f",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cb5381b5-4230-4426-952c-c53eec992ac0"
        },
        "item": {
          "id": "11456315-9179-476a-bf03-96a678dac5a7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "13b9be7c-46a5-4d06-80c3-24191947bc3f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 163,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e1bd734-533d-4a7f-bac0-11f3efa63000",
        "cursor": {
          "ref": "7713b2ed-525e-401f-a5d9-b910b2da63f8",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f1a6e83f-826a-4cce-93e0-396bbc50653b"
        },
        "item": {
          "id": "7e1bd734-533d-4a7f-bac0-11f3efa63000",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "be98b612-38d9-4850-9ab1-6726b6602558",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c080f47-b8cc-4178-ae5a-5c00de4d630a",
        "cursor": {
          "ref": "363d7b7d-1865-4546-ba63-2378a1d11da7",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "051af48f-540e-49c5-9c05-8c877d4e1143"
        },
        "item": {
          "id": "1c080f47-b8cc-4178-ae5a-5c00de4d630a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3935ac0c-c45d-4157-9ff7-1c496e917131",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e95bb2-8beb-4ccc-b9db-80e16451a4a6",
        "cursor": {
          "ref": "c41ca8cc-68f9-4521-be99-14dc34cf8313",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a9dbb41b-383c-48d2-ae2f-1ea80cf6dd5e"
        },
        "item": {
          "id": "b8e95bb2-8beb-4ccc-b9db-80e16451a4a6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b850bdbf-7890-46f9-bf05-64ebaf544f94",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e95bb2-8beb-4ccc-b9db-80e16451a4a6",
        "cursor": {
          "ref": "c41ca8cc-68f9-4521-be99-14dc34cf8313",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a9dbb41b-383c-48d2-ae2f-1ea80cf6dd5e"
        },
        "item": {
          "id": "b8e95bb2-8beb-4ccc-b9db-80e16451a4a6",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b850bdbf-7890-46f9-bf05-64ebaf544f94",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c344b0-8ab7-401e-99c4-483809caaa3e",
        "cursor": {
          "ref": "8b84d3e4-b41f-4853-a73e-877e44f51960",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f7f98d24-9823-4f7b-b661-2d7994c43c4b"
        },
        "item": {
          "id": "90c344b0-8ab7-401e-99c4-483809caaa3e",
          "name": "identifiers"
        },
        "response": {
          "id": "6812bbc7-a771-4cc9-9731-e1be90eb8e78",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2529fe94-0327-4c7f-9e66-08624e06e962",
        "cursor": {
          "ref": "ce01b73c-9e68-47fa-b9ec-2360a822338c",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d79624c1-9d95-43c8-a719-2f81c17944cc"
        },
        "item": {
          "id": "2529fe94-0327-4c7f-9e66-08624e06e962",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39fe11a5-1bd7-4959-be4c-1f7ccaaa43fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2529fe94-0327-4c7f-9e66-08624e06e962",
        "cursor": {
          "ref": "ce01b73c-9e68-47fa-b9ec-2360a822338c",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d79624c1-9d95-43c8-a719-2f81c17944cc"
        },
        "item": {
          "id": "2529fe94-0327-4c7f-9e66-08624e06e962",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "39fe11a5-1bd7-4959-be4c-1f7ccaaa43fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725a799c-bbb1-4768-a0cd-3448fed3fa02",
        "cursor": {
          "ref": "ebbd4682-4d99-4c92-810c-b0d9a0fdf675",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5fe5076b-5e32-4926-867f-0e69e677dbd5"
        },
        "item": {
          "id": "725a799c-bbb1-4768-a0cd-3448fed3fa02",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "468f4ea0-5912-463e-a9b3-945b00e3c798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b196e8c-1885-4405-9d76-fb0e28932c9d",
        "cursor": {
          "ref": "79dfc3c0-a156-4296-b76b-184bca188d81",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "17a2bba1-1f79-4467-932f-2708342cf81a"
        },
        "item": {
          "id": "8b196e8c-1885-4405-9d76-fb0e28932c9d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "605cd939-a187-4474-af38-49c44af56870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df70637-f211-45a9-b9a2-820b86991433",
        "cursor": {
          "ref": "86937b4b-a03c-4cb0-847f-db3a15c38148",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7fc7c5bc-14ae-45c3-9aef-233ce3d56f26"
        },
        "item": {
          "id": "6df70637-f211-45a9-b9a2-820b86991433",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "08f843bf-ad8f-48cc-99b6-efbc24277c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c79701d-ae19-4791-9e13-1e88ccb3fabc",
        "cursor": {
          "ref": "70a210d6-e8e4-4768-a98c-f9608999627f",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "484398f1-2ec0-4024-8890-7bea0caca6dd"
        },
        "item": {
          "id": "6c79701d-ae19-4791-9e13-1e88ccb3fabc",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5f1bc2a4-0f93-40c5-a289-bc88168d905b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6776fc-8de1-4fc6-8892-f3f8f8aa29ba",
        "cursor": {
          "ref": "018cb614-4938-4ac3-8169-97001b759b32",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0ddb1e03-f4db-4667-be39-3447e05ca705"
        },
        "item": {
          "id": "4b6776fc-8de1-4fc6-8892-f3f8f8aa29ba",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "edc1a65e-b364-4e76-9052-24709fb45431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f843aa7-1c2b-4f81-b758-40e6ba347225",
        "cursor": {
          "ref": "d70eb58d-4828-402d-9f59-ac06e69d3266",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9a8009dd-bbe2-4b5f-85d1-8d1f39d18c1f"
        },
        "item": {
          "id": "0f843aa7-1c2b-4f81-b758-40e6ba347225",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "96bd874e-06e2-4647-89b9-ef0ece0f795f",
          "status": "Created",
          "code": 201,
          "responseTime": 452,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "18de6bbe-6797-4baa-ab4f-afa692cf968e",
        "cursor": {
          "ref": "96611901-1335-4be9-b153-a51510170501",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0d5a36c5-7985-45d0-8d4c-520264bc9481"
        },
        "item": {
          "id": "18de6bbe-6797-4baa-ab4f-afa692cf968e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "68158b0b-af45-41ed-bd99-5d646eaf3b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e78ce53-3740-4c5e-b855-d386f073d2fb",
        "cursor": {
          "ref": "a8ecc23e-b548-497c-9d4c-221509a2ab3d",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7d68fc5f-0ffb-4e49-af3d-bfbbafca780e"
        },
        "item": {
          "id": "2e78ce53-3740-4c5e-b855-d386f073d2fb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3bba8711-f9f8-4c98-b727-5d1a6d0e5448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e650d2-a4eb-4b5e-b55d-c5902fa1ce39",
        "cursor": {
          "ref": "cd7a4df0-c252-4cde-8508-db95ab198be0",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6668eb94-f1fe-47f0-a0ed-3eb3741c2d71"
        },
        "item": {
          "id": "94e650d2-a4eb-4b5e-b55d-c5902fa1ce39",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fb8683b3-de19-45a4-80b4-f11598a684d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7a0180-e37d-4e4c-b1ac-773136a66c20",
        "cursor": {
          "ref": "c0a94889-65b2-4d07-bb14-eade2ba9a5be",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "31d820c6-7d99-415d-95ef-62963a6e61dd"
        },
        "item": {
          "id": "ae7a0180-e37d-4e4c-b1ac-773136a66c20",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b43a0879-aab5-4a4e-97b6-1fe1d0d33f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcd93a0-c7b5-44a7-bd55-7b84a2c9fbf5",
        "cursor": {
          "ref": "f8a33647-a18e-424c-9fd1-00fd409b6b00",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9c4ac3f3-a0be-4daa-8834-751be1a8144e"
        },
        "item": {
          "id": "9fcd93a0-c7b5-44a7-bd55-7b84a2c9fbf5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "431f70db-38a6-4160-9227-3b51aa3682eb",
          "status": "Created",
          "code": 201,
          "responseTime": 413,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "c5c6bd6d-4bf5-443a-97cd-c87a555e1fcb",
        "cursor": {
          "ref": "b6d28380-8d49-4844-b095-1c964cda154f",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "24519abc-4767-461c-a398-d9750bde66d3"
        },
        "item": {
          "id": "c5c6bd6d-4bf5-443a-97cd-c87a555e1fcb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "49cf70a2-1771-4bad-b76d-8350df03f7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56aa2096-e5a9-403d-bbf0-320035d831ff",
        "cursor": {
          "ref": "3be58548-df72-4d43-a02a-05bf7bbcd57d",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1503a20e-9826-4ccd-b09f-a890ac8936dd"
        },
        "item": {
          "id": "56aa2096-e5a9-403d-bbf0-320035d831ff",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5394368e-b7da-40e1-801e-6b8995fbad4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82191cae-ccb8-4321-899e-0fd596ec7e66",
        "cursor": {
          "ref": "1b3ef143-7510-4fd2-a1cf-4224c33326a8",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "983d09fe-0198-4941-a418-4a0cf7e40ac5"
        },
        "item": {
          "id": "82191cae-ccb8-4321-899e-0fd596ec7e66",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0bdb9bd8-c03d-43d8-8bd0-3a7a363f34e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0db3bf-3de4-46a0-8e8b-60c45401de0c",
        "cursor": {
          "ref": "0067bcba-aabc-41a1-8121-41ebe5de8924",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "95dbfaa2-5a5a-497c-89bd-6d5e4ebf0d2a"
        },
        "item": {
          "id": "8c0db3bf-3de4-46a0-8e8b-60c45401de0c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9a4572f1-0f7a-4870-84a4-86aa01cc9f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec3ea3c-4105-448c-b077-08edab4cce26",
        "cursor": {
          "ref": "d01be3da-349a-4b15-a790-5eac54bde207",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "be7a91e2-d0a3-4df0-b413-0404df27da1d"
        },
        "item": {
          "id": "4ec3ea3c-4105-448c-b077-08edab4cce26",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f297b98f-3f77-4e29-828d-51292a648270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0beb80b-bd57-40d4-8c92-528224da6158",
        "cursor": {
          "ref": "96d3eeb2-06ff-4a75-9215-c093610a782e",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9b2b5322-84ec-4915-a45d-76381d487841"
        },
        "item": {
          "id": "b0beb80b-bd57-40d4-8c92-528224da6158",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "39f90da9-d1c2-43e3-86fd-5f28da423737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b673704-243d-461f-b2f1-f5c56af4ad07",
        "cursor": {
          "ref": "b2350806-6baa-4e4f-a7b1-281b5cc68a9b",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c8f3d639-f21e-43a4-8b55-dadd2d0aaa93"
        },
        "item": {
          "id": "5b673704-243d-461f-b2f1-f5c56af4ad07",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d482a625-2042-457f-be3d-7f14e7a44e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6196a0-5259-4649-b34e-d23b5fb3a1c0",
        "cursor": {
          "ref": "38d24eff-e7be-4252-abda-170948dce1cf",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "107df1e1-7322-417e-aa62-79a926972208"
        },
        "item": {
          "id": "ef6196a0-5259-4649-b34e-d23b5fb3a1c0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "86262ecf-90e1-4c83-a450-5062578460de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38d8338-7552-4784-96d5-2d0276a52a4f",
        "cursor": {
          "ref": "ea99d81e-58ed-47d0-b9e1-d87a5aae7c04",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f4e92ec4-57b3-429d-adf0-f78a8df710b9"
        },
        "item": {
          "id": "e38d8338-7552-4784-96d5-2d0276a52a4f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ce09085b-4db7-46af-b2e1-1edb7c909216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e490511-90af-407f-a1f7-ac010fcfbe58",
        "cursor": {
          "ref": "d1c70de1-cf07-440a-8b57-d52db2562541",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ec4c2e42-62fe-43c9-a09e-b45fe373fe59"
        },
        "item": {
          "id": "1e490511-90af-407f-a1f7-ac010fcfbe58",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a6963ea9-606f-4bb4-9e62-4cc11a9f1dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805e5a7c-9e23-4004-aca7-5b252f16cb2d",
        "cursor": {
          "ref": "04450684-0bb9-4d25-a7ee-f5c2e25c7327",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d714c85f-086e-4003-a910-b5fa1121321f"
        },
        "item": {
          "id": "805e5a7c-9e23-4004-aca7-5b252f16cb2d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "58521a4e-1ac2-4bac-a2e3-b4e747cd9a6a",
          "status": "Created",
          "code": 201,
          "responseTime": 416,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "3ca5f865-547a-4598-b1f2-511a4bc2af3a",
        "cursor": {
          "ref": "ae767824-c943-4fb8-b0e3-e385bd6acc9a",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "08ce6606-26af-4d15-a612-b289ac7d3224"
        },
        "item": {
          "id": "3ca5f865-547a-4598-b1f2-511a4bc2af3a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "adf40265-c6b2-49e1-9b2a-9fafe3130ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d009fd8-8809-40eb-9a18-4f067ca5ca21",
        "cursor": {
          "ref": "30ac5196-6e49-4b9b-938b-7bd43cf12759",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8816ba5b-b350-475d-b32c-54464c041b70"
        },
        "item": {
          "id": "5d009fd8-8809-40eb-9a18-4f067ca5ca21",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c0091f63-ec27-4852-889c-139a9621dde5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac66929-37c1-4ad9-9c9d-a5f9ad0dced4",
        "cursor": {
          "ref": "4e1f58c4-9bff-46f7-a3a8-c3f8ab48d28d",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6328b6dd-6367-43ca-8ab4-bf226ff63a80"
        },
        "item": {
          "id": "eac66929-37c1-4ad9-9c9d-a5f9ad0dced4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "011ca85e-bf0a-4276-ab1a-625be3fd8078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b059fdb-9d03-4401-b4af-c49d61593c99",
        "cursor": {
          "ref": "86088980-4808-4e4d-8d85-252ff54e992a",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cbf1e444-ec3e-4b26-82c7-50a4c667ca9d"
        },
        "item": {
          "id": "5b059fdb-9d03-4401-b4af-c49d61593c99",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8d5dbf40-2caa-433a-b7c8-5169e921e2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c327d41-5a12-42a4-a1d1-cab505f4868b",
        "cursor": {
          "ref": "f28eb40a-280b-4ecd-a5ab-adcedb3bdf7e",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2d8b6665-c67c-4e87-88a9-a0533b495cdd"
        },
        "item": {
          "id": "2c327d41-5a12-42a4-a1d1-cab505f4868b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fbb05fb6-8db7-4e3e-b483-aace81262de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650b7830-9458-4de9-8456-7df12cc4542a",
        "cursor": {
          "ref": "522b9862-63c4-46e5-8d16-62258f18cbd2",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "09078ec9-224b-4041-83b8-e606fc733938"
        },
        "item": {
          "id": "650b7830-9458-4de9-8456-7df12cc4542a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "74afec19-647b-4130-9858-f3581910dd65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e60c70-a363-452e-b3f3-ac7d141198c4",
        "cursor": {
          "ref": "a0e828e4-dd91-447b-8e4b-303fe16f8282",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4f6c5592-f52f-4ff4-b8fc-d6bf619745ab"
        },
        "item": {
          "id": "39e60c70-a363-452e-b3f3-ac7d141198c4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "819e8f93-45ce-4eec-b3db-810106541330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093fa50d-1e87-4a14-8bb1-67c419b4b79c",
        "cursor": {
          "ref": "b53d1daf-4dd6-4030-bf81-b107f9478c3e",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5bf588e8-bf1d-4874-9da4-88bcd3164c2c"
        },
        "item": {
          "id": "093fa50d-1e87-4a14-8bb1-67c419b4b79c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "30a60752-08d7-4fc5-a592-559a8df72b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4b9401-03b2-4759-854d-910f8d5c40a0",
        "cursor": {
          "ref": "1b6a877d-b09d-49f1-bca7-f51b17cb24e6",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "52d8883d-4eba-482d-a9d0-86f664cf7c59"
        },
        "item": {
          "id": "bc4b9401-03b2-4759-854d-910f8d5c40a0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "887ad659-1f29-4b85-b7b3-422987933353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72f13b5-eb44-475f-b8e3-966e3eb542a8",
        "cursor": {
          "ref": "6e534920-cd87-4157-bf41-8e9f2d4d865b",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fe0626d6-5856-4a0a-bced-dbe507017a3f"
        },
        "item": {
          "id": "c72f13b5-eb44-475f-b8e3-966e3eb542a8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "55325b8d-cf5f-4caf-8f35-ced444fd5454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05487df-ae58-4b00-bd8b-5638196215c8",
        "cursor": {
          "ref": "0fa41dc9-d80a-4c67-b153-e3d6cfc1bb70",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5b620209-5df6-4177-a991-6ca3b520dc84"
        },
        "item": {
          "id": "e05487df-ae58-4b00-bd8b-5638196215c8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fbd4b9c5-655b-4d39-a158-9a43fb0a29ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e6f0432-67e3-4634-8389-eecf4b794807",
        "cursor": {
          "ref": "21a05bf3-3798-47f0-a9b6-f3db27e35f8d",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1991a02b-ce2b-4d0b-b1f6-d9b1e4ab1144"
        },
        "item": {
          "id": "5e6f0432-67e3-4634-8389-eecf4b794807",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "21afb245-9463-437d-b578-a167bf22125a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c36057-d6c7-498a-a9f5-537b7930af49",
        "cursor": {
          "ref": "53745456-224d-4658-aa9a-6a3f0e0ff297",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8a55cee4-ff75-4fa3-be68-4751bffde343"
        },
        "item": {
          "id": "23c36057-d6c7-498a-a9f5-537b7930af49",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "65c9b564-ebcb-4e27-8a24-282096eb908a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9c3dc639-b98c-47f7-a5eb-e0a49d7233dc",
        "cursor": {
          "ref": "c5980366-70b4-42aa-846f-08eca605a2cb",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a8bafea7-a0dd-4ea6-9eb2-35f1fb20002f"
        },
        "item": {
          "id": "9c3dc639-b98c-47f7-a5eb-e0a49d7233dc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "49f4e88e-9525-4d39-8522-81c023a60845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4dfc70e-f499-4bd2-9d31-eab5c433c968",
        "cursor": {
          "ref": "1239db88-ea21-4115-92a0-0fccb50a75f4",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "083ce6c5-b41f-486d-9cd9-c61722d7d4c8"
        },
        "item": {
          "id": "f4dfc70e-f499-4bd2-9d31-eab5c433c968",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "11f51e24-1957-4601-9519-8ca7cfc8e93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f5992d-d7f7-41a9-96d6-ddad96b95d61",
        "cursor": {
          "ref": "de5309ec-7073-4c6c-8b6f-b1d046e77cdc",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d90bbb88-0e88-41b5-ac59-9dfc6fea5683"
        },
        "item": {
          "id": "44f5992d-d7f7-41a9-96d6-ddad96b95d61",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5761ec69-04a8-486f-8a9d-9ad1c695edec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a60efd-5e13-4651-8969-9f2ebfea2f85",
        "cursor": {
          "ref": "f81f747b-71ca-48d2-87de-442e5a5f610a",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4c5c9728-c28e-4310-937c-9344c7329022"
        },
        "item": {
          "id": "98a60efd-5e13-4651-8969-9f2ebfea2f85",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c424ae07-a81b-4b65-bb0d-943fcec64c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d28e83-07c2-46c9-b505-8393a81726d6",
        "cursor": {
          "ref": "f495d01b-f0c7-4ff8-a157-39a8562e5a09",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8abfb999-06fe-460b-9661-93986c0dfe77"
        },
        "item": {
          "id": "82d28e83-07c2-46c9-b505-8393a81726d6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "004145bb-c298-4803-befb-9d2d218900b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62c0d6c-e614-47b0-b2f2-e4695c6a3f65",
        "cursor": {
          "ref": "57f52c69-fc26-4735-9ca8-cea8c1ab6b8a",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8b72bbee-9dbe-4672-8701-12beb1a48089"
        },
        "item": {
          "id": "d62c0d6c-e614-47b0-b2f2-e4695c6a3f65",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ef742e1e-b19e-4368-9f4a-114d2a69500f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136c8569-ebfd-411f-865d-adee63eb82ad",
        "cursor": {
          "ref": "8831e629-f4b1-4b9d-8269-43721fd8814c",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b23c2603-0aa2-487a-a43d-aa3760b196a8"
        },
        "item": {
          "id": "136c8569-ebfd-411f-865d-adee63eb82ad",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3e3eb072-94d4-43ea-88f6-0456e8696694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "23595358-d6d3-4ddf-9442-e0c325cbe179",
        "cursor": {
          "ref": "c0a939a1-91c3-4f3e-95ab-4b3401f87187",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "84944623-8b8f-44de-9644-00968d92d96b"
        },
        "item": {
          "id": "23595358-d6d3-4ddf-9442-e0c325cbe179",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "505d0874-db14-4d6c-85fc-7f65072271d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f49d53-3edc-44fd-8fb5-bcc7d7c7197e",
        "cursor": {
          "ref": "dd135532-efad-4a70-ae29-fa783cceb81d",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8db855b7-6f0f-416e-8ff2-e18b1e0a8609"
        },
        "item": {
          "id": "a7f49d53-3edc-44fd-8fb5-bcc7d7c7197e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7019666e-570d-4684-be70-61b2f32959f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cbbfcaf-c58c-4e87-a3de-e14066cbf644",
        "cursor": {
          "ref": "ac4f741e-a449-45bb-a48e-96198e1902d0",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "595643b8-730b-4b92-ba3b-51102fb1f0a7"
        },
        "item": {
          "id": "2cbbfcaf-c58c-4e87-a3de-e14066cbf644",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0b801383-a992-4273-b9b1-8995a01fe2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1cb0a3-eab0-4fce-87f7-651f201b4161",
        "cursor": {
          "ref": "d2a67741-6f39-41c2-8381-f80052d60fa2",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "64718b06-1ab4-4e1b-bb50-29a2e9b5e011"
        },
        "item": {
          "id": "bc1cb0a3-eab0-4fce-87f7-651f201b4161",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a2665291-2f6a-4a42-9f31-6fbe0d15c98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3112efe-2cf4-4819-a828-82f8812a756f",
        "cursor": {
          "ref": "b4d258dc-7a8b-4fc4-a930-65c7c119368c",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "96ea4e18-3db5-4524-8570-8d01f74a1883"
        },
        "item": {
          "id": "e3112efe-2cf4-4819-a828-82f8812a756f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a4ebdd3d-1177-4dc4-ae72-eef764c9c1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0294fb27-34dd-4b31-ab29-5dadf92b8b7f",
        "cursor": {
          "ref": "6da1f8a7-6bb8-4591-9e63-0bc5ea54b3d5",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "59368500-3629-46ae-86f6-16e86938caec"
        },
        "item": {
          "id": "0294fb27-34dd-4b31-ab29-5dadf92b8b7f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f751df89-5a9b-4038-82c0-03801ee0e9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49537e9b-2615-4da9-8c58-6d3e41dbd505",
        "cursor": {
          "ref": "0d8d33aa-1551-4d18-9bd2-9619a3be2138",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "474ca5c3-89d1-4434-ab65-a332793de1cb"
        },
        "item": {
          "id": "49537e9b-2615-4da9-8c58-6d3e41dbd505",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c2192485-9a97-4601-b27f-01dbafbb7da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a3df51-9488-4f64-a2bc-2406475b48bb",
        "cursor": {
          "ref": "bb242d2f-7af4-4816-85cd-6e4e9ff8c981",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4e1efd6b-c12c-46de-a3c7-871540328b1a"
        },
        "item": {
          "id": "c4a3df51-9488-4f64-a2bc-2406475b48bb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9b8772cd-2642-4a67-9f6b-d3bfb6e8158e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daecbd07-78ff-441d-8713-1d14bb8805d4",
        "cursor": {
          "ref": "1203e82b-1b41-43e9-b300-10572c5aa9f1",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "844817fc-ba5d-4220-8d25-25b34c9f5637"
        },
        "item": {
          "id": "daecbd07-78ff-441d-8713-1d14bb8805d4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ce698a9b-0197-4094-8abe-4277ca43c095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01738855-66af-494b-b325-195f6ac7c5ae",
        "cursor": {
          "ref": "f4aa40c9-6386-4f6e-86cf-4da9bee88b78",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "61f4e5ab-185c-485e-af2f-f57e7c8608cc"
        },
        "item": {
          "id": "01738855-66af-494b-b325-195f6ac7c5ae",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "393ba755-dd59-4ac2-b338-4d21aebfccfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d39aa8-f238-47f0-b8be-e67a2f86da47",
        "cursor": {
          "ref": "f439c9dc-8d3e-4102-83a6-a31cd3fe71c2",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "384adc68-1566-4572-9939-f8bf52961711"
        },
        "item": {
          "id": "22d39aa8-f238-47f0-b8be-e67a2f86da47",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "433b51de-b98e-4141-ab87-52f8b35350ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d088cbcf-53c3-4aea-a490-8aa3c304b7e5",
        "cursor": {
          "ref": "d41f042b-90dd-424c-9af7-afeee016f7d2",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "15c72de3-ad73-40a4-b1c2-23419143a3e8"
        },
        "item": {
          "id": "d088cbcf-53c3-4aea-a490-8aa3c304b7e5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6555273c-b0bb-43a7-8fd7-ac5d59ba5479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412bb496-b28c-4c7b-b1a2-04efc07c0568",
        "cursor": {
          "ref": "adeb4e31-0b54-43cd-920c-d055dce5dba1",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9805ff30-467d-4b51-bb49-db845e770246"
        },
        "item": {
          "id": "412bb496-b28c-4c7b-b1a2-04efc07c0568",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a4d38b64-9860-425e-be69-bae78bdfdc48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1849f52-d028-4fae-a8d3-ad413d318d0a",
        "cursor": {
          "ref": "97674a4a-9f9b-46f1-aff2-962dbb259183",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "889b1b6e-a604-472b-8424-e18d712d699b"
        },
        "item": {
          "id": "b1849f52-d028-4fae-a8d3-ad413d318d0a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3330aedd-5ec3-455c-a15c-5a34e1cf70e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54aab749-dc9f-4891-83d9-904776d94768",
        "cursor": {
          "ref": "bba8e9ba-2a10-49ea-8b53-5350fcab18ec",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "24118d1e-3262-4f14-a98f-7766cb0aae47"
        },
        "item": {
          "id": "54aab749-dc9f-4891-83d9-904776d94768",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f47bd0ba-ef4c-4e7f-95ad-c45054a06c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5e2223-f851-41e0-a831-fb5df3b3ad62",
        "cursor": {
          "ref": "1d10f205-92e5-424b-89bd-fa1bbfdda3e1",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e0c0ef18-190b-4ca6-83fe-2b8a298501bb"
        },
        "item": {
          "id": "9f5e2223-f851-41e0-a831-fb5df3b3ad62",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0bb884ac-ea30-4d00-8f52-eba4b5ac9afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d364b8f-0d9d-4e92-b738-f15434f9d7ac",
        "cursor": {
          "ref": "ecb11a6c-705a-4c64-b256-ec76dbe7e367",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ea913d04-d0e8-40c3-9b3f-4163d9217b52"
        },
        "item": {
          "id": "2d364b8f-0d9d-4e92-b738-f15434f9d7ac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6ce28472-e15d-4776-b925-1d858b9e09a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc29cb65-b94b-4708-b7af-dc8726ac2139",
        "cursor": {
          "ref": "194de122-3ead-4e04-b0c7-4048c4240d0f",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c0c51968-b9fb-4774-ac66-31851507ea9d"
        },
        "item": {
          "id": "fc29cb65-b94b-4708-b7af-dc8726ac2139",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a5281e8f-ff4c-4fed-aa98-2fce72576536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138e6d22-5c2c-403d-9c83-778f6d51ddd0",
        "cursor": {
          "ref": "846fd1da-84a7-4dad-9c02-7da30b2ef5dd",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6b2cf36e-c407-43f8-af65-84394515c664"
        },
        "item": {
          "id": "138e6d22-5c2c-403d-9c83-778f6d51ddd0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2aac15de-c124-4768-956e-c75958080dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c00ca3-81bf-4052-9796-cdb741fc9f6a",
        "cursor": {
          "ref": "47862cdb-8c45-459d-b9ab-cacb3f8a7259",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "551ffbee-e332-48a7-a05b-97b9e88abf1e"
        },
        "item": {
          "id": "22c00ca3-81bf-4052-9796-cdb741fc9f6a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "098de917-1769-4460-a977-298a5cfef058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f4f1ca-6edd-41b2-9420-dbd06accdbcd",
        "cursor": {
          "ref": "507b516e-3b3f-46c4-9888-01fbae7e28ef",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9bd784f7-f8a3-4635-9700-68f01e790b83"
        },
        "item": {
          "id": "50f4f1ca-6edd-41b2-9420-dbd06accdbcd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6b683137-839c-41ba-9637-074c5cd38b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba47a04-3202-4a58-8499-0de0acec7286",
        "cursor": {
          "ref": "e3a533cb-a9ed-4fa2-bf39-a4089f35194d",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e6173646-d7f6-44f6-8a85-dace94d17626"
        },
        "item": {
          "id": "3ba47a04-3202-4a58-8499-0de0acec7286",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "24910c86-73de-45c7-8276-8362137b6997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29aa2a59-cbbc-4f3c-97a7-4b80a82105d4",
        "cursor": {
          "ref": "8a480622-78df-4a09-abdb-2e735e9cbbf2",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "250d27bc-d847-4da7-94c9-ac01cd84f02c"
        },
        "item": {
          "id": "29aa2a59-cbbc-4f3c-97a7-4b80a82105d4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d2f7b1e1-79f3-4f08-8afe-f988f6df4cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079cd2e9-a15e-4730-aa0e-a21bdd3fc1d4",
        "cursor": {
          "ref": "1ee9bbb7-9a9a-4384-9814-e434f182cc5f",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "54844727-5c3f-4fa1-8923-d290e3963515"
        },
        "item": {
          "id": "079cd2e9-a15e-4730-aa0e-a21bdd3fc1d4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ec849d9b-bcd2-4131-8d24-6353247f1ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f29668-ec3e-4896-80fe-20acd28ea49a",
        "cursor": {
          "ref": "014dbea8-1138-4752-b954-6aa1bc1ae2c3",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bc4147fb-55ce-40f5-abdf-a1a8466e9d93"
        },
        "item": {
          "id": "30f29668-ec3e-4896-80fe-20acd28ea49a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "958ce913-9880-40e4-bf87-921a70630976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bd583a-213b-4f79-8012-5ea9c840153d",
        "cursor": {
          "ref": "165b8d6c-24b8-494c-89e3-b54cc4c4abaf",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a90f7f64-49bb-4e19-bbb7-aaeeec89470e"
        },
        "item": {
          "id": "e3bd583a-213b-4f79-8012-5ea9c840153d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3bd4d84c-8115-4d17-9295-808695e80948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042246da-057b-45e4-9de4-5619cea0ceaf",
        "cursor": {
          "ref": "9c515173-c0f3-4dd7-9cda-993a17e785ba",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4ec83f8e-b1e1-41e8-a2a7-d35b75e7084d"
        },
        "item": {
          "id": "042246da-057b-45e4-9de4-5619cea0ceaf",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "12bf7b1e-8040-4de4-96c0-f4701680ce8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e023d8-5a36-40f3-8fa6-121577081b9f",
        "cursor": {
          "ref": "324879e3-fa22-4846-9c59-7e4db297d780",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "22d02635-2a83-40c3-beb9-1ded1089221a"
        },
        "item": {
          "id": "06e023d8-5a36-40f3-8fa6-121577081b9f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e5ce2a87-8867-4dcc-a692-61299da8c5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ebbeee-40d0-449b-8437-3ee8f8241ff1",
        "cursor": {
          "ref": "f1615dd9-b2e4-4ecf-827c-6933fffb6012",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "613d007b-2a22-4617-be53-bf03c2ad6491"
        },
        "item": {
          "id": "b6ebbeee-40d0-449b-8437-3ee8f8241ff1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4da6ecd7-3204-41cd-9e83-ee0dd04cfe21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634b82e3-2189-4ad4-9b99-ed9edd6c84bd",
        "cursor": {
          "ref": "22c0c4ec-10cc-46e4-be2f-b024e6d29bd8",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f1226e80-44e2-4cd5-a448-36e12ef21a43"
        },
        "item": {
          "id": "634b82e3-2189-4ad4-9b99-ed9edd6c84bd",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4e45481d-30af-4e5f-8ab3-4e411719dd4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60570c6b-2cc9-4610-839f-07ada6d1a158",
        "cursor": {
          "ref": "abfbfec1-52f6-40e4-bddd-665edce0574d",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0b0d7ba3-ab4a-4f32-be0f-79edb21ee035"
        },
        "item": {
          "id": "60570c6b-2cc9-4610-839f-07ada6d1a158",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "61248166-2052-4f4b-8dfb-c12d3deccc2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bc6782-8705-4d87-9b18-249e9832289c",
        "cursor": {
          "ref": "9ea46d2c-3d1d-4564-b91d-ba5f1710c952",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "931bb0e4-5ed8-4018-b0d5-7fad457ea144"
        },
        "item": {
          "id": "52bc6782-8705-4d87-9b18-249e9832289c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2a1501f6-2b1e-41e2-b37d-4862b58023d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764f90fe-526c-4293-aecf-753e3d0ed850",
        "cursor": {
          "ref": "afbd3ff3-57ac-4bbc-a867-f58a07c1bcdf",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b0f61b31-655a-448c-8bab-7aae4f3df014"
        },
        "item": {
          "id": "764f90fe-526c-4293-aecf-753e3d0ed850",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fe1fa984-7bdb-485a-9193-4b97d6f538fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d896156-90e0-4be8-a4ed-260d38e9d0e8",
        "cursor": {
          "ref": "6f0fa551-71a5-4c3d-b313-ec6cfe47f13f",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "21cfe9df-f5f1-45fe-b63c-665a66e32baa"
        },
        "item": {
          "id": "0d896156-90e0-4be8-a4ed-260d38e9d0e8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0cc2263e-6b8b-4340-b4bd-59e06871ee1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7abac7f0-f103-425c-a109-ee2b8865cdba",
        "cursor": {
          "ref": "44da3e20-cfbd-4e1a-a485-a19581f1e4d1",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8be4849e-05f7-4eca-aafc-fe40ab2c85f0"
        },
        "item": {
          "id": "7abac7f0-f103-425c-a109-ee2b8865cdba",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d41fe7f3-ce42-4937-b512-4073a49dbbb6",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "ffd860ac-a7ab-4a00-bb33-a7427482dd03",
        "cursor": {
          "ref": "71daa946-648b-48a9-a42f-785286708ac3",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "20abfd4e-4d76-40fb-8ed3-2bbeb3aa04cf"
        },
        "item": {
          "id": "ffd860ac-a7ab-4a00-bb33-a7427482dd03",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "580358d7-a6b6-4397-b082-dd71a92c5e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5621378f-50fc-45f7-a33b-451751e93239",
        "cursor": {
          "ref": "6573c3da-fafb-4e2b-901f-53161d50012a",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "586f9462-3e1e-4719-a371-d74476a0bae3"
        },
        "item": {
          "id": "5621378f-50fc-45f7-a33b-451751e93239",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c8df8e4d-a242-4cf1-88cb-6c471ccef267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae782be-479d-4b88-9f3f-9aaa21a74837",
        "cursor": {
          "ref": "73496114-8dc6-4389-8aac-94f2135c2c16",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3684655b-bc9b-4619-a2e0-7007c546f78b"
        },
        "item": {
          "id": "cae782be-479d-4b88-9f3f-9aaa21a74837",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4fa9a537-fccc-46e0-bbfc-58b7fe97d428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1cbfc0-66de-4988-bcdc-3d3fa90f6fb5",
        "cursor": {
          "ref": "0b56acf6-64f0-470f-9a0f-1e9bb07e5bc5",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "821d9491-d869-41cf-a0e3-2ddb74acb3de"
        },
        "item": {
          "id": "7f1cbfc0-66de-4988-bcdc-3d3fa90f6fb5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e63fb14f-931a-4ef2-9785-bc25f63ffb83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7600cb-dd45-4618-a791-dd3ef85678a2",
        "cursor": {
          "ref": "fe9f6c47-7777-43ca-9091-e0ec00ec294b",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ce572f16-2145-422c-98dc-e89c98d2e67a"
        },
        "item": {
          "id": "9e7600cb-dd45-4618-a791-dd3ef85678a2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1b43cc14-bbd5-487e-bc7c-ff6e8dec1f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19741d6-e07c-4ab1-9bfe-ffda841e3ccb",
        "cursor": {
          "ref": "4b3fb8f8-4f97-4270-818b-7f39f14ef823",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bd4f7a0d-26f8-4435-b125-c174b904d702"
        },
        "item": {
          "id": "b19741d6-e07c-4ab1-9bfe-ffda841e3ccb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "acb643ec-0e84-4955-9ab2-bfc8bc5bf5c8",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "91500f43-082d-45e3-a2d8-a06e9e6e4be7",
        "cursor": {
          "ref": "1bef754f-f319-4756-8c79-00068d89462d",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6a80693e-69ee-4397-a3c0-f792166bfcb5"
        },
        "item": {
          "id": "91500f43-082d-45e3-a2d8-a06e9e6e4be7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3b1586f8-776a-4181-b9b4-3193ecfd3a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5561edbe-b0d2-4ed8-835d-09639fa44601",
        "cursor": {
          "ref": "530b83b2-ec4d-477a-8ebf-e6fb4b222668",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e067cccd-9b11-4d17-b194-ec2f9beabe13"
        },
        "item": {
          "id": "5561edbe-b0d2-4ed8-835d-09639fa44601",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f399a71e-c23d-465e-a7c3-1f20d0588b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b5e972-c395-4dd8-a8fa-f30f22e846b4",
        "cursor": {
          "ref": "951fcbd9-6d73-45d6-bf0a-7633bf1ef4df",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1ef182c4-aac3-488c-8fca-8f31172ad9ae"
        },
        "item": {
          "id": "b5b5e972-c395-4dd8-a8fa-f30f22e846b4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "86bbf4d0-3a5b-46aa-9e21-8033d7c22dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052a684e-348b-4eb2-bd02-8b006da93559",
        "cursor": {
          "ref": "888d391a-2288-44c6-84af-cabf84ae7575",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2f94df12-d9b4-4834-afb6-00497a80fb8b"
        },
        "item": {
          "id": "052a684e-348b-4eb2-bd02-8b006da93559",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ea5bc821-0b0f-4caa-a843-2a1705c1e91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2dd034-40bd-4dc1-b6ea-14cf92585ef5",
        "cursor": {
          "ref": "366fb29f-7a85-4f1f-bea0-348d5fcabf49",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7945a8bd-bccc-451b-8fa8-510e6aadc6e8"
        },
        "item": {
          "id": "fe2dd034-40bd-4dc1-b6ea-14cf92585ef5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6dff36de-ce99-4d8c-9ba2-25f9f8218c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000f1fc6-63be-4504-a087-34f8121e9b30",
        "cursor": {
          "ref": "cf4694d4-b4fd-42c2-8d84-1d2a94f6b82d",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d2d81861-0288-4593-abc6-869a66dc671f"
        },
        "item": {
          "id": "000f1fc6-63be-4504-a087-34f8121e9b30",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "88cc9397-c4f8-4e47-97ec-9922f8521578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95e8994-f754-40c0-b567-97f4cbf80114",
        "cursor": {
          "ref": "645e74d9-5c73-4ed8-9d25-8ddb7e66c769",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "09c71487-3dcb-40e0-922d-45ce6098b8a1"
        },
        "item": {
          "id": "a95e8994-f754-40c0-b567-97f4cbf80114",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0b38b518-14de-4e3b-ad13-38527fd2d7ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f44603f-a040-47d6-8b0e-4c1299a71073",
        "cursor": {
          "ref": "007db3ba-810a-4d81-903d-3c9ecc785727",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9314997b-b6d3-4560-8211-d779a86e3280"
        },
        "item": {
          "id": "2f44603f-a040-47d6-8b0e-4c1299a71073",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "01d8ae76-b1fc-4080-942a-1b6efc4f28e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8799a26f-6f92-4d8f-9c88-4c0406e7c9b3",
        "cursor": {
          "ref": "70f603d0-7ffa-4ba4-b40e-4b18044dd29f",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "663c33a5-df8e-425a-91a1-4232e75d9bf9"
        },
        "item": {
          "id": "8799a26f-6f92-4d8f-9c88-4c0406e7c9b3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "30055abf-dd6e-4708-bdff-0f28f5e390b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "b9b02806-57cc-4d37-8fd6-890c2dfc43fe",
        "cursor": {
          "ref": "3e96fd83-89fe-4a15-b4aa-8bc6f67d20f4",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ad6fe3f7-baae-4e7a-8e03-0264eebc0c3a"
        },
        "item": {
          "id": "b9b02806-57cc-4d37-8fd6-890c2dfc43fe",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "484a752e-e5c8-4705-8beb-8274f9bd182a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "fdb6ea50-c925-42f8-8594-b383b99e4c25",
        "cursor": {
          "ref": "8846894a-423b-4e62-9b54-a6503156bd8d",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9d11a64d-aa3e-410a-8eec-4db22ad4610e"
        },
        "item": {
          "id": "fdb6ea50-c925-42f8-8594-b383b99e4c25",
          "name": "credentials_issue"
        },
        "response": {
          "id": "621220c3-2088-42cf-a3fc-d40f8ab8bba4",
          "status": "Created",
          "code": 201,
          "responseTime": 417,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "716c03e4-2a08-4340-8515-80bb2d7c8769",
        "cursor": {
          "ref": "a3f59e09-8767-42e2-8407-06a1b9bba9e1",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "683dd241-2f0a-47d6-b904-ebff2dc99264"
        },
        "item": {
          "id": "716c03e4-2a08-4340-8515-80bb2d7c8769",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "03f48e02-7bb1-42b8-ba31-0e1462553acb",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb70960-2a04-4b7d-a29b-ce9ef24f5a5c",
        "cursor": {
          "ref": "9515a863-1009-43a3-8367-70a140b2a1ec",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "546309ca-12b7-47c2-a5b5-9f664e1e75e6"
        },
        "item": {
          "id": "0bb70960-2a04-4b7d-a29b-ce9ef24f5a5c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e414b821-0487-41db-a2b5-b838248c1a93",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cd86a2-d149-4a74-8e2a-ee5b7d7636e5",
        "cursor": {
          "ref": "d20dc816-f7cb-4d0c-8d05-2939c27a1776",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "16cf811e-5bb1-4c20-9165-768e6b32b570"
        },
        "item": {
          "id": "c2cd86a2-d149-4a74-8e2a-ee5b7d7636e5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4f03441b-a398-4e39-bdb7-a8ed32445ddd",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b145fe51-f77b-4b2b-9ade-d83ce0e8738e",
        "cursor": {
          "ref": "26b2c923-f47b-429b-8af4-7243b7771f0e",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3a685a3d-999d-41a5-8d3a-4ea279286573"
        },
        "item": {
          "id": "b145fe51-f77b-4b2b-9ade-d83ce0e8738e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5204f3cd-4abf-4566-b3e8-83d0178bb1bc",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "36271dfe-c647-4794-aec5-871fdbda8a14",
        "cursor": {
          "ref": "56ad8ca9-cc52-4a46-a655-bdf87705a645",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f065e9ed-a668-4aad-b6c7-cf231b782cdd"
        },
        "item": {
          "id": "36271dfe-c647-4794-aec5-871fdbda8a14",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "db0e09aa-42bc-4ffa-b854-fff0999a767b",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995bf65b-197d-4849-8207-3b6ea700c046",
        "cursor": {
          "ref": "32bedaf5-edb2-42c3-81eb-6d6224b9cb0a",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d8ec9fb2-e0c1-4f4c-b2e8-76c787224552"
        },
        "item": {
          "id": "995bf65b-197d-4849-8207-3b6ea700c046",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7130b78e-8156-4c81-900d-d852c25c2f32",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "995bf65b-197d-4849-8207-3b6ea700c046",
        "cursor": {
          "ref": "32bedaf5-edb2-42c3-81eb-6d6224b9cb0a",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d8ec9fb2-e0c1-4f4c-b2e8-76c787224552"
        },
        "item": {
          "id": "995bf65b-197d-4849-8207-3b6ea700c046",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7130b78e-8156-4c81-900d-d852c25c2f32",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "0a76a0b6-a8a2-4218-b983-4640f1acb196",
        "cursor": {
          "ref": "092e559c-60ed-4848-8ddc-3c09163c3105",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3e37170e-7ff8-4f3c-b761-c126199069b7"
        },
        "item": {
          "id": "0a76a0b6-a8a2-4218-b983-4640f1acb196",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "136f8d4c-e653-43c7-b739-9e4b68655675",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "a41a70e5-0123-4b3a-808d-3f72b9c99d39",
        "cursor": {
          "ref": "e929aef2-3a09-42c2-990d-1a56b919acd4",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5ad71bfe-9d89-41fe-bade-ba4337e3eb2e"
        },
        "item": {
          "id": "a41a70e5-0123-4b3a-808d-3f72b9c99d39",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6aec6a93-1c87-48d6-baec-77a617a90e21",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "4243df44-d2cd-4d7e-bafb-40a05b90773a",
        "cursor": {
          "ref": "76ced522-223e-449b-b301-5b671ede5b15",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "198573c1-3eb8-4fe6-a54c-30d1bebdd08d"
        },
        "item": {
          "id": "4243df44-d2cd-4d7e-bafb-40a05b90773a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a0bd331c-6a83-4bfd-b577-88a93ba5554d",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "a6cbb74d-8b0a-4da4-8ab7-563eca84fd76",
        "cursor": {
          "ref": "019698d9-5c93-4bbe-add0-94c0701e400b",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "add7938e-f6b2-4428-96a1-27bce686e82b"
        },
        "item": {
          "id": "a6cbb74d-8b0a-4da4-8ab7-563eca84fd76",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3ff69047-043b-49d5-a42c-305eb3493ac0",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "28145ca6-d17e-4d29-b8c0-a28446952b27",
        "cursor": {
          "ref": "74b07888-60f8-4ccb-802e-602dedc16737",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "401c86b5-419e-4acd-b8c0-a352f10874f1"
        },
        "item": {
          "id": "28145ca6-d17e-4d29-b8c0-a28446952b27",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b095021e-5cc1-4dee-8f5a-35b31d87a51b",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "4f9bf443-bf3a-4361-bb5b-acc4facce22a",
        "cursor": {
          "ref": "5eeef599-4fa9-4abf-be5d-ff66ebcbb324",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e69aa798-ae95-46e8-b59e-1162e148f2d5"
        },
        "item": {
          "id": "4f9bf443-bf3a-4361-bb5b-acc4facce22a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "850f1a9a-9556-4e08-8716-064587efc178",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f7003f85-280c-454e-a83c-904bc082a7c8",
        "cursor": {
          "ref": "8d3a0720-51a6-4382-82f1-8163516fdcad",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "91fd1991-3537-466d-aca4-405444e964fb"
        },
        "item": {
          "id": "f7003f85-280c-454e-a83c-904bc082a7c8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6a0a6c9b-3928-4bf6-aa8e-e221fcd0ae45",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "d0a78d3d-4e81-492d-b9f5-615f8b27086e",
        "cursor": {
          "ref": "98caf970-58d7-4432-92ce-3f199605072b",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "761332e6-0998-4fd5-be16-99222d71775e"
        },
        "item": {
          "id": "d0a78d3d-4e81-492d-b9f5-615f8b27086e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d7e893cd-3e4a-438f-ad0a-0d21b0934d9f",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "f99164af-d57c-4eb2-8c16-664fc3fbe08d",
        "cursor": {
          "ref": "8dc7b3b8-763c-4168-b241-77cb60a0243e",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9fcd5a9d-90dd-45df-89f1-b2a64408caa3"
        },
        "item": {
          "id": "f99164af-d57c-4eb2-8c16-664fc3fbe08d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4fbb830f-9b1c-41c3-8188-4e2e359813f6",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "47efd640-763f-40ea-9b2a-dd4f6aee693b",
        "cursor": {
          "ref": "530665cf-0e2e-4486-8866-e2c366238546",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "47ecb345-6bb5-4291-96c3-b023db420bbb"
        },
        "item": {
          "id": "47efd640-763f-40ea-9b2a-dd4f6aee693b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "48915faf-be4d-4f4e-b9b0-a110b842eb39",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "d2cf1d50-2b3e-41a1-8b1f-f95f22199a81",
        "cursor": {
          "ref": "63092765-1854-4cae-9a79-c2cd1e71fd12",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "18c20495-a713-448a-96a1-e541529ccf64"
        },
        "item": {
          "id": "d2cf1d50-2b3e-41a1-8b1f-f95f22199a81",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "407c2f29-16de-4a44-b4ff-f726344e8412",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ed6b102e-11d8-408f-81d7-bbfcf6b69598",
        "cursor": {
          "ref": "e9dcc91e-ff74-4a0b-be4a-79e927717b4f",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a3b58cdb-51b2-49c8-b06f-fe6ae8ea4a9f"
        },
        "item": {
          "id": "ed6b102e-11d8-408f-81d7-bbfcf6b69598",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bc773fd4-93e4-4752-9cf1-6fbeb7bf9f6c",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6be00dc0-d188-4777-83a6-f5d210ebe097",
        "cursor": {
          "ref": "f21a02fe-e6cb-4e0f-b53e-53db2da81d9e",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dc4fd72d-4fbe-44f3-be27-275bde86854d"
        },
        "item": {
          "id": "6be00dc0-d188-4777-83a6-f5d210ebe097",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ffec14f4-4af0-4e79-81be-752e77c292da",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "9c7cfb31-a1d1-4077-ad6b-d0262892748a",
        "cursor": {
          "ref": "c8656fc2-b618-4be2-a47f-6fdd8a16d819",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "badc68a7-d875-4da6-bea7-30eda315fe4f"
        },
        "item": {
          "id": "9c7cfb31-a1d1-4077-ad6b-d0262892748a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a7b2888b-377e-49a3-b61b-2b6146658efa",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b5cfa744-3026-4087-b490-d924272470cc",
        "cursor": {
          "ref": "5ed72dfb-e93d-495d-99d7-71b9b0dcb601",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "95be6c4f-e404-4891-bcf7-b1ea589504a2"
        },
        "item": {
          "id": "b5cfa744-3026-4087-b490-d924272470cc",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5544e094-c822-4c59-a4d2-7345a5f59ab2",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "e04a9fd7-173f-4108-89ba-1fb4a92f5920",
        "cursor": {
          "ref": "8a1171aa-0a72-4be2-8d3b-1f6eb46f546d",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "61fecd4c-4eef-4c8a-bd2b-27d020a61cb4"
        },
        "item": {
          "id": "e04a9fd7-173f-4108-89ba-1fb4a92f5920",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0e49c923-33e4-4dac-8f91-b86694b91be8",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "41215afe-5bd9-4e9c-8ec3-06010a3b3bd4",
        "cursor": {
          "ref": "6b2c9037-cd66-46c6-95d6-cb7d4720277f",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "018c5bf7-505e-4514-bd5e-61f1b675831e"
        },
        "item": {
          "id": "41215afe-5bd9-4e9c-8ec3-06010a3b3bd4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c981de2d-ecf4-49e9-af4b-5b7a07c1e5bb",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "d685ffcb-d6f0-4357-bae4-42f6da8191d6",
        "cursor": {
          "ref": "4c4dac9b-c7aa-4a5e-a625-c046a9f36e9b",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c8e3d93b-8b6d-4274-b2c9-bd7aff8ee966"
        },
        "item": {
          "id": "d685ffcb-d6f0-4357-bae4-42f6da8191d6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "226c30a4-b2b2-4cd6-9c2b-a6fbead37dcc",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "7a50fee8-7469-4a90-b667-9d17d5584f91",
        "cursor": {
          "ref": "9340a4b6-c19a-4ac1-8db2-5b6456b1880c",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c3446757-d9e3-4dd6-a5cf-bde01807b21e"
        },
        "item": {
          "id": "7a50fee8-7469-4a90-b667-9d17d5584f91",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "945abda4-584d-47a5-81c6-7467eea0c68f",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "7549fe8a-0fcc-4f18-8cc2-7dc9e93d2ec5",
        "cursor": {
          "ref": "e9fc6dfb-2118-4f99-9e4d-f376da9f0b70",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a6ec4495-059d-4506-a370-c18626fe071b"
        },
        "item": {
          "id": "7549fe8a-0fcc-4f18-8cc2-7dc9e93d2ec5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e688ca73-0c95-461d-a85e-948d0da0d254",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "87fbcd2f-fc56-4df9-ab56-c49e9b197d6c",
        "cursor": {
          "ref": "23aa4dd9-f9e6-4795-b6ae-7ccd4cdac849",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6f49aba1-d55b-442d-9e24-7e3b519bdba5"
        },
        "item": {
          "id": "87fbcd2f-fc56-4df9-ab56-c49e9b197d6c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e711e595-cfe4-47d4-995f-43a150545af5",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c8d2b892-9950-45b2-a2da-7533a3c505b2",
        "cursor": {
          "ref": "6ca233ce-0373-47b4-afa3-baf1e8ce902d",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0f1fe7f7-ed8c-4a87-a70b-de40170b55ea"
        },
        "item": {
          "id": "c8d2b892-9950-45b2-a2da-7533a3c505b2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "95df77dc-00d2-46c9-ba46-74bc4628f4c3",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "10cecef5-70a5-4cfb-9dbf-f14368b7fbcf",
        "cursor": {
          "ref": "14282f03-ba43-47aa-8be9-d636bf66971f",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3c75d41a-73ef-42d7-8090-088b6a201714"
        },
        "item": {
          "id": "10cecef5-70a5-4cfb-9dbf-f14368b7fbcf",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7e9b397d-cd40-4550-8d49-c6f63a975285",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "375f3b32-3bbd-445e-93de-fbd39d977139",
        "cursor": {
          "ref": "3f6a1c22-d1d4-454c-a8b3-73c6a5ce67ec",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "073ccfdd-694f-4b9a-a767-90082a534afc"
        },
        "item": {
          "id": "375f3b32-3bbd-445e-93de-fbd39d977139",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0427b3c4-2ec5-42bb-9c36-7b92a73ae055",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a540802b-ab1b-4c90-8826-50c4a08c7ffe",
        "cursor": {
          "ref": "8d0071ff-2042-404f-8eeb-899952a68dc8",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ba10ef3d-70a4-426d-9bc9-591150626f17"
        },
        "item": {
          "id": "a540802b-ab1b-4c90-8826-50c4a08c7ffe",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c817f53b-ff3c-44c3-ba8d-73355c609763",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "ad2c5741-2254-493e-b58b-c6b2a5b06b4f",
        "cursor": {
          "ref": "42360888-7b96-4dd9-a9f6-2aa650acb82b",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "82fb1c24-badc-49ea-9ac6-793253b81889"
        },
        "item": {
          "id": "ad2c5741-2254-493e-b58b-c6b2a5b06b4f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e54e4fec-513a-48b8-91c5-8a95621f2e75",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "262cb3bf-34f2-492b-bc62-f5c41bf7a461",
        "cursor": {
          "ref": "01df479a-8fe1-4c4d-9c63-038ce5a3f13e",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ee62b746-9075-414b-9fe5-fda68b21bbb3"
        },
        "item": {
          "id": "262cb3bf-34f2-492b-bc62-f5c41bf7a461",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "77e74d01-ebf5-47ef-9550-4cd63fd584ad",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "1fcbb995-816e-4cbc-b9d7-08e7bc5c78f9",
        "cursor": {
          "ref": "fb970224-b84e-418f-b0c5-cd6117a93e2f",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "93255ac3-936f-455f-89e3-08c870f751ca"
        },
        "item": {
          "id": "1fcbb995-816e-4cbc-b9d7-08e7bc5c78f9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "74ca5cdc-2fab-4118-940e-88289607efd0",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "bdf5e9d4-1fab-472b-b42b-6d1b283ab08a",
        "cursor": {
          "ref": "10ae5e6c-257c-42c6-9597-b78b00615639",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "20c5f73c-43bd-42a8-8597-097af1641413"
        },
        "item": {
          "id": "bdf5e9d4-1fab-472b-b42b-6d1b283ab08a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f986fed2-5ce4-4002-999e-b26d61e5d012",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "12195422-19d5-4596-96a3-602e7d8d5f6a",
        "cursor": {
          "ref": "3c158526-8d77-48d3-be25-bff324941099",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7b07943a-b553-408a-910d-8f7a5a12e638"
        },
        "item": {
          "id": "12195422-19d5-4596-96a3-602e7d8d5f6a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fb6d6880-b3cb-46f8-b35d-6945acbddca6",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "6697d92b-a08b-4d13-b22e-e552543f1ecb",
        "cursor": {
          "ref": "27a8f255-2f80-4726-893d-b50dc121ffd4",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "79911975-1fb1-4aa3-806d-0a8339cc5b6d"
        },
        "item": {
          "id": "6697d92b-a08b-4d13-b22e-e552543f1ecb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "dac84868-5c16-4d72-a968-9135b6382653",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "eb64c8f4-a0ce-4885-b2ff-9ef30b8bbbad",
        "cursor": {
          "ref": "50e64ec2-794f-4ada-a256-7ead5c84a230",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f1fc9c6b-2139-49a6-bb5c-ab8d925f1aae"
        },
        "item": {
          "id": "eb64c8f4-a0ce-4885-b2ff-9ef30b8bbbad",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0560e8d7-854c-4460-a020-163d59971272",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3820da40-6439-40cc-8484-7fa5f91636fd",
        "cursor": {
          "ref": "e7398b17-c000-4048-8a10-479ec1503b69",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2535073f-75fe-485d-bec8-7f39b2aba95b"
        },
        "item": {
          "id": "3820da40-6439-40cc-8484-7fa5f91636fd",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "44362d1b-5f0d-4931-8d12-62bf6c8701fc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 43,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93dccc2d-0197-4f5d-9d04-603c1c8f6878",
        "cursor": {
          "ref": "6eb39875-1713-44e0-849e-5e2cda2efb5a",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1e989d92-3382-46b5-9566-bcde9e5bac8e"
        },
        "item": {
          "id": "93dccc2d-0197-4f5d-9d04-603c1c8f6878",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6cbfe3a9-7419-4693-acda-0bbb16d81da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93dccc2d-0197-4f5d-9d04-603c1c8f6878",
        "cursor": {
          "ref": "6eb39875-1713-44e0-849e-5e2cda2efb5a",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1e989d92-3382-46b5-9566-bcde9e5bac8e"
        },
        "item": {
          "id": "93dccc2d-0197-4f5d-9d04-603c1c8f6878",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6cbfe3a9-7419-4693-acda-0bbb16d81da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef9a7bb-6044-4db3-8a56-c3d06419ecf1",
        "cursor": {
          "ref": "c10ffd74-415c-4132-84be-7ea440c356f5",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1fb79415-1a4a-4236-a0a2-cf9febcd1a7d"
        },
        "item": {
          "id": "0ef9a7bb-6044-4db3-8a56-c3d06419ecf1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c384e270-e7d3-496a-922c-4a717cc8f5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f0f25c-9301-4bd4-b754-13c4535e0aae",
        "cursor": {
          "ref": "248f1c4c-1cfb-4661-87c4-d5c81d7a6910",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d3449540-03c5-4e3c-9252-60e6d0d7e457"
        },
        "item": {
          "id": "f0f0f25c-9301-4bd4-b754-13c4535e0aae",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b8813d96-3825-4b6b-9605-dab8c68304d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46a80879-d8ab-4d36-a9c0-02fdeaff069c",
        "cursor": {
          "ref": "fba3a2c5-91d0-4906-87b2-9a5e6b55e325",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "77a91852-bbb3-4098-9dc4-d395c504077e"
        },
        "item": {
          "id": "46a80879-d8ab-4d36-a9c0-02fdeaff069c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c287c8f3-1513-49ef-af71-93ec2e1cf6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bb52d3-9a8c-47f8-aa49-a3111e985a7c",
        "cursor": {
          "ref": "04ead1a0-e2f5-4fa6-ab4c-7744056caee7",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9949e44c-2b1c-40af-bf9c-70be4dc5d114"
        },
        "item": {
          "id": "b9bb52d3-9a8c-47f8-aa49-a3111e985a7c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d36957a2-85ad-43d6-aa06-d7867be59831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4235a3a6-70c3-438b-95bb-15e2cc221463",
        "cursor": {
          "ref": "736cde65-2718-47e2-8ac8-8ee118489265",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8e30602a-b812-4291-a6f2-685070371172"
        },
        "item": {
          "id": "4235a3a6-70c3-438b-95bb-15e2cc221463",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1029cfce-8f99-4408-b046-667707fd7339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82598166-9e3e-44d0-bd15-d70deb12a054",
        "cursor": {
          "ref": "407fef78-f433-461a-b408-e7f63009549a",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4beff85b-d32b-479a-8a58-53edb8abbf10"
        },
        "item": {
          "id": "82598166-9e3e-44d0-bd15-d70deb12a054",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "62da4f35-bbf1-4943-94da-5929a06eddf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 641,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2cf4138-3ed9-4fbf-b621-7581d4204dcd",
        "cursor": {
          "ref": "2e4b6c5d-8f9b-469d-9096-f59a6a5781b3",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cf2b2d99-01f6-4559-9781-2b24d82c0d8c"
        },
        "item": {
          "id": "f2cf4138-3ed9-4fbf-b621-7581d4204dcd",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "332af74b-1713-438b-b5d2-0c2e410ec0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a654b65b-e428-46ab-a720-92f1a2d688d4",
        "cursor": {
          "ref": "04455c1e-f2c6-43c2-85e0-8951213d48cd",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e8fb045e-4761-4111-9d42-5d6b5835b214"
        },
        "item": {
          "id": "a654b65b-e428-46ab-a720-92f1a2d688d4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "28c94565-8bf6-4453-a4df-00ab11faaefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf83ce84-7b49-435f-aaed-25e2a6ac980b",
        "cursor": {
          "ref": "b3c26778-5961-4d31-b8bf-a7b53ae75e77",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "08316839-7e47-4b1c-9d13-7391d3d0c2b5"
        },
        "item": {
          "id": "bf83ce84-7b49-435f-aaed-25e2a6ac980b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "eefbf742-8b40-4445-915a-3465d416908e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48841950-fb45-4e90-b08d-a18972b8ad87",
        "cursor": {
          "ref": "d31b5d89-b4ea-4712-9752-93f6bd426a3b",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "aec05536-b43f-4a46-ae27-2b0ce8d4fbb6"
        },
        "item": {
          "id": "48841950-fb45-4e90-b08d-a18972b8ad87",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "28ac2dc5-9750-4093-a48c-139590fa9343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57729406-900d-4bfd-9491-0b9a1b2f89fa",
        "cursor": {
          "ref": "5fbc87df-bb3f-4748-a2db-1609a40bcb2d",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f99f6207-3d52-4d1c-89ea-27973ac8386e"
        },
        "item": {
          "id": "57729406-900d-4bfd-9491-0b9a1b2f89fa",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a8d1affa-cc01-45f7-a338-d94e354ea310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf9bff6-68af-40f3-a126-0796487f2b7b",
        "cursor": {
          "ref": "e04bc5e6-740e-4e05-a615-2d44af4deae1",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "04e05e19-5995-4287-9e58-2f38cafe1ebe"
        },
        "item": {
          "id": "7bf9bff6-68af-40f3-a126-0796487f2b7b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "807bea71-e6d6-4597-b2e3-0e31b19119c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952e465f-0cd0-4a6b-a99e-c3135c20c221",
        "cursor": {
          "ref": "2f6dc1b6-eadb-4d45-be7f-7fa8937cf7cb",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4552ce01-0a8a-4ddd-afad-1d5367dd4eaf"
        },
        "item": {
          "id": "952e465f-0cd0-4a6b-a99e-c3135c20c221",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e7b8c900-7266-4ea2-97ac-cd641997e226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d75655-564a-4fbc-b02d-5c298d52466b",
        "cursor": {
          "ref": "07683b0c-9fc2-4f3a-b50b-aea51830629a",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "055870eb-6645-481c-8ae7-26973fda404f"
        },
        "item": {
          "id": "b9d75655-564a-4fbc-b02d-5c298d52466b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4b9887de-57e0-4e32-af3a-af664fe6d45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2e1f60-e488-46ac-81d4-65011bf30f69",
        "cursor": {
          "ref": "45fb25e8-8bb5-4395-a98e-2afda5a3f272",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "68545e77-f8ea-44e7-85f5-c7be3cd51c68"
        },
        "item": {
          "id": "be2e1f60-e488-46ac-81d4-65011bf30f69",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8d7b4e41-908b-4a76-a256-69689ea0ac7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7330ec94-0ecb-48f4-93b0-d5fc4e2bbb06",
        "cursor": {
          "ref": "4de0e068-f166-4032-9424-3b3419067111",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4a7271af-2578-4ef3-aab5-7b96ad607e15"
        },
        "item": {
          "id": "7330ec94-0ecb-48f4-93b0-d5fc4e2bbb06",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d01710d8-f2f0-4b0d-8d24-f683fc55b720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e973b9a-1a35-4cc5-aa41-fa2a034f616f",
        "cursor": {
          "ref": "9d8a908d-ecda-4a38-a576-a85c079ca5b8",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4bf64aa6-8599-4539-a8c5-cb83336fb4a7"
        },
        "item": {
          "id": "5e973b9a-1a35-4cc5-aa41-fa2a034f616f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6a47088b-e68a-4e2b-8135-e723998fbc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 325,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61dced9c-3b85-4c0d-8ab7-9cdc687aec9b",
        "cursor": {
          "ref": "6fc4f428-d465-48d1-afc8-bac6038142ad",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a538460b-9bdb-43fa-b317-bfe238690b73"
        },
        "item": {
          "id": "61dced9c-3b85-4c0d-8ab7-9cdc687aec9b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "034d7303-8276-43db-834e-33dcab86fb8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d447769d-1694-4889-85be-397bb8e0cd34",
        "cursor": {
          "ref": "09a0059c-a91a-4370-ae80-1ac163be29ad",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "59ca0a8e-6cf3-48fd-9edd-4448b33ebf05"
        },
        "item": {
          "id": "d447769d-1694-4889-85be-397bb8e0cd34",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8c45d426-c3aa-440e-9626-b95e02e884b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce83074f-5ac3-4cae-9433-11635b7592cd",
        "cursor": {
          "ref": "e103e079-452a-4533-8ac8-a65b1a906afb",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ef30fa0c-4cae-44f5-b65e-249c2a744915"
        },
        "item": {
          "id": "ce83074f-5ac3-4cae-9433-11635b7592cd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f4a27be0-6c2f-4089-8e5b-305145122f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3bd449-317d-41f1-bcb7-7a02b11f8e15",
        "cursor": {
          "ref": "3e002ca9-4a8a-40d0-8a41-88cb34086958",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fde77a1f-02aa-42f2-9264-c25a1fb352bc"
        },
        "item": {
          "id": "5b3bd449-317d-41f1-bcb7-7a02b11f8e15",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8bc64868-75c9-4be6-8349-cc5b3c6d8fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03ebc3d-e2d3-4e89-ba51-981fdd4afab9",
        "cursor": {
          "ref": "ea5e4c4a-6730-4713-8e3e-be89efff1d8c",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a954a450-7695-4611-8b59-b0bd4709998c"
        },
        "item": {
          "id": "e03ebc3d-e2d3-4e89-ba51-981fdd4afab9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2c6c662d-775b-4138-a6ce-8c6e2463fe3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874a610c-6c2b-4864-856e-b4fba119884d",
        "cursor": {
          "ref": "a7d39d7a-0dd3-41ba-9d11-36855f3e7217",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0ae1d1fd-40a8-4680-804d-f2a821b58c1e"
        },
        "item": {
          "id": "874a610c-6c2b-4864-856e-b4fba119884d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "386bf2d0-494f-4e67-ac3c-0a2130f1d3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a3b9dd-1ba1-4330-a9a0-8b0fe3d4c955",
        "cursor": {
          "ref": "a7895b98-0637-4238-8b54-86392257a397",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3bc900be-9093-4080-a52d-87a989323e67"
        },
        "item": {
          "id": "d4a3b9dd-1ba1-4330-a9a0-8b0fe3d4c955",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "eb5062e5-48fe-4917-a3ab-af580f1fc29d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3298fa-c8b2-4d89-9834-037f90b12b8f",
        "cursor": {
          "ref": "dbe78001-5dcd-4d04-92df-b895f7971d8e",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a98c09c4-6462-4494-bbe0-f7318fd04017"
        },
        "item": {
          "id": "5f3298fa-c8b2-4d89-9834-037f90b12b8f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1fb86eb5-c3dd-4cd0-822a-b725ebb3c075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1de8ad6-06bb-4c45-b964-a0e065036a6d",
        "cursor": {
          "ref": "34dd289b-9fed-4f4a-ada5-bcb65ca718c1",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d915db31-72bb-45e3-ac7f-bd401d5aa236"
        },
        "item": {
          "id": "f1de8ad6-06bb-4c45-b964-a0e065036a6d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3429454b-456d-4c5c-84ea-d9d6cd16524b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1413a7-1379-425e-800c-eea6b04bf83e",
        "cursor": {
          "ref": "ce6608cd-883f-455f-a65e-268664b426c8",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "af86c4e7-3743-4b70-b7a2-39251239ec3b"
        },
        "item": {
          "id": "bc1413a7-1379-425e-800c-eea6b04bf83e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "df636e19-d369-4f01-8e53-f1a88ad40813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a03d32-71b4-42f6-b84c-b26497fcdfec",
        "cursor": {
          "ref": "d2e52d11-749c-4bdf-986b-9ccc0d5c03ef",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "70cc3a1e-e4a6-4d2b-ae64-2b31f835bbeb"
        },
        "item": {
          "id": "10a03d32-71b4-42f6-b84c-b26497fcdfec",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c6651b77-fae6-412c-9423-c22efce4bd0e",
          "status": "OK",
          "code": 200,
          "responseTime": 209,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "68b0a783-0bea-4570-aa3f-a2f06b1e259c",
        "cursor": {
          "ref": "0c29b7d9-d985-477d-b8b7-921807d9d49a",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9d6cff9a-cde8-4285-8821-0d5a5ea2333b"
        },
        "item": {
          "id": "68b0a783-0bea-4570-aa3f-a2f06b1e259c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5ee889e3-460e-4d2a-9242-00a7d2490dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dcb4338-b195-4ad9-8ef6-ad162ad779bc",
        "cursor": {
          "ref": "4b911cd9-0974-43df-99d3-25bd6f0ff352",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e7eff31b-81c6-4e70-a4dc-ccba4abf63c3"
        },
        "item": {
          "id": "5dcb4338-b195-4ad9-8ef6-ad162ad779bc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "966b4463-4aeb-480c-8af4-f6e7db9f9b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b99f953-2ec5-4b79-9bc5-a360072859f2",
        "cursor": {
          "ref": "6fd19b02-e710-42ad-86bd-7ec005d9c83e",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "eababa2e-2378-4713-917e-9cd3f87a31eb"
        },
        "item": {
          "id": "6b99f953-2ec5-4b79-9bc5-a360072859f2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4e28236f-8190-4bce-92c0-96a17073751e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9b8775-8753-49de-829b-6c5724380cf5",
        "cursor": {
          "ref": "107ad8e2-51a0-4cb5-9061-83aca2f8b78f",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6392fe27-1b81-42a1-9954-a238e42ae9ba"
        },
        "item": {
          "id": "5c9b8775-8753-49de-829b-6c5724380cf5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c64f559d-75ce-4865-899f-e5b8dda9ff39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0a0449-1fa2-4253-bd1f-307fff5de418",
        "cursor": {
          "ref": "fc9db8aa-69b1-4806-afae-be303f1e3259",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9061c46a-ac58-491f-b78e-43cb69dff55d"
        },
        "item": {
          "id": "2d0a0449-1fa2-4253-bd1f-307fff5de418",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3915fb48-33da-4db5-a1c1-ef0ba2720ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9576ac35-5fff-40f4-a233-e7cb4c25639b",
        "cursor": {
          "ref": "14f40a04-5218-4294-8965-66c4a19e117c",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b90f1db4-c3a7-44d3-8c86-293907b01641"
        },
        "item": {
          "id": "9576ac35-5fff-40f4-a233-e7cb4c25639b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c4b19338-c43e-4e34-90a4-d978bc297286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1a2c9b-2cab-49d1-8192-b6860a72ff01",
        "cursor": {
          "ref": "9db38cb9-7f25-4b1c-8fe4-c7ee82144666",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3dd58570-3b9c-4624-a39d-c29318847606"
        },
        "item": {
          "id": "1e1a2c9b-2cab-49d1-8192-b6860a72ff01",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "19c10486-eacd-4559-9daf-29e795105ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8b695c-cbb2-4193-9902-1274a13b52f9",
        "cursor": {
          "ref": "056b0781-13d0-41e6-858e-3792e3d82215",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3178cee1-5e6f-4e99-9014-fb54e1ff9ee4"
        },
        "item": {
          "id": "bd8b695c-cbb2-4193-9902-1274a13b52f9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d9492749-7b44-42b8-9b84-bd43f733897a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720c0e90-4f17-4c3a-98c6-1021232313b0",
        "cursor": {
          "ref": "b31f07dc-bfc3-49bc-981a-b018672a1bf4",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2f4ad32d-b550-42f5-a8fc-5b4589cb1759"
        },
        "item": {
          "id": "720c0e90-4f17-4c3a-98c6-1021232313b0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "54b01eb6-0dd1-4eb6-a1a0-715bef875f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438497ba-45ae-4556-bb6c-7be500fe85d9",
        "cursor": {
          "ref": "df5d4bec-d976-48b5-b737-f32e501f0c7c",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "de1b2613-f8e6-4ddb-adc1-17fc64b9db92"
        },
        "item": {
          "id": "438497ba-45ae-4556-bb6c-7be500fe85d9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c8956910-e10e-41f8-8035-3f4056316cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12ed3e6-0186-4765-8c00-ec95be660a82",
        "cursor": {
          "ref": "0146b583-d971-4060-9804-a5d203f9e50a",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a0477260-84cc-4d21-b5e1-1effc3f43042"
        },
        "item": {
          "id": "c12ed3e6-0186-4765-8c00-ec95be660a82",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "068061bf-4cca-4cf5-a694-e3f7ccd1965a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfb8b45-b8e0-43c0-ad46-8b82f00fbbc5",
        "cursor": {
          "ref": "945af370-7aec-464e-9c21-a6c2e8128ac9",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3bb68af6-a437-4b46-88e7-970acc3f2d54"
        },
        "item": {
          "id": "4cfb8b45-b8e0-43c0-ad46-8b82f00fbbc5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "522a4965-aa61-41f6-8da1-f54256493e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0cba47-3738-47ba-b502-5a646306cd01",
        "cursor": {
          "ref": "c6bd3624-8b0f-4bd8-be14-c990b3cb6945",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "727e1395-b7c7-43d3-bbf9-df8296ca7bf5"
        },
        "item": {
          "id": "8a0cba47-3738-47ba-b502-5a646306cd01",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ccf569d4-d445-488e-8523-ead54bc2715e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07684f2-01aa-4344-94b5-fc4d7145b3b1",
        "cursor": {
          "ref": "e70802b5-911a-459a-bcf3-add6ad118f6a",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "590911e6-79ba-48ef-8e7a-5b0fbaaa87be"
        },
        "item": {
          "id": "c07684f2-01aa-4344-94b5-fc4d7145b3b1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2a1883b8-e632-4e47-a91e-c13665e2c090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679a1e59-f9f7-4606-a982-bdd0f192b8f4",
        "cursor": {
          "ref": "8854a76f-89be-41d2-a2ca-ba057b0d657e",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5f625e5b-0753-4eca-b508-a5519ee0e7fd"
        },
        "item": {
          "id": "679a1e59-f9f7-4606-a982-bdd0f192b8f4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3156f3a3-def6-4631-8025-6398b8cfb87e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28428b68-827b-4810-b2ed-939c4eedcd9e",
        "cursor": {
          "ref": "7f8054e6-086b-4f98-82e0-bb7daed1c0be",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a008856e-ab5b-4eb8-b9a5-333d809dccb1"
        },
        "item": {
          "id": "28428b68-827b-4810-b2ed-939c4eedcd9e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f12c7ff7-50f9-43e2-997a-d20d6e207edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe8501d-82d9-41d8-a76b-ce32bd88a335",
        "cursor": {
          "ref": "7ffaea7c-1be1-4d08-b832-6d6b31d45210",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "253edf60-92af-4b48-83cf-4f802328411a"
        },
        "item": {
          "id": "bfe8501d-82d9-41d8-a76b-ce32bd88a335",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bc2301fb-e7ce-40e3-a316-41b2e2011b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3475bc2-7f0d-4055-a902-cf71d97f4464",
        "cursor": {
          "ref": "cc31b4e1-2021-44df-bf67-14f47cfb21e9",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a4cf8755-26a1-4c72-9844-9321653cedde"
        },
        "item": {
          "id": "b3475bc2-7f0d-4055-a902-cf71d97f4464",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7bb6859e-b77a-4224-9c71-ecf41290f2fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4551121f-d395-45c4-b2ab-1b2a570556d9",
        "cursor": {
          "ref": "9c285d45-4f16-4c17-bed3-af78df56dc40",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "76ec2a5c-fdab-4315-8071-a322930d241a"
        },
        "item": {
          "id": "4551121f-d395-45c4-b2ab-1b2a570556d9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "50436d00-05fa-4847-94af-3cb75074ff05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556a3caa-0f85-4cc0-a43b-c347e5f297a6",
        "cursor": {
          "ref": "09f5a201-f7cf-4de5-a44b-21e395ccf26f",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "74d43f38-035c-40e3-95b5-636a13ead00a"
        },
        "item": {
          "id": "556a3caa-0f85-4cc0-a43b-c347e5f297a6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "aeb30115-eedb-4a51-a50f-a647a35da259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ae738c-1666-44a1-baae-ecd5ad94052d",
        "cursor": {
          "ref": "03773a47-ee73-4582-a6eb-462c240f9414",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f889d444-696f-4140-9205-dfacc6597bbf"
        },
        "item": {
          "id": "54ae738c-1666-44a1-baae-ecd5ad94052d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9e2c1640-5d74-4e23-9fad-6ee42eabb8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d925ec9-b467-4ebd-ba61-96953cb4bb72",
        "cursor": {
          "ref": "1fbfc325-58a8-4db3-bb2a-2012b92c15e7",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "51a9e58a-1e65-44ca-878e-f0bf8d1ad680"
        },
        "item": {
          "id": "5d925ec9-b467-4ebd-ba61-96953cb4bb72",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "41002c94-cf43-492b-9613-793bfd0591bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a1ce14-4e0a-473e-a1ab-7b753743ed8f",
        "cursor": {
          "ref": "14271834-8fdf-475a-bc56-f83b4787507e",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "df1bc0a2-cd81-40c0-a87d-1fa6a1c7129f"
        },
        "item": {
          "id": "e5a1ce14-4e0a-473e-a1ab-7b753743ed8f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "544dff31-df36-41b5-842b-80898db3c692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251df23c-d511-4702-9b87-32735bdeae5d",
        "cursor": {
          "ref": "84883e5f-f038-4722-9e2c-bfa8a9db760d",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b2c1edbd-fcc9-4cd7-9303-9bc8c53bd5c7"
        },
        "item": {
          "id": "251df23c-d511-4702-9b87-32735bdeae5d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2fc4fb06-9fd3-4b86-beb7-3f6b68179e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97cb93a-6400-4bae-b0a2-cea4fcdf6e00",
        "cursor": {
          "ref": "06a47fd4-fa80-43c4-89f4-e45ad02bd860",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "57847040-ee82-4d59-95c3-ce6633d2f0b0"
        },
        "item": {
          "id": "e97cb93a-6400-4bae-b0a2-cea4fcdf6e00",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d75f0612-f448-4f26-af39-764eb863d408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772d3085-b4be-4d0d-9ca9-d3996d83f4d1",
        "cursor": {
          "ref": "f6fda43a-118b-4c12-ac2d-ffc5f5055c39",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0ad74c38-c940-44ab-b430-62199b067bee"
        },
        "item": {
          "id": "772d3085-b4be-4d0d-9ca9-d3996d83f4d1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5ee1114f-0985-4974-8c0e-8ecfa74e2101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef31f6a-aeae-4825-b8a6-9c4879070bea",
        "cursor": {
          "ref": "bd3d2393-6d1e-4f02-b1d9-89c369b3e5a6",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9c7f6a90-1276-4eb0-856b-2e6541c1e7fb"
        },
        "item": {
          "id": "0ef31f6a-aeae-4825-b8a6-9c4879070bea",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c0eccb6f-a443-45c3-bf5f-cab94cde5d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2fd6e0-74c3-4ef7-b070-faa14592f134",
        "cursor": {
          "ref": "64b49142-2a3c-46f6-a714-9a1a3f2529b9",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "12497410-1b05-4ccf-b037-eb51caa7de96"
        },
        "item": {
          "id": "1a2fd6e0-74c3-4ef7-b070-faa14592f134",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8617d334-85f5-426c-9826-f6602e1ef326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca03daf-edac-4c24-8e36-f2208b934154",
        "cursor": {
          "ref": "cb069361-c3cd-4e29-b2c5-c28684d61a6a",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "dc162d5f-f73e-4ae9-8ad1-40e6fca03db9"
        },
        "item": {
          "id": "5ca03daf-edac-4c24-8e36-f2208b934154",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "780dbe11-d723-4982-a71c-833328dd73c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df81723-c048-47d4-a163-f642d2d156a2",
        "cursor": {
          "ref": "77a5f239-10dc-40e4-a263-678580ef6ae4",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f0fca183-2acd-4f9d-9cdc-414b80a3bd9e"
        },
        "item": {
          "id": "9df81723-c048-47d4-a163-f642d2d156a2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "63ac60c8-0f41-4cf6-b074-123f2c0fa0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70373ede-bc43-48ce-96df-1ada6aeeb139",
        "cursor": {
          "ref": "7ce42f73-d370-4d76-a141-ae9ee29da470",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "da711814-45a9-49ac-8e6f-28052a82d882"
        },
        "item": {
          "id": "70373ede-bc43-48ce-96df-1ada6aeeb139",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b326c29c-dd8a-434d-b641-55b9a0136cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9d2187-5605-4919-8dbd-7c064d6a0487",
        "cursor": {
          "ref": "23fed1fc-a226-41da-8463-43ebd324790c",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "26f74b10-2002-4b4f-b7ea-015c2196b4f9"
        },
        "item": {
          "id": "6c9d2187-5605-4919-8dbd-7c064d6a0487",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c2741c28-cdfc-47a4-9f5a-65d1a9615adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4640a3-e163-46c5-9dce-d1459ccd31fb",
        "cursor": {
          "ref": "1bbba145-ea05-4280-ab78-d03c9534f239",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f818b7bf-e90b-45cb-946f-980c018b9030"
        },
        "item": {
          "id": "0c4640a3-e163-46c5-9dce-d1459ccd31fb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a225406a-1bda-4f59-8c49-aca47fa90c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0faf2710-99e9-4c15-9000-be6a3541b244",
        "cursor": {
          "ref": "4becad3a-81d4-4482-927d-c244bcfb84cb",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "077c76e8-ebcd-4e79-93f0-b220280bd5e1"
        },
        "item": {
          "id": "0faf2710-99e9-4c15-9000-be6a3541b244",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "814d82dc-2ae9-4afd-ac8e-e29740a96840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97adeb88-1cae-48f8-88ac-ee480b5de8df",
        "cursor": {
          "ref": "06482378-9658-442f-a7fd-787c86c75688",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7e324807-0d60-4411-be30-2df85ef020fa"
        },
        "item": {
          "id": "97adeb88-1cae-48f8-88ac-ee480b5de8df",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "035a22c5-c455-47c9-ba86-37282c265915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ede412-3e14-4376-be9b-c76ed0a0ed0a",
        "cursor": {
          "ref": "d68e2337-ceb0-4e7e-9531-3e6e373c789f",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "935ab885-a646-4cf3-baaf-d0e2241ab02c"
        },
        "item": {
          "id": "35ede412-3e14-4376-be9b-c76ed0a0ed0a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9e581711-fce8-44f9-90fb-a51763e6f850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc1c1d9-897f-4a08-a9ab-c9e1d2d13989",
        "cursor": {
          "ref": "95f5137a-e068-417f-912c-1971c63d9140",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "958c650d-564a-4635-9caa-ed34cbfb6a5b"
        },
        "item": {
          "id": "ccc1c1d9-897f-4a08-a9ab-c9e1d2d13989",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "de39c74d-d197-499e-9fb7-91195826738e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e00c6ac-cb87-4425-a19d-b68aa43640eb",
        "cursor": {
          "ref": "30683355-c477-48fa-b055-3f248c3c7dc1",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c66801c4-0230-4779-9df3-c3875079a902"
        },
        "item": {
          "id": "8e00c6ac-cb87-4425-a19d-b68aa43640eb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b669d06c-d802-434e-9c5c-0e168b4a232a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4bb3b55-75c3-4e94-baad-e266ab20f859",
        "cursor": {
          "ref": "128d2fa8-b5eb-446a-8812-5d7106287cb4",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b69e1988-f0e9-4a57-adeb-d049d090bcb3"
        },
        "item": {
          "id": "f4bb3b55-75c3-4e94-baad-e266ab20f859",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d782ce8e-1abb-42b3-b449-eefcb0406ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1d1e0a-7bd0-41d7-8989-64c955a9901c",
        "cursor": {
          "ref": "dfe356eb-888b-4f17-8654-705547afd526",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "63dd4f9f-a3cc-43e3-87b4-ce4585d4efc4"
        },
        "item": {
          "id": "1f1d1e0a-7bd0-41d7-8989-64c955a9901c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2a893d1f-4002-4162-bb2d-1ab4d0c88745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acac155e-d059-4145-8b30-f22478bfef3f",
        "cursor": {
          "ref": "20c6184d-999f-4106-abc1-0324433c02cc",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2196b259-e8be-4db6-9be5-0b7d611bb3d3"
        },
        "item": {
          "id": "acac155e-d059-4145-8b30-f22478bfef3f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "75fcb7e3-e620-4557-aac8-b9b1f7a633bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145c73bd-3626-4530-a4e0-5e3f876edf62",
        "cursor": {
          "ref": "de47c4bf-cb81-4e04-8bbe-7676683362df",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0217cd77-9a33-4cc6-b588-3d2641c73101"
        },
        "item": {
          "id": "145c73bd-3626-4530-a4e0-5e3f876edf62",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "58e94279-ae66-4278-92e3-c2aa4747c865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbee2f5-e2b3-4fe9-aaa8-fe887fa5ce8c",
        "cursor": {
          "ref": "811c186d-e13a-436e-94ca-d7bd68bfaee4",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a95c5082-7a94-435e-9f2f-a8607afd8380"
        },
        "item": {
          "id": "cbbee2f5-e2b3-4fe9-aaa8-fe887fa5ce8c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "967a1695-23aa-4839-9836-ab5756e4c07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23733683-bdc6-4568-9828-0424ea76b48e",
        "cursor": {
          "ref": "3f7e2665-f348-4a84-88b6-cfc93bd89b8b",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "33870904-f644-4d0c-a1c8-2efc380f2bcf"
        },
        "item": {
          "id": "23733683-bdc6-4568-9828-0424ea76b48e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "494d3306-0de5-4bfe-b6ed-8b2bc4ce17ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f77bbc-d048-476a-9c31-c4f8b3f2f677",
        "cursor": {
          "ref": "7f8f4812-0f36-4e24-a48c-e79b8f1414d4",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6f278387-d791-4cab-8a1b-5fefebc97fee"
        },
        "item": {
          "id": "c1f77bbc-d048-476a-9c31-c4f8b3f2f677",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "92de762e-63f4-46e3-b9ca-8ee1fc7dc80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4bd2d42-269f-4729-869d-947cbef05f28",
        "cursor": {
          "ref": "bc8b4592-15da-40c6-a473-ab1f9ab81f2d",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bcca24ae-cc4f-4722-a41a-4d44431acef9"
        },
        "item": {
          "id": "a4bd2d42-269f-4729-869d-947cbef05f28",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "77637e03-6340-4caf-a19b-396bd3b677f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c0a167-c08b-4279-8860-daa7825d70b6",
        "cursor": {
          "ref": "25560732-ad02-480a-9c5d-413e838e972d",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c8132fc3-3132-49ab-a1c7-4d690c3ab3b9"
        },
        "item": {
          "id": "10c0a167-c08b-4279-8860-daa7825d70b6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0314a81c-e134-4337-8abc-3cb679077101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad66154b-ef61-4689-b9f1-180bbed0d486",
        "cursor": {
          "ref": "93ae9084-e97e-421b-abe9-1254f523f500",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7a15d66f-5f21-4034-b540-01ae6699673e"
        },
        "item": {
          "id": "ad66154b-ef61-4689-b9f1-180bbed0d486",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7d54f36c-b0fc-463e-99a5-6984381a329e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1faf5227-ff78-401a-b452-34965a898e8a",
        "cursor": {
          "ref": "05c7bc18-705d-45ff-b8d7-a9de882b664d",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "50e0b9eb-eec5-4074-95f9-dde1777fb814"
        },
        "item": {
          "id": "1faf5227-ff78-401a-b452-34965a898e8a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3fc91e3e-d57a-46a6-8796-cf8dcf0a8378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9e65b3-f727-46d5-9328-05f012b56478",
        "cursor": {
          "ref": "c10d3f4e-5e01-412c-9006-d741e80330c8",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1c51464e-3ebc-4df7-8973-b5e398543fcd"
        },
        "item": {
          "id": "9c9e65b3-f727-46d5-9328-05f012b56478",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "34838c29-43b9-4fc5-b3a9-3dfebe948542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561d47ad-25d1-4564-a58a-8b578f50bcee",
        "cursor": {
          "ref": "055be7f8-fc39-474a-afe7-5a275014f336",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "56cf3742-c127-43d6-a219-003f564bf87b"
        },
        "item": {
          "id": "561d47ad-25d1-4564-a58a-8b578f50bcee",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3640f311-e2da-4592-b9c5-79bba02b4ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01631002-4b6c-43b7-96ec-a18647c04c64",
        "cursor": {
          "ref": "54a83186-a67f-445c-8c58-d9e2fbb281a8",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "85245230-eb05-48b4-ae00-925166486883"
        },
        "item": {
          "id": "01631002-4b6c-43b7-96ec-a18647c04c64",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e804a695-b2be-4bf1-b3b7-682788d54b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e090122b-3887-4167-92d4-0a25b1bb0135",
        "cursor": {
          "ref": "e664b754-2f2e-49c8-acb0-a85b9562f894",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "08f62b6b-8dc1-4a3a-876f-dff3256c7ec5"
        },
        "item": {
          "id": "e090122b-3887-4167-92d4-0a25b1bb0135",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "300c5056-0258-4bcd-9522-0543aac290a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2fa6fc-95a8-431f-96d5-41b6a85057ce",
        "cursor": {
          "ref": "e7842e9d-5af4-45d2-9043-4013dcd7e207",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0291c6a6-e112-4424-b028-31b78076e62f"
        },
        "item": {
          "id": "3c2fa6fc-95a8-431f-96d5-41b6a85057ce",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "79888303-000f-4ce2-92a5-57c26f69d8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4408f9b-b1c8-4486-98ea-4f372bb07a2a",
        "cursor": {
          "ref": "9d1a8d02-f222-4291-876b-6b79a7efb6b5",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ec5c74e6-7625-4e6a-a33d-4f8ed1d05003"
        },
        "item": {
          "id": "c4408f9b-b1c8-4486-98ea-4f372bb07a2a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d1193a7a-c145-4302-b71a-6da1ea54b191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41518559-4621-41bc-aa02-7906cd61b59a",
        "cursor": {
          "ref": "75403581-13ac-45b5-a601-3ffc1e49c723",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "eec9b975-8e8c-4768-99af-f0b1d8cc5c31"
        },
        "item": {
          "id": "41518559-4621-41bc-aa02-7906cd61b59a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7bac9a57-ca6e-4bae-b7fe-12a2e5c22cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7250225-cafa-43e3-b49b-15e8c308f134",
        "cursor": {
          "ref": "a3bf6184-a2a2-4b79-b141-044630588edd",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a625adbb-e049-4e78-af48-f369941537c4"
        },
        "item": {
          "id": "c7250225-cafa-43e3-b49b-15e8c308f134",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c40e1a9e-6dec-4e5b-b1bb-619613bae781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667fc630-7e61-4517-a986-f272d69b7734",
        "cursor": {
          "ref": "3396dfb1-a6d9-4640-af7f-e79552c743b7",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "70bc9d67-ac8e-43de-92f5-99cc8a836d3d"
        },
        "item": {
          "id": "667fc630-7e61-4517-a986-f272d69b7734",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4f7417a5-d68c-42b3-8cb3-e6cd14c563fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2ff268-1300-408b-90ae-45ec10fecc93",
        "cursor": {
          "ref": "a2340b2a-64ac-460b-954f-e7ae24afc9b8",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1308b117-6ed1-43f0-85c1-4f4a32d9cd79"
        },
        "item": {
          "id": "4c2ff268-1300-408b-90ae-45ec10fecc93",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "84cf527a-2722-4b10-9ed0-d3e85e5b6ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c11e20-0f7e-4127-90b9-08a706067fcf",
        "cursor": {
          "ref": "d021f5d1-b585-421f-858c-86573e8d926c",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9a90e362-1c7f-4487-a744-a96c892d55db"
        },
        "item": {
          "id": "79c11e20-0f7e-4127-90b9-08a706067fcf",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "22d38637-91c0-4d0d-ab61-1737f8cef44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdf129b-7fe8-42c0-96a7-b1283d80763b",
        "cursor": {
          "ref": "66e67d10-5222-4c94-8b28-2186c14caf0c",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "56f8561a-5945-4ebf-ba8b-a63aaf3db6dd"
        },
        "item": {
          "id": "8cdf129b-7fe8-42c0-96a7-b1283d80763b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "155ca74a-5fca-4f57-be5b-22c0a83030a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dbf9cd4-e78e-489d-a613-7a6ea68a28d4",
        "cursor": {
          "ref": "a0cd8645-fc31-4f31-9911-36250e46c5c3",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "247129ba-3734-4ac0-bf73-314455489895"
        },
        "item": {
          "id": "2dbf9cd4-e78e-489d-a613-7a6ea68a28d4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "49f192a8-b30a-4a8f-b969-1f207f35e183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eac94ff-090b-44ed-8e53-80509899ef59",
        "cursor": {
          "ref": "1cac16cc-725a-4026-adf1-68ee1714c6a2",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "51f7ec39-d567-4390-984f-5d2c2fbd7f3c"
        },
        "item": {
          "id": "6eac94ff-090b-44ed-8e53-80509899ef59",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8fd0c349-2845-4b44-be07-5685f50d2346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085ea93b-8027-4016-b83b-987c71816d1c",
        "cursor": {
          "ref": "86578a02-2ffe-43fd-8299-c034bb9d8d35",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "015fe90b-0373-4a3b-bbe2-5a3afd10b41d"
        },
        "item": {
          "id": "085ea93b-8027-4016-b83b-987c71816d1c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2736a66c-da65-4d45-9752-584db9c21081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67966b4c-b222-45b9-a3ee-3e3b963ca23c",
        "cursor": {
          "ref": "78f919e8-c10b-4f0c-ab95-d6503b937698",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7da45e0a-d22f-477c-8cf8-a0b952606b05"
        },
        "item": {
          "id": "67966b4c-b222-45b9-a3ee-3e3b963ca23c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e7e4e127-d3f4-4e2f-9905-b65fea3aa10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2ac65c-4f60-43e1-a056-0160e83299eb",
        "cursor": {
          "ref": "773494cc-03ec-43f2-bfd9-b4d728972259",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "13a48f8d-2790-4afe-81d0-c9e3e440919d"
        },
        "item": {
          "id": "9f2ac65c-4f60-43e1-a056-0160e83299eb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "17f2dc6f-e3ef-436f-a73d-4116132b4819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bbe4fa-3288-484e-8070-953e0589d3f7",
        "cursor": {
          "ref": "623bb7fc-9635-4ce4-815f-4bc723de6257",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9ca8c62c-078f-4b15-ba2a-2bd08b275610"
        },
        "item": {
          "id": "05bbe4fa-3288-484e-8070-953e0589d3f7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9b838dd5-89a3-4b29-9d19-ff15b3942e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b36f834-ac67-4ed6-9c3c-b1ed283320e7",
        "cursor": {
          "ref": "8eafacb0-5b19-422f-9033-da0c6d5a4114",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f3e35a69-098d-48aa-9588-b355d18f8f11"
        },
        "item": {
          "id": "0b36f834-ac67-4ed6-9c3c-b1ed283320e7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "21c0cf45-bc54-4320-896b-8112876721cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe606c3-3d6a-47d4-9441-94c46b4f1fd9",
        "cursor": {
          "ref": "2fd3fd1c-f5f3-4f1a-8790-aa4a3cc6ffa9",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "62fa806d-18c1-46c5-a149-dd6ec54279bd"
        },
        "item": {
          "id": "afe606c3-3d6a-47d4-9441-94c46b4f1fd9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "52eed52c-4468-4c9b-b195-1d0c25f5b942",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23cd8e3-7d6b-4fbb-886a-de8bfe62adcd",
        "cursor": {
          "ref": "cd014657-7ba0-4941-ba9a-8e0fe40c4dbc",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ab18402b-094d-4c80-9cc5-4442260375b9"
        },
        "item": {
          "id": "f23cd8e3-7d6b-4fbb-886a-de8bfe62adcd",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "28f6796e-b377-403f-b48c-581ed3b38508",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7241ce-4c0f-4b3f-8908-7e3d7461e7d9",
        "cursor": {
          "ref": "e877cd21-967c-4992-ba15-30bf2c301532",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "22276072-e473-4f20-8b2b-7f462ff6d18d"
        },
        "item": {
          "id": "0e7241ce-4c0f-4b3f-8908-7e3d7461e7d9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "64cd05c0-19a1-410b-85ad-85a86f77d51c",
          "status": "OK",
          "code": 200,
          "responseTime": 317,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7a5ff3-f491-4a40-b79e-3f5c7ea92733",
        "cursor": {
          "ref": "a0c113c2-8571-4049-854a-a34ebe42ea4d",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ea3b70cc-5c5d-408e-a7dd-9da82f944067"
        },
        "item": {
          "id": "4f7a5ff3-f491-4a40-b79e-3f5c7ea92733",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1aa16872-8031-4f24-b0a2-a77be26cfc44",
          "status": "OK",
          "code": 200,
          "responseTime": 340,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5140a148-8c8f-4e3d-b6ba-a1ab98ed87d4",
        "cursor": {
          "ref": "e61dc01f-5e5f-4d9e-a82e-1ace5b3fa810",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6ceb78e8-1ce4-4886-ba19-9d433d0bffe3"
        },
        "item": {
          "id": "5140a148-8c8f-4e3d-b6ba-a1ab98ed87d4",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "b4a9617f-9d7d-49c1-9061-f5592b200ac4",
          "status": "OK",
          "code": 200,
          "responseTime": 705,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "481b5fe3-a86a-4a54-bab0-32b61bbc0257",
        "cursor": {
          "ref": "6ae1a805-7d1c-4997-98c0-f87005bc3643",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "272adbc3-897e-43ad-b037-592b2571a018"
        },
        "item": {
          "id": "481b5fe3-a86a-4a54-bab0-32b61bbc0257",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5fe2e4d6-823c-4982-bfb4-f9b2ccdea631",
          "status": "OK",
          "code": 200,
          "responseTime": 360,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b9f5b2-6dae-4716-87f2-96bbb8900e3f",
        "cursor": {
          "ref": "eff03de3-18d7-48c1-8f31-bac6705f92fd",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ec3ba7a4-9e8e-44f7-b950-2c0d46793540"
        },
        "item": {
          "id": "c8b9f5b2-6dae-4716-87f2-96bbb8900e3f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "493851d1-952b-4f6f-bdf2-ecba3ec7cd85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b9f5b2-6dae-4716-87f2-96bbb8900e3f",
        "cursor": {
          "ref": "eff03de3-18d7-48c1-8f31-bac6705f92fd",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ec3ba7a4-9e8e-44f7-b950-2c0d46793540"
        },
        "item": {
          "id": "c8b9f5b2-6dae-4716-87f2-96bbb8900e3f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "493851d1-952b-4f6f-bdf2-ecba3ec7cd85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b9f5b2-6dae-4716-87f2-96bbb8900e3f",
        "cursor": {
          "ref": "eff03de3-18d7-48c1-8f31-bac6705f92fd",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ec3ba7a4-9e8e-44f7-b950-2c0d46793540"
        },
        "item": {
          "id": "c8b9f5b2-6dae-4716-87f2-96bbb8900e3f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "493851d1-952b-4f6f-bdf2-ecba3ec7cd85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d018a051-b8cc-46f3-aeb8-0993f240a8ae",
        "cursor": {
          "ref": "fa0e3378-d063-47c8-8bcc-9ebab2e13847",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9cc0c765-9735-4129-9a1b-9fa83e895f43"
        },
        "item": {
          "id": "d018a051-b8cc-46f3-aeb8-0993f240a8ae",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ab34908d-b5c6-417e-827f-247853bf9b5b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 43,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122161c4-94f7-43f2-8c3d-42444fcd639b",
        "cursor": {
          "ref": "a7103ef8-5527-4503-900e-62f52e6b6e8c",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ab91f73b-c280-4272-8a20-c01c24eba8f0"
        },
        "item": {
          "id": "122161c4-94f7-43f2-8c3d-42444fcd639b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "68434fc9-a946-4c4a-a76b-929a694540ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "122161c4-94f7-43f2-8c3d-42444fcd639b",
        "cursor": {
          "ref": "a7103ef8-5527-4503-900e-62f52e6b6e8c",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ab91f73b-c280-4272-8a20-c01c24eba8f0"
        },
        "item": {
          "id": "122161c4-94f7-43f2-8c3d-42444fcd639b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "68434fc9-a946-4c4a-a76b-929a694540ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "103d5011-3b95-4f49-8400-0661087087a6",
        "cursor": {
          "ref": "077dd2a3-8385-495b-903c-43baadccf76c",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b63aae9d-b43a-4613-af49-c8467127808d"
        },
        "item": {
          "id": "103d5011-3b95-4f49-8400-0661087087a6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "e824c908-7640-4d5a-8971-b392abd417d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "67d3dbe6-4925-4c67-b81c-35d7c71815de",
        "cursor": {
          "ref": "fae25bd9-5cca-4f5e-8c2e-63e62d42a875",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "68230d24-1ad7-4af3-8bc9-23194af62956"
        },
        "item": {
          "id": "67d3dbe6-4925-4c67-b81c-35d7c71815de",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c7c40e23-a583-4f10-b7a6-705b114a0ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "67d3dbe6-4925-4c67-b81c-35d7c71815de",
        "cursor": {
          "ref": "fae25bd9-5cca-4f5e-8c2e-63e62d42a875",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "68230d24-1ad7-4af3-8bc9-23194af62956"
        },
        "item": {
          "id": "67d3dbe6-4925-4c67-b81c-35d7c71815de",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c7c40e23-a583-4f10-b7a6-705b114a0ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "49dc7586-64f7-43c4-ae75-8fefa6d7df5c",
        "cursor": {
          "ref": "a6132616-9bd4-41c8-b7ca-b6df746cffa6",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b34860de-d6d0-415a-8778-7a4a8d1a2c90"
        },
        "item": {
          "id": "49dc7586-64f7-43c4-ae75-8fefa6d7df5c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "bbf108dc-a76b-4d8b-b145-320eaf4fa3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}