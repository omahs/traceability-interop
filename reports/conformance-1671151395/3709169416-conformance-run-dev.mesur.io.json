{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "790ebb11-3d1c-423a-8a5a-6dd6695b1de9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a5dd3a48-22c5-48d0-9629-019ec6dbd388",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "db749738-ec77-4910-8ea7-ccaba07b2ad2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a134f2a1-10e8-4aee-a5bf-9f4c2fe195af"
                }
              }
            ]
          },
          {
            "id": "df45c256-0aac-4ee3-8ebb-2e051c5cd5a0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "12d8dcae-2e16-484e-9d24-998ecd1ca47a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b67156aa-b066-43d9-96c6-90d1ad94f38c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "740ba265-0142-49e0-96d7-1f6810f8af68",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e5b4afa9-1447-4468-9654-1268221f6a26",
            "name": "Positive Testing",
            "item": [
              {
                "id": "423de96f-df61-4545-842a-0f947aa4d53a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09f47ffb-9c5e-4b6f-93ec-ccd6493ed05b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3102dbca-11b4-4f4a-9d0a-f6a989d7f9dd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "94cd6fe1-8a6f-4ac1-85a1-b8dd03e9a792",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97a12b71-4c67-44aa-9f63-156d05c45144"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "48efa5a9-5631-42b3-a140-c010263f29af",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "396b7d09-9593-4b4c-b0ec-24569e36e45b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5caeb06-9ddb-4554-96f5-002447d166db",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6bac18e9-1ad0-4f58-a458-cfadf396cf42"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b260d75c-6d5c-45a6-a7cb-dacb20a7ea4c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5a9634f-c0e8-4809-995d-394c9cbac236"
            }
          }
        ]
      },
      {
        "id": "7058d891-33f7-416f-856f-33a0d41136fa",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c2f838f7-1402-4f02-8347-a2621ae28264",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90d4a276-f550-4b14-a02e-e74cf14b5ce0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "26513838-c54b-445e-a4fa-de572b42071e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1421e1f5-ed2f-47b9-9cf0-08c0e16f3885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ff3787d-0eca-4338-85a0-09ca88399173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de72109d-c97e-424a-9d64-bf4aa4932818",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d937a521-038e-4f62-abf0-334a50399d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "036a182c-3cd5-44a1-982b-4c6ddae6d04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f864c83-4b8e-4acf-b21b-aeb1fb4f165a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f136f2d9-2262-4a60-91a0-6068fbfe3891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08ef4f1d-0c68-4bfe-b81b-ad5a64405f15"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "491dcf62-dd9a-453e-9ed6-719f3a10213c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28f0195b-d58d-4ee0-990c-cd119e3c7384",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f909b130-9a37-4509-87d3-b56c8cb58326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c703b48c-619c-4e93-ad7f-80eca99b371e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd20ca8e-7552-48d3-86cc-bd45fb1e43a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452a4663-b49e-4d53-984e-fc32778a3ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ca16ec-543f-477a-85bb-255cbda2fb27",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01953001-5b67-4692-a153-db9357f12d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cebf39d-dd5d-49f6-94da-b47cac0c0424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fb71d0-c0eb-42c9-a857-c095cfecb62f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d18ca0fc-1c1c-4fc1-a0fb-c18b3b22ad8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6b875786-207f-4a75-9a40-bacc7bcaac35",
            "name": "Positive Testing",
            "item": [
              {
                "id": "372533c3-ac9b-4453-8f04-39fb1d0180cf",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36f57375-4624-498c-bae7-9508797fc186",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "407f9421-83b8-48f7-b2b1-f448fda506cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83119aa7-3b3d-4e3e-bdb9-4621f8cf1243",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e5eab06e-805b-4c7e-aee6-1cccdabe7044"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "807fd191-43fe-4c99-92bc-bbcc760b1813",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94e121e7-cd81-4ec2-80bb-72ec1dc28a6d"
            }
          }
        ]
      },
      {
        "id": "eb72fc26-14bb-48c1-a8c2-9c20ce789b62",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "cb983520-de88-4e1b-b6ec-961e3f1a6116",
            "name": "Negative Testing",
            "item": [
              {
                "id": "486c7372-4ca5-4344-8bfb-b059b93d3cdd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c709e69d-7977-4a38-a14c-7e2f598c8054",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f82d92-8b24-4455-b942-cb89287ba60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d047ba-2ec8-4e79-b734-31dc27666068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fa8c00-58c0-482f-b57f-03d63b9f93a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14ec04bf-ecb1-4293-a416-d761996ba6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120b9d07-e7c0-4b96-8a82-f7ee96b565c6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e2ef2a-f21f-4854-a889-ce293a5543b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e04ea8-9c6f-438f-9419-fd3e2edbdee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa5bbe5-021b-476a-bde0-3d1ef3e9e432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51d6ca1b-ca55-49a0-afac-3ce43ba97f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa67f37d-1a03-4c84-95e8-87bba3376c3f",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f55624-ffe7-4cd8-8f78-b3b400179cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57588199-23ce-4dd3-aa58-511290042f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a89734f-27a8-482e-9587-da697a9d5d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02df3464-b3ad-48fc-81e3-5500979d7249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f553042-068d-40f9-a0f8-b0abe5574388",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4cacd0-05b2-4dd2-8f20-463846b1ffd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e855d68-d092-430a-9025-987c754b36aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fcfd55-8335-49c2-a559-4333efa57234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc9a53a3-941b-4c3a-9981-1e9ad32f9bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137cb2dc-3e95-4bf8-948b-2cc31f48d4a7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63c1b69-80bb-4664-bd5b-d022bab84113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0d80f4-7d0d-47d8-a49f-a1a10e3f9520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edadf817-a657-450a-9c2c-a0e3d18f4faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "557e73d2-355e-4fbc-97f2-78f934444c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcef56d-3255-4ab4-b2ce-9d35227c98f9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ba8201-40ba-442f-94ed-fdbf19201a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589b0401-1c13-46b0-84fa-10dafade4fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443d5fc0-77cf-4bae-924e-202e248b019c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b46635b-1f5e-418d-8922-ac7b8bb4c53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fddb220-a96a-44b2-bda8-ecc9d8f5023a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fcb354-fce8-4339-8273-2c39b847643d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3005d0f5-f31a-4c93-b44e-bc977d1a8f17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aade4c6-248f-4ff7-aa64-58858c167d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bd3118e-80e8-4320-b64c-4b927d96488f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9730a59-8ea7-4227-9839-adf041d724e3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038eb84b-bb8a-4449-80d6-dc9bc3393e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ef54db-4ebf-4161-937d-93540919a02a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3406c07-3b39-45f0-acbe-1fb7772dc8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7662b31-e8ff-4a19-bb88-bb0b389fde85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42cb8b54-41b0-41b3-b3fd-8919eb3a761e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8757bbe6-d6a6-486e-a5bd-64a8c9932b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7520794-d982-4197-8a02-2de0ed34dc29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bfc560-1ca9-4995-9f04-e8dae67a31ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49092752-2947-46d1-86e8-e35e744ec9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f692eb-8fe0-4605-92b7-ef89d3461f9d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e58ec12-867f-4102-8c23-8fca22dc3c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f29cfac-73d2-4363-90f7-018ffe62f83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc044493-760c-4581-bed5-167ca2b5147b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5404daf-acb3-42e2-a460-314cc8e67632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941ccc70-0147-439a-b560-7be6f3b3652e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905cb05a-7d98-4f8f-851f-a341d067e730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78abb305-42de-4087-af44-fa4fa9c752df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ff70c2-a145-44f1-9afc-df14f6ee090b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90d8a4d6-01c8-4acb-a9ec-fe30b446fc1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0112aab7-d209-425e-bd60-691c991e41f5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c598e69-5773-4ff0-bd84-23cd12a7d0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2652b236-c625-4a24-9e24-0676fb35ec69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e84642a-b7a0-45c1-b8ef-b0d689e62105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ddaaa85-88eb-44f7-878e-c81dd5fc4dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426b0eda-65e1-4b20-ac02-c84bb0ee9019",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efe7f1a-43e4-4ae3-af44-ae52ef282a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faabc4db-4b8f-4686-a65c-7eefdee4d803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dda0fe8-e630-43bc-b25f-326200463d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f88a9bce-1a95-47f3-b375-7d1a84c20079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfa3708-231a-489e-b88b-c8a0bb790e66",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0229aff5-3188-4dd1-b76a-44bc30ac4e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf242ba9-73b3-4329-9f5b-80be8a02da39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0aee973-2039-4e36-ba73-af475bec34fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "d55a22da-1a7e-4347-b681-386f6292d99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0edf9dd5-75cf-4ecd-a519-09a47269a777",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c6cd12-6a9d-4d63-9cbe-ad0a6c0750dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7fdc6b7-f7e9-4694-95bf-a1f17d1908ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297079c2-f389-448a-912d-feabf2ce83b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a023667-1e5c-44a8-b6d5-0e62cb51510e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d573eca-3d48-4321-985a-7a537c928ca7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fd81e7-4807-423b-bd54-ad4daf4c50d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e8fb221-bf0a-4b07-9c7b-61d5ba77ef33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc151a5-9df4-45d8-8880-143a57004913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6f4cf87-aab9-4302-9063-8680c28a54ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad89a026-664f-4cd9-b25c-e4b92a512895",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f01023-fb2d-4965-a9ef-e9358356a8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72bf19d8-d826-47b3-b4e7-17983f423ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965238d6-4017-4c4c-b0d1-840edc739f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ef14e41-15ae-4714-a4a6-c808c5626722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcba321-4529-49e9-8e73-5d3e74976e70",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6623fc23-8b40-44d4-b2c5-7bdfa11c86ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5245bb-039e-4c75-92fe-9d9da9677b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5111c4-192f-49b7-a2f2-1978a48280fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f1a6b3f-9a53-4bab-8a33-0b38b4d5a35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d684a438-853d-42c9-80c7-3cd189bf881a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8857c3ad-3fef-4d9c-b197-00244caa903b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "565e43ba-91a7-4d99-a759-a3e50b6264f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357247bf-aa0d-45ee-98c9-875335897670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "864110d3-3edc-44af-8fa9-833cca610c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c194247f-9c22-4a34-a7a6-deea7e9d6f27",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4af53d3-19ff-497b-ad3e-e631ce6af1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb6d9d5-331d-455d-9c5a-3d0ab17bcb09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3694e73f-63e2-4c30-9dc0-b08a938baac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "281ee41d-0fb3-452e-8c6b-5a45053b328c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d26366-0eda-404f-a6bd-848ddd291c90",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14afe9ae-f04c-4713-860a-62ee6c266ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc8b3756-a240-4c77-9fa6-1d92104d1386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5435b3da-8e86-407c-bc8f-6d43302ca231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff82bbc0-e53e-4344-8165-8c97fd7b3cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0c7c08-e816-400c-807b-6463e5b725b2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22dc3e5-1275-436d-a7f1-6083d79a862e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7769c2c-127f-4c9a-96dd-f098b579b8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbd803a-29aa-42a8-a0fd-1e6f2ebc2981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e4c4c74-0220-4af2-9e75-7932f7379f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af7770d-6d38-4045-b6e2-bab94ba239db",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d467e0f2-7df6-4811-8d17-cfe03bdd6552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2408588-272c-4c79-99d0-3830ef613b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2cdafe-b1ff-4670-9e95-6a1ddcdfb839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c8f5c90-4db9-43e9-b4dc-8eb0081a537a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0a9aff-565e-46f9-a6ad-c69733701747",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83982aee-2924-4d66-a0ae-1756e9f673c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "715eab9f-abd0-45e4-a689-1ec0a77134c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13b180d-2b5b-4279-b8ec-5d15e7ca247d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6876763-1a01-46fd-8911-35c892345d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5b7da3-2aef-4769-b946-1df38364d793",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0d1d39-1b4b-483c-9cbb-2daa42263d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c55fe8a-0ec2-49e8-9de1-2bd66e18b696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebd2ae7-d694-4d26-9909-d2f02440699f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e079ab54-be88-4829-a9c9-380be02c36f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63acd66e-b611-4752-8ff1-a860a0a1076b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62d2977-dde8-4da6-8e08-a9893035a3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9bdf2a-05d2-4b13-b165-3be7db2a9157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143f2adc-7c9f-4665-870b-ae5763e48c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c3c458-a91a-4336-a8eb-db73d8419d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e096cee9-c1a5-4b3c-a49c-e8c1986761cd",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9acc1a74-5381-46ee-aa45-9675fa69e5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c058cce-4aa8-43bc-92f0-1b7eb8b59a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ffbdfe-f8e2-47f2-8c05-da774e2df8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69d29c57-83d4-4561-9489-d0313dc5a965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d995de-d53f-48b4-a716-044c099578d4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6b700e-76fa-4104-a8f7-1596d0803063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f871fb72-b242-4bf6-94c3-cf82824dba2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c844acdb-810b-4d57-b0c4-6aad4a9a63d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06e6e655-dd8c-41c0-8931-d68ce6c630ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148beefa-a0c1-4f82-bd32-be8833feb144",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6cea9c-37da-4909-8310-af5eecf46111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9968cb14-43b3-4ec8-bb4f-ec574982f7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9707499e-154a-48f1-80f2-82e7ed2e7cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f337d9f4-7678-461e-b390-50e8363ae604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100379ca-71b3-4a10-8836-05a13332e6a8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76517a02-e64f-470e-8bdc-4eed7fda9725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4daca1-2084-4d60-ab91-ce7651fd32d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69d35e3-f41b-4861-9aaf-fc9668087c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dfe4578-faa7-4a95-8cab-2a1724df84dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7a8173-a452-4498-99b9-74a56b3d72e3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfc59a4-4f1c-4b7a-932f-f9607fd5c96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6188cb60-56ad-40b1-9d6e-d58896482849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2192c23-3572-47d3-a19d-8b49a6f87a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a20148-71fa-4f93-9c08-60b41a08f2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff52464a-af1e-47c5-9fad-f0c1e5c65da4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6dc7d7-9b87-45ba-a7cd-f259d927259e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff06823-2d0c-4dcc-877e-4221069b03b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0502e2-95e9-46e1-82fa-7016905de3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc22c57-2883-4c07-b341-4a40286a9cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef60c0a-a586-466f-aa00-a81fa1c4b2f2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ff522e-cefa-487c-ac75-baf503e6796c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01565413-170c-460c-8c91-2371ce316e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95635280-15ff-4127-bd38-aa5293ad4a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d967422-1972-4c9e-91ff-f58b09bcd7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8979370d-f602-4179-8cfe-da0a553bbbbc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79580006-da89-4b7c-b2b7-efdf7e05e7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b52ba1c5-dc7c-40b8-adf0-f816abd16e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a698a69e-a34b-4719-8669-9ae2340a70da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f4af5c-2d46-44cf-b28b-81bedc36a67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a10dd9c-f27c-4813-aa94-b3f80e5f92d5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84935575-33e1-4d6a-8737-d75815f9f97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b919e8ca-6596-4f14-9bd6-af6ae2409c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a180fe-a4b4-4e3c-b395-f30c747675a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "016017e8-73c9-4d01-aafb-48c1b9cc4b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c47f9f2-1617-43d4-9f23-64fedd463026",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6fc30d-32d4-4ee6-b50f-4ecf32b05bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690bae7e-7c39-4855-af4a-451cfde4678b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a3204a-357f-4a37-9df9-c90fec26d8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "358ad003-82bb-4c28-8774-2b079aa7666c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcdf3d8-8d3b-42dd-a031-4faa759e68cd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc0f5b0-0628-405e-989f-0a7a9f52a5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99c7314-c3da-4e8c-be0d-c2340694c6ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734bc51f-42de-4a5f-9427-53b70bb83e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "dbfa1ca9-2387-4cb1-9a61-4f7ea4b7cb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9f85bd-2b8d-44e1-aed7-2103371e3b7d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a417860d-61f7-4eb7-940e-19536504997e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "737b0f4f-7a74-4e98-b2b1-ed750c76b043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43d9faf-462b-4f15-a56b-713825f1d0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b51023e3-401b-4d2c-aa5e-6b914bcde16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35938d0-e3dc-449a-ae10-b8fd045d0c1b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e9088d-67fc-40ef-8f83-7b5e97802e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af8ed3e-74a8-4131-88e2-470cc9f78cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cc478c-dcbd-438b-b650-0575f5922bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c091481b-e44f-417a-8a38-131567864bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f96b8cb-9dad-4c2c-b700-10c8e18cc4aa",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb05d229-53c1-4d51-9f2d-b5b210959a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417f4c3c-a067-4112-880a-f457e82bd762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0815ba-00b1-41b5-bffd-b58fadfb78c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "895b96ca-184a-4215-b5a0-7d7e494cc70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a113c9-9f89-4bb1-ad5c-17f3dddb05f7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9bc6b0-3fc0-4d8c-a995-89fa7265126f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3912f8de-0d34-4a85-ad00-1e5b65ad6a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7dd56c-6b9f-46dd-836e-9ff0196f5b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "004e8267-31d2-431f-a3e1-65d049a85e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57433a65-7e98-47b7-bedf-314721ba9e65",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd610770-01fa-422e-abd4-5f21c7e03399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3ab565-ed6a-42d0-9483-4b01e2547f45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a89e81-5570-4eae-b714-36d515cb6e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "30d4958b-2442-4307-97f7-c434430a66ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf4b9f3-7576-46d8-bf6b-bc5668f1823e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9663dac5-e1df-4313-bdb5-f6d1e153420f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77dbc4c4-ce90-4328-87dd-6c6d14f6bccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0bf502-f4bf-49ce-a902-084eaf259ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "664d896c-5f1c-4a4b-9f41-eb2865f4c700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28e3b0d-c4b3-4796-a8dd-3c062c880f01",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27159403-7bd1-4cfb-9383-ac28d13d5842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f424fdf7-1cc0-432d-ae0e-ff8c6b3bc1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f21b1ff-fa9b-4303-a44a-5612d7b1f8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bade6f5a-d3b6-4598-b944-478fe6432fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f417cc02-55ec-4fac-97c5-46c77c0a9dff",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e395f10-8a8b-4a8e-929c-69876a6dd2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a54b04-7516-4eae-ac1e-354e7b5a4ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d354121-6a26-40ae-b9cf-0a5f6813e08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "125235c9-5899-4271-bf8f-a07bfff2b302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0ba383-0806-41fe-b5f0-1d4ae7c7fd15",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebab5a64-0222-4cae-8b24-8513178ee55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c036127-97fa-4234-8084-e23286f71a2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55e17f3-e650-4f01-baef-bd71fd83df43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "529ff6a0-98ee-4476-bb90-86a5a9b9f0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2d465a-4b7b-4145-b86c-58b9ede788fe",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d73f3bd-3924-4efd-95f9-3f1e5bd43239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b53a630f-b869-4d4d-8637-fc52d08711af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c54777-b8f9-45d6-bf73-debbfcf61986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc77f31-a03c-41c9-8138-49751e08f50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba074554-414a-4b6f-b805-260f20cbf632",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0afb31-d6c3-4745-801f-ff82d1017865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8180d7b8-b80d-45d3-bf10-bc270ac7f4e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a21ccdd-8201-46f4-8542-aac6feffb295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77eb2609-171a-43c6-899e-972d614a7777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7286ad-8f6f-408d-81eb-9d4467a50f9c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef43542-a493-4249-a251-05b4e086e9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54fecd3f-17e2-4ae5-9752-864f0b6ddf18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56a4276-ff13-4020-b52e-82b751639b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa25b7b-f61f-4530-8681-289d2b67a7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6b4bb5-d680-4598-a0b0-5b1e6d26ba7c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc208aa-1dbb-4ae9-bc62-ac3c15d6144f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62efdf50-236a-487d-b78b-fa51eb0558cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bbed82-db61-4705-b38b-6fbe2e17c217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91a259d3-5a5f-400f-aebe-0717c4ed2eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356b1841-2703-46a8-baea-cce955f5a5eb",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9989b27c-0f85-4ba2-ba70-e29e0c2e692c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39884197-94f4-49ed-ac99-346f052c96ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2b03aa-02f6-4739-839e-c07e814f4e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "81c8dfeb-5ecd-498a-86dc-b4bc7962c4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b80699-7008-4ae5-9c61-8b67f232a024",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722390bb-d279-4b55-a4b0-c5ddb039fabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785ab96e-dc53-4f01-988e-3712f198c664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b07ff7-096f-486b-b00c-5eb4f2a55694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "52970c9a-cd93-4574-9acf-f60713b43aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d974a07-bbe9-4a4d-9070-64254deb5241",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8c4914-c4ea-4fa3-9667-9a0848312c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "836edc39-c5e9-4e8b-a3f9-cb53acaabc0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef58025c-e679-4dd2-af88-e935786e98d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "75e3b40f-fa0d-447b-a3fe-d4b5f7538b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d90229-93a9-4334-b8d6-86cd792de905",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d916ead9-5e46-4cdf-b27f-753856f076f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf70d608-24f7-479b-8621-7f26fd56b3ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75bf61fe-09f7-4d15-8a98-e91f8c9e91bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e71b1c8-9a72-4870-adc3-0d3047f85a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1c5f3e-30f6-4816-90bf-d0f55fbda350",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fef72e8-fa93-45c3-a79b-380365dfea0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec191cac-11c3-44d2-8f22-56d3bc3b2b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ac50e1-d729-4477-9c9b-bfddfb685f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3942cf3d-9c61-4065-a43e-41e0ad89a00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b79c36e-9e29-4994-b465-a07a2f826308",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0fd512-99d2-43bf-806a-a05293e09f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35fd0bb2-ac1d-406c-a981-8ab2d38d4090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37071a1c-eb81-4a87-bf29-04bd596b3903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f6eadc-063b-40f7-98f6-19d83b9f6d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a3787d-83ae-4c51-bf13-2048ecd1bf13",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a408c23c-2072-4d4c-a5d3-96a9b4628838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d322ec8-b1c4-4eff-a8b0-86f5d5bc6b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1ffb8b-6719-4028-b928-61217648858d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d88618c5-19f4-45a6-8762-37a35020d261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c59b505-380e-48cd-a3e8-8c42a6301e76",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "026de757-37dc-450b-b786-ac0dbc1e974a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0495d8a4-add9-4741-937e-52220c3b26b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b585db7e-2065-40bd-88a4-63116be399dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "81414dfd-8bfd-4aba-80c1-ccdaef2a9c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918df947-7b06-4141-894e-73954d8c44e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e08952-9a93-4da9-9f3b-6dc47977332e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ff8d45-a94f-4ed7-8cde-3f9760c33516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631e8e7c-50ff-42e0-a9f0-b506f6e0064f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "32d3b7e3-8c6a-4f7e-bd7c-1468c31382bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78cf0a8-272a-4588-8e8f-f06792b18e85",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e0d9be-db5e-4bd2-95a1-979e7c98185a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4c0884-16f9-414e-9100-7c5f89ba34e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ddbd50-394d-4210-ab4f-2f2f1fdb2b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c63da16e-d09a-4f47-89cf-0e45773b9397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff72c0d-ccbe-4a53-add3-884ef8e51bcf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcd4681-e9a4-454d-8eaa-6bd020f833e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61d084e2-a3a9-44e3-9a80-d1abd97125c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17cfbbf-2b39-4b8f-b9ec-d5faf447476f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca72b82a-54f3-4abe-aab8-d2f0543933d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f93ee99-98a6-4b7d-9bcb-67cee9a61646",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9bcf14-04c5-4852-8984-1524f2c58391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53397e46-fa33-4be6-bd03-a441521e0779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7136cd-bfc2-4999-986d-ef78a7a6a9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb5b32b-49fb-4ffc-aad1-366bf1bbb099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777683b0-5e41-4ca7-a296-cc9d8288f980",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434c1239-2f7d-4df4-91f7-bc479d092017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834ec4ff-e865-488c-8852-bb06dd4a4c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e6611a-40de-4ed7-acf5-52ca50edd351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d970385c-2e8b-41f4-8e49-1f015e87c733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ba32d8-94ee-4fda-acb7-e93b8510d93e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7121a64f-11ed-4e0b-a1a2-8578cb6f9e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7483c1d3-825e-4d91-86df-218487eeed8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6528e5-0162-4a80-9de4-238c4bff104d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "db786ec7-7f71-40bb-a01c-d9b542bd67bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37be02e-8ac6-4760-99e8-5e1e69970bde",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff5d8b8-3848-4349-ba56-b51b632064b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77bca2b-976b-46d8-aad4-864bfe3ab60c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34caaeb1-2e04-458e-a528-e8b446e80176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b86e852-3b52-4522-bc8d-968a32a6de8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67179cb-9a97-49d7-b00b-b39579291490",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa55d756-05df-47d6-b943-579c5ca1bf24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0966d11d-2706-4279-9c69-1f09b2ac916c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a69fff-eb3b-449c-b907-7d47334fd3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7915a5c-5af1-42e5-a11e-1625ca0841a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce40e5b-892b-4d17-8a2c-834db00d2e4a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1561fb-2d69-494d-b38b-ab379a496a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7d12e9-6867-4d79-892e-18620275e06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7cdc33-0fd7-4dcb-ba10-73fcefe6b078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6148382a-8a73-4be7-9d3a-5832fcc63c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e542b100-37e2-426a-b637-f5531693ea1e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892b705c-ec91-4afc-a4fc-bafdeb288ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eabed73-36b2-4be1-8bd5-8f84b22dab65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c0eac7-4273-43fc-81fc-a22a1b035340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7df34d47-3a50-4da7-958a-9cacad679dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ef59e6-b43d-491f-af1b-7148959bfb17",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d8803ef-fb49-4d6a-9b98-01a32600ce43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae8e984-918e-4373-ace4-7e0f0f2599ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2f7b34-c071-470b-8f05-ff1d4126e8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7de72b6-883a-4b4e-9770-c880088db114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f70f6bc-2abe-46c9-bc43-6829240c7a04",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a77237-9ff9-4cd1-ba7d-64a9d0790065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580c4e6d-ba19-49c2-a48a-cca72d0cdc1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d7cb56-fbed-4a82-b7f0-6883dc663244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aea603d-55ec-4774-9751-bf52a4702061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a8d807-f397-4a03-b9d2-9acd522fdf4f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9511e65-7993-4c30-933d-4dd68db66e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42979b69-94de-4349-8ac3-c55b68bdccb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d27b81-f09f-42f0-b149-06e3080c3140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a076715-cab8-43c3-89a4-70c2b3404e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff804ec-63ae-421a-a97b-1f4709933dd1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5e4969-9470-45ea-8a34-21293619b479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c741d8ef-03e5-4c6d-800a-6bdf13712dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "692b7eb6-5b29-4fc2-98b5-e40e2eb65eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3033b9a6-7adb-4b65-b9a1-b8fbbbdd9255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a52cdd9-dbf8-4bb7-a0e2-f045ffa6dd5f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca0813b-0e11-405e-8b27-94c2d220e552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3804053-b0fc-4ddd-b64c-3aa184994116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab46836f-7c2c-48b0-b64f-d2c36b10276e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56a7b40d-a15a-4b85-bfa8-ca4070a59a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97c1397-3b29-4138-9179-95eda6125fb7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a68bdb-559d-4ec6-9011-e60281cae485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5541bdbd-eae6-488d-8587-6b987d8fa048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa141532-ff72-4445-a89c-acb6f7ee513f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fad9338-0adb-4942-9289-9f3d24bb4a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33423f32-67bc-4f4f-be03-5df775e0e163",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec30cca2-d65a-4d18-909c-1252ba9151d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf2fae89-094f-498e-9c30-4f8bed595b24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5f761d-370a-45ed-a86b-49adaafee5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a927bd26-0dd4-4f97-99cc-6ae971843f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9b17f0-abe8-47ec-8171-858d0094987e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb2f0e27-3000-446b-a88e-c16d2c7e3bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f39e12-6a2b-469a-8599-02c448413ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21da510-1cf5-4255-8195-9e2af5379b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "512f66a7-8fc5-4e7d-94d1-563844b34211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08d67ee-d663-4e2f-91d8-5af58eaeab9e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a04ebbd-9932-4e14-992b-66530acc036f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cde4b60-98d3-46ad-8d14-d1d51362b3b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15857eed-b832-4243-9a3f-1218841d4ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2780c9b4-53b4-46e6-9c00-79152cec3d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b0d194-8cf4-4dc8-aacb-04c4894ab6f6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d507315c-147a-4c23-b661-8bf1435330df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9373dfa0-5d64-49c4-9081-14bc00043b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c2c3d7-9746-42be-83c5-9d77f91bc037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ea37316-96a7-4001-8847-0bfa4119f9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5b0363-0ce7-4e45-9764-746a7034f7fd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84daed1-965d-48c2-8652-13c11cf62be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d666e2-dff3-494d-b014-44b3e1a720d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca8805d-89ca-4f25-a760-ce1c40028b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d57aea06-6e8d-4a09-9b5e-c0dce0ab2e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e96633-f4b2-4f75-a3b5-5a36eecdf5ec",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a72a4e0-12b8-4459-9b0e-e2b1ba56df9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11cea0b5-5c9f-4284-86f4-e6ad5a9e9466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d75c2da-3ce1-41da-9956-3cfb39c5ebb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73bed001-7c61-45df-b4d0-ba45933b75f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9d4388-a4af-486d-bba8-4f6bbbf89111",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2635563e-3a50-42d5-b1e1-9384737cba0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c637bd-533b-4e8b-a904-b63066c3b067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889a61f3-7de9-40bb-9c97-eaa38572ad49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc404f10-2cf2-49c3-9a95-9081e6dc7916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6eb52d-a200-4fd5-996e-73b58df5f96f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40dd2cf7-c19c-45a0-81bf-77fd2619b41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8ee27d-3b85-4304-b10d-34b05a4f5843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd28f079-7a26-4175-907e-f8807bffe88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5bcb3cbe-506e-47b8-a7be-2f9ca99c7999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e708f95e-cc86-4f52-9530-f187a02a3efa",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1145af84-d4c8-4d2c-bdbd-e99f4ef00488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555fa47f-0646-4ee2-9940-edcb67a05256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970c8ac3-2719-4586-80ed-762da411621e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a365228a-8543-464e-87b1-b6457c8874f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f984dec-03c8-4c48-baef-c16f130d8a23",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19034a84-7d85-47fd-b98e-5911f6a56cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90ae730-8cc0-47ec-b206-29c6deeffad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0baf8a34-27de-4417-b290-a248856d24a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03d0c4b5-c41e-4309-8f88-925dff736958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ed984e-9773-4428-9d0f-bb40f4fb0211",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25666745-3335-4385-848e-153a87424fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5542613a-bd63-4825-bcb3-cd2e6b6c4a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de2a493-fc29-40a9-9441-c5e5140c2aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71b98c89-9820-4947-a08c-aeb387e57ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382a976b-f161-4444-9575-9e0262f131c1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70461cba-5d8e-4671-92c0-700e9da7fb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff0beac-5be6-4492-8524-50301f3cab4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5a5300-e162-4fbf-b634-e68eaaf14115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fbb905c-cdca-4a97-8752-f28cf2c76c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb90bc5-f24d-4447-b22d-de0abf9208ce",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abfea0d-6122-46e2-b25b-21d40e65d7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3eeba3-eb18-4adb-8c37-610a7e9f2cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22e9426-ab8b-4520-9846-83dee45f8f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fe258d-1f43-4034-a7f9-b2c2c45c531b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b67613c-5a30-4b3e-8784-38d8017abbe6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae11f708-001e-43e4-9e6c-a8686ebec252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08cc572-9c67-47d4-bf72-ae9a52dc37e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0290a4-45ae-439e-8b68-ea64e400e608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "851fbe76-d29b-4724-91c0-de6a28ad6c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be86869b-a176-4c9f-802c-349eac76324c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe75e40-01e5-4153-b2d2-bb2ec9c46e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b3ff0a-6d08-4409-912b-3d5fd4e8920f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad16e473-1663-426c-ba2b-6ca5c096907d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "df7b2352-c194-4de2-b572-f112aeb059f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52d1a36-7b57-4711-b9a1-4ce798dc16ba",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbe58a5-63e1-402b-aa10-0c6b3452c205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b1f642b-9c13-4e86-945d-9c58ab4e751a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de92996-4ebc-478d-a409-e3ab73a8b130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "929a6336-6d22-451e-b715-f015ac4434cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c5f278-f155-4398-aeba-0023c80c2505",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c041626-c8e9-4330-b8f0-c7cf66a45330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1516488f-ce52-46ca-bf6a-f08f2ffdf11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa946399-8941-43fb-83d3-da55db919ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "460db25b-a3b0-49ce-9d1c-f9c347aa378e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ec938a-d17a-4dd7-abad-62cf513cd922",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2c2a42-1aa0-4e0e-b73f-a9480a3eda4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "175e33be-039d-4f7a-a1fb-37d56d408e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4858ad87-c4ad-482b-851a-4ff379af4cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef014652-f152-4b19-a149-6851ad352131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2473b3ac-4aab-4070-9bd9-a6f08699a570",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e2b94f-8bdc-41a4-bb07-273af31e8f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55beb582-8d50-4295-91d6-3d1d3deb9628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579d0662-9524-4f0b-b491-b854c5b8d9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c3c309-85e6-4108-8a81-e09e44a4bfe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7699c1e-ecc6-4fbb-9ed1-58ca67b67143",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2805eedf-1c1c-48fd-b376-3a845bb7bd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9e6141be-c93c-4a6c-a344-e2154acf8f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77be14d3-f7e0-4c69-bd8c-ff1a4cd263fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c920d9cb-95e9-4957-9e93-691b6ef636e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ddec6565-0dbe-4092-968e-fb5a408fca51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "527e6b70-7bf0-41a7-8549-7bde3256ca0a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e3bc34-ebc0-441d-9866-c1d989d49452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dea64fd8-e0d0-4722-9f08-3218a9625614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7924b5b1-5396-4cf4-9e52-e2a2a64391be",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "21133a2f-0bbd-4960-b59d-8f10d048a352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0c0e6e-8868-4280-a1f4-521f5e23de21",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b31e73-52a5-43d1-af8a-e2b25b1d493e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e18ca33-eca1-4f7f-9dc5-8085bbaf60a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb27a514-45be-4032-9336-8623c59a3b0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8958080a-6f02-4fca-b28d-89e66e38fd4e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ea478f7-1101-45f1-adf5-1c40ea2478a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ccd6a49-cae2-4310-a6d3-7ab2ff3f3a9d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd177d91-451f-46bf-98b2-00913fa831c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b632a2a1-4f2c-49f1-a2d6-a5c781941d97"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "971f836b-3a0a-4abe-a73f-2216c35e0f49",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d7853e71-8aa7-4d88-b80d-ac3977d72be1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5739c4f3-b7b0-4c1c-8e88-e7b10d904a02",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1f3c294d-41d8-40f8-9af2-8398d43d4d62"
                }
              }
            ]
          },
          {
            "id": "c9814536-da29-4f3b-be5a-ff2932741f14",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b7bec9e9-00b0-4659-8e43-1b9074c5e1b7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc08fb07-9d29-46cf-b6d0-754ac0ba17fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5ed4e2c-0e27-4868-b19c-9b998b53281b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9f0ef51-4800-4ff8-a9d9-f1f3cd495ad8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "046474c2-e3b7-4b61-8d8d-b3de833808f3"
                    }
                  }
                ]
              },
              {
                "id": "46153065-5dd7-492f-9c08-d04418c65106",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bb03952-9848-4b30-aced-004713e88e82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3cdf2ed1-6237-4e76-9739-a87736abe0a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19e4112b-cdfa-45ce-871e-b9d7f7877523",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8b4e43f9-82e8-4992-a49a-ef801f550f39"
                    }
                  }
                ]
              },
              {
                "id": "f2eae776-065a-4c5a-b51a-c7bc84c7146f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "644c9883-13e2-4030-959b-0ebccd349665",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ca5745c-9544-40d2-aa75-9c722d871a6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36d21af2-4a65-41a1-9f17-c65de79a6499",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ec7a6718-b6cb-4f1d-9cc3-ef7e339ef71e"
                    }
                  }
                ]
              },
              {
                "id": "8f9ba1d1-7399-4d31-93f1-95562628b932",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fa4f500-ff0a-4e2a-ba70-77da34351b0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fca6cb24-f29d-4c74-8522-466e4724ff5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3addf35-22fd-4508-99d6-3b28313a691b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "37fc9be2-298a-4ec8-ae4d-7d6dc44049b4"
                    }
                  }
                ]
              },
              {
                "id": "e56f1913-d9a0-44f8-a849-76752a0957fd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e01d99c-083e-4647-9184-58a16c6c36d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd3163a8-4864-4aeb-9825-e29dccc96646"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0447faa7-1cb6-4c25-9247-7deb4c4b48a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "48e9b8d0-e7a9-4233-a6c2-cd01d4713d55"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "878f33d4-ed3b-4a01-81e6-5421adcbeee8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b42a0217-af0f-434f-be30-48210b28989d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a5b9d264-ffef-41bb-998b-f1badf897c5d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab173331-6812-4996-96ce-c3223aaa79d5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d3683af-a3e2-4fd6-b804-c8910c398b66",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9fe3bd4b-7406-488b-beaf-f1d66b98e681"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1847383d-9b11-49cb-b661-acc933661824",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4dfca10d-d4a3-4f56-9c9d-2beff0ed1041"
            }
          }
        ]
      },
      {
        "id": "182c4d3c-1224-40d1-8294-6f9f21fec8ba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5b627ac8-2f8a-4a8f-97d1-a93c14429ba9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa19cb13-b89b-4cbd-bb6c-5b4c2f79217c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7d605086-3b7d-4bb5-9bb0-7bb8a5e72b8d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51b8872-0ff8-4c09-9957-ec7838aa8867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769d1ab9-84ee-4ef7-9a21-da8ff616c9e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb093e6-320f-4b61-8c2f-ff494b9fba3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d47167b1-611e-4c8a-8891-d91e0b75a5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5d1dbf-2c1a-4f48-83ff-1950fdb4e1b4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40deb78c-b4f7-4f3d-978c-22ea9f59e7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8028fcca-2f0d-45ab-bb07-18211bcc57c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0cf621b-6465-4106-a60a-59fe48913386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc0b8e3-3d43-43c5-9a10-a71cfd895b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe98fc9-cb2b-45cb-b950-41453f5021a8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa40c69-b2ce-4198-8a9d-2c1918462fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60417bf1-7a10-402e-a712-0832f3c2bd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df484f3a-ab69-475d-97ce-38ca09472d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c178e41-d904-439e-9dd9-f622f0aa9ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987bc4de-b7a0-4e5d-b2ef-6f5d91fc4d81",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b48083a-bdb0-4ece-96fe-ec6b68d7e54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6d5600-52db-4eae-b285-f22200940354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6b597a-8b0d-4905-9016-2ea252b53446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7fe1624-eb72-4c88-84ee-c763eafea52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b80db74-5f6d-4589-a69b-e523a817cd4c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c5b715-5fa4-467d-8fc4-abd9c0276b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ce3fcc-8853-4d92-abfe-f13871a80553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39979d57-bdbc-424a-8449-29a859379516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b16521-9f1f-4782-9422-13fa3b2e45ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8aa248e-e5e3-4707-96bd-8c7eed839776",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c5ac05-f7a3-4b13-b165-ce3f15e8986f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d90d05f-f3c3-4605-b77b-dcc27402748e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f75c880-4937-4733-919f-f49018f284c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6df3b256-5661-4402-b3e6-0630da79873d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda6deec-fa50-4c83-aa26-64c88c55a078",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f269c7a3-226e-49ac-8d28-0ffb7cbd3d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046f3237-79e8-439b-a238-81f24f0516ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac491f7-d624-43f5-b446-a914b7577e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "876876df-61b1-4402-a13c-f57588c6f274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf359ced-2c80-442c-ac0d-81d8790463b2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18d71fb-5040-403e-8548-282c86e3ff74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb4904b-0af3-48e9-805e-b2020c2026c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c421dc-398a-45dc-a586-da84d03e3861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ffbd65-8c7b-4459-a18a-d9107e679fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dd76f5-56a2-41c9-bca3-c1c3512fae81",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db561a12-740b-45cd-9d06-33faa4df003c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f11967-de70-4a56-9d13-0bdeb4d5e261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9cdb8a-7096-4069-b2be-bafd738ca77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0da8e747-b012-4542-a1b5-3a0d189cc3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77745f6-f28c-4aea-a376-e6f46166d729",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f708d15e-2859-41aa-a01d-76fb8728bd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "629ae102-ac7e-4399-b9ea-fd485a62bcd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b231eb5e-6368-4752-a13d-bdcfc2e09a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "104b93f7-0928-4438-98d5-8e990fec4a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ba407e-4b09-40e9-ad14-dbcd236b29c0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6b15f7-ae9b-435c-912d-a5959c7f8c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f0d50c2-3191-4211-97e2-4916d584f0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac215dc-16bd-4ebf-a24e-bcd7e703421e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6528e8b9-4cd8-44bb-b104-8cca2e6e83ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e50c034-0b13-42c8-a65a-a46fd875c389",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd00f25-d436-4c99-8d57-b8b1730374bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f7253e-9ab6-4847-bbeb-556194e239a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7741237-dc29-44c6-9a5e-8e784cc9fb7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f5b327f-0845-48f5-8058-099ca9cfef46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9e7485-5bc4-4bfd-bd9c-5a625a8d3eac",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5374a325-a946-43ff-aed0-73433ba5f7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc554dbb-ac11-4bb8-9b25-00ffa6cbb79a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264d2c95-e481-4a28-af97-969159f10dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "793ec381-734b-45cb-ad78-6c00f3d220b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e832053f-5a31-4b8a-ba1e-625d72d0e1e8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909385d8-f2fa-42a6-86f6-ab21cfc10958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8617126f-c11f-47e8-85d9-3a2bb94c47f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad62fba6-a3ea-408c-b46c-0b07f659e627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f17f2130-b26e-49d0-a856-63894e5b29ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3daba495-53fb-4324-9f18-0fe1b8bd7068",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e43558e-550e-4352-b7e4-ff4d4cbc9cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a67c45b-4762-4b05-aaf5-69679fdf373a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94dcf440-196c-421d-bd8a-83bc2379a8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9381c93-1724-46aa-989d-477330684652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d7a6f4-125f-4962-a41b-86bd34e9c7e3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016ac83d-d696-4a01-985b-03b2ac81eba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2979457-19b7-4111-886a-d738c96f7811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad608af7-2b32-40b0-b2ba-c8d5e1f731df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "93745296-c3ef-4dd0-84f1-f414319c7e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9572cf2-5c73-4f9c-ba63-f99a2756c63d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f60358c-1806-4cdb-8249-b2fc72d4f2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ed1c8a-a6ec-4e97-9377-9eba92bbf61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7165659-9e6f-40f1-8a45-5e61301c1ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e54f101-de75-4861-b4e2-ffbde407c4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c5729e-b57a-4984-b19a-3865b50e6119",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa68b688-6d13-45a7-8df3-6a59a935a239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6bb00d5-29ee-46eb-aa8b-aa9e9f4d7628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89897523-1cfc-432f-a20e-b71080848d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "65f12ba0-8eac-4b51-8a67-47f19e81d9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c174ea26-a98a-4651-807f-8aab49b473d6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e55829a-f2e5-4e03-8602-e2bcca1d53a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19955cf9-e52b-4752-a665-a1c25075cf3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da53dd37-4125-4d50-92ef-899ac292a693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2049aaf8-b504-453b-8022-490baf7ce5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1020ddf8-5de9-4682-b704-838da17e8d82",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f928f8f3-1baa-4379-af66-fdc27e69f22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3087f8e9-5b93-4a5d-8790-679f318b3334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b42e080-5da4-4bdf-afac-d1d9f72be386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8cd53b1-d15d-4b51-86c9-448c6406ba64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac2af94-69b5-4945-8166-c70d00789a79",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3528c4f4-5c4b-425f-8878-1b8b5394f353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e25d5c-ebde-4ec3-a6ba-7e5f617d65d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f09e53-6e1e-4463-9ed7-ee3d638b4da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7afd2ef0-aeaf-4b35-b0cd-0c933891ce81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d03e7e8-42d9-4be5-b0b6-56a9ad7c02fe",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391f6a3c-a333-453e-a39d-f4b43c958f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde73507-4459-4231-89e8-b9e6d8febf00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd67dfd-622a-4828-b5d9-f32ed4222764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e46f7620-68a8-4e23-9436-7aedabb254d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26794a7e-ffa0-45c7-ad40-e6892fdb7cf2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a63bdb7-f695-4ecc-8d90-c806cee50b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5361d748-55c7-4ad4-a8ae-6a9badaa76c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ffb44c-c875-4200-ae99-9955fef1754a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae02dbf1-3695-417e-87fc-35681eef5d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe61315-4c13-4fe1-bf25-39ff88e229b2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f9169d-a91f-4c83-9c43-901d49cba22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71553c1f-aa5b-4c70-a2d3-6111600c9436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6248f746-0737-48f3-8b7c-176517fa6a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1af76478-3433-4721-99c3-0db5551c4b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5df8659-fc39-4bf4-ace3-c04edf5ac560",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a32df6-6e2b-45e6-821d-0f453227abd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7506382f-d60e-407e-8bae-3afb47162b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621c4240-c42c-4235-bfa4-85dc4d7c4712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc65b276-b6b8-4617-a65c-5cc73058259a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067c4952-64b3-48f8-b930-a4f58378a0ae",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230fc700-1a67-4ce0-a829-802d09873806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d2b0c10-833f-4da7-9c41-2c8418fedf9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbf43a0-1fe2-48c3-9dcc-07a870680a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "047460ed-2bbb-4114-bd66-cc032ad3ffed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b41286b-8d8e-49fe-aa20-7d7e6624ec67",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492a5a48-244a-4674-921d-e79142f795be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2241c33d-7945-4a9a-a90e-d7ed44c9ccd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae8f9d4-6275-45e8-8d2e-a5019d7cd439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26b56428-7baf-43ff-ae7b-d7824fbf1385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cde7ae-c6c6-4305-80a6-ecca575f7166",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a8cb30-626a-441b-a812-15665ce5a3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d856f2-6912-49ce-a5fd-12c19dfcad4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b010de6-a34b-4640-8cfd-2c69814af4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf1fe986-651e-4a97-b05d-f0d9f4be85ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4656c1-99b4-4df5-a425-f9b742604345",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb82432-d96d-47c4-a357-042888186947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39cf6dba-b362-47ae-a03c-8e539dd2e3b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea77a11-e340-4546-a4b8-c673c177f706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b248beaa-8053-424c-b7c3-1c715aef687c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3882aad3-1478-4f14-a86c-95af0de77418",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c94a60d-5474-4917-8841-934f5f4ff566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d1b612-69af-4af6-9301-403c5ad98b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc33b14-dcdb-42a3-bd9a-0dd416706b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce416053-b434-4ba1-bc56-14b67206eb6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9479a67-3b1e-4800-bd61-06ea9fcd888b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799170b5-c56e-4acc-a83b-5c8927db7adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854e6f3d-f5e7-46c9-8f48-981818596235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa090dd-3eb6-4327-ad41-904800d7425b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39f914b5-dbab-4481-b802-81366e3de201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e058f502-16c7-4ee2-a136-b05537c9d880",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9eb199-f511-4d0f-8083-a08bfa7ea4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9acd0854-5fee-4c33-89df-891f077bbc21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cc4b38-fc0d-4d30-a120-38deacb29b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef67d82c-04f2-424e-8cbc-a4afa69aa264"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "682ac4ef-ae7e-4190-845c-e30bbfe4f528",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "360abbcc-6c25-4df8-8247-397871c68574",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a56c4a-49b1-4cd4-b621-52d04df62fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11be8f0f-5d11-4740-b183-74173e1dd840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39d0e75-44c3-4464-9005-7d04144f8db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcd7a60d-3ce9-4003-ae2b-07cc02f5936e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6997e72a-3fca-4371-9a4c-d4b94ae9a3d4",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b6caee-1eae-4827-a865-576ab1ca4d4c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "bd1c034b-639c-4219-8161-4c1a5c7e297e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0b4a05-c7ec-4bd9-b23c-8ef56256b593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c7c9811-bbae-4557-8b1f-1ae00ee75f24"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78014970-db0f-4192-9d74-1989e67cf7e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94151dc9-9872-4e54-91b5-4812703af468"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6369acc-0aa9-4dc8-ae0d-eb1f3a8d55d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee100637-0065-4dc2-a9c9-1aa5faa96c91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "079fded7-baaf-4a0a-83be-6923e3b7bc5e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "65cad21c-0cdd-4f4c-a081-38699395598d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f5dfab9-6ba0-48d3-b6c3-f11d1747d32b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c2fa8c92-fdb8-4bad-b1da-6b48f577227c"
            }
          }
        ]
      },
      {
        "id": "26ba1fea-1175-45bb-99aa-3c5d435a2e6a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1b173e70-40ba-4313-9665-ed43cea3e8d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3effbef7-4a4a-40a6-991c-80836f26f901",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5308d430-ae75-42e8-bd3f-e07ef6f9a2d0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdc3916-9d94-4fb3-8ffb-2fe12779515b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cca3e4b-dd81-4e86-a6a8-a4baafbf87a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b098761-b22e-49bf-b1e4-8859652ea86f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480dcf49-0135-4469-b0b4-4127e4e79d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c192d68f-06b3-45b2-a961-7658a7a0d5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42548030-7fbd-4131-837a-9aa11d66adf6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95eb67d-dc6c-4da6-a51b-1990f1661e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16447c04-a5db-4be0-8fb5-78c22b8536dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910c7bee-275b-43f0-ba4f-3daa5ee17298",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "403f2345-8006-411b-9ca4-bee83d1c9d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c481261-dbf9-41af-81f4-f96fd6d567b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3adc9db-183a-468d-b6b0-d04e3edfea32",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d7dd3e-de2c-40ad-bf68-3132623634ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c80451-e589-490c-a81c-206fe048e604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8d7255-f236-459c-832f-e40e7f7e8478",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ca7bf0-b208-45e0-a9b1-52edd7118461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abac9bf6-b425-4782-b36d-59791061806f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2c7326-5ea8-4969-94c9-7a79d42b874a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4610e0b9-9ff0-4298-a621-585d1fccc75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0982721-3a91-4b7b-823a-5f2296a14aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54f11a7-e11b-475e-b52b-e2d9ff6a7f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e23eb62-7d33-4c78-b315-bfcb6fb9cebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e3824a-199d-4cde-bc2e-0ffa86d11f69",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ab7a07-2c78-433b-9d79-02f700584e99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36db0f4f-9fee-48c7-a972-d37633fabc08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e802c8c4-b774-4475-949f-5a3e079c7d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b30219-1a6a-40c2-9202-45c1fd75a13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b26d3d-d666-402e-bfa2-055cfcccb554",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472b45a7-68f1-4a5d-a6b8-3d0b0f360336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffa313e0-8d03-4757-af9b-d3e779a6f33d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa4988e-913a-4c99-8d27-d113b67a2a91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88e6dc6-cf77-4521-b7db-76d51bf2cb92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f295fe1f-fe4d-4268-8672-d2c655d996de",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765cc227-237b-4c74-b36b-59e0c6a6d85d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4a220d7-89d7-441a-9848-1f9057a72821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19952da9-b312-41dc-b8c8-75bd934a017f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70fb864f-638b-4469-a3bd-2be7e901a090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4769e4-2958-4cac-9e3a-89e1137514ad",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed20f1b-7e45-421f-a85c-81a2e60e68cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec765986-022a-46a5-a8cd-187619a1fafd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9991a9-f768-488a-b7b6-2f7d123e0f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9acd222e-9707-40dd-bcce-1e7769544eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b1e5c9-c656-437f-bb27-cb4b129f4282",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6304ddd2-dae1-40cf-aaad-f858dd05bedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc5cd06-04f6-4cf2-ac7d-f2eade68aab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31758650-f36a-4737-a1f1-2e9ab79d9460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc4dc56-44c2-4180-80e1-fb08c0e4ab26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b193f21-b8de-494d-9961-aba0dbf14979",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a4a1cb-5b53-457f-b78c-185601161319",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22793f39-e5fe-46ec-8c0d-a1d37153b4cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf875bc-932d-4823-b66f-a857d30c69f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e002264-486f-447c-a51d-1bd25dd73374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a1f865-7318-4347-940d-e08a0dd28692",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24155c33-be9a-4d02-8db6-e3d7a236d803",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ab945bb-0c53-4023-be45-1135d8957eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "448ccfb3-1629-4a95-b756-b22a602932b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d381308-4a04-46d7-9658-7fd132a2a5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449095b2-e5a1-415e-960a-ab5126f3817a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2caf3e57-a9be-4dfc-b651-caf60c252d38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab746fc7-c395-404d-b1b7-6234bcf41db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b219c9c-c0ba-4d4e-9413-10bc7910e134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0177fd4b-c5fd-4546-8a39-8262d19e8416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4d984e-b6c4-4cc2-964c-d01c5c54cc65",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd71573d-68da-451b-b65b-9327053047d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c38c53b-b2ae-4021-bfb9-9e0872344bd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6825f263-e16b-4307-812a-47d18111145d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32549c0d-dfb9-4592-b506-31c415436876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5aea40-bdd2-4600-b66d-d75f2540908b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafb2c84-e970-4115-a9cb-f02d6fa5d887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84f56ad-1be5-46df-834e-e03f790d98e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67ec41e-b8dd-46ec-a46b-f4e1a7d9b19a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a3f32f-81db-452e-99c9-c892151f3afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be12dd5c-f24c-481d-8bae-30ed0ae1f017",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097c99b7-d871-475e-81cc-00d2e3bdcd46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf089d73-e4cc-438c-bdfd-8e6eefb37170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e24523-36de-4b7b-938e-9ae0e8fabeba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259a4dfe-b749-433c-b1d4-39d163dbc3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd54797-7d82-466c-a5ff-bbf11405ce87",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92470eb-6685-48ff-97e0-6b1907f8e716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "471fa6df-9641-464c-8bd4-e06fdb2b4c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd49833-fff0-423a-9831-e64b77d04816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f82832-2540-407c-9ac1-cccd2b578d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec6f514-dcab-4b66-a2f5-ff30e986393a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6516f912-de74-4561-878b-392d60a35676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51dcfdbb-ac68-47e4-80f2-2a7f2da763ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d935fe-2bd2-4766-9f2e-eb43a72a3bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "433b6fd9-57a5-40c0-8da7-f69a824df8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbae2b7-b24a-4aa5-a726-c270b809d785",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4525245-5634-48e4-a443-1e68d199c7e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f38d5d64-1927-4e48-b1a4-1bc3074de63c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8c1213-9f30-4680-829b-1db78939ea05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4a3076-41c4-40ab-bf29-d04dbbe72841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41907e2b-594e-472c-b7b5-fda9772cd3d1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56abf208-53e3-48c7-bfca-c4cbb4764eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c72ebe-9d9f-4341-b4bb-ada8991d451e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c760e10b-fb63-43ae-8210-dd19482507f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "719349e3-748c-4fe3-a715-6b7eaf42165a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e020d19d-41cb-4cba-8d9e-e2992ef8f0fa",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04eb479f-2ea3-4c80-aede-de15dc623dd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a86b29-07df-48b3-aca3-f64c9e471056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d947b9b0-0aa8-43e9-ba36-7b401ed86011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c9449f-732d-4be7-b6d1-6e6a23796c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccc2811-cab0-4840-bbfd-8b79a0a720df",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17562815-415b-4571-b98b-01ffe3927cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fda906d-c1a9-4745-a045-6025d93aafc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f30bd2-a69a-4f55-b396-9e4103ee4004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208d58b3-c04e-4375-b0c4-64757d823d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d66bc09-0765-4fc5-8d12-0bffeb948119",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f693402-749e-494e-b9d2-1d804b563c4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fef738f-df11-4fa2-9b35-31dd351645ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c7d5b4-fa8e-4081-bfbf-d8f59f22a2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125e7e0d-caf7-4c28-8ff9-c45b4e66ef64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfa55d3-2401-4528-80a1-177baf06cec3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f15bfac-5922-492e-a4c9-f45a02d9bfc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e7d20d8-984b-4f90-ac89-182226555d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553269ee-dd6f-4443-87c7-4a4c0521dcf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712867d4-5d90-4249-b197-642ebd7f447f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29513d2f-832e-42ce-809b-681884101ac9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8e276a-72eb-4e7e-9df5-0b1b8a1eaa6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1f31067-7054-45a4-8d75-9b290bd22bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a0e43c-f5b5-4ec8-811d-7f555d2bb736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db4cdf98-c0af-4b0f-a3c6-cb4a0bff4996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcb7b27-bf34-4206-885c-9c4d11d9c7e7",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f86153-954e-45f9-9f50-ab3cafcc093c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "182de320-adaa-4ca3-a580-04f6790969e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef82afd0-fbe8-46f9-959a-8944c4c65bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d7a056-c3f0-41ef-ae0d-460cf32aa9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf01c078-1fd7-4f46-93d2-44d07d5231e8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf5a790-ea83-40aa-848e-07db630f4af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d4593f-f2ba-4fea-b9ba-50a6ddc97fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82cd4fd-e5d5-4b48-a4fb-d24bdb99e7b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de13eef-fefe-44b2-8faa-7cfedc5b223b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4aebca9-cecc-4adb-a5c2-427a4f4e0819",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678d0dac-27c6-4503-882f-816dc0933b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9743c70f-38cf-460f-8f02-53db81f6a132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b91056-959f-4576-be3f-26cc7214b41d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f34d3c4-0a42-41b9-9dc9-cba54f392c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01aa1fc-9d54-4a94-aa2b-9d06cc0742a7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2b763a-b45f-4430-b232-3c8128189d73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1446b7d3-a869-4cbc-b5ad-ad6cbe4a3d7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb10d6a-f7b1-4956-90c9-d1138eb91695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8868b301-ecd9-4afc-9c8f-89a76433863a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0cc13d-9d00-4ce6-94a9-91cef624a918",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f3da30-49d4-4ebf-953a-08b2dbefd5c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6e14585-e427-4dca-b090-959d62b03433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d357c977-b2a8-4f38-911b-22a767f67487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6219b806-0648-4634-bd0d-17d6423ee005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ce407d-a408-460b-bbe6-c29f4061232f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab8b41f-6a41-4fbc-9269-3d50a1b29254",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68d32e34-30d6-4fb2-a42d-868ec114771d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db55cef2-845c-467b-b378-a608cae80333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c611ad5-71b9-4583-b054-a6844f5ad58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a12ef1-bc93-416a-a349-cb4f607d5d75",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72bf779-46be-4993-a476-d11bcaaa05c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a166744-ed66-4424-8340-6ad474434852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f26c67d-5f56-408e-a711-00425c84ab3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806f6cfd-d38f-4e1c-97f3-0ddf0bf66f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2d27f3-d257-4d4b-ab9c-7b56ecc65fee",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1439688-4656-47b0-be2a-65530354e4de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "213cd793-e77e-49f1-b21f-1df0ebd09f07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcec0cff-a5ab-45f8-86cb-f9a18a7509c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1128385-9716-4759-89ef-ca2aea40be82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b62097-165a-4953-9926-a3023b059851",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afeee81f-c3ab-4eba-b95f-79b2bf030ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84540cc7-00de-4ca0-b8cb-5fca49d0347a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b975e4e-db9d-496c-b8b5-071022c7b9bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d78dff9-e0bf-4ffd-aba7-1bfd56cc4914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea38cbe-f066-41ef-9b51-63d1e867026d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbbf15b-95ad-45b4-84f3-947d3d34c3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a39cbe8-906e-4946-a0cf-90c52f1c89b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c93d8b-5bcf-4521-a3de-c83db2b9e095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d0225c-11e3-421f-a29d-37c548c5c26c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5269664-78f1-46f0-9663-261773aed04f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460cb58f-8216-436d-9a92-3f927792df62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d4b62d-30d6-4033-92b4-d6fc24a03e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d254b7c-4dfd-40b2-b066-ae937a268dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1628d9-3ab8-47f1-b0cd-87e6d1d9c217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5ceab7-aa1d-460c-988f-87c58ce69ab7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a45e74-8447-4dd7-918d-335c445ef50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c14dcf-c8ca-4362-9ca3-e5cabbf6392b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d4ea8e-49a2-47b3-9cea-ad62aebfa8fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "188acc17-d6ae-4042-9cc1-e09f662a39a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1ff1a7-100e-41d4-b8a8-dc0a619fa84b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c31969-f5a0-45b7-b6c7-8c634190d35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2cac840-be6a-496b-8dd5-9599e79f3b90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5631e8b5-8601-473d-b784-98236838b20a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e22e7822-65f8-4170-9cbd-a1bb05575258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c0d956-dee3-42f1-9de1-1f74dd030705",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6343a8ac-336a-4cee-9dc2-57d3035da3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c6c03a-20b9-4f21-acba-8af4ae50dc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4f9f16-aced-4d23-86cc-9fae86c549c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e7cdab-af29-4918-9181-14fff4e25bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d05ebe-7e65-4537-8f7d-c5cfdd5311e9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137932db-cb8c-4696-8853-51a450cbf823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb9f9ac-aacc-40a2-b3eb-b42f0eb33f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d9ff21-5bfc-45d0-afb4-52f433f0ba53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21ad73ef-9b71-4380-8ba5-4ca7c072ebb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd6c204-714e-4d96-96da-9447965530ee",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709e5e15-aa8d-4507-81d3-0570b846f873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931811cc-73bc-4fb9-a75b-ba170b19c4ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "597b7357-75d5-40e1-8731-c60e1d6082c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5bef5a1-9e63-4a0a-a4ab-9956b3a6e139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c92b4b-eaed-4890-8268-485fbf58a619",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3965a8-ede0-4709-b9c9-a781485cc8fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4582da-c5bd-4604-bb4e-1352ebb9d8bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bea1e6-2599-4153-afd4-9a0d68eeb801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cbe808d-677d-4c43-9ae6-10d27414f00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7efb4b-8fd8-4a68-baf4-2fe9128fe686",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bb5be3-f0ac-430b-8af9-39e97d4b4523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ab390d-3194-4621-a21e-8034bc174f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b3d2e9-7cdd-483e-9d97-a34993b5a002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049b962c-022f-489e-8265-2d43a7a49d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2728b397-5d30-4136-a9d0-03f230a695d8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35350047-e99b-4e61-b07a-a90c90f6221c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b65634a-f7fe-41af-bf9f-ae53f29ce5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad17aa89-54eb-4e7b-9ddf-e7ca4f413530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4345cbfe-47ed-4a87-a971-17703fcd90c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c859d98a-e946-48ee-b49c-11e39516723b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1871fc-9ad4-4faf-8536-2af38dfa9306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "295c7791-1677-45ba-8e2b-2b15711de327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f765fc-fd51-4986-9c1b-970298863d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6045fe-da4d-464a-86b2-5a14dda3c034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fdd725b-adfe-4b1c-8e2c-c8478218ee32",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6061809-f2d1-4111-8bee-10accb866174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18dc576-02c7-4163-91d2-aaec2b583a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "381a12db-5b32-4b09-aaba-e9c2820d058c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9fc1c7f-a55a-482e-9634-fbc006b9387e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654e0ff8-3f42-4a40-acd1-1eb8481f2775",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399362b8-5423-400e-a542-c870ed57e801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73900e0-311c-4828-81b6-f993ad927dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cf3b62-6934-4fa4-b429-f1b2318c1d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7830057-3f48-43bc-b457-b2612aa5eb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f4d508-0b7d-4b97-96fa-e79c7a67bda1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7a3253-dc47-4a7b-8e1e-26dff25e1808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a980c0-2c80-4658-bae0-f47b7950a24a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200b4d45-b50a-4cc7-abcf-b88526b412fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9f9ea2-d25d-488a-967c-43d31bec4a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857daf0a-79b8-4813-bdc0-1695c1032bd7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0447a82d-ee46-4729-8516-7d70fbd2d053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738c4097-f559-4240-9abc-a29b54cd3773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8235fc-3ffa-4a5e-ad09-456542fa2e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42061272-4c11-4d0f-ad34-3276ba2c18f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9495cea0-08a7-4ea2-afcc-4262fb2b83da",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62af058-17c4-48ef-9326-78fbc86dd921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79ccd9d-e2f7-482c-92de-e5259b420606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05cc3c63-dd30-4def-85ee-4d5585edead3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e008348f-8b08-4370-ab84-8c7106fcd749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d8ca32-2bfc-4d90-ba9c-fafb79bd1e17",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70294a40-d0eb-47bf-96b8-241024bf5ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a378859e-efdb-462d-b9b6-1fb4d2e87532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8312d2ed-65b1-4810-b618-3798693e1544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42b1432-8456-43aa-b060-9b36dd0944ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80486070-1878-48e3-ab1b-b95a3c894b19",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048c7af2-3766-4483-af44-8f8e9db28eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2293523-98e5-4ce0-9329-d3369b9e9823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5292bd21-298c-4a3f-9d1a-a7e234a00e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9862db8f-7ca1-4317-9532-3ad7e6c54d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d611a629-40ba-465a-a570-e7474ff89dc5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4a1c72-cd5d-4486-bd9d-1bdbdf607c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b276bf94-bcfc-410e-afad-b1d10c25709a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63adfb74-933d-4780-a7bd-f805d0c4c402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f4554b-463c-42b8-b330-7538d3d04b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222fbeb3-2d59-4784-adb1-bd69fc8e25b0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08cca40-eb0e-4d1a-be33-856b5855dc27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ad2c9a-df25-4a71-ba82-e0b5ce0a54b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e8ff64-661a-4c27-a923-22525a1da821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c199bd3-b903-45c0-8f51-8b2942bab866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d650ee-1804-4e7b-ab82-6c94c0ae75e2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f98132-d980-4b1a-a162-92627029d7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e79552-8a2d-4d49-b2ce-5d6286e9b6b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "606347a4-1998-45d5-9d63-6173a12c32f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a33734-0113-418d-9601-3d111914eaa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8436df54-73fb-4350-9deb-5d78e6462801",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43dad65e-d46b-448c-a8af-7f2a248564f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac211b5d-3250-49d3-9ade-cdcc9b830bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d63ca5-170b-4b4e-8d61-6e8d4b7517e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97435eef-0b22-450a-ba01-492d1cf4cd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2c3dea-6eea-483f-98bb-fbddd5efb02d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a41887-be2a-4227-9478-769d354ec612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c05a0a2-191e-4ac2-bd6e-46c61a6f090f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e31aaa-60d3-487c-ab31-ad9962dff5d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c5bd88-0ed6-49bc-8e41-ddc4e9e633e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c519713-8a34-4491-b17e-bc139dfa0def",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177ea6fb-d05d-4445-a0c3-84eb332cbf13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1abf89-452b-4c86-949e-c0a3d5e9066b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e57711-5a63-4c58-ac1f-11ebe6cf93ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c9e1afd-32e1-40cc-8ac7-639251ecc87a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd30669-4f3d-43bd-b6f4-6f40aaad51ab",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f70727-0179-4d1b-93d7-f91603346c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6cb23b-bddd-423c-9f89-1bca79fae8a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cd5928-514d-400b-83ad-31fdaeb79723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a081e8-c64f-4d6f-9e0f-7309df4d16cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dc94af-5136-41ae-ba07-4a136d47dcfb",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc72e428-96a4-45ef-90d7-7ecb4661f9fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9337fd1a-9d55-49d0-98de-11882566c89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d391fa-7557-43df-877b-e77df15ce9c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2a5581-1b4c-40d3-bfd0-0c1cf32b9ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b106e087-dcae-4be8-9ab7-a0876c45294b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d028408-963d-4bb7-a895-9ce1d2b7820c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4177bbc9-0b1d-4b89-b0a4-fb8ba55e65ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6d1506-f382-4fe4-97e0-936738dbb9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894f0925-83a5-46ab-9224-fb83999f5d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bf6765-63ca-4609-b464-08c51885843d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d37305-024a-4c30-a80e-03c7df6564e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26a4896-0185-4670-90d2-c474c61d53df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfec0ba5-e430-430a-a039-d229470b7a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8937977a-ef7b-4613-8509-8db358c667ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8536a48c-1afd-4db8-b41f-9f2dc4401891",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befd0456-fc0a-4340-bafc-4a82c62df1a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4edeef06-0013-4190-ae45-a942fb5c44ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5faf29f-4d68-490c-8b10-2a30583abd33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f663bea8-b7ea-4b3f-9b79-285f15b635cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c305ae-7cf6-457b-b065-005c650b514c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cde1269-5844-4e30-8978-e74e2a81413b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c38b55b-c9b0-4c72-a33e-5c50bd6e0793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e95c3dc-3c44-4054-b08b-a81d94ba03ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9c693b-5a93-4bd5-b8c0-5f8dc01a80d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf69fd09-1b92-4d21-8b22-4b57e9639205",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb99486-779c-4cad-bfae-700f897dd3c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57cda151-17af-419e-8989-ac84f914dbf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da5dcdf-502d-4b7d-a326-3b1dd05103cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99976db9-26a6-4d54-af93-def3169023d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd8f6fc-99ba-4aed-98e3-bf7e65ad32af",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978637ee-d12f-461d-90d5-37423a40d8e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29035d27-cf13-4602-950b-31ae9e1c3fca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ce37f7-92d4-4679-988a-c034c06255db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4d733a-ca36-468a-8528-21d6820d50b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca19094-25eb-4d99-827f-39c3b827085f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dabf66e0-6aec-43de-bb1b-fd9d701795eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f7a6bb2-9e48-475b-8d45-94f2f72e1447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d2046c-3fc3-45b2-ba5f-d89586299e58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e778c4f1-cb8b-465e-80dd-c735740f9430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef95a258-5215-49c3-abcc-52e3aa8e885e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742e8ef8-0d1a-475a-9865-c777af3b79d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f904b67-bb95-4dd5-aaef-85455b4b5efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1947a6-3141-4065-bbf2-d46e2bb85e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a064840c-6015-4a3e-9a91-6e3ad3dc523c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae8ac44-471e-4e95-9605-c51ddbe31cf4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3510a7-dd15-4ea2-bcdd-e14803ed03b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdb79ecc-bc68-471a-a470-85ddb6ac017e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05496402-b7dd-4caa-952f-5a96c2d0490f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02c9ea0-beb9-4bee-a4d1-80be2fa17517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e670e6f-63d7-4912-9bc2-962471d4b028",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4336c095-bc2e-476b-9ab0-6c7c755c8079",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dbe359c-26f0-4168-ae37-300aaf676b7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7634c476-efeb-4346-adf6-9bdb23f153e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eedb771-d4ab-4790-8c6d-c755dcc4b664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc75f6e6-a764-4868-86ee-7e5a0ba3ea56",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fcbf619-e947-4517-9cc4-aafd3a9b77ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff204ecc-b215-4862-8eeb-523226befef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f3e4c1-4c77-4322-bc49-b5894fe07f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c027ee4-d941-4418-befa-e3efca72817a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c277889e-aba0-454f-829c-7818651eea3b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37b210d-e123-4985-b502-6bfe40e121bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1b42ac6-233f-4fc1-a808-4349dd31d00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c96c397-c9e4-457a-89ea-5ccfc87e060e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5836398-2bbd-4e6c-81ea-ace5d9c038c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3cd0f7-6057-4807-bb5c-0529aa50f63d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2206ff95-714b-408e-9510-9fddb9791fc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63934486-3e52-4598-a1fd-1d4553cb9470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "321c8f70-6597-4a94-9b2e-ad0f1b87b8db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e09baad-203b-4e8f-b3ca-d7aa95f5ff41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98190c27-97aa-47d7-a9cc-59ffb4b9b9f7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84b2874-f6f9-42f0-a471-5221c9eee12e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a648c546-dfa4-4b13-86d6-3a76c0a1101b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3126f3-e433-465e-892d-1c4aa34b9d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f1e2af0-c4da-42d9-811f-7a4e91bfc84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0030f0-7e2c-4011-91ec-7fadb25cdf30",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027a224a-d99f-4e70-b59f-5039e5b78da7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6966725-a767-43a5-aff2-94f98da67a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be24f70b-f4d5-4eea-83f0-57412861f890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df51d4b-9dcc-4779-8b83-4e414b9495dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f345aa-84e4-4066-a660-0373e002b97b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811fa742-110b-47b9-adb3-1de8737cf554",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03bd32a6-9f4a-4c47-a856-2268814cd8e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccea5a75-e63f-4b1d-8084-bcf0b452ee84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c8885f-3f14-47a1-8d40-f59dc3baead4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f6a50f-0019-48c3-a941-8a4a46b7a39e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1915f047-8548-44e2-aa4b-bb3dd5b6f34f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f315fea5-6582-43ba-82bf-740b1795fe1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6dd061-ca82-48e5-9abc-136b6c34173f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e81964-34ea-44fd-88df-4060e0583d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b11926-a979-43cc-bc04-d810217f9b59",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22c6abb-eeb0-49d1-a5ea-ea9229bb2d3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3132813-9239-48e1-8599-b1dafc309b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "424d9b81-8ddb-4e4b-8910-297d0350925e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ce8b57-6b34-447a-812c-40481d663881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc34b830-4726-42b2-95f3-1e65301d63d0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c9f2c0-66d5-4c1a-b300-cb7740fe6884",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b60b8f36-6e48-4c10-85a3-050f0d595284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99f00f4-94b4-4b05-8273-a259ba1e0227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c68651-3045-4b1e-b7f5-cb8a1c10fd99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e337bf3b-1af3-45a4-98c8-86f0b214d6e3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32c1238-94df-4e12-973b-5d80655caa95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "510bc63b-eb37-4d50-8343-68a3704891fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5406ec-2429-41f5-9bef-dfc5f109a9b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db3e76fe-7cd2-4cac-94a5-ff70060c6da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e22e523-4d62-47fb-a06b-40e2a094a207",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727d6237-2a84-4bd2-bcde-1eaab5ec62d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7e80732-22d7-4160-81db-d1ec02cdd0be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5a8829-2faf-49a5-9c82-1576614426e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff9b28c-9ea4-41e8-b0c6-c2dd355ddf33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161ce034-0c6b-4a36-af64-ca675a327b44",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7b49a4-f3c2-4a06-8e19-24cc824b44a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc578a6a-8e7b-4253-9601-77ca680ae060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2295de0-3454-4f3d-9df2-763100911c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de15fec5-aef0-4a37-9351-34eb2895ede0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d55a332-db38-40c3-a420-d804f523de02",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e960aa2-a036-4291-a136-b72e110640a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc08e23a-3e55-4234-aa21-d813938c8230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1306e355-2cc9-43c3-b90e-86fb0f444e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9651377-b8b5-4638-8c91-28ba3ccabe74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8459da7c-1939-4ff7-bb2a-b0171493208d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24817bba-8072-4dfd-8da4-1e0c853b26f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e43ca557-7e08-4c15-bd95-f4bbac160db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a928e3-4a02-429b-bc9d-b13e0a740ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0851dc7-cf43-45b3-ab9b-a257c6f1b478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7ef70f-c325-45d5-9661-1353169b9ad4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c913982c-0f66-4389-8f74-271186086cb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4992b1f1-2d28-4979-bb7c-a6f47fc31a63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57884bc-b36a-489f-a2b8-c560e1d43035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1058d5c4-814e-4f1b-bf36-75f4d75dedd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4371c832-ef9f-4a5c-b2dc-7f8ca532e086",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480bbd30-2c0a-46c0-90a0-1616a4e206c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf2ff4bb-c6b6-4219-ac33-6d4c04fea360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8543b562-26ec-46db-9348-db3ef1f778cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73ff354-d327-4b00-b9b9-2a4d5972d74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479ab52d-fb5b-4f1d-bae9-cbaa1c7b906b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e3cd98-ef52-4947-a00a-b1bf4ab8f8bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68fd6388-5029-4f77-9d0f-1a7c620843f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26155b51-48bc-404f-bcff-e1e56d02c2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d5153fc-7d38-46b2-b07c-e1f7aea18f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d90713e-7e38-4c5c-943d-6889a8037096",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8816767-981e-4265-ad12-9a3f9a819d92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf290e9-c278-464a-99cb-5738f4c153d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "859730b7-8b65-4a6b-8ffa-b14d66031146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98306c8-ac3d-46a0-a3e1-eb54a3dc180e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828c1c42-9624-4390-90c3-140c9b09ef64",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35d2adc-1a22-4a3f-bb9e-9cfe8839e2c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a81184ab-a6f6-44e7-8d94-4fe7dd3ed432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d280c1cb-711c-457b-883b-25c1d8e0b354",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17dfee60-cbb8-4d0c-ae94-bfb54970286f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6767565-0612-4be9-8db9-56d1038fb6d2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4102bef-0295-4841-a58d-90d7c9602382",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "add735fd-c00a-417b-99a9-fc73e5389600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c7edc1-1c53-4343-b48a-0f9d43e8c907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b73a362-9b01-47f5-87ec-bd3b1a8a28aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87d6623-7e19-4938-8f35-655a87b0271b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fff1961-6489-4f08-94a5-5c6c9351f25a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7e90113-9b58-4a5d-8a35-8ae31ede3d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "754ad74f-487c-4bb9-adba-8dbed52cff29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8286b395-42ce-4c23-9399-052f75b33aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecf0fb2-2321-49ad-9586-0d39024668c3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831581d5-cff8-4c29-86e3-9606edb822ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52439172-b621-47ef-a17c-cbd08a50e81f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb8fb10-c8f2-4cd7-8211-550d42e3b6b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bec672d-63e2-4bd7-99de-2f017afa2f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053ee9bc-155e-40ba-8b22-b1ceae4340bc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc058dc-954f-4a7d-a94f-c91c79022e29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc1a2561-79f4-413b-b08c-c8c650f73b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b75997-655f-4566-bb88-a2b5de0e0bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba897425-6cce-4f81-8b0d-6faed946b88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90479848-9f84-40f6-83a8-d35a2b4b428f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4443d995-01bf-48b3-8f4f-72fdda240a03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a369fed9-1b73-40ce-a41a-7416835dc88b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f97c59-f118-4059-b35f-8e8f14200689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d907ce0a-36e0-446d-8547-4abec4c7a352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecad50a-810a-4a8a-b631-32657778845e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa19cb2-262e-453f-bb6e-51a6c67166ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6f745e6-f347-490b-a0f8-d49fc9dff2a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4ae5ef-b7ff-4f47-a857-9ebf52be43f8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f93c9f1-cfee-4c27-9b05-2886b688a643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a591f5-f718-49f9-a731-bebd3ec07cb3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89f2e5f-6145-4944-9af1-335667362131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16f82e56-f871-45d4-9ce9-61dacc977be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67d78d7-c31e-40ce-94bb-7e680fb1b608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4404bb4e-8eee-46de-80af-c31f9f51626c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a98efd9-c87d-4bda-ba93-ea0b33c4209e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7b16ffa-7238-49db-a680-5041ae61500b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "318bbf6d-b259-48be-941c-527d51fd23d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e6f26f96-91da-45f2-89e1-d531aee40f72"
                    }
                  }
                ]
              },
              {
                "id": "2f3f25ff-2907-4861-9b62-e77b43d73b14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "555ac54e-7df5-4ffd-9840-01a87f3ed51d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d25cefd-1492-4cd5-a90f-e3c3eb0b4d37",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9676960f-93eb-4a6c-8072-3fd40298d1b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0deb8743-40b4-48cf-a614-7e306dba69ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af1db4fa-7744-4cba-9c8e-675dabe5e09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2642f13-f4e4-47f0-a4ba-010070e36382",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9dff190-052f-4d00-acc0-33870c3f3446",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "93de3b3e-6a69-4719-a702-ee2f9f58fb23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f017a96e-2a48-458a-baae-cb7e0fc4eae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67ca4fb1-c37a-4e79-b24f-66257c452d6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20adb68c-e134-4311-b0fb-2f2dba2821cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07bba967-20be-4600-aa99-fccc17695471"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f488a77b-266c-4d5c-abf0-79abe49de978",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bf14b71-c1bd-4f45-a1de-770404c0d245"
                    }
                  }
                ]
              },
              {
                "id": "b94db042-0545-4841-805b-0e2e967b5a16",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e2f06bf4-d498-482a-a467-7a0c5ca543cb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30862b43-2568-4ab1-8df8-524d00564148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b6a2999c-5d93-4469-9ac9-d3d8ceca2152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4f1155-ee69-4ba2-b431-c5ed2ca823f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cce4aba-7a03-4fd5-a286-6c210aaf52c7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ec26e66e-1944-4b27-aabd-644b4b723f07",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b1073024-c1d6-4ea9-8af4-91cf8d32dfbd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "204c183c-afb9-426a-9340-c2afdbb46669",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "353ef9ab-86d7-45ae-ba8a-406d5382508f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea70b3e0-6325-4138-b213-159ea4ba69c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab5638d9-07ba-40f3-9a66-5c940e98290c"
                    }
                  }
                ]
              },
              {
                "id": "b44565ed-db2a-4a5e-b0de-3d7261fc7ae0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac9394a6-fb23-4443-be49-28f142e4c9e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0af4716e-2377-4cc8-a001-5f67f3e68574"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85ba16e1-4922-4349-b806-bc463eb54c48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76c99d49-c8bf-4cc7-967f-9a0396d428c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0289ca77-0491-4f29-8795-6f136e8e637f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6e78b32a-1c46-4d37-9763-c2238238b957"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14079c76-0e62-4d99-b16d-f10ff8fab788",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "33b8be09-6124-4e4b-8353-c5d1f6613742"
            }
          }
        ]
      },
      {
        "id": "78330c94-791a-4a03-b18f-71811e2f7d48",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4064cbae-2581-4d3b-9873-a67060eba249",
            "name": "Negative Testing",
            "item": [
              {
                "id": "20d318a2-90f9-4daa-8adc-b3271228807d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87b37508-a3d1-4662-b81f-06ff7e551f89",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f10e533-58f0-4fa3-93e9-d8cf80878885",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2d7d5ce1-6e62-460d-afef-2bdee8156e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86be7d06-12d8-4ef9-8c5e-5d737a0da436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e7a2590-d35d-4664-9c68-058c066757a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4968cc0e-7aaa-44e4-b53c-bdd442f9fe5d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94079c5-ef7b-4bd2-b61b-e5210d419e18",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9f0e193f-bd97-4e11-be60-477201d4212d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15b4cf5-961c-48d7-9fd5-6bfeeb180cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cf26217-eba4-41a2-8498-13a6efacd510"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eab0d32c-3a7b-4dcc-89f1-9205e92d99da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20ad0b99-52b6-4941-9690-99eea2ed8726"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a0d22e4-aa9e-48bc-ba3b-25582b66c03a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e0b6710-48db-4c30-8306-6d19ff7f85d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd19065a-7752-46b6-856b-a9924442571e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ac80f012-28a8-4065-a250-7de7b19191cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ab4d8c9-5855-4b41-941d-9f3af412e809",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df103fdd-a337-4fb2-ad04-f911171cc88f"
            }
          }
        ]
      },
      {
        "id": "a0b9cde6-8750-4505-a605-f046259f8113",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7f2d1aa1-c076-4470-b345-efd24b645c2d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3970ab62-30a9-4c09-be16-eaa85904846e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "045f2d6f-dfd4-4f8a-b882-2c23aeaaec05",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba46ca20-d545-47b6-bfb9-f3ce47643e69",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d9e1adaf-56f9-466a-9fe0-0abbd17fa603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22bfccc-e0ef-4cd1-ab83-9684b261960f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de28dc46-9415-4cd9-8daa-edcc53de37bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3d544d-7719-4a02-a75e-5948252416cf",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a073918-64aa-4816-bc7a-44d137febf22",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "458a1012-388f-4523-b7bc-8c2a211a8558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d915d3e7-2638-42d6-b57d-7176f88975ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01b7bea9-c717-4f76-a8eb-b8d449136f84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc854af7-8ed5-4c15-a70d-01421deeb488",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77e00112-e607-4502-bc7a-f57c0bbde5e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a1396ae-1507-45dd-a61e-506eeb2360c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0004167a-b8a1-4ad2-ab31-3e57c23953da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cde72c21-bb33-472d-b93b-dae881a6f478",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d568ff6c-85dd-43c9-8435-b92ffb3276b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f864bd4-6cf4-43e0-b012-860b93cafaf4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2fc1f95d-4469-4efa-889c-7263f79718bd"
            }
          }
        ]
      },
      {
        "id": "9becc073-f371-4b53-9d78-4fe64f1dd0ac",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d42713ad-d153-49ce-85f0-06fa2800eab5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47ef9046-f669-47dd-b1f1-27aded70ff8a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "376c707c-43f4-4b26-a7ea-dabb4398b167",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ff2124-4180-478b-aac7-46bd8b4d1363",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "997a299d-0cec-43fb-b455-4365376fb33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "734fc1e3-d32c-45d3-8681-5b2be1bbfdaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0387d03b-bcd7-46e8-a31f-942038e4940e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92409df7-690b-4502-a6e8-5d680ef82980",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc5bed8-e12f-48fa-af19-31ef3370cca3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3cc04712-7eb4-46c9-8dcf-88d35d27f861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "404b9fc6-a681-4b44-91d4-65f34c484f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12a14aa9-61a2-4e45-8fca-8590dac02a43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f316996-f1f3-4c97-b1f1-725a659b3686",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d04d924-41c1-4c81-89d6-0a1df769fe9a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "94139a5f-1084-4e41-8113-765721547755",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ac20825-60c0-47a7-8081-d115ccfb9592"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a19033c-b085-45b5-89ca-1a10a30cdb8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "25ee8b03-344a-4f7d-b04b-83e654718bc3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7405b2a-a5fe-41b8-adca-337cc4b7f726",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7510b98-ec4d-4766-a608-c0c99e9a989d"
            }
          }
        ]
      },
      {
        "id": "ae4bb0b1-2ac6-4274-b00e-2227223ea1c7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3790c90d-3a59-44e1-836a-9315eb1d5d8c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9f01fc6-0fc9-4621-a502-500b8326541d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4c08c021-c611-43fc-a9ff-3f482ea0376b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f7e2d8c-91ca-450b-967d-2ca6145fe020",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5def4feb-7890-41b3-826b-0d7f73f6c76f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 144.10305343511448,
      "responseMin": 7,
      "responseMax": 1544,
      "responseSd": 179.76069989660635,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671151058449,
      "completed": 1671151109673
    },
    "executions": [
      {
        "id": "a5dd3a48-22c5-48d0-9629-019ec6dbd388",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "26f5c0c2-0afa-459f-83b0-8b5b37125d21",
          "httpRequestId": "690dcc8c-a0a2-4846-8272-9bbcc3eec7bb"
        },
        "item": {
          "id": "a5dd3a48-22c5-48d0-9629-019ec6dbd388",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "362194d9-7279-40e8-b099-8fccbac696ca",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "df45c256-0aac-4ee3-8ebb-2e051c5cd5a0",
        "cursor": {
          "ref": "ac03a05b-255f-4154-aa2c-7be6c44c76cc",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d3ebca4a-7572-400e-9962-e03f31183c80"
        },
        "item": {
          "id": "df45c256-0aac-4ee3-8ebb-2e051c5cd5a0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3c39eae2-df99-4981-9616-7e4b213c99a1",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "423de96f-df61-4545-842a-0f947aa4d53a",
        "cursor": {
          "ref": "b05f429b-bed2-45a6-ba0e-799ee8c97454",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7cb77054-0847-40d1-9bf2-fbfe4148c3f7"
        },
        "item": {
          "id": "423de96f-df61-4545-842a-0f947aa4d53a",
          "name": "did_json"
        },
        "response": {
          "id": "572b3f6e-c44f-4665-81e4-6848b65a94e9",
          "status": "OK",
          "code": 200,
          "responseTime": 1544,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26513838-c54b-445e-a4fa-de572b42071e",
        "cursor": {
          "ref": "1eb2c641-beb5-40ac-9eee-2f8b1f05f69c",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6b3d9d3e-7c31-429d-9e05-f7373aba3f42"
        },
        "item": {
          "id": "26513838-c54b-445e-a4fa-de572b42071e",
          "name": "did:invalid"
        },
        "response": {
          "id": "be3f9821-d926-456a-8779-20d9bef9d9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26513838-c54b-445e-a4fa-de572b42071e",
        "cursor": {
          "ref": "1eb2c641-beb5-40ac-9eee-2f8b1f05f69c",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6b3d9d3e-7c31-429d-9e05-f7373aba3f42"
        },
        "item": {
          "id": "26513838-c54b-445e-a4fa-de572b42071e",
          "name": "did:invalid"
        },
        "response": {
          "id": "be3f9821-d926-456a-8779-20d9bef9d9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de72109d-c97e-424a-9d64-bf4aa4932818",
        "cursor": {
          "ref": "f2a1f87e-fbca-421f-b291-e8c31dc3add8",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "44f38274-efa3-4012-800b-1feee7f6c1dc"
        },
        "item": {
          "id": "de72109d-c97e-424a-9d64-bf4aa4932818",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ef1716b6-bf01-4460-82a5-85551860f551",
          "status": "Not Found",
          "code": 404,
          "responseTime": 128,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f864c83-4b8e-4acf-b21b-aeb1fb4f165a",
        "cursor": {
          "ref": "9b371721-1c14-4ceb-adfe-8cf59373671d",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "81fe1520-c1f3-4216-b3c2-8adb038d8605"
        },
        "item": {
          "id": "1f864c83-4b8e-4acf-b21b-aeb1fb4f165a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2a1278d6-9b04-4e48-af34-c5f225e80372",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f0195b-d58d-4ee0-990c-cd119e3c7384",
        "cursor": {
          "ref": "08fc3cdf-5a1d-46a6-bb11-cb1176853a37",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ae97a7ac-ffc7-452d-b328-2fb380d524c6"
        },
        "item": {
          "id": "28f0195b-d58d-4ee0-990c-cd119e3c7384",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "baa6e9e0-b511-44ce-b66e-1f38049e229d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ca16ec-543f-477a-85bb-255cbda2fb27",
        "cursor": {
          "ref": "a24def1f-2cbb-4d29-b7d6-4763d60c0b32",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f5669a63-f60e-4b5c-a1d5-6cba60ffd094"
        },
        "item": {
          "id": "d0ca16ec-543f-477a-85bb-255cbda2fb27",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1fd71323-9d84-4fce-b89e-0b0d363d4dbb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ca16ec-543f-477a-85bb-255cbda2fb27",
        "cursor": {
          "ref": "a24def1f-2cbb-4d29-b7d6-4763d60c0b32",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f5669a63-f60e-4b5c-a1d5-6cba60ffd094"
        },
        "item": {
          "id": "d0ca16ec-543f-477a-85bb-255cbda2fb27",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1fd71323-9d84-4fce-b89e-0b0d363d4dbb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372533c3-ac9b-4453-8f04-39fb1d0180cf",
        "cursor": {
          "ref": "85b06d35-26a3-4a70-a01c-b5e085ad29c6",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "47644185-d8b2-4e24-9a04-7d20ca7f4b68"
        },
        "item": {
          "id": "372533c3-ac9b-4453-8f04-39fb1d0180cf",
          "name": "identifiers"
        },
        "response": {
          "id": "b85f1b88-6751-48b8-9408-9647ad7e0fe1",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c709e69d-7977-4a38-a14c-7e2f598c8054",
        "cursor": {
          "ref": "c98d46ab-2e1f-4e3d-987f-6ef628adcd15",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5d358b86-67a4-4ba8-88ca-548a4cb08ea4"
        },
        "item": {
          "id": "c709e69d-7977-4a38-a14c-7e2f598c8054",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ec57b70a-f57b-450c-9619-87cc4c868dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c709e69d-7977-4a38-a14c-7e2f598c8054",
        "cursor": {
          "ref": "c98d46ab-2e1f-4e3d-987f-6ef628adcd15",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5d358b86-67a4-4ba8-88ca-548a4cb08ea4"
        },
        "item": {
          "id": "c709e69d-7977-4a38-a14c-7e2f598c8054",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ec57b70a-f57b-450c-9619-87cc4c868dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120b9d07-e7c0-4b96-8a82-f7ee96b565c6",
        "cursor": {
          "ref": "208a3711-7cdf-453b-859b-bfc7e54286a2",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ac359c78-3ed6-4e14-a66a-d20a9fb72a18"
        },
        "item": {
          "id": "120b9d07-e7c0-4b96-8a82-f7ee96b565c6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1232a21b-263a-4ae2-9f59-3dc7fe61fff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa67f37d-1a03-4c84-95e8-87bba3376c3f",
        "cursor": {
          "ref": "9ccb0a3e-fd50-4ff8-8598-a24bb4757f7c",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c33923b0-cf95-4e91-89af-36596bc0c47c"
        },
        "item": {
          "id": "aa67f37d-1a03-4c84-95e8-87bba3376c3f",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "2eec5e0d-26ea-4c67-8f2c-de72b639d4c9",
          "status": "Created",
          "code": 201,
          "responseTime": 668,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "3f553042-068d-40f9-a0f8-b0abe5574388",
        "cursor": {
          "ref": "e5d89db3-02ab-4733-91db-5e7ed7aac19a",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cce7146d-a81c-4df3-9a03-7c519678271f"
        },
        "item": {
          "id": "3f553042-068d-40f9-a0f8-b0abe5574388",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f8ff7567-198f-4692-8e02-9b6245af1c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137cb2dc-3e95-4bf8-948b-2cc31f48d4a7",
        "cursor": {
          "ref": "4f873317-346b-4ea3-9bdb-7910611bbe46",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "10acf100-e084-4a0c-ad1e-1e7e9e641923"
        },
        "item": {
          "id": "137cb2dc-3e95-4bf8-948b-2cc31f48d4a7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a5547028-9683-40f1-b881-1302f7e7a6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dcef56d-3255-4ab4-b2ce-9d35227c98f9",
        "cursor": {
          "ref": "6fbf1957-5f76-4e74-87bb-f50835099236",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "17a6b499-dd23-449b-b771-d505b43296e9"
        },
        "item": {
          "id": "7dcef56d-3255-4ab4-b2ce-9d35227c98f9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6db03d59-dc76-422c-9e88-3a9dd04ef6c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fddb220-a96a-44b2-bda8-ecc9d8f5023a",
        "cursor": {
          "ref": "54e2fc79-3bff-4ff1-ab24-789b2f39d0e6",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "843eca5b-856c-425e-8dfc-d4b05ddcf3f2"
        },
        "item": {
          "id": "7fddb220-a96a-44b2-bda8-ecc9d8f5023a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7f27c140-df71-4893-ada8-07601084c168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9730a59-8ea7-4227-9839-adf041d724e3",
        "cursor": {
          "ref": "19220809-81a5-4c88-92e5-9cbdbffdb787",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6087a07c-6a90-4a11-9f8c-d058d02a28b4"
        },
        "item": {
          "id": "e9730a59-8ea7-4227-9839-adf041d724e3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a7c63ea3-c3f3-4515-a406-61828e1ea860",
          "status": "Created",
          "code": 201,
          "responseTime": 550,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "42cb8b54-41b0-41b3-b3fd-8919eb3a761e",
        "cursor": {
          "ref": "d5339ba9-8ecb-4163-880e-19d4859a629c",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2df2bf57-cf37-4480-9fa2-8348ba898ae6"
        },
        "item": {
          "id": "42cb8b54-41b0-41b3-b3fd-8919eb3a761e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "84e55445-14e4-4d1a-aeca-1acbffeb6a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f692eb-8fe0-4605-92b7-ef89d3461f9d",
        "cursor": {
          "ref": "69f43770-baab-410d-81c8-c26afbe53e00",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "806772fe-7fcc-4cb5-8a52-9e57392cf93a"
        },
        "item": {
          "id": "61f692eb-8fe0-4605-92b7-ef89d3461f9d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b86eb1b5-4c45-458c-bed0-ef9ddc67d36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941ccc70-0147-439a-b560-7be6f3b3652e",
        "cursor": {
          "ref": "91b836ac-b27d-48d1-9bc3-c2b8dabbbd5e",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "29df66d3-1172-44c6-87fa-98573eaeafb9"
        },
        "item": {
          "id": "941ccc70-0147-439a-b560-7be6f3b3652e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b1f7bf37-012f-4b72-acdd-83babe457093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0112aab7-d209-425e-bd60-691c991e41f5",
        "cursor": {
          "ref": "02cc7866-5683-481d-982b-ba2ead8284ca",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "963563fd-90cf-49f5-8326-41f181a74b40"
        },
        "item": {
          "id": "0112aab7-d209-425e-bd60-691c991e41f5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d8daa2f4-a218-4d83-bf27-f81a0c8d9a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426b0eda-65e1-4b20-ac02-c84bb0ee9019",
        "cursor": {
          "ref": "8ec6133e-e3e1-4aa5-8d29-dd4e8ba38f12",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f766f8b0-eb67-4d95-9354-670b03b94b0b"
        },
        "item": {
          "id": "426b0eda-65e1-4b20-ac02-c84bb0ee9019",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cee4b1b2-b176-42d4-84b1-e30c8ce1d66d",
          "status": "Created",
          "code": 201,
          "responseTime": 409,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1dfa3708-231a-489e-b88b-c8a0bb790e66",
        "cursor": {
          "ref": "f6c76e9b-bc65-4549-839e-39d43f23d04d",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "72269793-6ad4-4f73-b7cc-73488461973c"
        },
        "item": {
          "id": "1dfa3708-231a-489e-b88b-c8a0bb790e66",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "16013660-8826-4e1e-a777-2988df378ca0",
          "status": "Created",
          "code": 201,
          "responseTime": 1115,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "0edf9dd5-75cf-4ecd-a519-09a47269a777",
        "cursor": {
          "ref": "130f8dec-4e62-4aa0-b358-751b48fca4e6",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f597b758-a8dd-40cd-a122-70071d961dd1"
        },
        "item": {
          "id": "0edf9dd5-75cf-4ecd-a519-09a47269a777",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5f620825-f500-4a60-b884-bc71864c9fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d573eca-3d48-4321-985a-7a537c928ca7",
        "cursor": {
          "ref": "a292bf2e-8d02-4ab3-8e0f-5ab30b31e982",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2c3cd5e4-5504-48bb-b4b5-fbc004a79d86"
        },
        "item": {
          "id": "8d573eca-3d48-4321-985a-7a537c928ca7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4451b46f-f68f-4d4f-a947-85783bce1647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad89a026-664f-4cd9-b25c-e4b92a512895",
        "cursor": {
          "ref": "edf21736-ddca-4ee9-b3c9-c232871f6edd",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "92a83bea-9240-4388-952c-1042a5010eb4"
        },
        "item": {
          "id": "ad89a026-664f-4cd9-b25c-e4b92a512895",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "03a48b78-301d-44fe-8187-8c718bb83f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcba321-4529-49e9-8e73-5d3e74976e70",
        "cursor": {
          "ref": "fc722a3d-d902-44e7-aabd-9d4ecb874baf",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "81594236-dd96-4824-93a5-0b0095642190"
        },
        "item": {
          "id": "bbcba321-4529-49e9-8e73-5d3e74976e70",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5c12c74f-f9c3-4e1b-80a5-106bf39288bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d684a438-853d-42c9-80c7-3cd189bf881a",
        "cursor": {
          "ref": "9b6c21a8-e529-418b-82e3-97c1993d1726",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "22758004-33ee-4092-9594-ea2660562c97"
        },
        "item": {
          "id": "d684a438-853d-42c9-80c7-3cd189bf881a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7a2d383e-8249-48f2-aa85-c3ff0ea28155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c194247f-9c22-4a34-a7a6-deea7e9d6f27",
        "cursor": {
          "ref": "5c71238d-e803-4b9f-ac68-c991c6f8debb",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3b4e065a-cc00-4137-b723-baa024a78bef"
        },
        "item": {
          "id": "c194247f-9c22-4a34-a7a6-deea7e9d6f27",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "17024d26-cc7f-4ed3-83f4-76f2e74bd1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d26366-0eda-404f-a6bd-848ddd291c90",
        "cursor": {
          "ref": "3881d229-d33e-48b3-bf0c-dc3536ab4dce",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d6022a4f-a8cd-4c47-96fe-f6feadb92bf7"
        },
        "item": {
          "id": "94d26366-0eda-404f-a6bd-848ddd291c90",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "030674f6-75a3-4b40-9904-45ebab95b06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0c7c08-e816-400c-807b-6463e5b725b2",
        "cursor": {
          "ref": "b2142082-0f4e-4a8b-933b-06c77ffb7ecd",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "850a71ca-3113-4c2c-a0ed-befe0f7abbd7"
        },
        "item": {
          "id": "cb0c7c08-e816-400c-807b-6463e5b725b2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "09bc7cfa-dcab-4770-8d4d-9daae10bc306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af7770d-6d38-4045-b6e2-bab94ba239db",
        "cursor": {
          "ref": "bcbe8bf3-bad6-4ce2-81bd-535f49b90079",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e7107a4b-9871-4a7c-8b3b-671fe2f1cc6a"
        },
        "item": {
          "id": "3af7770d-6d38-4045-b6e2-bab94ba239db",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dcdc4987-41e6-471d-b018-c351562b213e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0a9aff-565e-46f9-a6ad-c69733701747",
        "cursor": {
          "ref": "b738019b-4920-48c0-8277-ce2959a39506",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dfabafab-e45a-4822-8765-5b5bd8ead3fe"
        },
        "item": {
          "id": "cb0a9aff-565e-46f9-a6ad-c69733701747",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "81588277-b2a0-46e6-9d83-7834be46f3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5b7da3-2aef-4769-b946-1df38364d793",
        "cursor": {
          "ref": "801efe9b-b559-4dd0-9041-9a3cb38308df",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bfd520ec-fb3c-4bde-91b6-26f416790e91"
        },
        "item": {
          "id": "fd5b7da3-2aef-4769-b946-1df38364d793",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "69e285ea-a558-4312-a528-7267bf93f5e4",
          "status": "Created",
          "code": 201,
          "responseTime": 735,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "63acd66e-b611-4752-8ff1-a860a0a1076b",
        "cursor": {
          "ref": "34820931-ed3c-42ca-b245-e50b777ed9be",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d805d0bc-d849-46d0-87de-c587bc1af310"
        },
        "item": {
          "id": "63acd66e-b611-4752-8ff1-a860a0a1076b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "05d6371c-ae9c-44cc-aa36-d540556accbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e096cee9-c1a5-4b3c-a49c-e8c1986761cd",
        "cursor": {
          "ref": "4e408038-dca7-45c2-84ef-7604ea64fd75",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "64bc04c4-d6be-4b78-a718-13f5b6f9be12"
        },
        "item": {
          "id": "e096cee9-c1a5-4b3c-a49c-e8c1986761cd",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "beb967a8-7186-4a95-aa8b-485b49c98adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d995de-d53f-48b4-a716-044c099578d4",
        "cursor": {
          "ref": "bbf174ff-1925-49bc-9381-ac61a18276df",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f43b7979-a7d6-491a-a3a1-e91fe0f9b15d"
        },
        "item": {
          "id": "95d995de-d53f-48b4-a716-044c099578d4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "65ac23d9-adc7-4771-8a85-3c8a06f9df8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148beefa-a0c1-4f82-bd32-be8833feb144",
        "cursor": {
          "ref": "82c022d5-2e95-40df-a3ef-0b05cdc7e3ab",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "507d897e-b23f-4b76-b0c1-970a260425cb"
        },
        "item": {
          "id": "148beefa-a0c1-4f82-bd32-be8833feb144",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "081629a5-801f-4857-a1aa-cab2647ca723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100379ca-71b3-4a10-8836-05a13332e6a8",
        "cursor": {
          "ref": "23598f6d-27bd-4e62-b651-6a3bf1fd5491",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c869ab95-a976-497c-922d-17a5abb71e5f"
        },
        "item": {
          "id": "100379ca-71b3-4a10-8836-05a13332e6a8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1d45d658-a010-4d3f-a11d-feefc47051d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7a8173-a452-4498-99b9-74a56b3d72e3",
        "cursor": {
          "ref": "198938e5-05a4-4e61-b0ee-f9ff242fe3a6",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5b997c9c-bfbd-41cf-b692-bf0c73fe781c"
        },
        "item": {
          "id": "dc7a8173-a452-4498-99b9-74a56b3d72e3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "eb4ea550-45bb-4211-a168-fb1faaffedf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff52464a-af1e-47c5-9fad-f0c1e5c65da4",
        "cursor": {
          "ref": "2c01e6f8-0618-4ba3-9885-5e57a3f6483c",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "53b06354-9e6e-4fb4-9e21-63b97ac2a9e4"
        },
        "item": {
          "id": "ff52464a-af1e-47c5-9fad-f0c1e5c65da4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "62153d59-65ba-4494-86e4-9629380dec7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef60c0a-a586-466f-aa00-a81fa1c4b2f2",
        "cursor": {
          "ref": "f918a3ac-15b7-4bd4-b03b-d141da2d8559",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1f8413dd-ced2-4d13-8295-64bba1f2ab49"
        },
        "item": {
          "id": "9ef60c0a-a586-466f-aa00-a81fa1c4b2f2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2338c65f-1a6b-43bb-b6d9-ac5668923a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8979370d-f602-4179-8cfe-da0a553bbbbc",
        "cursor": {
          "ref": "f7aebc92-aa3f-48dc-bb16-51f8127c4b07",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c07d7a3d-9826-49f4-a77f-bd6b76f54006"
        },
        "item": {
          "id": "8979370d-f602-4179-8cfe-da0a553bbbbc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "986f7f0d-c4c0-4dc4-9b6d-59452443660c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a10dd9c-f27c-4813-aa94-b3f80e5f92d5",
        "cursor": {
          "ref": "757329b6-baa0-4ec5-bfb2-2d6057d6df85",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8be2427e-1d61-4af9-829b-a7beb6f4eb5c"
        },
        "item": {
          "id": "2a10dd9c-f27c-4813-aa94-b3f80e5f92d5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9263c4ae-6101-4929-92a2-778e77523300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c47f9f2-1617-43d4-9f23-64fedd463026",
        "cursor": {
          "ref": "699bb0ed-fcaf-4aa4-a4ac-72eba378e706",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "248f8d6f-72d1-4772-81a8-8787b5ab1610"
        },
        "item": {
          "id": "8c47f9f2-1617-43d4-9f23-64fedd463026",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1f24d505-a7c2-4200-aaf1-384ff80faca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fcdf3d8-8d3b-42dd-a031-4faa759e68cd",
        "cursor": {
          "ref": "5632afa4-1677-4c95-8a3d-a532bd54f11f",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2e2a1494-eb63-4ab0-9090-e730c0e012d7"
        },
        "item": {
          "id": "3fcdf3d8-8d3b-42dd-a031-4faa759e68cd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7f697af6-14fd-4031-9a2d-208462983803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9f85bd-2b8d-44e1-aed7-2103371e3b7d",
        "cursor": {
          "ref": "eeb49362-68c6-4fa6-90a7-19663f5918cb",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b96fa96c-a7e0-4805-b90b-635335028916"
        },
        "item": {
          "id": "6b9f85bd-2b8d-44e1-aed7-2103371e3b7d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3af33fa5-0217-42a1-b45d-c69459cebd96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d35938d0-e3dc-449a-ae10-b8fd045d0c1b",
        "cursor": {
          "ref": "c3a9d7c4-8db0-4bcb-a6cb-c1343f767f8c",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f655c7d1-cd8b-4851-b2b9-3c05bb04c849"
        },
        "item": {
          "id": "d35938d0-e3dc-449a-ae10-b8fd045d0c1b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "15430df4-0a4c-4091-8dfc-96b13ad89de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f96b8cb-9dad-4c2c-b700-10c8e18cc4aa",
        "cursor": {
          "ref": "a0a129d7-f8f9-4ca3-8f51-6d087cfe0a82",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d33602b4-3792-4919-ba17-7793e40f909b"
        },
        "item": {
          "id": "1f96b8cb-9dad-4c2c-b700-10c8e18cc4aa",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "748debff-1e10-4d5d-ae47-a1e248d98527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a113c9-9f89-4bb1-ad5c-17f3dddb05f7",
        "cursor": {
          "ref": "7a6c4da5-4eff-4c5a-8619-57d90888f5fd",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5fd71298-6d45-42bc-9e63-ac0ac90c2e50"
        },
        "item": {
          "id": "c5a113c9-9f89-4bb1-ad5c-17f3dddb05f7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e0c285e8-7903-4df6-9bf3-9e263d1a1560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57433a65-7e98-47b7-bedf-314721ba9e65",
        "cursor": {
          "ref": "99f2d2e3-7093-4f83-b6a2-f27a3739b6b0",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d24c5814-815a-43d5-9b7e-069cadc1f6c5"
        },
        "item": {
          "id": "57433a65-7e98-47b7-bedf-314721ba9e65",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7d5a6faa-77a8-4916-b8cc-f704ca90e01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf4b9f3-7576-46d8-bf6b-bc5668f1823e",
        "cursor": {
          "ref": "83f50c75-60a3-4d55-aec8-43bc545880df",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1df2e2e9-182c-49ff-8226-68c652638de8"
        },
        "item": {
          "id": "ccf4b9f3-7576-46d8-bf6b-bc5668f1823e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2e4cfd49-d302-4b39-9fd9-659c8d92775c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28e3b0d-c4b3-4796-a8dd-3c062c880f01",
        "cursor": {
          "ref": "5cd6e60f-f27c-4214-9e13-4c4bc4f7845c",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "bfeda802-c7d1-423e-a879-8a452db051b5"
        },
        "item": {
          "id": "d28e3b0d-c4b3-4796-a8dd-3c062c880f01",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "577bfe08-0811-4a41-b94f-aa3da48962f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f417cc02-55ec-4fac-97c5-46c77c0a9dff",
        "cursor": {
          "ref": "68326ac7-fb4a-444a-b2d6-278bd4874fb6",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "73d326bc-e416-4d1a-b865-bb8deeed0d6a"
        },
        "item": {
          "id": "f417cc02-55ec-4fac-97c5-46c77c0a9dff",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "394afa00-75b0-48af-90d9-ba856f86fac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "7a0ba383-0806-41fe-b5f0-1d4ae7c7fd15",
        "cursor": {
          "ref": "ad954056-f338-490d-ac21-a4f1cfa944e1",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e44bc20e-d909-4fea-92c3-ddeaefa6d24c"
        },
        "item": {
          "id": "7a0ba383-0806-41fe-b5f0-1d4ae7c7fd15",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "84736832-b3e4-4110-a349-90f8a72b0eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2d465a-4b7b-4145-b86c-58b9ede788fe",
        "cursor": {
          "ref": "9e3b8154-c7ff-44c2-a458-48f8416f5ce8",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "68149b7c-a984-4dac-98f5-b2e220fe6c96"
        },
        "item": {
          "id": "4a2d465a-4b7b-4145-b86c-58b9ede788fe",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "16085c9e-c56f-4e39-a7e5-7d40d4821347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba074554-414a-4b6f-b805-260f20cbf632",
        "cursor": {
          "ref": "184c060a-794c-469d-9836-747d0b9f042f",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1ce96f9e-1a57-4a51-9188-37b7a90290ca"
        },
        "item": {
          "id": "ba074554-414a-4b6f-b805-260f20cbf632",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b6e13193-072a-4892-9fdc-c97d6a3e554e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7286ad-8f6f-408d-81eb-9d4467a50f9c",
        "cursor": {
          "ref": "48cec9fc-d096-42cd-a5c4-442866053b08",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "26faf2fb-7c97-42c8-b6bd-0e5e541c5a27"
        },
        "item": {
          "id": "2b7286ad-8f6f-408d-81eb-9d4467a50f9c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0ff1bd14-d460-4c70-93d6-de7c46debfb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6b4bb5-d680-4598-a0b0-5b1e6d26ba7c",
        "cursor": {
          "ref": "b3c9608b-553b-4a7b-bfba-db82a28eefa8",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f74d466c-f101-4f5a-b10a-7de3e5f493cb"
        },
        "item": {
          "id": "bc6b4bb5-d680-4598-a0b0-5b1e6d26ba7c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dd2f5d76-a47c-4b70-ab4f-c252594d8c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356b1841-2703-46a8-baea-cce955f5a5eb",
        "cursor": {
          "ref": "28d54167-c576-4d98-96a2-6c19b244cf7b",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "22ec2d6f-b8ad-4a41-9583-8bf5cf254e2a"
        },
        "item": {
          "id": "356b1841-2703-46a8-baea-cce955f5a5eb",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "619fa765-9e38-4b97-8c21-e308686bcb5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b80699-7008-4ae5-9c61-8b67f232a024",
        "cursor": {
          "ref": "e173c5f3-28b3-4ae5-aed9-e99dab13f75b",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d8fab9cb-6711-4268-8c5d-438d118104ae"
        },
        "item": {
          "id": "42b80699-7008-4ae5-9c61-8b67f232a024",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "907a29f3-15d4-44ea-95c8-fe5ae6720441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d974a07-bbe9-4a4d-9070-64254deb5241",
        "cursor": {
          "ref": "cd4d42b9-baba-447b-8640-1e5032c4e594",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c28c64fa-f927-49fc-be23-b05697d7481f"
        },
        "item": {
          "id": "6d974a07-bbe9-4a4d-9070-64254deb5241",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "be4218ad-c1a0-4eca-8188-566cf7451632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d90229-93a9-4334-b8d6-86cd792de905",
        "cursor": {
          "ref": "0bb43428-05e2-4f80-8109-edf1026c0e6f",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8667c391-3e20-4de8-8394-6c6b42b0f0dd"
        },
        "item": {
          "id": "46d90229-93a9-4334-b8d6-86cd792de905",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c754fff0-eea7-4cba-b05c-17a357f7aedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1c5f3e-30f6-4816-90bf-d0f55fbda350",
        "cursor": {
          "ref": "578baf78-8a27-4456-86b1-d5dc0c823fdd",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1a574dc3-a015-4264-9bae-3102c9c9be40"
        },
        "item": {
          "id": "dd1c5f3e-30f6-4816-90bf-d0f55fbda350",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "78d6ddfa-2d70-4334-9cfb-d8c31ee963d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b79c36e-9e29-4994-b465-a07a2f826308",
        "cursor": {
          "ref": "b8c5dfac-18c5-404d-8eb0-311fb7052943",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0ac62e62-33c1-4628-a4a2-bd4b976c1749"
        },
        "item": {
          "id": "4b79c36e-9e29-4994-b465-a07a2f826308",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5141694a-b33c-4aa9-8f79-2bbdcbea82b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a3787d-83ae-4c51-bf13-2048ecd1bf13",
        "cursor": {
          "ref": "6f4a3180-9842-42c3-9582-39f186822b7f",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5e1e763b-32ce-453c-b455-8285e626f08d"
        },
        "item": {
          "id": "33a3787d-83ae-4c51-bf13-2048ecd1bf13",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f4b17e25-88c4-401c-be57-17d179d45929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c59b505-380e-48cd-a3e8-8c42a6301e76",
        "cursor": {
          "ref": "f1baf034-37e8-4308-a0d5-833d57e6e4c0",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a888980f-ec00-461e-bf10-42b97e9b42f2"
        },
        "item": {
          "id": "8c59b505-380e-48cd-a3e8-8c42a6301e76",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7a964277-0a83-4e70-8ce3-43771723b61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918df947-7b06-4141-894e-73954d8c44e5",
        "cursor": {
          "ref": "c1b4b39e-76ac-4741-938a-be74cd18df54",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e304459c-d0e2-4abf-a711-608e7ab9cb21"
        },
        "item": {
          "id": "918df947-7b06-4141-894e-73954d8c44e5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6bd96ba8-356a-4e24-9cc2-b3d4f701f838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78cf0a8-272a-4588-8e8f-f06792b18e85",
        "cursor": {
          "ref": "34531bf3-ad57-4d25-8af9-922b6f26cdd2",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "66958f1f-8b1a-4551-9b86-2d00b5a89222"
        },
        "item": {
          "id": "c78cf0a8-272a-4588-8e8f-f06792b18e85",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b1d9c209-2fc7-4dee-b651-68ede5e0f9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff72c0d-ccbe-4a53-add3-884ef8e51bcf",
        "cursor": {
          "ref": "59c0b0e3-beea-48a4-810d-464b90f4d14c",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "56f47992-4ce0-45b4-9eaf-b85f1e03f6cf"
        },
        "item": {
          "id": "fff72c0d-ccbe-4a53-add3-884ef8e51bcf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b36049c7-1fa0-44dd-995f-a7d628f4db5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f93ee99-98a6-4b7d-9bcb-67cee9a61646",
        "cursor": {
          "ref": "a314de62-200b-40a5-b6d7-b44c5917b195",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fa871d98-38eb-47c9-bb70-59dcf2e85d90"
        },
        "item": {
          "id": "3f93ee99-98a6-4b7d-9bcb-67cee9a61646",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6349fa3f-16fb-47c2-97f9-b3dc6493e475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777683b0-5e41-4ca7-a296-cc9d8288f980",
        "cursor": {
          "ref": "6de4e092-0ebf-4591-89d0-a0bc4e271f7f",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d4120d0b-b701-40fa-b698-23532d79f5d6"
        },
        "item": {
          "id": "777683b0-5e41-4ca7-a296-cc9d8288f980",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c59e8b32-e1ba-4a6e-a3e4-a800b8673ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ba32d8-94ee-4fda-acb7-e93b8510d93e",
        "cursor": {
          "ref": "588b3e67-0629-45fd-b902-ffea95cd109a",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7e12ceb4-ad3d-41fa-ad43-3e8c5758f3ad"
        },
        "item": {
          "id": "c1ba32d8-94ee-4fda-acb7-e93b8510d93e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "282cdc62-96c4-4597-bd81-522e99aae23a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37be02e-8ac6-4760-99e8-5e1e69970bde",
        "cursor": {
          "ref": "38eb947f-b4f0-4986-9109-14467d950952",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "69d63da5-69c1-4302-8fc7-5a6feac71127"
        },
        "item": {
          "id": "f37be02e-8ac6-4760-99e8-5e1e69970bde",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2ac80224-bd3e-4e46-b0b9-399b43beb606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67179cb-9a97-49d7-b00b-b39579291490",
        "cursor": {
          "ref": "1470c171-03e2-47cc-bd98-a256706ad4de",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ba1654b0-baae-452a-841b-03274c6fa253"
        },
        "item": {
          "id": "a67179cb-9a97-49d7-b00b-b39579291490",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2136fa32-217f-42a6-ba74-cd7a2672be0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce40e5b-892b-4d17-8a2c-834db00d2e4a",
        "cursor": {
          "ref": "8f237736-aa93-48b6-ba17-1c39a60fc9b1",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3ec8ed62-1df9-4fc0-8996-9380e01fcb00"
        },
        "item": {
          "id": "9ce40e5b-892b-4d17-8a2c-834db00d2e4a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4eb9e7a1-c5af-431e-9f10-854b53e3c75e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e542b100-37e2-426a-b637-f5531693ea1e",
        "cursor": {
          "ref": "6d29f79e-6ee1-4ebd-bf71-d8d2f875dd81",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c6e4552b-6dd5-4ad8-a37d-099de88313d9"
        },
        "item": {
          "id": "e542b100-37e2-426a-b637-f5531693ea1e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "df7dc47e-7cc2-4c0a-a7c0-722f76901bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ef59e6-b43d-491f-af1b-7148959bfb17",
        "cursor": {
          "ref": "c184d41c-2346-432f-86c5-c9b0df1e52ea",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "17d03d9d-4d44-45db-aee3-7843a0c2f1f2"
        },
        "item": {
          "id": "69ef59e6-b43d-491f-af1b-7148959bfb17",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8cd0b0b7-e88b-4be7-97e0-3cba9141b459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f70f6bc-2abe-46c9-bc43-6829240c7a04",
        "cursor": {
          "ref": "9a07831e-55a7-47ff-b11e-b3a9e0153372",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6ab23e89-80a7-44c5-9dcc-71b251d23707"
        },
        "item": {
          "id": "3f70f6bc-2abe-46c9-bc43-6829240c7a04",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9174648d-5acc-4c98-b19c-e0eb255b4b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a8d807-f397-4a03-b9d2-9acd522fdf4f",
        "cursor": {
          "ref": "1b4513ce-478c-44af-990f-1efa337cc167",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f71f774c-4032-4f4c-be46-3757c82d0507"
        },
        "item": {
          "id": "e4a8d807-f397-4a03-b9d2-9acd522fdf4f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d3b52424-e6fb-4e7c-882e-c3aa65e9ae33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff804ec-63ae-421a-a97b-1f4709933dd1",
        "cursor": {
          "ref": "c4079c36-4252-426a-a2f7-bf8a6d76f82b",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ecb73b20-c868-4b53-b3d3-7a53041a0a13"
        },
        "item": {
          "id": "4ff804ec-63ae-421a-a97b-1f4709933dd1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "397081e7-2cc0-43db-a1f0-8948446245e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a52cdd9-dbf8-4bb7-a0e2-f045ffa6dd5f",
        "cursor": {
          "ref": "f497422b-8fae-4a38-8b15-08f2877bd7c6",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "03f26175-347a-45df-a204-1b959f8a33eb"
        },
        "item": {
          "id": "7a52cdd9-dbf8-4bb7-a0e2-f045ffa6dd5f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6fe7bc8c-000a-4160-b3e6-a224c8148114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97c1397-3b29-4138-9179-95eda6125fb7",
        "cursor": {
          "ref": "344679b9-2aa7-442f-9e7b-dbcce300136a",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ab2005c8-37bd-4bac-8e37-5f6eee3ad91c"
        },
        "item": {
          "id": "a97c1397-3b29-4138-9179-95eda6125fb7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "418048f9-5aaa-4b58-9087-65b7f964f7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33423f32-67bc-4f4f-be03-5df775e0e163",
        "cursor": {
          "ref": "85abfcca-5654-4d28-97dc-dbca0e266179",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a4048372-81a9-4cd6-bd2d-c9e4a2a56e18"
        },
        "item": {
          "id": "33423f32-67bc-4f4f-be03-5df775e0e163",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6ebb2ba6-f61f-4a0f-a06a-0987544baf9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9b17f0-abe8-47ec-8171-858d0094987e",
        "cursor": {
          "ref": "be8fda21-9cbe-4cea-acef-471e0cf164e4",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d06d7968-3385-4ff0-8ee2-28b89a7c2415"
        },
        "item": {
          "id": "ca9b17f0-abe8-47ec-8171-858d0094987e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e1836202-e450-4ca7-8eb4-794fcefd4ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08d67ee-d663-4e2f-91d8-5af58eaeab9e",
        "cursor": {
          "ref": "f5814d80-a9da-41b8-8b79-d42cf1f5287a",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2ea2a3fe-f134-4c52-8688-92edb369fe16"
        },
        "item": {
          "id": "f08d67ee-d663-4e2f-91d8-5af58eaeab9e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d5e76e24-b56c-46c5-948e-f09b62639698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b0d194-8cf4-4dc8-aacb-04c4894ab6f6",
        "cursor": {
          "ref": "884354f6-e568-4578-9349-452e10956be4",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5ed1602f-a391-4c59-8c15-33de2a5d8f99"
        },
        "item": {
          "id": "00b0d194-8cf4-4dc8-aacb-04c4894ab6f6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b1216179-c8e9-4d76-9603-4cb601da2b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5b0363-0ce7-4e45-9764-746a7034f7fd",
        "cursor": {
          "ref": "f0c84a50-6dde-47ba-9308-3eeb3ae5a656",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "dec1adae-e5c8-4c44-bc0d-ecbd4f046134"
        },
        "item": {
          "id": "eb5b0363-0ce7-4e45-9764-746a7034f7fd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "06969901-d646-47fb-9a61-710701ab7b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e96633-f4b2-4f75-a3b5-5a36eecdf5ec",
        "cursor": {
          "ref": "bca575fa-087b-44ea-8a82-977e0ed17f9f",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3f662a08-575e-4619-96ad-aa4a081a6b5e"
        },
        "item": {
          "id": "01e96633-f4b2-4f75-a3b5-5a36eecdf5ec",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "94fd2fbd-13ce-41a6-b28a-c434c035adfa",
          "status": "Created",
          "code": 201,
          "responseTime": 671,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "db9d4388-a4af-486d-bba8-4f6bbbf89111",
        "cursor": {
          "ref": "fa7d13ef-2f54-47db-b8fa-d9608251f70c",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "deb010ee-d880-41c4-a30f-054f6ebce73b"
        },
        "item": {
          "id": "db9d4388-a4af-486d-bba8-4f6bbbf89111",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a1da8a62-75a0-4bd9-995f-694e26cbbc9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6eb52d-a200-4fd5-996e-73b58df5f96f",
        "cursor": {
          "ref": "3b359459-6111-4afa-8e1f-14e21c1ad4ec",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1e73e9a8-5ce0-4d3f-9b39-2500d0502709"
        },
        "item": {
          "id": "5a6eb52d-a200-4fd5-996e-73b58df5f96f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3cda928b-ddf0-40d7-b5a7-42640b799254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e708f95e-cc86-4f52-9530-f187a02a3efa",
        "cursor": {
          "ref": "48c93d49-537e-4b16-9f38-33eb8f5410be",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "57b6eebc-9044-460c-b200-739232c7a3b3"
        },
        "item": {
          "id": "e708f95e-cc86-4f52-9530-f187a02a3efa",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c5d6022b-7834-482e-84b7-e2f458156eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f984dec-03c8-4c48-baef-c16f130d8a23",
        "cursor": {
          "ref": "2dfcce7f-02e4-42fc-b0a7-8c18f231d943",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "01b46e67-5de2-40a5-969c-3e5d10b9794e"
        },
        "item": {
          "id": "8f984dec-03c8-4c48-baef-c16f130d8a23",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2d0b911a-ffa5-4908-8975-ae03e7232bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ed984e-9773-4428-9d0f-bb40f4fb0211",
        "cursor": {
          "ref": "a119ef6b-5ee2-46bc-9c0f-aa80b7dfb51f",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "aedeb839-4f96-4cce-a1fc-58ea14e52b96"
        },
        "item": {
          "id": "62ed984e-9773-4428-9d0f-bb40f4fb0211",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1fc774b5-84ef-47e4-a3ef-7b0d187878ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382a976b-f161-4444-9575-9e0262f131c1",
        "cursor": {
          "ref": "51c6a609-4ead-4a34-be78-d2f57af87455",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9d109751-55b5-4216-9d9b-694a36436e74"
        },
        "item": {
          "id": "382a976b-f161-4444-9575-9e0262f131c1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4b101539-ed83-4257-b466-836eca99dc6d",
          "status": "Created",
          "code": 201,
          "responseTime": 614,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "fbb90bc5-f24d-4447-b22d-de0abf9208ce",
        "cursor": {
          "ref": "c5a77ba7-92a0-4c61-bad4-057919972228",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d7609b8a-daf0-4b32-840a-922b2432e160"
        },
        "item": {
          "id": "fbb90bc5-f24d-4447-b22d-de0abf9208ce",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f0b39c32-10ff-4f4a-a2bb-da588ff91583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b67613c-5a30-4b3e-8784-38d8017abbe6",
        "cursor": {
          "ref": "f36f99f4-3a46-4466-a3c8-eed2751e1d79",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8bdba7ff-dfe4-461b-b4cb-e9716c4bc702"
        },
        "item": {
          "id": "2b67613c-5a30-4b3e-8784-38d8017abbe6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a97c7535-23da-471c-8e26-cbfbc5d476ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be86869b-a176-4c9f-802c-349eac76324c",
        "cursor": {
          "ref": "5d611bae-174d-471e-80dc-d9ab8f7c0907",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1dc58059-6000-48e6-9f09-ca675d7ae2f8"
        },
        "item": {
          "id": "be86869b-a176-4c9f-802c-349eac76324c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9fa4f1f1-10d9-40b7-aec9-bb3b969bc26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52d1a36-7b57-4711-b9a1-4ce798dc16ba",
        "cursor": {
          "ref": "44883334-e583-4df1-9008-1e4a28c9ff4d",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "258992e2-3683-4bf6-836d-f75ae3941ad0"
        },
        "item": {
          "id": "f52d1a36-7b57-4711-b9a1-4ce798dc16ba",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "12904fd1-4272-47f6-a657-eb51890073d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c5f278-f155-4398-aeba-0023c80c2505",
        "cursor": {
          "ref": "f01d1b22-08f8-41f1-8df3-a1135216c4c1",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "531edbe8-a571-423a-9781-56bcd03433ed"
        },
        "item": {
          "id": "40c5f278-f155-4398-aeba-0023c80c2505",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "dff012c1-e1c9-458b-9f5a-4f0e1f965958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ec938a-d17a-4dd7-abad-62cf513cd922",
        "cursor": {
          "ref": "6ac5f323-309e-42c9-84a3-abe83ba1e3d6",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3e7c7628-ac4a-4c67-886b-ed82bcc46082"
        },
        "item": {
          "id": "26ec938a-d17a-4dd7-abad-62cf513cd922",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0e6b9f8b-c767-484a-a715-41dc8ae9ea46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2473b3ac-4aab-4070-9bd9-a6f08699a570",
        "cursor": {
          "ref": "2af673e2-8724-490f-875d-f9afd501debe",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7f825941-90a3-476a-9edc-ae592b88bf50"
        },
        "item": {
          "id": "2473b3ac-4aab-4070-9bd9-a6f08699a570",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8b930b8c-80a5-4ed0-9b70-78708624f5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7699c1e-ecc6-4fbb-9ed1-58ca67b67143",
        "cursor": {
          "ref": "f3257e03-4844-477d-a720-b1a69152516f",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "48153bc8-fb6a-4ede-a426-f8f484ff79d4"
        },
        "item": {
          "id": "f7699c1e-ecc6-4fbb-9ed1-58ca67b67143",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "69720a59-d479-4336-bc71-194e96e9e5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527e6b70-7bf0-41a7-8549-7bde3256ca0a",
        "cursor": {
          "ref": "51d5fbe3-dc90-47b2-a783-556699460e59",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4eb7f608-103c-4e57-9d0c-579df32bc10c"
        },
        "item": {
          "id": "527e6b70-7bf0-41a7-8549-7bde3256ca0a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0f556567-9bed-47cc-9fed-f51e68e484e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "5b0c0e6e-8868-4280-a1f4-521f5e23de21",
        "cursor": {
          "ref": "76763d6c-b661-47ea-b771-38dafa378535",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1e69f46b-23a3-4832-8e81-e2c42d289017"
        },
        "item": {
          "id": "5b0c0e6e-8868-4280-a1f4-521f5e23de21",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "43a6a43d-5398-4d4d-8b7f-31b30e4b888e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "b7bec9e9-00b0-4659-8e43-1b9074c5e1b7",
        "cursor": {
          "ref": "e3d35070-de68-469c-ae21-f1bdcd6d762c",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "53d25474-3f96-4598-b17d-f0266474077e"
        },
        "item": {
          "id": "b7bec9e9-00b0-4659-8e43-1b9074c5e1b7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "30fa800e-da0d-4b54-885f-b8e843751265",
          "status": "Created",
          "code": 201,
          "responseTime": 702,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "46153065-5dd7-492f-9c08-d04418c65106",
        "cursor": {
          "ref": "f23b8577-137a-4f21-bea6-0851077cade9",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8ee8e24b-6ee3-4456-b79e-9a59de7c0e0f"
        },
        "item": {
          "id": "46153065-5dd7-492f-9c08-d04418c65106",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7ac63950-f5e2-42f0-a36a-221a706d68b5",
          "status": "Created",
          "code": 201,
          "responseTime": 617,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2eae776-065a-4c5a-b51a-c7bc84c7146f",
        "cursor": {
          "ref": "b9859312-e08d-4252-bea2-4d954a12223e",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d2b27d3a-5dcf-48f3-b8d3-4563ab59a1f4"
        },
        "item": {
          "id": "f2eae776-065a-4c5a-b51a-c7bc84c7146f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c508292a-d301-4164-8632-e71fbe8179b3",
          "status": "Created",
          "code": 201,
          "responseTime": 578,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9ba1d1-7399-4d31-93f1-95562628b932",
        "cursor": {
          "ref": "6fb8746c-a3a2-47a1-a5e5-5a7859e83487",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d7c38316-164a-4e40-9905-f1316e4b0988"
        },
        "item": {
          "id": "8f9ba1d1-7399-4d31-93f1-95562628b932",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c974e80b-13cc-4113-a92c-d545482e1a3b",
          "status": "Created",
          "code": 201,
          "responseTime": 594,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56f1913-d9a0-44f8-a849-76752a0957fd",
        "cursor": {
          "ref": "c4f57990-0f44-4859-b265-51d845460375",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c3484ee5-216e-4471-b991-516bf34c1139"
        },
        "item": {
          "id": "e56f1913-d9a0-44f8-a849-76752a0957fd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "57ef6bce-473c-4312-a63f-7949a433e041",
          "status": "Created",
          "code": 201,
          "responseTime": 597,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d605086-3b7d-4bb5-9bb0-7bb8a5e72b8d",
        "cursor": {
          "ref": "00744bed-3e3f-40f2-8832-1e3a46e85931",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b4b9aa2b-4608-4afc-b3fd-df142f985bda"
        },
        "item": {
          "id": "7d605086-3b7d-4bb5-9bb0-7bb8a5e72b8d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ae9621f2-1fb3-4b5d-8bba-3334f2c77e6f",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7d605086-3b7d-4bb5-9bb0-7bb8a5e72b8d",
        "cursor": {
          "ref": "00744bed-3e3f-40f2-8832-1e3a46e85931",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b4b9aa2b-4608-4afc-b3fd-df142f985bda"
        },
        "item": {
          "id": "7d605086-3b7d-4bb5-9bb0-7bb8a5e72b8d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ae9621f2-1fb3-4b5d-8bba-3334f2c77e6f",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5f5d1dbf-2c1a-4f48-83ff-1950fdb4e1b4",
        "cursor": {
          "ref": "3705cb1f-f65d-4c72-8a14-f36717c5c52c",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "43d91aba-da71-4774-8e40-f73530fab387"
        },
        "item": {
          "id": "5f5d1dbf-2c1a-4f48-83ff-1950fdb4e1b4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c8270274-f557-4fe3-87f5-c3b8db488977",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "abe98fc9-cb2b-45cb-b950-41453f5021a8",
        "cursor": {
          "ref": "7c28e1f5-4e59-4277-86e5-a511defeb417",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "01803a28-6ab4-4da2-95a3-5805b3539fb5"
        },
        "item": {
          "id": "abe98fc9-cb2b-45cb-b950-41453f5021a8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f0503391-2c25-4b91-a8d5-939b58b52a45",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "987bc4de-b7a0-4e5d-b2ef-6f5d91fc4d81",
        "cursor": {
          "ref": "bd320d97-4b3b-46e2-99b3-ff8230beb5fd",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "bf51fa0e-5379-452f-8160-af22e2cf6b73"
        },
        "item": {
          "id": "987bc4de-b7a0-4e5d-b2ef-6f5d91fc4d81",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "83f70a05-a2a9-4bfa-a4ff-6d863d8d1c2d",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "4b80db74-5f6d-4589-a69b-e523a817cd4c",
        "cursor": {
          "ref": "af55f9e8-75f6-409e-83ea-d01e719d687b",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ebbffd17-bfc1-4603-adf0-2ca57fd913f3"
        },
        "item": {
          "id": "4b80db74-5f6d-4589-a69b-e523a817cd4c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f92fb043-250c-4962-888d-bffecf730192",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "c8aa248e-e5e3-4707-96bd-8c7eed839776",
        "cursor": {
          "ref": "a4d679aa-3909-4c8a-a11d-d7f4c0e20737",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "27315a57-abc5-4686-8d31-7b732e324bf7"
        },
        "item": {
          "id": "c8aa248e-e5e3-4707-96bd-8c7eed839776",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "de3d87d4-278b-47a1-8464-359cb6834bc0",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "bda6deec-fa50-4c83-aa26-64c88c55a078",
        "cursor": {
          "ref": "9413c94e-f00d-4539-a744-84816fe892c2",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c92089b3-64e5-4e9d-95fe-8a03d725228b"
        },
        "item": {
          "id": "bda6deec-fa50-4c83-aa26-64c88c55a078",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "32bdfee6-0c8e-45af-ac44-3432df1b0c85",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "cf359ced-2c80-442c-ac0d-81d8790463b2",
        "cursor": {
          "ref": "cbcbdac2-46bd-4eac-b839-16016b591d70",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3da3a232-b7aa-4b7d-9c83-e3a7540b4a6f"
        },
        "item": {
          "id": "cf359ced-2c80-442c-ac0d-81d8790463b2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "dd2421c8-aa29-4406-bca6-f56629e78458",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "78dd76f5-56a2-41c9-bca3-c1c3512fae81",
        "cursor": {
          "ref": "eca81387-9067-45f0-a960-8bc28f7710d2",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "41f2e439-25d6-4257-8fb9-e2a2e3461a11"
        },
        "item": {
          "id": "78dd76f5-56a2-41c9-bca3-c1c3512fae81",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fa35326a-9271-494a-b1cf-8c8f3ca540bd",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "e77745f6-f28c-4aea-a376-e6f46166d729",
        "cursor": {
          "ref": "43e9188a-b188-4bb9-b84b-bc5f24ec2f47",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "193f8015-caf6-44bb-bdbe-463559f2b148"
        },
        "item": {
          "id": "e77745f6-f28c-4aea-a376-e6f46166d729",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7e4f4a7f-622b-491b-8a60-c4175a884cd6",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "31ba407e-4b09-40e9-ad14-dbcd236b29c0",
        "cursor": {
          "ref": "e50cd241-eefe-4ed5-9f28-92675d2285e7",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "518296ab-cdb3-42a1-a6db-6544d965b67a"
        },
        "item": {
          "id": "31ba407e-4b09-40e9-ad14-dbcd236b29c0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "34821eda-6156-459a-9704-d79116347f85",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "8e50c034-0b13-42c8-a65a-a46fd875c389",
        "cursor": {
          "ref": "29c990f7-8ece-4f90-8b5a-b9151b86a283",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4e2801fa-d3c9-4432-9c74-8307516d0496"
        },
        "item": {
          "id": "8e50c034-0b13-42c8-a65a-a46fd875c389",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f2ead186-7b7e-4c78-94eb-85262868cf14",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ec9e7485-5bc4-4bfd-bd9c-5a625a8d3eac",
        "cursor": {
          "ref": "51dc94eb-ee19-48a4-955f-df85f4c1e9f0",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "35693067-1e83-4e0f-9b3d-eca2cbb7da64"
        },
        "item": {
          "id": "ec9e7485-5bc4-4bfd-bd9c-5a625a8d3eac",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "28c3bbb6-baf0-44ed-98a8-8ce34b7f8fef",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "e832053f-5a31-4b8a-ba1e-625d72d0e1e8",
        "cursor": {
          "ref": "c001383b-085e-4e4d-88bf-adde45e26b55",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f538ccba-0542-431e-9764-b2920c8a0b4b"
        },
        "item": {
          "id": "e832053f-5a31-4b8a-ba1e-625d72d0e1e8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c3811978-6452-4616-a3c2-1bab684906da",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3daba495-53fb-4324-9f18-0fe1b8bd7068",
        "cursor": {
          "ref": "2357cec4-bb85-4160-a17b-752a7bb691a8",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f0273c34-ba43-4de3-a7ab-66fa6171ff07"
        },
        "item": {
          "id": "3daba495-53fb-4324-9f18-0fe1b8bd7068",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c5abd299-3e1e-4396-8597-c219777636b6",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "20d7a6f4-125f-4962-a41b-86bd34e9c7e3",
        "cursor": {
          "ref": "93088559-b13a-4562-aa8d-d9260c0749db",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "92651461-56cf-4ac4-960d-c17c6e633e06"
        },
        "item": {
          "id": "20d7a6f4-125f-4962-a41b-86bd34e9c7e3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "903ec85e-0fed-4089-810b-fd3b868e3520",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "f9572cf2-5c73-4f9c-ba63-f99a2756c63d",
        "cursor": {
          "ref": "81711c70-1365-41ff-b562-c157dfb8df1e",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dbcc8387-a2f1-44ee-a12c-9b86a77179fa"
        },
        "item": {
          "id": "f9572cf2-5c73-4f9c-ba63-f99a2756c63d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "359ff884-4ba3-4708-af6b-58902b9dda37",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f7c5729e-b57a-4984-b19a-3865b50e6119",
        "cursor": {
          "ref": "a55654de-aeef-488f-a7a6-c41dd2d394a5",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4beb5841-035c-45fe-ad3c-b1739a465b70"
        },
        "item": {
          "id": "f7c5729e-b57a-4984-b19a-3865b50e6119",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d500e98b-40e7-4a65-a148-0a1524807004",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "c174ea26-a98a-4651-807f-8aab49b473d6",
        "cursor": {
          "ref": "4f49ac5c-c04c-4f3f-a976-68c3d6d55031",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f8e60840-290a-473c-8080-e21963f34092"
        },
        "item": {
          "id": "c174ea26-a98a-4651-807f-8aab49b473d6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "448a24de-e25e-4351-a14a-c3c82622ed99",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "1020ddf8-5de9-4682-b704-838da17e8d82",
        "cursor": {
          "ref": "2219ea41-4594-44f5-a5fb-675bd7baee97",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bff38868-557c-4ccb-8fdd-aa5e1fa46a36"
        },
        "item": {
          "id": "1020ddf8-5de9-4682-b704-838da17e8d82",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f23c875f-6e3e-4da6-8cac-7278eef739fd",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "3ac2af94-69b5-4945-8166-c70d00789a79",
        "cursor": {
          "ref": "ec5b7ced-bcd2-486b-9cb2-e6aaf330ab9d",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3db50716-4e5f-4d3a-a9c4-2cf80e7cb246"
        },
        "item": {
          "id": "3ac2af94-69b5-4945-8166-c70d00789a79",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fb997933-f6a0-425a-ae27-ce10700fed27",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "6d03e7e8-42d9-4be5-b0b6-56a9ad7c02fe",
        "cursor": {
          "ref": "030e1a0d-886c-4bd2-ba8c-24749902a521",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7ed71386-0f89-492a-acd6-f73e219e5fec"
        },
        "item": {
          "id": "6d03e7e8-42d9-4be5-b0b6-56a9ad7c02fe",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6895250d-853f-48a1-b226-a3c8e70d0780",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "26794a7e-ffa0-45c7-ad40-e6892fdb7cf2",
        "cursor": {
          "ref": "2be5e3ee-661e-4f45-a8f2-ce587e91691c",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "52f1ada8-a037-4422-8c6f-dd5cec748eaa"
        },
        "item": {
          "id": "26794a7e-ffa0-45c7-ad40-e6892fdb7cf2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a5845f26-20a5-4b55-b26f-f54ccd5ad86c",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "afe61315-4c13-4fe1-bf25-39ff88e229b2",
        "cursor": {
          "ref": "579e6e15-a997-487f-8f37-133ba4350784",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "88eda4bd-b446-45ca-89cf-59113a89fc85"
        },
        "item": {
          "id": "afe61315-4c13-4fe1-bf25-39ff88e229b2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "63f7bc17-a8f5-45e0-ab4f-c33331047f40",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a5df8659-fc39-4bf4-ace3-c04edf5ac560",
        "cursor": {
          "ref": "2f67fdf8-0e52-4510-a859-fa45ec4fcd15",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "626b2e61-b737-4d8f-8026-f89297713a24"
        },
        "item": {
          "id": "a5df8659-fc39-4bf4-ace3-c04edf5ac560",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fd9bbf7e-9e53-4df0-9910-2da3859a293d",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "067c4952-64b3-48f8-b930-a4f58378a0ae",
        "cursor": {
          "ref": "43c01b67-bd10-4b07-a23c-b11eb418ba22",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "55d0db2e-04a8-49a3-9fe3-cc6ab865a242"
        },
        "item": {
          "id": "067c4952-64b3-48f8-b930-a4f58378a0ae",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4c5518a9-7f20-42c4-995b-b8e23a9f3262",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1b41286b-8d8e-49fe-aa20-7d7e6624ec67",
        "cursor": {
          "ref": "ddcd18f5-c393-48ed-9d52-68a2e729e4b3",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "684797b7-2a70-4b44-be5c-4bc9fe583477"
        },
        "item": {
          "id": "1b41286b-8d8e-49fe-aa20-7d7e6624ec67",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6a0b9aa3-1a91-4f92-8b87-ae32d644a688",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "b1cde7ae-c6c6-4305-80a6-ecca575f7166",
        "cursor": {
          "ref": "1d0267e7-a861-4e74-a394-828e791b1415",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "76ccfb9b-9cd8-4304-a86c-c7ad2566d192"
        },
        "item": {
          "id": "b1cde7ae-c6c6-4305-80a6-ecca575f7166",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8e29024e-2c8a-4577-92f9-efa3e82a77c5",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "ef4656c1-99b4-4df5-a425-f9b742604345",
        "cursor": {
          "ref": "d8b934c8-1872-4d3d-b5b7-4c1ba5b3ee2a",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1e3f3ee7-ef36-4faa-9ac0-307facca733d"
        },
        "item": {
          "id": "ef4656c1-99b4-4df5-a425-f9b742604345",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ec9b20b6-2fce-4567-b942-95a97bdf8ae2",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "3882aad3-1478-4f14-a86c-95af0de77418",
        "cursor": {
          "ref": "26a136ad-dedb-4482-9e38-904e692da836",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c041f752-ffde-4152-895f-eacf36dae32d"
        },
        "item": {
          "id": "3882aad3-1478-4f14-a86c-95af0de77418",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "319f78a7-80cb-445c-97e9-81d054dcb921",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d9479a67-3b1e-4800-bd61-06ea9fcd888b",
        "cursor": {
          "ref": "aa3b8502-46f1-4bd4-8e45-65b52d59f448",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5aef47d0-aad0-4ea5-9d61-f2b033a73d2c"
        },
        "item": {
          "id": "d9479a67-3b1e-4800-bd61-06ea9fcd888b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a25b86a6-d586-4faf-92c3-e18523247361",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "e058f502-16c7-4ee2-a136-b05537c9d880",
        "cursor": {
          "ref": "1961ab9f-65c6-4529-ac7c-188dc9c3a0a8",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "daea04df-13c5-43d9-b65f-f603bdb1acad"
        },
        "item": {
          "id": "e058f502-16c7-4ee2-a136-b05537c9d880",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "80a878ba-f0b9-44e0-856d-121f174d2cc4",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "360abbcc-6c25-4df8-8247-397871c68574",
        "cursor": {
          "ref": "e6fe9ef7-8001-4b0c-8011-894e80f669f5",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fee63fb4-32cf-4e80-bb17-5f009a9361b6"
        },
        "item": {
          "id": "360abbcc-6c25-4df8-8247-397871c68574",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "df29180c-51b5-46a2-a57b-e3088afe4a97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6997e72a-3fca-4371-9a4c-d4b94ae9a3d4",
        "cursor": {
          "ref": "6dcd7a62-ecc3-413b-ab7d-f8ccd3759396",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1b7e8ce5-697c-4370-adfc-4c2e24e7c150"
        },
        "item": {
          "id": "6997e72a-3fca-4371-9a4c-d4b94ae9a3d4",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "fdf8a578-e896-4222-86db-324714e49b18",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5308d430-ae75-42e8-bd3f-e07ef6f9a2d0",
        "cursor": {
          "ref": "b13b2d87-c580-4184-a6fb-3cae106fd60b",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c8882d09-6c59-4be3-a2aa-15024fe85612"
        },
        "item": {
          "id": "5308d430-ae75-42e8-bd3f-e07ef6f9a2d0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "32f2f703-da15-42e9-83bc-3ef564682fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5308d430-ae75-42e8-bd3f-e07ef6f9a2d0",
        "cursor": {
          "ref": "b13b2d87-c580-4184-a6fb-3cae106fd60b",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c8882d09-6c59-4be3-a2aa-15024fe85612"
        },
        "item": {
          "id": "5308d430-ae75-42e8-bd3f-e07ef6f9a2d0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "32f2f703-da15-42e9-83bc-3ef564682fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b098761-b22e-49bf-b1e4-8859652ea86f",
        "cursor": {
          "ref": "4907b661-5a6a-4039-b65b-44cf19aea6b0",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cec8abe7-856b-4b9e-aee4-6072821b555c"
        },
        "item": {
          "id": "5b098761-b22e-49bf-b1e4-8859652ea86f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "03f59933-e1ec-40b8-a243-8bfb8f449bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42548030-7fbd-4131-837a-9aa11d66adf6",
        "cursor": {
          "ref": "11943f3a-6d7b-41e9-b72b-1c35a0b7b89c",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c99499bf-6394-47f7-9853-65947434f53d"
        },
        "item": {
          "id": "42548030-7fbd-4131-837a-9aa11d66adf6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "eb4302cf-afb0-47be-9db6-31c6c73bb55b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910c7bee-275b-43f0-ba4f-3daa5ee17298",
        "cursor": {
          "ref": "b1f7d8fc-35be-4235-8fe9-4743f83b2e47",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2a9587b2-4ec2-4cbe-82af-40f4e5b69050"
        },
        "item": {
          "id": "910c7bee-275b-43f0-ba4f-3daa5ee17298",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c625d64f-61af-428b-a71b-fd82feee3b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3adc9db-183a-468d-b6b0-d04e3edfea32",
        "cursor": {
          "ref": "f178a363-0c85-4fc2-9fb6-cc262eb28b58",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "25977c5a-05ad-4e5a-99ea-f1944f4b9162"
        },
        "item": {
          "id": "d3adc9db-183a-468d-b6b0-d04e3edfea32",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f859c415-4fb9-4711-b8ed-ab48ee0d6a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8d7255-f236-459c-832f-e40e7f7e8478",
        "cursor": {
          "ref": "b4bccce7-d7e1-4d77-8f4a-0f6eb30c7dd6",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1056b412-f1dc-4f2a-8b16-6ce539e9d3dc"
        },
        "item": {
          "id": "af8d7255-f236-459c-832f-e40e7f7e8478",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1d9fec4e-d963-4216-920e-4ce64dabe520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2c7326-5ea8-4969-94c9-7a79d42b874a",
        "cursor": {
          "ref": "4196ab5d-58c2-4918-b4b1-067d6f7f8860",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9541b7d0-d63d-4168-b043-d1cb160c5c0b"
        },
        "item": {
          "id": "fa2c7326-5ea8-4969-94c9-7a79d42b874a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ea707986-d2fe-4f68-9d66-30fad0a305d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e3824a-199d-4cde-bc2e-0ffa86d11f69",
        "cursor": {
          "ref": "de4f1fda-6921-4ffc-8c59-45d61747cbb4",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "438e8640-7f56-480d-8bb6-0381efc0a257"
        },
        "item": {
          "id": "72e3824a-199d-4cde-bc2e-0ffa86d11f69",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "580f162c-c83e-4eaf-8c04-2ed61d42b671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b26d3d-d666-402e-bfa2-055cfcccb554",
        "cursor": {
          "ref": "22543288-3466-4bb2-9c5d-4943d2170547",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "34224631-fb77-4316-b84a-0a464fe6c81b"
        },
        "item": {
          "id": "20b26d3d-d666-402e-bfa2-055cfcccb554",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1953aa63-7a8e-40e9-9bb0-d8eba332eec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f295fe1f-fe4d-4268-8672-d2c655d996de",
        "cursor": {
          "ref": "45e31dc4-f392-44c5-8b67-6d2cce4dd0d5",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "51c572e8-75b0-472f-9fbb-5967c8af5c8d"
        },
        "item": {
          "id": "f295fe1f-fe4d-4268-8672-d2c655d996de",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0a47ccbe-992d-423e-8d8d-d5400ec7262d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4769e4-2958-4cac-9e3a-89e1137514ad",
        "cursor": {
          "ref": "7c0f0b1f-c998-44f6-bc75-139b06c7e0ff",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9893f0ba-b34f-41d9-85be-85e4c5077ebf"
        },
        "item": {
          "id": "8a4769e4-2958-4cac-9e3a-89e1137514ad",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "bc7e2e50-3998-4233-8d1c-26aeaab9e941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b1e5c9-c656-437f-bb27-cb4b129f4282",
        "cursor": {
          "ref": "621d3631-def9-4eed-8627-65d232d8a87e",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6471d0d8-d07f-4596-a2a5-6f2aae74d0f8"
        },
        "item": {
          "id": "f9b1e5c9-c656-437f-bb27-cb4b129f4282",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6a55259a-f559-4eaf-9068-f44f18147882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b193f21-b8de-494d-9961-aba0dbf14979",
        "cursor": {
          "ref": "e0513c4b-ea9f-4ef2-936b-b685cb625858",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c2fab3d8-8777-4f7d-b8b9-c2bc1314e527"
        },
        "item": {
          "id": "8b193f21-b8de-494d-9961-aba0dbf14979",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "558b612b-c708-46cd-a329-0afff842c06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a1f865-7318-4347-940d-e08a0dd28692",
        "cursor": {
          "ref": "3f7cfb35-48f5-48a3-bebb-e5959b1449d2",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e8dff7a6-278e-4668-b4d1-6c0c730cc694"
        },
        "item": {
          "id": "f9a1f865-7318-4347-940d-e08a0dd28692",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "76983b82-67a7-4159-9f47-d8f65308e277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449095b2-e5a1-415e-960a-ab5126f3817a",
        "cursor": {
          "ref": "3445809f-ad78-43d5-9ed0-3686e95fd7e5",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ba6acff0-a4c2-46f4-8abd-ad070c945530"
        },
        "item": {
          "id": "449095b2-e5a1-415e-960a-ab5126f3817a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4b0e2a83-0bf9-434f-a98e-a199e9ad7516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4d984e-b6c4-4cc2-964c-d01c5c54cc65",
        "cursor": {
          "ref": "e40f0b72-fe1a-40b4-8386-c5ae49ec6dc3",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ff830059-13cd-401a-9340-296218dd8eeb"
        },
        "item": {
          "id": "cc4d984e-b6c4-4cc2-964c-d01c5c54cc65",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "24226004-9522-47b0-ad79-ccf8b5a78cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5aea40-bdd2-4600-b66d-d75f2540908b",
        "cursor": {
          "ref": "04c3af11-7058-4bda-853c-4bfbaa8e2aa0",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2a587d93-d44b-45ed-b80b-c8148b2606ee"
        },
        "item": {
          "id": "aa5aea40-bdd2-4600-b66d-d75f2540908b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ee35c73e-837d-4bb7-b72d-d8c388e5e1c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be12dd5c-f24c-481d-8bae-30ed0ae1f017",
        "cursor": {
          "ref": "1216c25b-3038-4d60-8b5a-029014909382",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5eb290a5-9897-4f6f-a027-67a1aeef0bc3"
        },
        "item": {
          "id": "be12dd5c-f24c-481d-8bae-30ed0ae1f017",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "92032e75-67fa-42b4-9d69-f6eb202da9ab",
          "status": "OK",
          "code": 200,
          "responseTime": 597,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "3dd54797-7d82-466c-a5ff-bbf11405ce87",
        "cursor": {
          "ref": "c69e4873-0081-40b2-94f6-e838acbf2d47",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "401c9905-f64f-4b09-8717-a589dc503463"
        },
        "item": {
          "id": "3dd54797-7d82-466c-a5ff-bbf11405ce87",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f93579f0-1952-4480-a8f5-ffe21285db80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec6f514-dcab-4b66-a2f5-ff30e986393a",
        "cursor": {
          "ref": "0faf1fa1-e8df-4849-acf7-db9d4e1ae9a5",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f4d22236-31c5-4608-9733-f5aee3c2dffd"
        },
        "item": {
          "id": "4ec6f514-dcab-4b66-a2f5-ff30e986393a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b1c68a6a-f3eb-43eb-a7e2-41d9843c0d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbae2b7-b24a-4aa5-a726-c270b809d785",
        "cursor": {
          "ref": "eed41964-a22c-4b14-8128-a45d35675e63",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "451a5e3a-8939-40d4-b6ff-a8769c4a7b16"
        },
        "item": {
          "id": "8cbae2b7-b24a-4aa5-a726-c270b809d785",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6737f270-42d3-44cb-991e-6e70a7882b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41907e2b-594e-472c-b7b5-fda9772cd3d1",
        "cursor": {
          "ref": "8696be67-3076-4562-bc21-fd3571d241e9",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "bf3a4ba9-36dd-4822-8f9a-1d3eec4d682b"
        },
        "item": {
          "id": "41907e2b-594e-472c-b7b5-fda9772cd3d1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e9341eaa-9991-48b8-8bf7-ef21b5c1c48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e020d19d-41cb-4cba-8d9e-e2992ef8f0fa",
        "cursor": {
          "ref": "248a1167-776c-4505-a790-b88c0ac8bd35",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7089fd7a-62f1-4e88-88b9-9976206e480f"
        },
        "item": {
          "id": "e020d19d-41cb-4cba-8d9e-e2992ef8f0fa",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2ea96bed-1f9d-463e-9d71-9b517ccb9595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bccc2811-cab0-4840-bbfd-8b79a0a720df",
        "cursor": {
          "ref": "58087d16-b668-411d-88b6-f3cc26e207ab",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "23fccdf5-6ec3-4bb5-bd9e-ae4818c155c9"
        },
        "item": {
          "id": "bccc2811-cab0-4840-bbfd-8b79a0a720df",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bf09bfe2-3edd-4d35-a65a-3637bbaca450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d66bc09-0765-4fc5-8d12-0bffeb948119",
        "cursor": {
          "ref": "afb9840a-7daa-45fc-901c-edea1517f38d",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c7456556-3c66-409f-90c1-5d7f54aa94d2"
        },
        "item": {
          "id": "5d66bc09-0765-4fc5-8d12-0bffeb948119",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "da142f32-4414-4597-9138-a853933d765d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfa55d3-2401-4528-80a1-177baf06cec3",
        "cursor": {
          "ref": "e6487ba7-4af0-4394-bcbb-eb860a8448cc",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c51f077b-bb4f-49ea-8913-e564db66566f"
        },
        "item": {
          "id": "ccfa55d3-2401-4528-80a1-177baf06cec3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d4c36047-f9c0-4fb6-8ef2-12e1b8f876a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29513d2f-832e-42ce-809b-681884101ac9",
        "cursor": {
          "ref": "91cd0f98-9f8b-44a7-b4a4-4c60f4ac177b",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1e9d5fd4-2f92-4493-9f29-1236d7ca4b55"
        },
        "item": {
          "id": "29513d2f-832e-42ce-809b-681884101ac9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a32e2d67-d9fd-4ad1-92f9-49f5e66ffc41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcb7b27-bf34-4206-885c-9c4d11d9c7e7",
        "cursor": {
          "ref": "41fc1cc7-83c6-4d68-bd50-fe797c227482",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c665e76e-bc9f-4862-a4b9-4551efc1f0f5"
        },
        "item": {
          "id": "3dcb7b27-bf34-4206-885c-9c4d11d9c7e7",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "820f0f08-37f5-4a48-ad2d-12fdebd525d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf01c078-1fd7-4f46-93d2-44d07d5231e8",
        "cursor": {
          "ref": "84badff4-980c-4047-9a43-7a250958b00b",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d970f946-e0cb-4e86-93c8-9353beab97f2"
        },
        "item": {
          "id": "cf01c078-1fd7-4f46-93d2-44d07d5231e8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2f81a89c-bb0b-400f-a769-e24903026166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4aebca9-cecc-4adb-a5c2-427a4f4e0819",
        "cursor": {
          "ref": "bfd3f7b2-d9fb-46d2-8d7c-d7143e974933",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "bbb1ad27-45fd-4af6-b35f-13ac65900311"
        },
        "item": {
          "id": "f4aebca9-cecc-4adb-a5c2-427a4f4e0819",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d2f12ec9-43d8-4913-b607-8cf25cfece64",
          "status": "OK",
          "code": 200,
          "responseTime": 238,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "a01aa1fc-9d54-4a94-aa2b-9d06cc0742a7",
        "cursor": {
          "ref": "7c7cc768-8901-45ba-b2da-5a277da74faf",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1e57474a-25e7-4716-8ead-61a2b00a9083"
        },
        "item": {
          "id": "a01aa1fc-9d54-4a94-aa2b-9d06cc0742a7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "237d60e4-c195-40c2-b990-5f03c8f28ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0cc13d-9d00-4ce6-94a9-91cef624a918",
        "cursor": {
          "ref": "ad28672e-c806-4b2a-950a-6e4643894a66",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e5577993-19b7-429b-9a3e-0bfbd2d1999c"
        },
        "item": {
          "id": "1f0cc13d-9d00-4ce6-94a9-91cef624a918",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e4e026b9-0125-4459-98d7-7b099bfbfa22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ce407d-a408-460b-bbe6-c29f4061232f",
        "cursor": {
          "ref": "1fa19105-7af4-43cc-b373-c6ea9371a77a",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "dbae070b-d43a-4a3e-bca2-4d95519f74ae"
        },
        "item": {
          "id": "78ce407d-a408-460b-bbe6-c29f4061232f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3129eb5c-d780-47ad-9a6c-792da2222aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a12ef1-bc93-416a-a349-cb4f607d5d75",
        "cursor": {
          "ref": "4c921d3f-e56b-4e7b-84a5-309a05b723f6",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "baa5ce2f-34df-4a01-a037-bf7c2f48bdd4"
        },
        "item": {
          "id": "d4a12ef1-bc93-416a-a349-cb4f607d5d75",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2737f278-e695-4c82-baa2-1c56a16bf1b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2d27f3-d257-4d4b-ab9c-7b56ecc65fee",
        "cursor": {
          "ref": "87b54260-3ab1-47d8-9b2e-9ba16ff71c4a",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "45e36648-8987-4ffe-ab6d-3bf08d694bc6"
        },
        "item": {
          "id": "bd2d27f3-d257-4d4b-ab9c-7b56ecc65fee",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "00de358f-5f6c-4895-b2ef-258a736fb8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b62097-165a-4953-9926-a3023b059851",
        "cursor": {
          "ref": "09511d20-562c-4f4c-bd09-978b06b36a98",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "61587fbc-5f19-4cc3-a3d4-9c2df9672fe9"
        },
        "item": {
          "id": "73b62097-165a-4953-9926-a3023b059851",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "916b6cc6-b698-4498-97e5-6382b121704b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea38cbe-f066-41ef-9b51-63d1e867026d",
        "cursor": {
          "ref": "7cf31418-cd61-4ab0-a7b5-a00fc42adedd",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d18cea88-5d96-4615-97b8-d68ba3e98fde"
        },
        "item": {
          "id": "0ea38cbe-f066-41ef-9b51-63d1e867026d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "96f6c59a-2624-489f-be6c-44643fb4dc91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5269664-78f1-46f0-9663-261773aed04f",
        "cursor": {
          "ref": "1838aefe-3394-4ffc-8fa6-5a527ba5502f",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2078e416-2cb9-4bbb-a008-e1a6dae8d575"
        },
        "item": {
          "id": "c5269664-78f1-46f0-9663-261773aed04f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9b8da82d-6536-4ff7-b48a-d60294cc743a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5ceab7-aa1d-460c-988f-87c58ce69ab7",
        "cursor": {
          "ref": "978503ae-d255-4039-8579-a4d968d4079e",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c9df103a-f1c3-4780-b83c-e33c106879e6"
        },
        "item": {
          "id": "8e5ceab7-aa1d-460c-988f-87c58ce69ab7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7022d3fd-f3f5-4a7b-9bff-bf4e54db385a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1ff1a7-100e-41d4-b8a8-dc0a619fa84b",
        "cursor": {
          "ref": "f38fb4ae-86bc-466a-aece-4a2bbb3b898a",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e83f1893-5707-422b-a1aa-e6de231d2630"
        },
        "item": {
          "id": "ad1ff1a7-100e-41d4-b8a8-dc0a619fa84b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3ae06620-b735-4410-ad5a-19ded4f81a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 523,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c0d956-dee3-42f1-9de1-1f74dd030705",
        "cursor": {
          "ref": "b2050576-2a66-491d-8205-64eaab9b5796",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bd0fa6a1-8b55-48f8-b1f7-23404a15565c"
        },
        "item": {
          "id": "11c0d956-dee3-42f1-9de1-1f74dd030705",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "efba76f8-adb3-4384-a343-728226eaff97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d05ebe-7e65-4537-8f7d-c5cfdd5311e9",
        "cursor": {
          "ref": "a8b1d2f9-15f5-4dd9-aed4-c6d10bf0e57e",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "eaec08ff-0e10-4802-b24c-361989a67290"
        },
        "item": {
          "id": "74d05ebe-7e65-4537-8f7d-c5cfdd5311e9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "11cf3d77-0647-4951-bb56-4924b0061a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 320,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd6c204-714e-4d96-96da-9447965530ee",
        "cursor": {
          "ref": "8bf83711-a2fd-466f-af49-8484978565b6",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d3006786-670b-4b84-81d5-8f5d4bcb9ba9"
        },
        "item": {
          "id": "9cd6c204-714e-4d96-96da-9447965530ee",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "eda359d1-de05-4c6f-b3ef-5cda110d25a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c92b4b-eaed-4890-8268-485fbf58a619",
        "cursor": {
          "ref": "7f684a40-34e5-4ff0-a35e-81f7fa49edd5",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b1a23925-4810-4fa5-9d16-1f1d5ba4278c"
        },
        "item": {
          "id": "80c92b4b-eaed-4890-8268-485fbf58a619",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "669d9086-8dc5-4303-9cf1-8437a6527743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7efb4b-8fd8-4a68-baf4-2fe9128fe686",
        "cursor": {
          "ref": "33493e19-9b56-42c2-9f55-34eb20aab081",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a3a675fc-4cfb-400f-bf5a-43b46de51243"
        },
        "item": {
          "id": "fd7efb4b-8fd8-4a68-baf4-2fe9128fe686",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a6ca98c5-d42a-4d53-8d84-98f42c236bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2728b397-5d30-4136-a9d0-03f230a695d8",
        "cursor": {
          "ref": "6530dda8-41de-4ec0-b63f-84a1f37a4a76",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "034fac31-66ce-4f7d-91c6-7b3229c07fc6"
        },
        "item": {
          "id": "2728b397-5d30-4136-a9d0-03f230a695d8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c499b1a8-414f-4943-8804-14233cff8413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c859d98a-e946-48ee-b49c-11e39516723b",
        "cursor": {
          "ref": "8d1878ac-f843-428d-94ad-d1d204f923e8",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b12526ac-1463-48b8-88ea-759fa14ca75f"
        },
        "item": {
          "id": "c859d98a-e946-48ee-b49c-11e39516723b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cb12dae7-57b7-42c6-89eb-bdb24f22566e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fdd725b-adfe-4b1c-8e2c-c8478218ee32",
        "cursor": {
          "ref": "cadce7b0-e0c4-4f45-9c68-aad1e1859cc2",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2d785fc6-5cb5-4451-8252-1a6f12a26e1c"
        },
        "item": {
          "id": "6fdd725b-adfe-4b1c-8e2c-c8478218ee32",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d7f3fd25-a669-4ac0-8588-15727c1e50a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 322,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654e0ff8-3f42-4a40-acd1-1eb8481f2775",
        "cursor": {
          "ref": "58cbbe92-c0dc-4676-a7cb-14b8ea4d2899",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "702e3662-f142-4117-b6b7-fd197943c530"
        },
        "item": {
          "id": "654e0ff8-3f42-4a40-acd1-1eb8481f2775",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e78207b5-81e2-410f-968b-b944be2a8c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 309,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f4d508-0b7d-4b97-96fa-e79c7a67bda1",
        "cursor": {
          "ref": "1c696c92-1b0e-4bf2-abd5-6c635ed4dfd6",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5048d39c-d80a-4f27-9d6f-6588d047467a"
        },
        "item": {
          "id": "76f4d508-0b7d-4b97-96fa-e79c7a67bda1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d97aafa8-3ab5-48be-8af1-32bce299c9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 346,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857daf0a-79b8-4813-bdc0-1695c1032bd7",
        "cursor": {
          "ref": "da3db910-3adf-4f33-9762-80e6c999db8b",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e7fd4c6d-2ec7-4c13-8eff-2136e0e35d7f"
        },
        "item": {
          "id": "857daf0a-79b8-4813-bdc0-1695c1032bd7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6bc9f9fe-20cb-49dc-8807-3467483fa105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9495cea0-08a7-4ea2-afcc-4262fb2b83da",
        "cursor": {
          "ref": "c53cf131-fd3f-4571-addb-f77d46e86c20",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a1b13261-25b4-4855-8ae3-fe6901b7efc1"
        },
        "item": {
          "id": "9495cea0-08a7-4ea2-afcc-4262fb2b83da",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "88759a7e-496f-4ec6-a020-cd000339e2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d8ca32-2bfc-4d90-ba9c-fafb79bd1e17",
        "cursor": {
          "ref": "fc3bf5c4-c367-47c1-87ba-fe5ee9980ebf",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "783f2a16-f48d-4cf0-ac22-4cd2b3290db3"
        },
        "item": {
          "id": "66d8ca32-2bfc-4d90-ba9c-fafb79bd1e17",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "23b40d36-53bb-4e68-88f6-17a7ce77b401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 298,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80486070-1878-48e3-ab1b-b95a3c894b19",
        "cursor": {
          "ref": "5557ce28-a186-4830-ab24-2020b845cdd0",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a2d98000-d219-4790-9996-7fb516a01f7a"
        },
        "item": {
          "id": "80486070-1878-48e3-ab1b-b95a3c894b19",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1fddc719-c09d-45ff-9fef-23f4b5c4329c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d611a629-40ba-465a-a570-e7474ff89dc5",
        "cursor": {
          "ref": "eace9686-4421-4763-9260-d1696d1b3a5b",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "185d642d-f2c5-4a64-8ad7-19287f5722ed"
        },
        "item": {
          "id": "d611a629-40ba-465a-a570-e7474ff89dc5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9f79cf53-8428-48d4-bc27-b5b4044cabd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222fbeb3-2d59-4784-adb1-bd69fc8e25b0",
        "cursor": {
          "ref": "cc5fd950-951f-484f-813c-acf9f9c28634",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "73e01ef3-f284-4e39-98c6-7f55a00af693"
        },
        "item": {
          "id": "222fbeb3-2d59-4784-adb1-bd69fc8e25b0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f26bfd5f-f064-42d3-a535-33c7649ba463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d650ee-1804-4e7b-ab82-6c94c0ae75e2",
        "cursor": {
          "ref": "e0330bae-2707-40e8-a682-d2bf0744bdd2",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "169397a4-a5b7-46b6-bd5b-17099329427c"
        },
        "item": {
          "id": "e0d650ee-1804-4e7b-ab82-6c94c0ae75e2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d41c7ba5-98aa-4419-9559-705d7869502e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8436df54-73fb-4350-9deb-5d78e6462801",
        "cursor": {
          "ref": "b1b7866b-3fb6-450e-a5e4-245cd932a1de",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "50c6867f-3515-4fe4-a9a9-94c7f2b64bf3"
        },
        "item": {
          "id": "8436df54-73fb-4350-9deb-5d78e6462801",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "71a4a4d4-81d2-4d58-aeff-27196c88b366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2c3dea-6eea-483f-98bb-fbddd5efb02d",
        "cursor": {
          "ref": "56cc92d5-3a39-4e5a-a7ab-86fa1f6efe94",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "00e7622f-6ca4-44c7-b15d-79bc2c5c2b01"
        },
        "item": {
          "id": "ca2c3dea-6eea-483f-98bb-fbddd5efb02d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "516a69b8-6c75-484d-a312-2177f37c99b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c519713-8a34-4491-b17e-bc139dfa0def",
        "cursor": {
          "ref": "9ae9a108-34fc-4bb1-b87c-933d7c6965d6",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "43d1904e-7f39-4289-8272-5c765b37e512"
        },
        "item": {
          "id": "2c519713-8a34-4491-b17e-bc139dfa0def",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "98ac31e8-6fc2-4527-9284-0f5613769af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd30669-4f3d-43bd-b6f4-6f40aaad51ab",
        "cursor": {
          "ref": "fc96be40-7ab4-4854-b34f-7bb44b8b2872",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "02a5ddf9-c833-4fcf-9b39-23ba4cbdb2cb"
        },
        "item": {
          "id": "7bd30669-4f3d-43bd-b6f4-6f40aaad51ab",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "73b43bce-51fa-4721-89f4-634a8c2d5ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dc94af-5136-41ae-ba07-4a136d47dcfb",
        "cursor": {
          "ref": "eff3fa6b-4875-4a4a-9e08-dc1b5c46833a",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9c2f9e62-bc3c-4a0a-9d32-97f79a9d6320"
        },
        "item": {
          "id": "d9dc94af-5136-41ae-ba07-4a136d47dcfb",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "61ac46bc-9a8b-42bc-9e5b-2fe55abf9816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b106e087-dcae-4be8-9ab7-a0876c45294b",
        "cursor": {
          "ref": "7916715d-41f5-49a1-b71a-83acee076945",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "35fcdb92-9d0c-47e7-a0a7-ba828973c2b0"
        },
        "item": {
          "id": "b106e087-dcae-4be8-9ab7-a0876c45294b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b9fced4f-6344-4daa-a613-586d7f71ad83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4bf6765-63ca-4609-b464-08c51885843d",
        "cursor": {
          "ref": "3b351904-7c79-439e-8743-31d126880ea2",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3d5086db-2481-4223-8aa1-c409d95e94d2"
        },
        "item": {
          "id": "a4bf6765-63ca-4609-b464-08c51885843d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bbab2ec1-e9e9-4de5-b6d5-45e8eedbae3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8536a48c-1afd-4db8-b41f-9f2dc4401891",
        "cursor": {
          "ref": "502fdb13-0939-401e-8c7b-ec8a77c23874",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "434e1d79-c417-453d-a3f7-620bebc153ba"
        },
        "item": {
          "id": "8536a48c-1afd-4db8-b41f-9f2dc4401891",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "530233a3-ef33-407d-8a45-d10bbb7d9da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c305ae-7cf6-457b-b065-005c650b514c",
        "cursor": {
          "ref": "28173132-b0f2-446d-885c-1bbe962b03a3",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c7ea072b-16f1-4c5f-bae2-9678a6bce5d0"
        },
        "item": {
          "id": "e1c305ae-7cf6-457b-b065-005c650b514c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "988b0f0b-cb50-4c97-9ff6-2f7a8d5b3e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf69fd09-1b92-4d21-8b22-4b57e9639205",
        "cursor": {
          "ref": "af292ac9-0d85-4352-8ced-d76982be512b",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ad47955b-1bae-4b6f-92f9-baa09636dee5"
        },
        "item": {
          "id": "bf69fd09-1b92-4d21-8b22-4b57e9639205",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "66d98b70-9376-4eea-9cd2-09b3b5270155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd8f6fc-99ba-4aed-98e3-bf7e65ad32af",
        "cursor": {
          "ref": "56610122-6d90-4be8-b2f7-a76fad56d3b6",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8cf59ab9-95d3-4d93-9ff2-6988666ad369"
        },
        "item": {
          "id": "efd8f6fc-99ba-4aed-98e3-bf7e65ad32af",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5426727b-6168-44cb-875c-8bff436b5e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca19094-25eb-4d99-827f-39c3b827085f",
        "cursor": {
          "ref": "ea6a1ec7-7c28-4ca4-8ba9-5c99adf9bbfe",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b5963b41-ba8e-4cb9-bdda-c98d41a8c631"
        },
        "item": {
          "id": "6ca19094-25eb-4d99-827f-39c3b827085f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f1953bef-1fbe-4526-92ed-a07e8e310944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef95a258-5215-49c3-abcc-52e3aa8e885e",
        "cursor": {
          "ref": "5ef2be35-8762-4dfe-81cc-64a97e87170d",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "47c5c388-8765-4b3b-b46e-258010314362"
        },
        "item": {
          "id": "ef95a258-5215-49c3-abcc-52e3aa8e885e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f0c6a521-337e-4a80-bce5-296273acb073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae8ac44-471e-4e95-9605-c51ddbe31cf4",
        "cursor": {
          "ref": "962e81cf-eebc-4923-b424-6f889f3d0456",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8d0aeeda-b6d8-4861-8f90-630d1b4b5497"
        },
        "item": {
          "id": "0ae8ac44-471e-4e95-9605-c51ddbe31cf4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5e494064-eb77-4d14-b97b-5fcbfdae1c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e670e6f-63d7-4912-9bc2-962471d4b028",
        "cursor": {
          "ref": "14b519eb-4e23-4e3b-a0e8-3bfda63d9aa0",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3cd520ed-6fef-4385-b15e-d3abd606aeb9"
        },
        "item": {
          "id": "9e670e6f-63d7-4912-9bc2-962471d4b028",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c71823cd-0300-4819-932f-2839920be598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc75f6e6-a764-4868-86ee-7e5a0ba3ea56",
        "cursor": {
          "ref": "b79f9cd6-1bf9-4160-a7bf-62ba9e5b7afc",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d19be7be-6601-4ffa-a0e7-d0c095d58519"
        },
        "item": {
          "id": "fc75f6e6-a764-4868-86ee-7e5a0ba3ea56",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "df6e2239-afcf-4ea9-b59a-b230f5cc6086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c277889e-aba0-454f-829c-7818651eea3b",
        "cursor": {
          "ref": "8cc606af-2005-453a-b21e-23a7d8da67f0",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "820ec995-957a-4035-800c-b79f354880f5"
        },
        "item": {
          "id": "c277889e-aba0-454f-829c-7818651eea3b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7ac33644-b91a-4569-8730-185f30ae4fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b3cd0f7-6057-4807-bb5c-0529aa50f63d",
        "cursor": {
          "ref": "c5807f58-210f-4813-96a0-4d68ceeb691f",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7fde9422-5495-4727-8d09-2cdf4758c0b0"
        },
        "item": {
          "id": "4b3cd0f7-6057-4807-bb5c-0529aa50f63d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cf13ab67-5c03-406e-bf2e-a95553fffe71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98190c27-97aa-47d7-a9cc-59ffb4b9b9f7",
        "cursor": {
          "ref": "16c46559-c31a-4fce-b979-e08efb744390",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "16dc64b3-9871-4253-8774-9d064b83e9d3"
        },
        "item": {
          "id": "98190c27-97aa-47d7-a9cc-59ffb4b9b9f7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "adf3d89a-89e8-4934-9a37-e03fd05685f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e0030f0-7e2c-4011-91ec-7fadb25cdf30",
        "cursor": {
          "ref": "5e07c9b0-4340-4314-93e8-b0a21d734b17",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8ab04a50-3598-41cd-8e79-a004dcbc6090"
        },
        "item": {
          "id": "0e0030f0-7e2c-4011-91ec-7fadb25cdf30",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5330b072-740d-4002-93c8-9ef259569f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f345aa-84e4-4066-a660-0373e002b97b",
        "cursor": {
          "ref": "dda91d6d-d81c-42f1-9f40-249070a60caf",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "89c4220e-04fd-4d87-a5e9-a6c8443e3752"
        },
        "item": {
          "id": "09f345aa-84e4-4066-a660-0373e002b97b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5114dd1f-6b4a-4d1e-8646-b2b92490474d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f6a50f-0019-48c3-a941-8a4a46b7a39e",
        "cursor": {
          "ref": "042ee47a-908e-42b8-a874-9bfac052dcb2",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3142be3f-13ef-4dce-82a6-9580d2e51a1b"
        },
        "item": {
          "id": "54f6a50f-0019-48c3-a941-8a4a46b7a39e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "209c0283-5195-4cee-a39e-9087ab9ef42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b11926-a979-43cc-bc04-d810217f9b59",
        "cursor": {
          "ref": "a2a60c90-15bf-43ba-b89d-2ec3cfb96f0a",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1dd75088-386a-4a30-8800-53732d303ae5"
        },
        "item": {
          "id": "68b11926-a979-43cc-bc04-d810217f9b59",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7305fa66-d5bd-4aa7-9f9a-e39d54570791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc34b830-4726-42b2-95f3-1e65301d63d0",
        "cursor": {
          "ref": "f922ab43-362b-462d-9b57-dc3340f67339",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7ad5ba91-b84e-4fa1-ab52-c164c9917e6c"
        },
        "item": {
          "id": "cc34b830-4726-42b2-95f3-1e65301d63d0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5a15245f-84f3-4ff8-b8b3-6fcfc5466522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e337bf3b-1af3-45a4-98c8-86f0b214d6e3",
        "cursor": {
          "ref": "772fec02-605f-402c-8753-742e62be4a0e",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4f67f7e1-c41d-4da3-b3eb-15829b3dc919"
        },
        "item": {
          "id": "e337bf3b-1af3-45a4-98c8-86f0b214d6e3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "eee51633-1df9-42e1-bba9-c2687470164a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e22e523-4d62-47fb-a06b-40e2a094a207",
        "cursor": {
          "ref": "9912d630-5746-4459-ad45-b1bec0118c37",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "91d6e1c7-3a60-4e70-b5b3-b07d08e684bd"
        },
        "item": {
          "id": "4e22e523-4d62-47fb-a06b-40e2a094a207",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "eb5cfc8b-4ed7-41f6-abbf-1a4e483c70d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161ce034-0c6b-4a36-af64-ca675a327b44",
        "cursor": {
          "ref": "45b4f0fc-3343-4f33-8d44-288f7f540a3a",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "76a97d74-1852-4034-a45f-e7d48be3730c"
        },
        "item": {
          "id": "161ce034-0c6b-4a36-af64-ca675a327b44",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0c384841-87fc-416f-9d15-cd081ee038f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d55a332-db38-40c3-a420-d804f523de02",
        "cursor": {
          "ref": "6ebdb8de-3f32-4dc7-b28f-e1d160f18148",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a0590ad4-2b60-46b6-8bd8-7a1592aeeb4a"
        },
        "item": {
          "id": "2d55a332-db38-40c3-a420-d804f523de02",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "014401b3-b1bc-4662-bbe9-fcda1153993c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8459da7c-1939-4ff7-bb2a-b0171493208d",
        "cursor": {
          "ref": "7ff3f912-7740-4652-b42f-c05de1f68ced",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d762156a-01c4-4748-8849-edc3da8f3dc2"
        },
        "item": {
          "id": "8459da7c-1939-4ff7-bb2a-b0171493208d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4715b4b5-2b69-4dbe-adb4-ea748d4c8b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7ef70f-c325-45d5-9661-1353169b9ad4",
        "cursor": {
          "ref": "708d9e51-e264-4f38-8b24-7f6d08f4c6ed",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "633c9f44-408d-41bb-aa0e-c169ef8f0cf0"
        },
        "item": {
          "id": "3c7ef70f-c325-45d5-9661-1353169b9ad4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "afccffa8-cd59-4503-8f8b-8eac75d833cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4371c832-ef9f-4a5c-b2dc-7f8ca532e086",
        "cursor": {
          "ref": "b75794c9-f762-4eee-ad19-11666f7b2dc1",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a15c2716-3dcb-43b5-98da-c783ba152197"
        },
        "item": {
          "id": "4371c832-ef9f-4a5c-b2dc-7f8ca532e086",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "07448cdc-6e27-4d6d-9cf5-c169d253bd08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479ab52d-fb5b-4f1d-bae9-cbaa1c7b906b",
        "cursor": {
          "ref": "35a0fbba-b9c3-4449-aa03-2431d47491c3",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0105a821-dff6-46e2-b675-ae99745d8634"
        },
        "item": {
          "id": "479ab52d-fb5b-4f1d-bae9-cbaa1c7b906b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6e142b16-0b0b-47a6-86d4-244b675a01f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d90713e-7e38-4c5c-943d-6889a8037096",
        "cursor": {
          "ref": "9e2989ad-b884-41dc-89c8-f9d9f8c13840",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "376705be-e056-4aaa-bb78-4c0e435d223a"
        },
        "item": {
          "id": "9d90713e-7e38-4c5c-943d-6889a8037096",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7295e8bd-6a6d-45cf-a771-29e4c4da2527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828c1c42-9624-4390-90c3-140c9b09ef64",
        "cursor": {
          "ref": "07af6fb7-27c8-437a-8369-f332f07b9c5b",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a756019a-5d1a-4268-8577-7d8bd16aeaa2"
        },
        "item": {
          "id": "828c1c42-9624-4390-90c3-140c9b09ef64",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0abf05f3-c888-48ac-baa9-38201179d4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6767565-0612-4be9-8db9-56d1038fb6d2",
        "cursor": {
          "ref": "5e49c7a4-39a3-4390-aa57-1c022d858b89",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "00fd60eb-b096-4194-9885-703875441bcc"
        },
        "item": {
          "id": "d6767565-0612-4be9-8db9-56d1038fb6d2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f0802e21-5934-4300-8f2e-5e8b9e863103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87d6623-7e19-4938-8f35-655a87b0271b",
        "cursor": {
          "ref": "6fd0d765-e851-4b7a-a4e9-c02ad8aea245",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9cee6694-b488-4a93-9f11-03dfff2da1ba"
        },
        "item": {
          "id": "d87d6623-7e19-4938-8f35-655a87b0271b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2f342340-5eb3-4a3b-aed4-ad52e8beae2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ecf0fb2-2321-49ad-9586-0d39024668c3",
        "cursor": {
          "ref": "268faf42-af63-474f-a61a-c7ad529ae350",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5b653e00-cfa9-4ddd-a933-edd1859b0c56"
        },
        "item": {
          "id": "8ecf0fb2-2321-49ad-9586-0d39024668c3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "dcf1012f-8ad5-460e-93b4-6b874e775789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053ee9bc-155e-40ba-8b22-b1ceae4340bc",
        "cursor": {
          "ref": "3c7b6378-4a98-4792-ae2d-e0b205a82530",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ca1c791d-feec-4c5a-b7aa-5c9d1060ba32"
        },
        "item": {
          "id": "053ee9bc-155e-40ba-8b22-b1ceae4340bc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8d1890a1-cafc-430c-81dc-27bafb0ccd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90479848-9f84-40f6-83a8-d35a2b4b428f",
        "cursor": {
          "ref": "e4cfc4b4-2fbb-4770-ad3f-d3367d96680d",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3b8fdc8e-81a5-45d6-9b36-757d65e6d0bb"
        },
        "item": {
          "id": "90479848-9f84-40f6-83a8-d35a2b4b428f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a278a4e4-decf-42d0-8823-858451f36dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ecad50a-810a-4a8a-b631-32657778845e",
        "cursor": {
          "ref": "a123ce6c-b33b-4479-a46a-cc89771f1405",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ce2ed389-e49d-4f0d-80cd-7bafd729b0b4"
        },
        "item": {
          "id": "2ecad50a-810a-4a8a-b631-32657778845e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6d2d47d4-41ec-49b3-8412-2fa8f9982ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a591f5-f718-49f9-a731-bebd3ec07cb3",
        "cursor": {
          "ref": "9d23769c-15ce-45ae-ac6b-19cb1367f19f",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3d22698b-4fa4-4bfc-a55b-6ada9aa292d9"
        },
        "item": {
          "id": "a7a591f5-f718-49f9-a731-bebd3ec07cb3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f2de9618-6297-42d8-8e6b-47ac0c2f1a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555ac54e-7df5-4ffd-9840-01a87f3ed51d",
        "cursor": {
          "ref": "5125d83a-88ce-415e-afed-04aef9772aa7",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8e8dfb38-d07c-4bd2-88f8-bdf2a20f53be"
        },
        "item": {
          "id": "555ac54e-7df5-4ffd-9840-01a87f3ed51d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9f4dde93-893a-48cb-80ac-e46b942f12f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2642f13-f4e4-47f0-a4ba-010070e36382",
        "cursor": {
          "ref": "585db8a3-c729-425c-9f2f-3df25a52a7ce",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1a7a87e3-80e8-4e23-a94e-d4827a815b78"
        },
        "item": {
          "id": "c2642f13-f4e4-47f0-a4ba-010070e36382",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "141273e0-a7fd-4177-937a-2d0ee4b08453",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 68,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f06bf4-d498-482a-a467-7a0c5ca543cb",
        "cursor": {
          "ref": "16ae452d-d5ff-41b9-bcc9-a63e5cfe4b83",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d366f859-8d03-44ff-a47e-1e6608858de3"
        },
        "item": {
          "id": "e2f06bf4-d498-482a-a467-7a0c5ca543cb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8c346125-f9e8-4640-ab7c-cc39b2a10971",
          "status": "OK",
          "code": 200,
          "responseTime": 293,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1073024-c1d6-4ea9-8af4-91cf8d32dfbd",
        "cursor": {
          "ref": "43d4480e-f187-45ce-90e7-d606c9492d04",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8d795c3f-e7d0-4175-bbf0-700cf821366a"
        },
        "item": {
          "id": "b1073024-c1d6-4ea9-8af4-91cf8d32dfbd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "68598955-3e5e-4756-a7db-3754c92cb1f5",
          "status": "OK",
          "code": 200,
          "responseTime": 601,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44565ed-db2a-4a5e-b0de-3d7261fc7ae0",
        "cursor": {
          "ref": "66c17579-65da-4138-a919-fa0a219c0219",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "33408735-d06d-4a96-9225-5b8f975920ac"
        },
        "item": {
          "id": "b44565ed-db2a-4a5e-b0de-3d7261fc7ae0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "02af6ee6-6aa6-4066-9656-a49854f6f8c1",
          "status": "OK",
          "code": 200,
          "responseTime": 603,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b37508-a3d1-4662-b81f-06ff7e551f89",
        "cursor": {
          "ref": "eed91831-3aa0-4c8b-bd0f-4e6710d24acc",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f47304fc-ed57-4be0-b2c2-f5a452fe0074"
        },
        "item": {
          "id": "87b37508-a3d1-4662-b81f-06ff7e551f89",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9f841f9c-925c-4016-b338-11f333dd8202",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b37508-a3d1-4662-b81f-06ff7e551f89",
        "cursor": {
          "ref": "eed91831-3aa0-4c8b-bd0f-4e6710d24acc",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f47304fc-ed57-4be0-b2c2-f5a452fe0074"
        },
        "item": {
          "id": "87b37508-a3d1-4662-b81f-06ff7e551f89",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9f841f9c-925c-4016-b338-11f333dd8202",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b37508-a3d1-4662-b81f-06ff7e551f89",
        "cursor": {
          "ref": "eed91831-3aa0-4c8b-bd0f-4e6710d24acc",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f47304fc-ed57-4be0-b2c2-f5a452fe0074"
        },
        "item": {
          "id": "87b37508-a3d1-4662-b81f-06ff7e551f89",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9f841f9c-925c-4016-b338-11f333dd8202",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4968cc0e-7aaa-44e4-b53c-bdd442f9fe5d",
        "cursor": {
          "ref": "79ef61ad-5696-4982-bc4c-445913d86d94",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "eccbbea3-0c8d-43c6-989e-49c6d85d3a79"
        },
        "item": {
          "id": "4968cc0e-7aaa-44e4-b53c-bdd442f9fe5d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c74f3ad5-d2ce-47fa-9fad-7ed58ae81f12",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045f2d6f-dfd4-4f8a-b882-2c23aeaaec05",
        "cursor": {
          "ref": "e9f9fcdf-abf5-42c8-8d83-2ae7baffd563",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8fc9029d-252d-4b19-af8b-5c5f8903bf39"
        },
        "item": {
          "id": "045f2d6f-dfd4-4f8a-b882-2c23aeaaec05",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c495585a-e885-4046-ad12-31e9fd0f100e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "045f2d6f-dfd4-4f8a-b882-2c23aeaaec05",
        "cursor": {
          "ref": "e9f9fcdf-abf5-42c8-8d83-2ae7baffd563",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8fc9029d-252d-4b19-af8b-5c5f8903bf39"
        },
        "item": {
          "id": "045f2d6f-dfd4-4f8a-b882-2c23aeaaec05",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c495585a-e885-4046-ad12-31e9fd0f100e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9e3d544d-7719-4a02-a75e-5948252416cf",
        "cursor": {
          "ref": "49c613ed-9a14-406d-a949-bf4c994a5a45",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0c55104d-6a84-42a9-9f03-004103a768ef"
        },
        "item": {
          "id": "9e3d544d-7719-4a02-a75e-5948252416cf",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "cda6cd63-0883-4e91-9d87-70afd1e07708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "376c707c-43f4-4b26-a7ea-dabb4398b167",
        "cursor": {
          "ref": "6ea018e8-8ef8-4875-bb10-7476ea79faba",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2fccdd18-8eb5-457e-92ca-53ef850c2e8f"
        },
        "item": {
          "id": "376c707c-43f4-4b26-a7ea-dabb4398b167",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1c1e0a8d-d461-445b-9abe-5293fe117de7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "376c707c-43f4-4b26-a7ea-dabb4398b167",
        "cursor": {
          "ref": "6ea018e8-8ef8-4875-bb10-7476ea79faba",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2fccdd18-8eb5-457e-92ca-53ef850c2e8f"
        },
        "item": {
          "id": "376c707c-43f4-4b26-a7ea-dabb4398b167",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1c1e0a8d-d461-445b-9abe-5293fe117de7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "92409df7-690b-4502-a6e8-5d680ef82980",
        "cursor": {
          "ref": "6b47613a-a7c9-4e12-8d04-e120fc6b38fc",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7c27d9a4-760a-4955-86e0-daae3ac55ae5"
        },
        "item": {
          "id": "92409df7-690b-4502-a6e8-5d680ef82980",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6ef6c6ea-29bd-474b-9ae5-56564a18520e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}