{
  "collection": {
    "info": {
      "_postman_id": "5ab1fa5e-f50d-4dcf-b2f9-fc64296f1de9",
      "name": "Presentations Exchange Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d145fe11-3c80-4f7e-913b-1f8fae13e46f",
        "name": "Get Access Token (Issuer)",
        "request": {
          "url": {
            "host": [
              "{{ISSUER_TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"audience\": \"{{ISSUER_TOKEN_AUDIENCE}}\",\n    \"client_id\": \"{{ISSUER_CLIENT_ID}}\",\n    \"client_secret\": \"{{ISSUER_CLIENT_SECRET}}\",\n    \"grant_type\": \"client_credentials\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e4bf6de3-9954-4c69-8ba3-61f8d18c8464",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"issuer_access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"issuer_access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "d4ef702b-56ac-4927-a2df-c2835671f755"
            }
          }
        ]
      },
      {
        "id": "4e2c79bc-ac4a-4a3b-9c05-8f817bae7503",
        "name": "Get Access Token (Verifier)",
        "request": {
          "url": {
            "host": [
              "{{VERIFIER_TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"audience\": \"{{VERIFIER_TOKEN_AUDIENCE}}\",\n    \"client_id\": \"{{VERIFIER_CLIENT_ID}}\",\n    \"client_secret\": \"{{VERIFIER_CLIENT_SECRET}}\",\n    \"grant_type\": \"client_credentials\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4dca6807-ace8-428c-9b44-9ff0e3c10799",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"verifier_access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"verifier_access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "b0cb5b34-d202-4d83-af28-44c935748bd3"
            }
          }
        ]
      },
      {
        "id": "29b7a8ad-d42d-4cd3-88f6-f846bd5cb645",
        "name": "Get Organization DIDs (Issuer)",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ISSUER_ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f7da8ad8-fe1d-4a6b-aef1-902651b78f13",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// The DID document must contain an alsoKnownAs property.",
                "pm.test(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "});",
                "",
                "// The alsoKnownAs property MUST be an array.",
                "pm.test(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "});",
                "",
                "// The alsoKnownAs property MUST be a set.",
                "pm.test(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "// The second element of the alsoKnownAs property will be used as a",
                "// credentials_issuer_id for subsequent tests.",
                "pm.test(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs[1]).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Service array is used to look up traceability API service endpoint",
                "pm.test(\"Response must include 'service' array\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    pm.expect(service).to.be.an('array').that.is.not.empty;",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// Service array must be correctly defined in DID document",
                "pm.test(\"'service' array must define Traceability API service endpoint\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    const entry = service.find((s) => s.type == \"TraceabilityAPI\");",
                "    pm.expect(entry).to.be.an('object').that.is.not.empty;",
                "    pm.expect(entry.serviceEndpoint).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The value of didDocument.alsoKnownAs[1] is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// pm.collectionVariables.get(\"credential_issuer_id\").",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"credential_issuer_id\", alsoKnownAs[1]);",
                "});"
              ],
              "_lastExecutionId": "0eeaa243-8052-4bdc-b463-314b228d8c1d"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "48614028-2baf-43f7-b8fe-b4f3a6ab8d9a",
        "name": "Get Organization DIDs (Verifier)",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{VERIFIER_ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{VERIFIER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f480e1f8-8ded-40a9-9c18-1cc423963a57",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// The DID document must contain an alsoKnownAs property.",
                "pm.test(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "});",
                "",
                "// The alsoKnownAs property MUST be an array.",
                "pm.test(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "});",
                "",
                "// The alsoKnownAs property MUST be a set.",
                "pm.test(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "// The second element of the alsoKnownAs property will be used as a",
                "// credentials_issuer_id for subsequent tests.",
                "pm.test(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs[1]).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// Service array must be correctly defined in DID document",
                "pm.test(\"'service' array must define Traceability API service endpoint\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    const entry = service.find((s) => s.type == \"TraceabilityAPI\");",
                "    pm.expect(entry).to.be.an('object').that.is.not.empty;",
                "    pm.expect(entry.serviceEndpoint).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The value of didDocument.alsoKnownAs[1] is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// pm.collectionVariables.get(\"credential_issuer_id\").",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "});",
                "",
                "// The serviceEndpoint for the verifier must be persisted for later use",
                "pm.test(\"`verifier_exchange_endpoint` is persisted to collectionVariables\", function() {",
                "    const { service } = pm.response.json().didDocument;",
                "    const entry = service.find((s) => s.type == \"TraceabilityAPI\");",
                "    pm.collectionVariables.set(\"verifier_exchange_endpoint\", entry.serviceEndpoint);",
                "});",
                ""
              ],
              "_lastExecutionId": "ad0f2146-e796-4bfb-9415-068a3acbdcb2"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "c8e8c9bb-7d5a-46ab-9d60-706413c3a765",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"2020-04-02T18:48:36Z\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "39b4b2c9-51b0-4582-8712-1d4671aecc5b",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
                "    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const verifiable_credential = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_credential\", verifiable_credential);",
                "})"
              ],
              "_lastExecutionId": "4d8a90fe-a1fd-446e-a2c5-44e0345422e6"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "416e1efe-c8b6-43b6-9a34-70f629e3cbe4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ca9ced2-428e-44df-b98f-56d847fb9f0f"
            }
          }
        ]
      },
      {
        "id": "0f0d0255-bcb0-4c76-a67e-24c6abefda5a",
        "name": "Initiate Exchange",
        "request": {
          "url": {
            "path": [
              "presentations",
              "available"
            ],
            "host": [
              "{{verifier_exchange_endpoint}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"query\": [\n    {\n      \"type\": \"QueryByExample\",\n      \"credentialQuery\": [\n        {\n          \"type\": [\n            \"VerifiableCredential\"\n          ],\n          \"reason\": \"We want to present credentials.\"\n        }\n      ]\n    }\n  ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "fb7c1bb9-3fec-49ea-b1a0-0b37adc3c084",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `verifier_access_token` collection variable is missing, but",
                "// it will give an indication of why the request failed in that scenario.",
                "pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
                "    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
                "    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Presentations Available\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response body must include a \"domain\" property.",
                "pm.test(\"response must include 'domain' property\", function() {",
                "    const { domain } = pm.response.json()",
                "    pm.expect(domain).to.be.a('string').that.is.not.empty;",
                "    // Domain must be made available to later requests",
                "    pm.collectionVariables.set(\"domain\", domain);",
                "});",
                "",
                "// The response body must include a \"challenge\" property.",
                "pm.test(\"response must include 'challenge' property\", function() {",
                "    const { challenge } = pm.response.json()",
                "    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
                "    // Challenge must be made available to later requests",
                "    pm.collectionVariables.set(\"challenge\", challenge);",
                "});",
                ""
              ],
              "_lastExecutionId": "3025def9-36b6-4fcd-a203-e25f29573103"
            }
          }
        ]
      },
      {
        "id": "a6cdd768-4e4d-4e5a-99d7-69da288aa757",
        "name": "Sign Presentation",
        "request": {
          "url": {
            "path": [
              "presentations",
              "prove"
            ],
            "host": [
              "{{ISSUER_API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"presentation\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"type\": [\n            \"VerifiablePresentation\"\n        ],\n        \"holder\": \"{{credential_issuer_id}}\",\n        \"verifiableCredential\": [\n            {{verifiable_credential}}\n        ]\n    },\n    \"options\": {\n        \"domain\": \"{{domain}}\",\n        \"challenge\": \"{{challenge}}\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{issuer_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b1ae60d5-415d-4350-8eed-8ec0d73a75ea",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `issuer_access_token` collection variable is missing, but it",
                "// will give an indication of why the request failed in that scenario.",
                "pm.test(\"`issuer_access_token` collection variable must be set\", function () {",
                "    const issuer_access_token = pm.collectionVariables.get(\"issuer_access_token\");",
                "    pm.expect(issuer_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Credential issuer id is a required element item used in the request body",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    const credential_issuer_id = pm.collectionVariables.get(\"credential_issuer_id\");",
                "    pm.expect(credential_issuer_id).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Verifiable credential is a required element item used in the request body",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    const verifiable_credential = pm.collectionVariables.get(\"verifiable_credential\");",
                "    pm.expect(verifiable_credential).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Domain is a required element item used in the request body",
                "pm.test(\"`domain` collection variable must be set\", function () {",
                "    const domain = pm.collectionVariables.get(\"domain\");",
                "    pm.expect(domain).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// Challenge is a required element item used in the request body",
                "pm.test(\"`challenge` collection variable must be set\", function () {",
                "    const challenge = pm.collectionVariables.get(\"challenge\");",
                "    pm.expect(challenge).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Sign Presentation\" request is",
                "// `201 Success`.",
                "pm.test(\"must return `201 Success` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable presentation must be made available to later requests",
                "pm.test(\"`verifiable_presentation` persisted to collectionVariables\", function() {",
                "    const verifiable_presentation = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_presentation\", verifiable_presentation);",
                "})"
              ],
              "_lastExecutionId": "9a369ec6-5316-45bb-a5a0-610188da19ec"
            }
          }
        ]
      },
      {
        "id": "70440178-1f5c-4dab-aa41-3786c0e758fc",
        "name": "Complete Exchange",
        "request": {
          "url": {
            "path": [
              "presentations",
              "submissions"
            ],
            "host": [
              "{{verifier_exchange_endpoint}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{{verifiable_presentation}}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{verifier_access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f935be74-3ecb-47d8-861e-5b4ab1e830df",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `verifier_access_token` collection variable is missing, but",
                "// it will give an indication of why the request failed in that scenario.",
                "pm.test(\"`verifier_access_token` collection variable must be set\", function () {",
                "    const verifier_access_token = pm.collectionVariables.get(\"verifier_access_token\");",
                "    pm.expect(verifier_access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Complete Exchange\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Response should confirm the submission is accepted.",
                "pm.test(\"verification response should be 'true'\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "244a61a9-aa6c-49c5-a8a9-7ec2097f83bc"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 25,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 52,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 3286.875,
      "responseMin": 62,
      "responseMax": 9455,
      "responseSd": 4046.260354867813,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1653355311294,
      "completed": 1653355337926
    },
    "executions": [
      {
        "id": "d145fe11-3c80-4f7e-913b-1f8fae13e46f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1d3a48b7-e805-46bd-8e0e-073d67ec6a78",
          "httpRequestId": "dbc9f34d-d9ef-4998-9525-7f048baf283c"
        },
        "item": {
          "id": "d145fe11-3c80-4f7e-913b-1f8fae13e46f",
          "name": "Get Access Token (Issuer)"
        },
        "response": {
          "id": "a21da781-0400-4958-92b9-ea29a1520797",
          "status": "OK",
          "code": 200,
          "responseTime": 521,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2c79bc-ac4a-4a3b-9c05-8f817bae7503",
        "cursor": {
          "ref": "142787eb-8ab5-442f-8827-511209799a5c",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3487258f-729e-4955-a72c-9dca1d9441c3"
        },
        "item": {
          "id": "4e2c79bc-ac4a-4a3b-9c05-8f817bae7503",
          "name": "Get Access Token (Verifier)"
        },
        "response": {
          "id": "6ad7bf93-9fbe-485c-b9aa-6af0485a7ffc",
          "status": "OK",
          "code": 200,
          "responseTime": 262,
          "responseSize": 904
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b7a8ad-d42d-4cd3-88f6-f846bd5cb645",
        "cursor": {
          "ref": "73ec6003-694e-47e0-8d27-70e15b0600a3",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bee19cb5-5f04-4037-ac22-cd72e11452bc"
        },
        "item": {
          "id": "29b7a8ad-d42d-4cd3-88f6-f846bd5cb645",
          "name": "Get Organization DIDs (Issuer)"
        },
        "response": {
          "id": "8809dbc3-d7fb-4d1c-b392-e2148af1c0b7",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": false
          },
          {
            "assertion": "Response must include 'service' array",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          },
          {
            "assertion": "'service' array must define Traceability API service endpoint",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "48614028-2baf-43f7-b8fe-b4f3a6ab8d9a",
        "cursor": {
          "ref": "e722e0d9-b73d-4cb4-934e-1c5ebfca5cec",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "03a71f71-8f79-464c-9b40-270250a2d843"
        },
        "item": {
          "id": "48614028-2baf-43f7-b8fe-b4f3a6ab8d9a",
          "name": "Get Organization DIDs (Verifier)"
        },
        "response": {
          "id": "d9917b21-e3ed-4936-aa37-c2572a101e7f",
          "status": "OK",
          "code": 200,
          "responseTime": 9455,
          "responseSize": 816
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          },
          {
            "assertion": "'service' array must define Traceability API service endpoint",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false
          },
          {
            "assertion": "`verifier_exchange_endpoint` is persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e8c9bb-7d5a-46ab-9d60-706413c3a765",
        "cursor": {
          "ref": "78d1dc95-611f-4d4b-bf85-e32adda5693e",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "70787ec5-58ef-4943-98e9-c6ab704db163"
        },
        "item": {
          "id": "c8e8c9bb-7d5a-46ab-9d60-706413c3a765",
          "name": "Issue Credential"
        },
        "response": {
          "id": "fcc96e96-c9f5-4bca-9580-02a59bb0742e",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0d0255-bcb0-4c76-a67e-24c6abefda5a",
        "cursor": {
          "ref": "afd57a60-6a29-4f71-8bb6-bf834c7c0158",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0ea7a6c2-131a-4ff2-97cf-908bbd443241"
        },
        "item": {
          "id": "0f0d0255-bcb0-4c76-a67e-24c6abefda5a",
          "name": "Initiate Exchange"
        },
        "response": {
          "id": "a05cd225-6ca0-46c6-a8b2-a667ed9e747d",
          "status": "OK",
          "code": 200,
          "responseTime": 6785,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "`verifier_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response must include 'domain' property",
            "skipped": false
          },
          {
            "assertion": "response must include 'challenge' property",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6cdd768-4e4d-4e5a-99d7-69da288aa757",
        "cursor": {
          "ref": "b1616c97-b3e9-4754-ac45-f31288eeda90",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "601b923f-d196-455b-9a1f-ee4346f000bf"
        },
        "item": {
          "id": "a6cdd768-4e4d-4e5a-99d7-69da288aa757",
          "name": "Sign Presentation"
        },
        "response": {
          "id": "4e3ab75f-cef8-41ad-bb40-48bb4655a39b",
          "status": "Created",
          "code": 201,
          "responseTime": 75,
          "responseSize": 1349
        },
        "assertions": [
          {
            "assertion": "`issuer_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`domain` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`challenge` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Success` status",
            "skipped": false
          },
          {
            "assertion": "`verifiable_presentation` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "70440178-1f5c-4dab-aa41-3786c0e758fc",
        "cursor": {
          "ref": "618cb265-549d-46b1-a510-9788be4e627b",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "37e1d4ee-e400-4b0f-ab63-422353280144"
        },
        "item": {
          "id": "70440178-1f5c-4dab-aa41-3786c0e758fc",
          "name": "Complete Exchange"
        },
        "response": {
          "id": "144c0c77-25ba-4359-8b75-8111c4f73c99",
          "status": "OK",
          "code": 200,
          "responseTime": 9034,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "`verifier_access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "verification response should be 'true'",
            "skipped": false
          }
        ]
      }
    ]
  }
}